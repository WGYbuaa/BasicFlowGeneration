{"index": 0, "ucName": "New Database", "uctext": "It is the first thing a user must do to begin using KeePass. Its main function is the determination of the master password that will unlock the database from now on", "steps": ["User opens KeePass and select New->Database", "User writes his private Master Password and/or selects Key File", "User selects OK", "Master Password confirmation: the user retypes Master Password", "The main database window opens"], "dataset": "keepass", "act": ["opens,select", "writes, selects", "selects", "confirmation, retypes", "opens"], "obj": ["user, keepass, new, database", "user, master password, key file", "ok", "master password, master password", "main database window"]}
{"index": 1, "ucName": "Open Database", "uctext": "When choosing to open a database a user is transferred to his documents where he navigates to find the database he wants. When the database is found, the master password is wanted so that the database will be unlocked. Once this is done the user is free to access his data.", "steps": ["User opens KeePass and select Open->Database", "User navigates through his folders", "User selects a database", "User types Master Password", "The main database window opens"], "dataset": "keepass", "act": ["opens,select", "navigates through", "selects", "types", "opens"], "obj": ["keepass,open,database", "folders", "database", "user, master password", "main database window"]}
{"index": 2, "ucName": "Save Database", "uctext": "When a database is opened, the user can access his passwords, organize them into new\ngroups and subgroups, delete and add entries and so much more. But when it is time for the database to close or during his working on the database, he can save the changes made.", "steps": ["User opens KeePass and changes his data", "User selects save database", "Database is saved", "User exits KeePass"], "dataset": "keepass", "act": ["opens,changes", "selects", "is saved", "exits"], "obj": ["keepass, data", "save database", "database", "keepass"]}
{"index": 3, "ucName": "Print Database", "uctext": "While working on the database, the user has the option to print data from his database. This can be done by selecting print. When this happens, a list of data types that can be printed are shown and the user can select the data to be printed. More specifically fields that can be selected for printing are: Backup entries, which contain entries in the back up group, password groups, group tree, title, username, password, URL, notes, creation time, last access, last modification, expires, icon, UUID and attachment.", "steps": ["User opens KeePass", "User selects print from file menu", "The list of options opens with checked the fields: password groups, title, user name, password, URL, notes", "User selects OK", "Data are print", "User returns on the main window"], "dataset": "keepass", "act": ["opens", "selects", "opens", "selects", "are, print", "returns"], "obj": ["user, keepass", "user, print, file menu", "password groups, title, user name, password, url, notes", "ok", "print", "main window"]}
{"index": 4, "ucName": "Search Database", "uctext": "There is the ability to search in the database for usernames, groups, passwords, URLs, notes and titles. This is very useful when the user needs to find out very quickly which password is required in one account or what username he has put on another account. It is not necessary to write in the search field all characters. By writing just one character the database will present all data which contains it or are related with it.", "steps": ["User opens KeePass", "User types a password, user name, URL, word of notes, title or group that exist in the database", "The list of data related to search word are appeared in the main window"], "dataset": "keepass", "act": ["opens", "types", "appeared"], "obj": ["keepass", "password, user name, url, word of notes, title, group, database", "search word, main window"]}
{"index": 5, "ucName": "Add Group/Subgroup", "uctext": "There is the ability to organize data into groups and subgroups. The user can create a new group or subgroups into an existing group. When creating a group/subgroup the user must select a name and then he can add entries into it.", "steps": ["User opens KeePass and selects to add new group/subgroup", "User types a name and has the option to select an image", "User selects OK", "The group/subgroup is created", "The access returns to the database main window"], "dataset": "keepass", "act": ["opens,selects", "types,has,select", "selects", "is created", "returns"], "obj": ["user, keepass, group, subgroup", "name, image", "ok", "group,subgroup", "database main window"]}
{"index": 6, "ucName": "Modify group/subgroup", "uctext": "When user wants to change a group or subgroup’s name he has the ability to do that by\nmodifying it.", "steps": ["User opens KeePass and selects modify group/subgroup", "User types the new name and has the option to select an image", "User selects OK", "The group/subgroup changes name", "The access returns to the database main window"], "dataset": "keepass", "act": ["opens, selects", "types,has,select", "selects", "changes", "returns"], "obj": ["user, keepass, group, subgroup", "user, name, image", "ok", "group,subgroup", "access, database, main window"]}
{"index": 7, "ucName": "Delete Group/Subgroup", "uctext": "When a user wants to delete an existing group/subgroup he can do this by selecting Delete group/subgroup from the edit menu. In order for that to happen, he must have chosen first a group/subgroup.", "steps": ["User opens KeePass and selects a group/subgroup", "User selects to delete the group/subgroup", "A message is appeared to confirm the delete", "User selects yes", "The group/subgroup is deleted", "The main window opens"], "dataset": "keepass", "act": ["opens,selects", "selects,delete", "is appeared, confirm, delete", "selects", "is deleted", "opens"], "obj": ["keepass, group, subgroup", "user, group, subgroup", "message,delete", "yes", "group,subgroup", "main window"]}
{"index": 8, "ucName": "Find Group/Subgroup", "uctext": "The user selects a group/subgroup and then he chooses “find in this group” from file menu. Then a window appears which prompts the user to write a sequence of characters (letters and numbers) from one character to 200 (or more). After that a menu of options to choose from appears and the user can select to search for: title, user name, password, URL, notes, group name. Search results appear in the main window.", "steps": ["User opens KeePass and selects to find something in a selected group/subgroup", "User types the word to search for", "User selects the fields which will be searched", "User selects OK", "Results appears at the database main window"], "dataset": "keepass", "act": ["opens,selects,find", "types,search", "selects,be searched", "selects", "appears"], "obj": ["keepass, selected group/subgroup", "the word", "fields", "user, ok", "results, database, main window"]}
{"index": 9, "ucName": "Add Entry", "uctext": "The user can add a new entry on the database by clicking add entry on the main menu. When he does this, a window opens which is actually a form. In this form the user completes the fields he wants. He can fill in fields like: group where the entry will be added, title, user name, password, repeat password, URL, notes, expiration date and attachment file. Not all fields are required for an entry to be created. In fact an entry can be added with no fields at all. By selecting OK the entry is created in the group selected.", "steps": ["User opens KeePass and selects to add an entry", "User fills in the form, as many fields as he wants, from 1 to 9", "User selects OK", "The new entry is added in the selected group"], "dataset": "keepass", "act": ["opens,selects,add", "fills, wants", "selects", "is added"], "obj": ["user, keepass, entry", "form,fields", "ok", "new entry,selected group"]}
{"index": 10, "ucName": "View/Edit Entry", "uctext": "The user can modify the context of an entry he already has added. This can be done by\nselecting view/edit entry. In order for that to happen, the user must select an entry first.\nWhen he does this, the form he filled in when he created or last modified the entry open.\nThen the user can change the group, title, user name, password, URL, notes, expiration date and attachment file. His changes are saved by clicking OK.", "steps": ["User opens KeePass and selects to view/edit an existing entry", "User changes the fields he wants in the form", "User selects OK", "The modified entry is saved in the selected group"], "dataset": "keepass", "act": ["opens,selects,view,edit", "changes", "selects", "is saved"], "obj": ["keepass", "fields,form", "ok", "entry,group"]}
{"index": 11, "ucName": "Duplicate Entry", "uctext": "The user can create an exact copy of an entry. This can be done by selecting an entry and clicking duplicate entry. When this is done the new entry is added in the same group were the first was.", "steps": ["User opens KeePass and selects an existing entry", "User duplicates entry", "The new entry is added below the first one"], "dataset": "keepass", "act": ["opens,selects", "duplicates", "is added"], "obj": ["user, keepass, entry", "entry", "new entry,first one"]}
{"index": 12, "ucName": "Delete Entry", "uctext": "The user can delete an existing entry by selecting it and then by clicking delete entry. When this is done a message appears and informs the user that if he deletes the entry he won’t be able to restore it back.", "steps": ["User opens KeePass and selects to delete an existing entry", "A message appears “Are you sure you want to delete the selected entry?”", "User selects yes", "The deleted entry is permanently removed from the database"], "dataset": "keepass", "act": ["opens,selects,delete", "appears", "selects", "deleted,removed"], "obj": ["keepass,entry", "the selected entry", "yes", "deleted entry, database"]}
{"index": 13, "ucName": "Change Language", "uctext": "The user can select between a number of translations that are available at KeePass website.There are available translations in Arabic, Brazilian, Bulgarian, Catalan, Chinese(Simplified and Traditional), Czech, Danish, Dutch, English, Estonian, Finnish, French,Galician, German, Greek, Hebrew, Hungarian, Italian, Japanese, Korean, Lithuanian, Macedonian, Malay, Norwegian, Polish, Portuguese, Romanian, Russian, Serbian, Slovak,Spanish, Swedish, Turkish and Ukrainian. All the user has to do is to select change language from the view menu and then the language he wants. If he already has download languages packets he can choose one of them. If he wants another language pack he can select get more language. Doing this he will be transferred at KeePass website and choose the language he wants for downloading..", "steps": ["1. User opens KeePass and selects to change language from the view menu", "2. The user selects a language to load from the list that appears", "3. A message appears that informs user that the installation has been done and in order for the changes to take place KeePass must be restarted", "4. User selects yes (restart now)", "5. KeePass asks to save any changes that may have been made in the database and restarts", "6. User unlocks the database using the Master Password", "7. The database appears translated in the new language"], "dataset": "keepass", "act": ["opens,selects", "selects,load,appears", "appears, informs, has been done, must be restarted", "selects", "asks,save,have been made,restarts", "unlocks", "appears,translated"], "obj": ["user, keepass, language, view menu", "language, list", "message, user, installation, changes, keepass", "4, user, yes, restart now", "keepass, database", "user, database, master password", "the database, the new language"]}
{"index": 0, "ucName": "Login", "uctext": "Allow a user to log in to the system", "steps": ["Verify that username and password have length >=5.", "If the condition is met go to step two, otherwise notify the user of the error.", "Search the archive to see if the username and password entered by the user are among the loggable users.", "If the search is successful, the user is logged in to the system."], "dataset": "SMOS", "act": ["verify,have", "met,go,notify", "search,see", "search, is, is logged in"], "obj": ["username,password,length", "the condition, step two, the user, the error", "username, password", "search, user, system"]}
{"index": 1, "ucName": "Assign/RemoveRolesToA User", "uctext": "Allows you to assign or remove roles to a user", "steps": ["2. Select the roles to assign or remove to the user", "3. Click the 'Submit' button", "System 1. Displays the role management form", "4. Assigns or removes the user's roles as instructed by the Administrator"], "dataset": "SMOS", "act": ["select,assign,remove", "click,submit", "displays", "assigns,removes"], "obj": ["roles, user", "submit', button", "system 1,role management form", "user, roles, administrator"]}
{"index": 2, "ucName": "Assign/RemoveTeachingsToA Lecturer", "uctext": "Allows assigning or removing teachings to a lecturer", "steps": ["2. Select the academic year", "4. Select the desired class", "6. Select the teachings to be associated with or removed from the teacher System", "1. Displays the teaching management form for the teacher in question", "3. Displays the list of available classes for the selected year", "5. Displays the list of teachings associated with that class", "7. Assigns or removes the teacher's teachings as directed by the Administrator."], "dataset": "SMOS", "act": ["select", "select", "select,associated,removed", "displays", "displays", "displays", "assigns,removes"], "obj": ["academic year", "class", "teachings, teacher system", "the teaching management form, the teacher in question", "list of available classes for the selected year", "list of teachings, class", "teacher's teachings"]}
{"index": 3, "ucName": "Assign/RemoveStudentsToA Parent", "uctext": "Allows you to associate new students to a parent or remove previously entered associations", "steps": ["2. Select the students to be assigned or removed to the parent", "3. Click the 'Submit' button", "System 1. Displays the child management form for the parent in question", "4. Assign/Remove students associated with a Parent"], "dataset": "SMOS", "act": ["select,assigned,removed", "click", "displays", "assign,remove"], "obj": ["students, parent", "submit", "child management form, parent", "students"]}
{"index": 4, "ucName": "ViewListClasses", "uctext": "Allows you to view the list of classes", "steps": ["2. Select the academic year of interest.", "System 1. Allows you to select the academic year whose class list you want to view.", "3. Searches the classes in the archive and displays the class management screen", "4. Displays the list of classes for the selected academic year."], "dataset": "SMOS", "act": ["select", "allows, select, want, view", "searches,displays", "displays"], "obj": ["academic year", "system 1, academic year, class list", "the classes, the archive, the class management screen", "list of classes,selected academic year"]}
{"index": 5, "ucName": "InsertNewClass", "uctext": "Insert a new class into the archive", "steps": ["2. Fill out the form", "3. Click the 'Save' button", "System 1. The system shows the form to fill out with: name, address, academic year.", "It performs checks on the validity of the data entered and inserts the new class into the archive;", "in case the data entered is invalid, it activates the 'ErrorData' use case."], "dataset": "SMOS", "act": ["fill out", "click", "shows", "performs,checks,inserts", "enters, is, activates"], "obj": ["the form", "save' button", "name, address, academic year", "checks, validity, data, class, archive", "errordata"]}
{"index": 6, "ucName": "ViewClassDetails", "uctext": "Allows you to view the details of a class", "steps": ["1. View the screen with the details of an individual class:", "name, address, school year."], "dataset": "SMOS", "act": ["view", "name, address, school year"], "obj": ["screen,details,individual class", "name, address, school year"]}
{"index": 7, "ucName": "DeleteClass", "uctext": "Delete a class from the archive", "steps": ["1. Deletes the class from the archive", "2. View updated class list"], "dataset": "SMOS", "act": ["deletes", "view"], "obj": ["class,archive", "updated class list"]}
{"index": 8, "ucName": "ViewListAddresses", "uctext": "Allows you to view the list of Addresses", "steps": ["1. View list of addresses."], "dataset": "SMOS", "act": ["view"], "obj": ["list, addresses"]}
{"index": 9, "ucName": "InsertNewAddress", "uctext": "Insert a new address into the archive", "steps": ["2. Fill out the form.", "3. Click the \"Save\" button.", "System 1. The system shows the form to fill out with: address name.", "It performs checks on the validity of the entered data and inserts a new address into the archive;", "in case the entered data is invalid, it activates the use case \"ErrorData\"."], "dataset": "SMOS", "act": ["fill out", "click,save", "shows, fill out", "performs,checks,inserts", "is, activates"], "obj": ["form", "save\" button", "address name", "the validity of the entered data, a new address, the archive", "entered data, use case \"errordata"]}
{"index": 10, "ucName": "ViewAddressDetails", "uctext": "Allows you to view the details of an address", "steps": ["1. Displays the screen with the details of an individual address;", "specifically :address name."], "dataset": "SMOS", "act": ["displays", "address"], "obj": ["screen,details,individual,address", "address, name"]}
{"index": 11, "ucName": "LoginError", "uctext": "Occurs when user has entered incorrect authentication data.", "steps": ["1. View login form"], "dataset": "SMOS", "act": ["view"], "obj": ["login form"]}
{"index": 12, "ucName": "DeleteAddress", "uctext": "Delete an address from the archive", "steps": ["Checks whether the address has associated classes; if so, displays an error message \"Unable to delete the address, delete associated classes and try again\",", "otherwise deletes the address.", "Displays updated address list."], "dataset": "SMOS", "act": ["checks,displays", "deletes", "displays"], "obj": ["address,associated classes,error message", "address", "updated address list"]}
{"index": 13, "ucName": "AssignRemoveTeachings", "uctext": "Assign or remove one or more teachings from an address", "steps": ["2. Select the teachings to be assigned or removed to the address", "3. Click the \"Submit\" button", "System 1. Displays a form from which you can add and/or remove teachings to the address.", "4. Associate or remove the selected teachings to the address.", "5. Return to the address details view."], "dataset": "SMOS", "act": ["select, be assigned, removed", "click", "displays, add, remove", "associate,remove", "return"], "obj": ["teachings, address", "submit\" button", "form,teachings,address", "selected teachings, address", "return, address, details, view"]}
{"index": 14, "ucName": "ViewListInsignments", "uctext": "Allows viewing the list of teachings", "steps": ["1.", "2.", "Search the in the archive and screen of teachings.", "View teachings view the management of the the list of."], "dataset": "SMOS", "act": [[], [], "search", "view,view"], "obj": [[], [], "archive,screen,teachings", "management, list"]}
{"index": 15, "ucName": "InsertNewTeaching", "uctext": "Insert new teaching into the archive", "steps": ["2. Fill out the form.", "3. Click the \"Save\" button.", "System 1. The system shows the form to fill out with: teaching name.", "It performs checks on the validity of the data entered and inserts the new teaching into the archive;", "in case the data entered is invalid, it activates the use case \"ErrorData\"."], "dataset": "SMOS", "act": ["fill out", "click,save", "shows", "performs,checks,inserts", "entered,activates"], "obj": ["the form", "save\" button", "system 1, system, form, teaching name", "the validity of the data entered, the new teaching, the archive", "data entered, use case \"errordata"]}
{"index": 16, "ucName": "ViewTeachingDetails", "uctext": "Allows you to view the details of a teaching", "steps": ["1. View the screen with the details of an individual teaching."], "dataset": "SMOS", "act": ["view"], "obj": ["screen,details,individual teaching"]}
{"index": 17, "ucName": "EditTeaching", "uctext": "Edit details of a teaching", "steps": ["1. Click on the 'Save' button", " 2. Perform checks on the validity of the entered data and edit the teaching in the archive; in case the entered data is invalid, activate the 'ErrorData' use case.", " 3. Displays the updated teaching list."], "dataset": "SMOS", "act": ["click", "perform, checks, edit, activate", "displays"], "obj": ["save' button", "checks, validity, data, teaching, archive, use case, errordata", "displays, updated teaching list"]}
{"index": 18, "ucName": "DeleteTeaching", "uctext": "Delete a teaching from the archive", "steps": ["1. Delete teaching from the archive", "2. View updated teaching list."], "dataset": "SMOS", "act": ["delete", "view"], "obj": ["teaching", "updated teaching list"]}
{"index": 19, "ucName": "ViewListRegisters", "uctext": "View the list of records for an academic year", "steps": ["2. Select school year.", "1. Display a screen for selecting the academic year of interest.", "3. Search the archive for all digital records for that year and display them associated with the class to which they belong."], "dataset": "SMOS", "act": ["select", "display,selecting", "search,display"], "obj": ["school year", "screen,academic year", "the archive, all digital records, that year, the class to which they belong"]}
{"index": 20, "ucName": "ViewSingleRegisterDetails", "uctext": "View the details of one of the class registers", "steps": ["Displays on the screen the information contained in the register organized by date.", "In particular, it shows, for today's date, the list of pupils, specifying: absent/attending, late entries, and a form from which you can manage justifications and disciplinary notes."], "dataset": "SMOS", "act": ["displays, contained, organized", "shows, specifying"], "obj": ["information, register, date", "pupils, absent, attending, late entries, form, justifications, disciplinary notes"]}
{"index": 21, "ucName": "InsertAbsencesAdmin", "uctext": "Digitization of Registry, data entry by Administrator", "steps": ["2. Fill out the form by entering absent/present students and click 'Save'", " 1. Refresh the screen displayed by date", " 3. Send the data to the server.", " The server for each absence sends an e-mail notification to the student's parent.", " 4. View the updated register data."], "dataset": "SMOS", "act": ["fill out,enter,click", "refresh", "send", "sends", "view"], "obj": ["absent/present students", "screen, date", "data, server", "e-mail,notification,parent", "register data"]}
{"index": 22, "ucName": "Logout", "uctext": "Allows a user to log out of the system", "steps": ["1.", "View login form."], "dataset": "SMOS", "act": [[], "view,login"], "obj": [[], "login form"]}
{"index": 23, "ucName": "InsertDelayAdmin", "uctext": "Digitization of Registry, data entry by Administrator", "steps": ["2. Fill out the form by entering students with delay and click 'Save'", "1. Refresh the displayed screen by date", "3. Submit the data to the server.", "4. Display updated log data."], "dataset": "SMOS", "act": ["fill out, entering, click, save", "refresh", "submit", "display"], "obj": ["form,students", "screen, date", "data,server", "updated log data"]}
{"index": 24, "ucName": "EditAbsence", "uctext": "Edit absence by Administrator. Editing is intended as inserting/deleting the absence.", "steps": ["2. Edit the absence (Insert or Delete) and click 'Save'", " 1. Refresh the screen according to the selected date", " 3. Sends the changed data to the server.", " The system sends a correction e-mail to the parent of the student."], "dataset": "SMOS", "act": ["edit,insert,delete,click,save", "refresh", "sends", "sends"], "obj": ["absence,save", "screen, date", "changed data, server", "correction e-mail, parent, student"]}
{"index": 25, "ucName": "EditDelay", "uctext": "editing a delay by Administrator", "steps": ["2. User edits the delay and clicks 'Save'", " 1. Updates the screen based on the selected date", " 3. The system sends the modified data to the server ."], "dataset": "SMOS", "act": ["edits,clicks,save", "updates", "sends"], "obj": ["user, delay, save", "the screen, the selected date", "system, modified data, server"]}
{"index": 26, "ucName": "DeleteDelay", "uctext": "Deleting a late entry by the Administrator", "steps": ["2. Delete a student's late entry and click 'Save'", " 1. Refresh the screen based on the selected date", " 3. Delete the late entry from the archive."], "dataset": "SMOS", "act": ["delete,click,save", "refresh", "delete"], "obj": ["student's late entry, save", "screen,selected date", "late entry, archive"]}
{"index": 27, "ucName": "ViewExcusedList", "uctext": "ViewExcusedList", "steps": ["1. Show all absences of the student recorded school selected Absences already excused are displayed in green, those to be excused in red during the year."], "dataset": "SMOS", "act": ["show, displayed"], "obj": ["absences, student, school, absences, year"]}
{"index": 28, "ucName": "ViewListNotes", "uctext": "View list of notes inherent to the student", "steps": ["1. Show all student notes recorded during the school year."], "dataset": "SMOS", "act": ["show"], "obj": ["all student notes, school year"]}
{"index": 29, "ucName": "InsertJustification", "uctext": "Insert Justification", "steps": ["2. Fill out the form", "3. Click 'Save'", "1. Show a form in which to enter the justification fields (justification date).", "4. Save the justification."], "dataset": "SMOS", "act": ["fill out", "click, save", "show,enter", "save"], "obj": ["form", "save", "form, justification fields, justification date", "justification"]}
{"index": 30, "ucName": "InsertNote", "uctext": "Insert Disciplinary Notes", "steps": ["2. Fill out the form.", "3. Click \"Save\".", "1. Show a form with note fields (student, date, teacher, description).", "4. Save the note and send an e-mail notification to the parent."], "dataset": "SMOS", "act": ["fill out", "click,save", "show", "save, send"], "obj": ["the form", "save", "student, date, teacher, description", "note, e-mail notification, parent"]}
{"index": 31, "ucName": "ViewJustificationDetails", "uctext": "View the details of a justification", "steps": ["1. Show a form with the details of the justification.", "The ability to edit or delete the justification."], "dataset": "SMOS", "act": ["show", "edit,delete"], "obj": ["form,details,justification", "the justification"]}
{"index": 32, "ucName": "ViewNoteDetails", "uctext": "View the details of a note", "steps": ["1. Show a form with note details:", "student, description, teacher, date."], "dataset": "SMOS", "act": ["show", "description, date"], "obj": ["form, note details", "student, description, teacher, date"]}
{"index": 33, "ucName": "ChangePassword", "uctext": "Allows a user to change their password", "steps": ["2. Fill out the form and submit.", "System 1. Displays the form with the fields: old password, new password, confirm new password.", "3. Confirms that the password has been changed."], "dataset": "SMOS", "act": ["fill out, submit", "displays", "confirms,has been changed"], "obj": ["the form", "old password, new password, confirm new password", "password"]}
{"index": 34, "ucName": "EditJustification", "uctext": "Edit a Justification", "steps": ["1. Edit one or more fields in the displayed form: date justification.", "Click 'Save'", "3. Edit the justification."], "dataset": "SMOS", "act": ["edit", "click, save", "edit"], "obj": ["date justification", "save", "justification"]}
{"index": 35, "ucName": "EditNote", "uctext": "Editing a Disciplinary Note", "steps": ["1. The user edits one or more fields in the displayed form: Student, description, teacher, date.", "2. User clicks on \"Save\"", "3. The system saves the changes."], "dataset": "SMOS", "act": ["edits", "clicks", "saves"], "obj": ["student,description,teacher,date", "user, \"save", "the changes"]}
{"index": 36, "ucName": "DeleteJustify", "uctext": "DeleteJustify", "steps": ["1. Delete justification."], "dataset": "SMOS", "act": ["delete"], "obj": ["justification"]}
{"index": 37, "ucName": "DeleteNote", "uctext": "Delete Disciplinary Notes", "steps": ["1. The system sends a notification of errata to the student's parents", " then deletes the note data from the archive."], "dataset": "SMOS", "act": ["sends", "deletes"], "obj": ["notification, errata, student's parents", "note data, archive"]}
{"index": 38, "ucName": "PerformStudentMonitoring", "uctext": "Allows you to query the system about the number of absences and notes associated with students.", "steps": ["1. Search the archive for students who have, for the current school year a number of absences and notes above a predetermined threshold.", " 2. Displays a screen presenting the data obtained."], "dataset": "SMOS", "act": ["search", "displays, presenting"], "obj": ["students, current school year, number of absences, notes, predetermined threshold", "screen"]}
{"index": 39, "ucName": "ViewingOfA Report Card", "uctext": "ViewingA Report Card", "steps": ["Selects the academic year", "Chooses the class of the student whose report card you want to view", "Selects the student and the quarter whose report card you want to view by clicking on the appropriate button.", "System displays the list of classes in the system with a 'Report Card' button associated with each class next to it", "Displays the list of pupils in the class chosen by the user", "Displays the report card of the chosen pupil referring to the selected term."], "dataset": "SMOS", "act": ["selects", "chooses, want", "selects, view, clicking", "displays", "displays,chosen", "displays, referring"], "obj": ["academic year", "class,student,report card", "student,quarter,report card,button", "classes, system, report card, class", "pupils, class, user", "report card, pupil, term"]}
{"index": 40, "ucName": "EnterPagella", "uctext": "Entering a student's report card performed by the Administrator", "steps": ["2. Selects the class of the student whose report card is to be entered", "4. Selects the student whose report card is to be entered by clicking on the appropriate button", "6. Enters the report card grades, all or in part, and clicks the 'save' button", "System", "1. Displays the list of classes in the system referring to the current academic year with a 'Report Card' button associated with each class next to it", "3. Displays the list of pupils in the class chosen by the user", "5. Displays the form for entering a report card", "7. Inserts grades entered into the archive and returns the user to the class student view page."], "dataset": "SMOS", "act": ["selects, entered", "selects, clicking", "enters,clicks", "is", "displays, referring", "displays,chosen", "displays", "inserts,returns"], "obj": ["class,student,report card", "student,report card", "report card grades, save button", "system", "list of classes, current academic year, report card, class", "list of pupils, class, user", "the form for entering a report card", "grades,archive,user,class,student,view,page"]}
{"index": 41, "ucName": "EditOfAPage", "uctext": "Use case for editing a student's report card", "steps": ["2. Enters the new data and clicks the confirmation button.", "System 1. Displays the form with the fields that can be edited including the grades of different subjects.", "3. The system displays a confirmation message and displays the form with the list of pupils."], "dataset": "SMOS", "act": ["enters, clicks", "displays", "displays,displays"], "obj": ["the new data, the confirmation button", "system 1, form, fields, grades, subjects", "confirmation message, form, list of pupils"]}
{"index": 42, "ucName": "DeletionOfAPage", "uctext": "Administrator deletes a report card from the system", "steps": ["2. The user accepts the deletion by pressing the confirmation key.", "System 1. The system displays a form to confirm the deletion.", "3. Displays a message of successful deletion and displays the form with the class list."], "dataset": "SMOS", "act": ["accepts,pressing", "displays,confirm", "displays,displays"], "obj": ["the user, deletion, confirmation key", "system 1,system,form", "message,form,class list"]}
{"index": 43, "ucName": "ViewRequestsSubscription", "uctext": "Allows the administrator to view the list of enrollment requests arrived at the system", "steps": ["1.", "Displays the list of enrollments yet to be activated."], "dataset": "SMOS", "act": [[], "displays"], "obj": [[], "the list of enrollments"]}
{"index": 44, "ucName": "ViewListUsers", "uctext": "View the list of users in the system", "steps": ["1. Search for users in the archive.", "Display their list."], "dataset": "SMOS", "act": ["search", "display"], "obj": ["users", "list"]}
{"index": 45, "ucName": "AcceptStudentEnrollment", "uctext": "Allows the administrator to accept a student's enrollment in the system", "steps": ["1. Activates the new user in the system.", "2. Displays the list of enrollments yet to be activated."], "dataset": "SMOS", "act": ["activates", "displays"], "obj": ["the new user, the system", "list, enrollments"]}
{"index": 46, "ucName": "RejectStudentEnrollment", "uctext": "Allows the administrator to reject a student's enrollment in the system", "steps": ["1. Deletes the system enrollment request.", "2. Displays the list of enrollments yet to be activated."], "dataset": "SMOS", "act": ["deletes", "displays"], "obj": ["system, enrollment request", "list of enrollments yet to be activated"]}
{"index": 47, "ucName": "Entity Search", "uctext": "Allows the administrator to search the system for all entities characterized by the keywords entered", "steps": ["1. Displays the list of entities related to the searched keywords;", "in particular, the following are shown in an active list:", "Classes, Teachings, Addresses, Users found."], "dataset": "SMOS", "act": ["displays", "shown", "found"], "obj": ["the list of entities related to the searched keywords", "the following", "classes, teachings, addresses, users"]}
{"index": 48, "ucName": "ViewElencoClasses", "uctext": "View Classes", "steps": ["1. The system shows the user a screen with all the classes in the database,", "with a button to access the record of each class."], "dataset": "SMOS", "act": ["shows", "access"], "obj": ["user, screen, classes, database", "button,record,class"]}
{"index": 49, "ucName": "EnterAbsences", "uctext": "Digitizing the Register, collecting data from ATA staff class by class", "steps": ["2. User selects absent students.", "3. Clicks save.", "1. Shows user a screen with pupils and radio buttons to select whether a pupil is absent or present. By default the pupil is present.", "4. The system sends the data to the server. The server for each absence sends an e- mail notification to the pupil's parent."], "dataset": "SMOS", "act": ["selects", "clicks,save", "shows, select, is", "sends, sends"], "obj": ["user, students", "save", "user, screen, pupils, radio buttons, pupil", "system, server, absence, e-mail notification, pupil's parent"]}
{"index": 50, "ucName": "InsertDelayAta", "uctext": "Digitizing the Register, collecting data from ATA staff class by class", "steps": ["2. User selects tardies.", "3. User clicks \"Confirm\".", "1. The system shows the user a screen with all pupils present, with a \"tardy\" checkbox next to it.", "If selected, select fields are activated beside it to select the time of the delay.", "4. The system sends the data to the server."], "dataset": "SMOS", "act": ["selects", "clicks", "shows", "selected,select,are activated,select", "sends"], "obj": ["user, tardies", "user, confirm", "user, screen, pupils, checkbox", "fields, time, delay", "data,server"]}
{"index": 51, "ucName": "ViewListClassesDoctor", "uctext": "This use case allows a teacher to view the list of classes in which he or she teaches.", "steps": ["2. Select the academic year of interest.", "Displays the list of academic years in which there is at least one class in which the lecturer teaches.", "1.", "3. Displays the classes associated with the selected academic year."], "dataset": "SMOS", "act": ["select", "displays,teaches", [], "displays,associated"], "obj": ["the academic year of interest", "list of academic years, class, lecturer", [], "the classes"]}
{"index": 52, "ucName": "ViewRegister", "uctext": "View Class Register", "steps": ["1. View information related to the class register and in particular:", "Date, Absences, Disciplinary Notes, Tardiness and Excuses."], "dataset": "SMOS", "act": ["view", "are"], "obj": ["information, class register", "date, absences, disciplinary notes, tardiness, excuses"]}
{"index": 53, "ucName": "DisplayOfAPagellaDoctor", "uctext": "Display of a report card", "steps": ["2. Select the academic year of interest.", "4. Select one of the displayed classes.", "6. Select the student whose report card and the relevant quarter to view by clicking on the appropriate button.", "1. View the list of academic years in which there is at least one class in which the teacher teaches.", "3. Displays the classes associated with the selected academic year.", "5. Displays the list of pupils in the class chosen by the user", "7. Displays the report card of the chosen pupil referring to the specified term."], "dataset": "SMOS", "act": ["select", "select", "select, view, clicking", "view, teaches", "displays", "displays", "displays"], "obj": ["academic year", "the displayed classes", "student,report card,quarter", "academic years, class, teacher", "the classes, the selected academic year", "pupils, class", "report card, pupil, term"]}
{"index": 54, "ucName": "DisplayOfAStudentPage", "uctext": "The report card of the requesting student is displayed", "steps": ["2. Select the report card of interest", "1. The system displays the logged-in student's report cards on file", "3. Displays details of the selected report card."], "dataset": "SMOS", "act": ["select", "displays", "displays"], "obj": ["report card", "student, report cards", "details,selected,report card"]}
{"index": 55, "ucName": "NewUser", "uctext": "Enter a new user into the system", "steps": ["2. Fill in the form fields.", "3. Click on the 'Save' button.", "System 1. Displays the user entry form consisting of the following fields: First Name, Last Name, e-mail, cell, login, password, password confirmation.", "Performs checks on the validity of the entered data and enters the new user into the archive;", "in case the entered data is invalid, activate the use case 'ErrorData'."], "dataset": "SMOS", "act": ["fill, in", "click", "displays", "performs, checks, enters", "activate"], "obj": ["form fields", "button", "first name, last name, e-mail, cell, login, password, password confirmation", "checks, validity, entered data, new user, archive", "entered data, use case 'errordata"]}
{"index": 56, "ucName": "ViewSchoolStudentData", "uctext": "View school information about the 'user", "steps": ["1.", "2. Search the archive for data related to the record of the class to which the student belongs.", "View data about the student and in particular: Date, Absences, Disciplinary Notes, Tardies and Excuses."], "dataset": "SMOS", "act": [[], "search,belongs", "view"], "obj": [[], "data, record, class, student", "date, absences, disciplinary notes, tardies, excuses"]}
{"index": 57, "ucName": "ViewStudentData", "uctext": "This use case allows a parent to view information about their children.", "steps": ["1. View a summary table with information about their children and in particular:", "Date, Absences, Disciplinary Notes, Tardiness and Excuses."], "dataset": "SMOS", "act": ["view, output", "are"], "obj": ["summary table, information, children", "date, absences, disciplinary notes, tardiness, excuses"]}
{"index": 58, "ucName": "DisplayOfAPage", "uctext": "The required student's report card is displayed", "steps": ["2. Select the report card of interest", "1. Displays the selected student's report cards", "3. Displays details of the selected report card."], "dataset": "SMOS", "act": ["select", "displays", "displays"], "obj": ["report card", "report cards", "details,selected,report card"]}
{"index": 59, "ucName": "PerformStudentMonitoring", "uctext": "Displays students with a number of notes and absences above a user-specified threshold.", "steps": ["1. Search for students with a number of absences and notes above a specified threshold.", "2. Displays retrieved information."], "dataset": "SMOS", "act": ["search", "displays, retrieved"], "obj": ["students,absences,notes,threshold", "information"]}
{"index": 60, "ucName": "ViewListRecords", "uctext": "View the list of records for an academic year", "steps": ["2. Select academic year", "1.Display a screen for selecting the academic year of interest.", "3. Search the archive for all digital records for that year and display them associated with the class to which they belong."], "dataset": "SMOS", "act": ["select", "display", "search, display"], "obj": ["academic year", "academic year", "archive,records,class"]}
{"index": 61, "ucName": "ViewRegister", "uctext": "Details about a class register", "steps": ["1. Displays on the screen the information contained in the register organized by date.", "In particular it shows, for the selected date the list of pupils, specifying: absent/present, late entries and a form from which you can manage justifications and disciplinary notes."], "dataset": "SMOS", "act": ["displays", "shows, specifying, manage"], "obj": ["information, register, date", "for the selected date, list of pupils, absent/present, late entries, a form, justifications, disciplinary notes"]}
{"index": 62, "ucName": "ViewingA Report Card", "uctext": "ViewingA Report Card", "steps": ["Selects the academic year 3.", "Selects the class of the student whose report card you want to view.", "Selects the student whose report card you want to view and the quarter of interest by clicking on the relevant button.", "Displays the list of classes in the system with a 'Report Card' button associated with each class next to it.", "Displays the list of pupils in the class chosen by the user.", "Displays the report card of the chosen pupil referring to the selected semester."], "dataset": "SMOS", "act": ["selects", "selects, want", "selects, want, view, clicking", "displays, associated", "displays,chosen", "displays"], "obj": ["academic year 3", "class,student,report card", "student,report card,quarter,relevant button", "list of classes, system, 'report card' button, class", "list, pupils, class, user", "report card, pupil, semester"]}
{"index": 63, "ucName": "RegistrationAlSite", "uctext": "Allows a student to register with the system", "steps": ["2. Fills in the form fields.", "3. Submits the form.", "1. Displays the registration form containing: First name, Last name, Mobile phone, e-mail, username, password, password confirmation.", "4. Enters the registration request into the system."], "dataset": "SMOS", "act": ["fills", "submits", "displays", "enters"], "obj": ["form fields", "the form", "first name, last name, mobile phone, e-mail, username, password, password confirmation", "the registration request, the system"]}
{"index": 64, "ucName": "ViewUserDetails", "uctext": "View a user's details", "steps": ["1. View the user's detailed information and in particular: First Name, Last Name, e-mail, cell, login, password."], "dataset": "SMOS", "act": ["view"], "obj": ["user's detailed information, first name, last name, e-mail, cell, login, password"]}
{"index": 65, "ucName": "EditUser", "uctext": "Edit one or more data regarding a user in the system", "steps": ["1. Click on the 'edit' button System", " 2. Performs checks on the validity of the entered data", " and edits the user;", " in case the entered data is invalid", " activate the use case 'ErrorData'"], "dataset": "SMOS", "act": ["click", "performs, checks", "edits", "is", "activate"], "obj": ["edit button, system", "the validity of the entered data", "the user", "data", "errordata"]}
{"index": 66, "ucName": "DeleteUser", "uctext": "Delete a user from the system", "steps": ["1. Deletes the user from the archive", " 2. Displays the list of updated users or"], "dataset": "SMOS", "act": ["deletes", "displays"], "obj": ["user", "list of updated users"]}
{"index": 0, "ucName": "Input anagrafica of a laboratory", "uctext": ":\nIt allows the operator to enter the anagrafica of a laboratory analysis or any data that the characterize", "steps": ["The operator activates the execution of the anagrafica input service Laboratory\n[S1]", "View the mask to enter information needed\n[S2]", " Inserts data about the anagrafica of laboratory\n[S3]", " Confirm placement\n[S4]", " Verify the data entered\n[S5]", " Stores data\n[S6]", " Notify that the operation it is finished with success"], "dataset": "easyClinic", "act": ["activates,executes", "view, enter", "inserts", "confirm", "verify", "stores", "notify, finished"], "obj": ["operator, execution, anagrafica input service laboratory", "the mask, information needed", "data, anagrafica, laboratory, [s3", "placement", "the data entered", "data", "operation, success"]}
{"index": 1, "ucName": "Delete visit", "uctext": ":\nIt allows the operator to delete a visit previously recorded", "steps": ["The operator activates the execution of service elimination of a visit", "1 View the list of visits in chronological order", "2 Select the visit to delete", "3 Confirm the selection", "4 View the mask for viewing of visit", "5 Confirm the delete", "6 Delete the visit and examinations related to it", "7 Notify the operator that the operation was concluded successfully"], "dataset": "easyClinic", "act": ["activates,elimination", "view", "select, delete", "confirm", "view,viewing", "confirm", "delete", "notify,concluded"], "obj": ["operator,execution,service,elimination,visit", "list,visits", "visit", "selection", "mask, viewing, visit", "delete", "visit,examinations", "operation"]}
{"index": 2, "ucName": "Input examination", "uctext": ":\nIt allows the operator to record results of a examination supported by a patient required a visit held in outpatient", "steps": ["The operator activates the execution of input service of data from an examination", "View the mask to record of examination", "Input necessary data to registration of examination", "Confirm input", "Verify the data inserted by operator", "Stores data confirm the elimination", "Notify the operator that the operation was concluded successfully"], "dataset": "easyClinic", "act": ["activates,executes", "view,record", "input", "confirm", "verify,inserted", "confirm", "notify,concluded"], "obj": ["operator,execution,input service,data,examination", "mask, record, examination", "necessary data, registration of examination", "input", "data,operator", "data", "operator,operation"]}
{"index": 3, "ucName": "Changing examination", "uctext": ":\nIt allows the operator to change a examination  previously recorded", "steps": ["The operator activates the execution of service to modify an examination", "1 View a list of tests carried out in chronological order", "2 Select the examination by change", "3 Confirm your selection", "4 View the mask for the modification of a examination", "5 Change of data", "6 Confirm Changes", "7 Verify the data inserted by operator", "8 updates the examination.", "6 Notify the operator that the operation was concluded successfully"], "dataset": "easyClinic", "act": ["activates,modifies", "view", "select,change", "confirm", "view", "change", "confirm", "verify", "updates", "notify,concluded"], "obj": ["operator, execution, service, examination", "list, tests", "examination,change", "selection", "mask,modification,examination", "change of data", "changes", "data", "examination", "operator,operation"]}
{"index": 4, "ucName": "Delete examination", "uctext": ":\nIt allows the operator to delete a Visit previously recorded", "steps": ["The operator activates the execution of service elimination of an examination", "1 View a list of examinations conducted in chronological order", "2 Select the examination to change", "3 Confirm your selection ", "4 View the mask for viewing examination", "5 confirms the deletion", "6 Delete the examination ", "7 Notify the operator that the operation was concluded successfully"], "dataset": "easyClinic", "act": ["activates", "view, conducted", "select, change", "confirm", "view,viewing", "confirms", "delete", "notify,was,concluded"], "obj": ["operator,execution,service,elimination,examination", "list, examinations", "examination", "selection", "mask,viewing,examination", "deletion", "examination", "notify, operator, operation"]}
{"index": 5, "ucName": "Book visit", "uctext": ":\nIt allows the operator to meet request for a booking service made by an ambulatory patient\nThe Operator has an interest in the record renting an outpatient service requested by a patient", "steps": ["The operator activates the execution of service booking service", "The Operator has received a request for a first visit", "View the mask for booking of outpatient service", "Select the type of visit that the patient wants to make", "Inserts motivation of the request", "Confirm data inserted", "Verify that the sequence of reservations are valid (See BrValSeq)", "Select available dates", "Confirm your reservation", "Stores data", "Notify the operator that the operation was concluded successfully"], "dataset": "easyClinic", "act": ["activates,execution,booking", "has received", "view", "select, wants, make", "inserts", "confirm,inserted", "verify", "select", "confirm", "stores", "notify,concluded"], "obj": ["operator,execution,service booking service", "the operator,request,first visit", "mask,booking,outpatient service", "type of visit, patient", "motivation,request", "data", "sequence of reservations,brvalseq", "dates", "your reservation", "data", "the operator, the operation"]}
{"index": 6, "ucName": "Changing reservation", "uctext": ":\nIt allows the operator to meet request to change a reservation a service by Outpatient", "steps": ["The operator activates the execution of service to changing a reservation", "View the list of reservations for the patient", "Select the reservation to be changed", "Confirm the selection", "View the mask for changing the reservations", "Select dates available", "confirm the change", "verifies that the sequence of reservations is valid (See BrValSeq)", "updates the data", "Notify the operator that the operation was concluded successfully"], "dataset": "easyClinic", "act": ["activates,execution,changing", "view", "select, be changed", "confirm", "view,changing", "select", "confirm", "verifies", "updates", "notify,concluded"], "obj": ["operator, execution, service, reservation", "reservations,patient", "reservation", "selection", "mask, reservations", "dates", "the change", "sequence of reservations", "the data", "the operator, the operation"]}
{"index": 7, "ucName": "Cancel Reservation", "uctext": ":\nIt allows the operator to meet request for annulment of a renting an outpatient service by a patient", "steps": ["The operator activates the execution of service cancellation of a Reservations", "View the list of reservations for the patient", "Select the reservation to be changing", "Confirm cancellation", "Verify that the sequence of reservations are valid (See BrValSeq)", "Cancel Reservation", "Notify the operator that the operation was concluded successfully"], "dataset": "easyClinic", "act": ["activates,execution,cancellation", "view", "select,be changing", "confirm, cancellation", "verify", "cancel", "notify,was concluded"], "obj": ["operator,execution,service cancellation,reservations", "list of reservations,patient", "reservation", "cancellation", "sequence, reservations", "reservation", "operator,operation"]}
{"index": 8, "ucName": "Changing anagrafica of the patient", "uctext": ":\nIt allows the operator to change the anagrafica of a patient that are at outpatient\nIt deals with the modification of data about anagrafica a Patient", "steps": ["The operator activates the execution of change Service of the anagrafica of the patient", "1 View the mask for editing the anagrafica of patient", "2 Change the anagrafica of patient", "3 Confirm Changes", "4 Verify the data inserted by operator", "5 Remember the updates", "6 Notify that the operation finished with success"], "dataset": "easyClinic", "act": ["activates", "view, editing", "change", "confirm", "verify", "remember", "notify"], "obj": ["operator,execution,change service,anagrafica,patient", "mask, editing, anagrafica, patient", "anagrafica, patient", "confirm changes", "operator", "the updates", "operation,success"]}
{"index": 9, "ucName": "input anagrafica of patient", "uctext": ":\nIt allows the operator to enter the anagrafica of a patient who contact the outpatient for the first time.", "steps": ["1 View the mask for input of necessary information", "2 Inserts data about anagrafica of Patient", "3 Confirm input", "4 Verify the data inserted by operator", "5 Build and assigns Hospital Card (See BrCreCar)", "10 First visit"], "dataset": "easyClinic", "act": ["view", "inserts", "confirm", "verify", "build, assigns", "visit"], "obj": ["mask, input, information", "data,anagrafica,patient", "confirm", "data,operator", "hospital card", "10,first,visit"]}
{"index": 10, "ucName": "Access section of patient", "uctext": ":\nIt allows access to this patient by enabling the operator to meet one or more Requests received by Patient", "steps": ["The operator activates the execution of service access to section patient", "1 valid patient", "2 View mask of section patient"], "dataset": "easyClinic", "act": ["activates,execution", "valid", "view"], "obj": ["operator,execution,service access,section patient", "valid,patient", "mask,section,patient"]}
{"index": 11, "ucName": "Changing anagrafica laboratory", "uctext": ":\nIt allows the operator to change the anagrafica of a laboratory analysis\nIt deals with the modification of data about anagrafica of laboratory analysis", "steps": ["The operator activates the execution of service changing of the anagrafica of laboratory", "View the list of laboratories in the SIO", "Select the laboratory which change the anagrafica", "Confirm your selection", "View the mask for editing the anagrafica of laboratory", "Changing the angrafica of laboratory", "Confirm the changes", "Verify the data insert by operator", "updates data", "Notify that the operation finished with success"], "dataset": "easyClinic", "act": ["activates,changing", "view", "select, change", "confirm", "view,edit", "changing", "confirm", "verify", "updates", "notify,finished"], "obj": ["the operator, the execution of service changing, the anagrafica of laboratory", "list, laboratories, sio", "the laboratory, the anagrafica", "your selection", "mask,anagrafica,laboratory", "laboratory", "the changes", "data,operator", "data", "the operation"]}
{"index": 12, "ucName": "Validate patient", "uctext": ":\nHe works to perform the functions necessary to authenticate an patient", "steps": ["The Operator active enforcement of a depending on a specific patient", "View the mask for validating the patient", "input the code of hospital Card", "Confirm validation", "Verify that the code of hospital card or tax code to identify a patient within SIO", "Get patient information", "Transfer patient data to the memory"], "dataset": "easyClinic", "act": ["active enforcement", "view", "input", "confirm,validation", "verify,identify", "get", "transfer"], "obj": ["operator, active enforcement, specific patient", "the mask", "hospital,card", "validation", "code, hospital card, tax code, patient, sio", "patient information", "patient data, memory"]}
{"index": 13, "ucName": "Show clinic folder", "uctext": ":\nAllows a patient to view clinic folder own folder using the specific locations displaced of the outpatient", "steps": ["The patient activates the execution of service display clinic folder", "Access to the database and retrieves information in patient clinic folder", "View details of patient and the list of visits in chronological order and pathology"], "dataset": "easyClinic", "act": ["activates,executes,display", "access, retrieves", "view,extract"], "obj": ["patient,execution,service,display,clinic,folder", "database,information,patient,clinic,folder", "patient,visits,pathology"]}
{"index": 14, "ucName": "Show Reservations", "uctext": ":\nAllows a patient to view thr list of reservation profits using the appropriate locations displaced of the outpatient", "steps": ["The patient activates the execution of service displaying their reservations", "Access to the database and retrieves information of the useful patient reservation", "View the list of the patient bookings in chronological order"], "dataset": "easyClinic", "act": ["activates,displaying", "access, retrieves", "view"], "obj": ["the patient, the execution of service, their reservations", "database,information,patient,reservation", "list,patient bookings"]}
{"index": 15, "ucName": "Show anagrafica", "uctext": ":\nAllows a patient of view their anagrafica data using the specific locations displaced of the outpatient", "steps": ["The patient activates the execution of service display their anagrafica data", "1 Access to the database and retrieves information about patient anagrafica", "2 View information patient anagrafiche"], "dataset": "easyClinic", "act": ["activates,executes,display", "access, retrieves", "view"], "obj": ["the execution of service display their anagrafica data", "database, information, patient anagrafica", "information,patient,anagrafiche"]}
{"index": 16, "ucName": "Access Box Tower", "uctext": ":\nAllows the patient to access a locations of internally displaced of the outpatient", "steps": ["Patient access to one of the locations displaced of the outpatient", "1 valid patient", "2 find patients information", "3 Transfer patient data in the memory", "4 View the root mask of a box tower"], "dataset": "easyClinic", "act": ["displaced", "1 valid patient", "find", "transfer", "view"], "obj": ["one of the locations", "valid,patient", "patients information", "patient, data, memory", "root mask, box tower"]}
{"index": 17, "ucName": "Validation patient", "uctext": ":\nHe works to perform the functions necessary to authenticate an patient", "steps": ["Patient access to Box Tower \n1", " View the mask for the login operation\n2 ", "input the code of Hospital Card PIN\n3", " Confirm validation \n4", " Verify that the couple (Hospital Card PIN)\n5", " identifies a patient within SIO"], "dataset": "easyClinic", "act": ["access", "view", "input", "confirm", "verify", "identifies"], "obj": ["patient, box tower 1", "mask,login operation", "hospital card pin 3", "validation,4", "hospital card pin", "patient"]}
{"index": 18, "ucName": "Report reservations", "uctext": ":\nIt allows the operator to have a report on reservation", "steps": ["The operator activates the execution of service report reservation", "1 View the mask for viewing of the report of reservation", "2 Select the time gap", "3 Select the type of information summary", "4 Confirm selection", "5 Access to the database and found in the training required", "6 View information obtained"], "dataset": "easyClinic", "act": ["activates", "view,viewing", "select", "select", "confirm", "access,found", "view,obtained"], "obj": ["operator,execution,service report reservation", "mask,report,reservation", "the time gap", "type of information summary", "confirm selection", "database,training", "information"]}
{"index": 19, "ucName": "Report visits", "uctext": ":\nIt allows the operator to have a record of the outpatient visits, inside so have a total of visits made by a patient, visits supported by a doctor etc", "steps": ["The operator activates the execution of service record visits", "View the mask for viewing the reporting of visits", "Select the time gap", "Select the type of information summary", "Confirm selection", "Access to the database and found in the required training", "View information obtained"], "dataset": "easyClinic", "act": ["activates", "view,viewing", "select", "select", "confirm", "access,found", "obtained"], "obj": ["operator,execution,service,record,visits", "mask,reporting,visits", "time gap", "information summary", "selection", "access to the database, required training", "information"]}
{"index": 20, "ucName": "Report examinations", "uctext": ":\nIt allows the operator to have a report on tests carried out in reference to visits made in outpatient", "steps": ["The operator activates the execution of reporting service examinations", "1 View the mask for viewing the reporting of examinations", "2 Select the storm", "3 Confirm your selection", "4 Access to the database and found in the required training", "5 View information obtained"], "dataset": "easyClinic", "act": ["activates,execution", "view,viewing", "select", "confirm", "access,found", "view"], "obj": ["operator,execution,reporting service examinations", "mask,viewing,reporting,examinations", "storm", "selection", "access, database, training", "information"]}
{"index": 21, "ucName": "The average time of waiting", "uctext": ":\nIt allows the operator to get an estimate the average time required to serve a booking", "steps": ["The operator activates the execution of service for calculating the estimated average time", "1 View a mask to see the result of the calculation estimation of average time to serve a request reservations", "2 Start function", "3 View results calculating"], "dataset": "easyClinic", "act": ["activates,calculating", "view,see", "start", "view, calculating"], "obj": ["operator,execution of service,estimated average time", "mask, result, calculation estimation, average time, request reservations", "start function", "results"]}
{"index": 22, "ucName": "Delete anagrafica laboratory", "uctext": ":\nIt allows the operator to remove the anagrafica of a laboratory analysis.\nIt works for the elimination of data at anagrafica on a laboratory analysis.", "steps": ["The operator activates the execution of the elimination of the anagrafica of the laboratory.", "1 View the list of laboratories in the SIO.", "2 Select the laboratory which needs to change the anagrafica.", "3 Confirm your selection.", "4 View the mask to eliminate the anagrafica of the laboratory.", "5 Confirm the delete of laboratory.", "6 Delete the data about anagrafica of laboratory.", "7 Notify that the operation is finished with success."], "dataset": "easyClinic", "act": ["activates,execution,elimination", "view", "select, needs, change", "confirm", "view,eliminate", "confirm,delete", "delete", "notify"], "obj": ["execution, elimination, anagrafica, laboratory", "laboratories, sio", "laboratory, anagrafica", "your selection", "mask,anagrafica,laboratory", "delete, laboratory", "anagrafica, laboratory", "operation"]}
{"index": 23, "ucName": "Plans reservations", "uctext": ":\nIt allows the operator to view and print plans of bookings made for each type visit in tabular form", "steps": ["The operator activates the execution of service to view and print plans reservations", "View a mask to view and print plans reservations", "Select the type of visit", "Enable", "Access to the database and found in the required training", "View information obtained"], "dataset": "easyClinic", "act": ["activates,view,print", "view,view,print", "select", "enable", "access,found", "view,obtained"], "obj": ["operator,execution,service,plans,reservations", "mask,plans,reservations", "type of visit", "enable", "the database, the required training", "information"]}
{"index": 24, "ucName": "Inserting doctor anagrafica", "uctext": ":\nIt allows the operator to input the anagrafica of a doctor who works at the outpatient.\nThe Operator is responsible for the input of the doctor anagrafica in the SIO.", "steps": ["View the mask for input of needed information.", "Insert data of doctor anagrafica.", "Confirm input.", "Verify the data insert by the operator.", "Store data.", "Notify that the operation is finished with success.", "Data entered invalid:", "4.1. Display a message showing the data deemed invalid.", "4.2. Take back running from point 1, underpinned the fields of the form with data inserted by the operator."], "dataset": "easyClinic", "act": ["view, input", "insert", "confirm", "verify,insert", "store", "notify, is finished", "entered", "display,showing", "take back, underpinned"], "obj": ["mask,information", "data, doctor anagrafica", "input", "data,operator", "data", "operation", "data entered invalid", "message, data", "running, point 1, fields, form, data, operator"]}
{"index": 25, "ucName": "Changing  doctor anagrafica", "uctext": ":\nIt allows the operator to change the anagrafica of a doctor who works at the outpatient. It deals with the modification of data about a doctor anagrafica", "steps": ["The operator activates the execution of Chanching service of the doctor anagrafica", "View the list of doctors present in the SIO.", "Select the anagrafica doctor which change the anagrafica", "Confirm the selection", "View the mask for changing of the doctor anagrafica", "Changing the anagrafica of doctor", "Confirm Changes", "Verify the data insert by operator", "Remember the updates", "Notify that the operation is finished with success."], "dataset": "easyClinic", "act": ["activates", "view", "select, change", "confirm", "view", "changing", "confirm", "verify", "remember", "notify, is, finished"], "obj": ["the operator, the execution, chanching service, the doctor anagrafica", "list of doctors, sio", "doctor,anagrafica", "the selection", "the mask, changing of the doctor anagrafica", "anagrafica, doctor", "changes", "data,operator", "the updates", "the operation"]}
{"index": 26, "ucName": "Delete doctor anagrafica", "uctext": ":\nIt allows the operator to delete the anagrafica of a doctor who works at the outpatient", "steps": ["The operator activates the execution of delete of the register service laboratory", "View the list of laboratories that are in the SIO", "Select the doctor which changing the anagrafica", "Confirm the selection", "View the mask to delete the doctor anagrafica", "confirm to delete of doctor", "Delete the data  about anagrafica of doctor", "Notify that the operation is finished with success"], "dataset": "easyClinic", "act": ["activates,executes,delete", "view", "select,changing", "confirm", "view,delete", "confirm,delete", "delete", "notify, is finished"], "obj": ["operator,execution,delete,register service laboratory", "list, laboratories, sio", "doctor,anagrafica", "selection", "mask, doctor anagrafica", "delete,doctor", "data, anagrafica, doctor", "operation,success"]}
{"index": 27, "ucName": "Validate operator", "uctext": ":\nHe works to perform the functions necessary to authenticate an operator", "steps": ["The operator tries to log on system", "1 View the mask for validation of operator", "2 Inserts login and password", "3 Confirm data", "4 verify login and identify password of a operator within the SIO", "5 allows access", "6 View the main mask"], "dataset": "easyClinic", "act": ["tries,log", "view", "inserts", "confirm", "verify,identify", "allows", "view"], "obj": ["operator,system", "mask,validation,operator", "login, password", "data", "verify login, identify password, operator, sio", "access", "main mask"]}
{"index": 28, "ucName": "Record visit", "uctext": ":\nIt allows the operator to record a visit held in outpatient", "steps": ["The operator activates the execution of registration service of a visit", "View the mask to record of the visit", "inputs the neccesary data of the registration of visit", "Confirm input", "Verify the data inserted by operator", "Stores data", "Notify the operator that the operation was concluded successfully"], "dataset": "easyClinic", "act": ["activates,execution,registration", "view,record", "inputs", "confirm", "verify,inserted", "stores", "notify,concluded"], "obj": ["operator,execution,registration service,visit", "mask,record,visit", "neccesary data, registration of visit", "input", "data", "data", "operator, operation"]}
{"index": 29, "ucName": "Changing visit", "uctext": ":\nIt allows the operator to change a visit previously recorded", "steps": ["The operator activates the execution of service editing a visit", "View the list of visits in chronological order", "Select the visit by change", "Confirm your selection", "View the mask for the modification of a visit", "Changing data of the visit", "Confirm Changes", "Verify the data insert by operator", "Remember the updates", "Notify to the operator that the operation was concluded successfully"], "dataset": "easyClinic", "act": ["activates,editing", "view", "select", "confirm", "view, modification", "changing", "confirm", "verify,insert", "remember", "notify,concluded"], "obj": ["operator,execution,service,visit", "visits", "visit", "selection", "mask,modification,visit", "data,visit", "changes", "data,operator", "the updates", "operator, operation"]}
{"index": 0, "ucName": "AuthenticationAdministrator", "steps": ["1. Administrator logs in to the system.", "2. The system displays the login form for entering data (user name and password).", "3. The administrator enters the data and submits the authentication request.", "4. The system receives the form, verifies the data and allows the administrator access to the system with the specified access permissions."], "dataset": "eANCI", "act": ["logs in", "displays", "enters,submits", "receives, verifies, allows"], "obj": ["administrator", "system, login form, data, user name, password", "data,authentication request", "form, data, administrator, access, system, access permissions"]}
{"index": 1, "ucName": "LogoutEmployee", "steps": ["1. The employee wants to end the work session and clicks on the Logout button.", "2. The system disconnects the employee from the system and returns to the main screen."], "dataset": "eANCI", "act": ["wants, end, clicks", "disconnects,returns"], "obj": ["employee, work session, logout button", "the system, the employee, the system, the main screen"]}
{"index": 2, "ucName": "HowToBecomeAVolunteer", "steps": ["1. The Citizen accesses this descriptive screen", "2. The system responds to the need by letting him know how to become a Civil Defense volunteer, and of the requirements that the Citizen will necessarily have to meet.", "3. The Citizen takes note of what is written and therefore wishes to access the associated form, and therefore, the use case DownloadModule will be called."], "dataset": "eANCI", "act": ["accesses", "responds,letting,know,have,meet", "takes, wishes, access, use, will, called"], "obj": ["the citizen, this descriptive screen", "2, system, civil defense volunteer, requirements, citizen", "citizen, downloadmodule"]}
{"index": 3, "ucName": "Committee", "steps": ["1. The Citizen accesses this service in order to take note of the hierarchical composition of the Civil Defense.", "2. The system responds to the Citizen's curiosity with a screen where there is an organizational chart of the components of the Municipal Civil Defense in accordance with the other governmental institutions in the area according to the law of the Municipal Council approved by all."], "dataset": "eANCI", "act": ["accesses, take, note", "responds, is, there is, approved"], "obj": ["the citizen, civil defense", "citizen, municipal civil defense, municipal council"]}
{"index": 4, "ucName": "DownloadIscription", "steps": ["1. The Citizen accesses this screen because he/she wants to register for Civil Service.", "2. The system responds with a page where the requesting Citizen can download the form to fill out and submit to the Civil Defense office."], "dataset": "eANCI", "act": ["accesses, wants, register", "responds, download, fill, submit"], "obj": ["the citizen, this screen, civil service", "citizen, civil defense office"]}
{"index": 5, "ucName": "DownloadModule", "steps": ["1. The Citizen accesses the download of the form as he/she wants to join Volunteer", "3.", "2. The system responds to this need with the ability to view the form The Citizen acknowledges the form, and decides to start downloading the file.", "4. The system responds to the Citizen's need by saving the form to join the Volunteer Action."], "dataset": "eANCI", "act": ["accesses, wants, join", [], "responds,view,acknowledges,decides,start,downloading", "responds,saving"], "obj": ["the citizen, download, form, volunteer", [], "the system, the citizen", "4, citizen, form, volunteer action"]}
{"index": 6, "ucName": "ManageModifications", "steps": ["1. The employee after authenticating in the system accesses the Civil Defense feature to edit the relevant forms.", "2. The system responds to this need with the ability to display a screen with the use cases UpdateAtmosphericConditions, UpdateEnvironmentalAnalysis, UpdateCompetitionsBands.", "3. The employee selects the feature to be modified.", "4. The system responds to the employee's need with the requested change form."], "dataset": "eANCI", "act": ["authenticating,accesses,edit", "responds,display", "selects", "responds"], "obj": ["the employee, the system, the civil defense feature, the relevant forms", "the system, screen, use cases updateatmosphericconditions, updateenvironmentalanalysis, updatecompetitionsbands", "the employee, feature", "system, employee, change form"]}
{"index": 7, "ucName": "Fires", "steps": ["1. The Citizen can access this section if he or she has chosen to view the Risks use case, and decides to learn more about the possible causes that trigger fires.", "2. The system responds to the Citizen's need with a detailed description of how to prevent fires, and who deals with them."], "dataset": "eANCI", "act": ["access, has chosen, decides, learn", "responds,prevent,deals"], "obj": ["citizen, risks, fires", "citizen, fires"]}
{"index": 8, "ucName": "MonitoringIdro-pluviometric", "steps": ["1. The Citizen accesses this screen as he wants to satisfy his curiosity in knowing the situation monitored by the Civil Defense of municipal water", "2. The system responds with a screen where he can view information about how the municipal water is being monitored, the bacteriological situation, and an update of the latest analysis performed on the samples taken."], "dataset": "eANCI", "act": ["accesses, wants, satisfy, knowing", "responds,can view"], "obj": ["the citizen, civil defense, municipal water", "screen, information, municipal water, bacteriological situation, update, latest analysis, samples"]}
{"index": 9, "ucName": "MonitoringVulcanic", "steps": ["1. The Citizen accesses this screen as he or she wants to know more about how the Civil Defense actually performs monitoring of volcanoes in the municipality and nationwide territory, with a detailed description of the information technologies adopted.", "2. The system responds to the request by displaying an information sheet describing everything the Civil Defense does to keep track of volcanic activity."], "dataset": "eANCI", "act": ["accesses, wants, know, performs", "responds, displaying, describing, does, keep, track"], "obj": ["the citizen, civil defense, volcanoes, municipality, nationwide territory, information technologies", "the system, the request, an information sheet, everything the civil defense, volcanic activity"]}
{"index": 10, "ucName": "UsefulNumbers", "steps": ["1. The Citizen accesses this page to take advantage of the telephone contact information to contact in case of danger of any kind.", "2. The system responds by allowing the display of a descriptive card with the telephone numbers of the agencies concerned with the safety of the Citizen himself.", "3. The Citizen by accessing this screen can, in addition, view advice, and standard procedures, divided into categories, about the correct communication between him and the Call Center contact person of a given municipal body.", "4. The system responds with an emergency support screen corresponding to the service the Citizen decides to contact."], "dataset": "eANCI", "act": ["accesses, take, contact", "responds, allowing, allowing the display", "accessing,view", "responds, decides"], "obj": ["citizen,telephone contact information,danger", "the system, display, card, telephone numbers, agencies, safety, citizen", "citizen, screen, advice, standard procedures, categories, call center, contact person, municipal body", "emergency support screen, service, citizen"]}
{"index": 11, "ucName": "CivilProtection", "steps": ["1. The citizen accesses the descriptive sheet about general information about the municipal body in question.", "2. The system responds to the information functionality, allowing the display of a description about the active roles played by the Civil Protection."], "dataset": "eANCI", "act": ["accesses", "responds,allowing"], "obj": ["the citizen, the descriptive sheet, general information, the municipal body", "the system, information functionality, the display, a description, the active roles, the civil protection"]}
{"index": 12, "ucName": "EditCitizen", "steps": ["1. The employee presses the edit citizen button.", "2. The system displays a form for editing the citizen.", "3. The clerk enters the data.", "4. The system saves the changes made."], "dataset": "eANCI", "act": ["presses", "displays", "enters", "saves"], "obj": ["edit citizen button", "form", "data", "changes"]}
{"index": 13, "ucName": "Waste", "steps": ["1. The Citizen accesses the fact sheet because he wants to know the actual waste situation in his municipality, and whether of course, the environment is protected by the Civil Defense with the help of municipal agencies.", "2. The system responds to this need with a large and descriptive screen where the goals of the Municipal Council and informative notes on the dangers of waste fires are pointed out, and what kind of waste collection is in your municipality. In addition, you can view the use case ViewResultsToxicologicalAmbiental i."], "dataset": "eANCI", "act": ["accesses, wants, is protected", "responds,are pointed out,view"], "obj": ["the citizen, the fact sheet, his municipality, the environment, the civil defense, municipal agencies", "the system, municipal council, informative notes, viewresultstoxicologicalambiental"]}
{"index": 14, "ucName": "Hazards", "steps": ["1. The Citizen accesses the screen about the meanings of the hazards Civil Defense deals with, with specific images for each category of hazard, and videos of how it operates during rescue operations.", "2. The system responds to the Citizen's request, with a screen where there are causes, meanings, about landslides, floods, and coastal erosion phenomena, and videos of interventions.", "3. The Citizen, after viewing the descriptive sheet may want to know the causes of other hazards that the body deals with, and therefore decides to view them by activating, the use cases Fire, Volcanic, Seismic, SanitaryAntropic,Hydrological monitoring.", "4. The system also makes available additional fact sheets on other hazards that Civil Defense deals with."], "dataset": "eANCI", "act": ["accesses, deals, operates", "responds", "view, want, know, decides, view, activating", "makes available"], "obj": ["citizen, civil defense", "citizen's request, causes, meanings, landslides, floods, coastal erosion phenomena, videos, interventions", "the citizen, descriptive sheet, causes, other hazards, body, use cases fire, volcanic, seismic, sanitaryantropic, hydrological monitoring", "the system, fact sheets, other hazards, civil defense"]}
{"index": 15, "ucName": "SanitaryAntropic", "steps": ["1. The Citizen accesses the desired screen from the list of environmental hazards that is next to each description of those hazards.", "2. The system responds to the Citizen's request by providing a detailed explanation of what this use case means in practical terms, and distributing advice and standard procedures in case of hazards."], "dataset": "eANCI", "act": ["accesses", "responds,providing,distributing"], "obj": ["the citizen, environmental hazards", "citizen, request, explanation, terms, advice, procedures, case, hazards"]}
{"index": 16, "ucName": "Civil Service", "steps": ["1. The Citizen accesses this section to get information about his or her usefulness to others.", "2. The system responds with a screen display where it clarifies the goals of civil service, general information, and the ability to call the DownloadIscription use case."], "dataset": "eANCI", "act": ["accesses, get", "responds,clarifies,call"], "obj": ["the citizen, information", "screen display, goals of civil service, general information, ability to call the downloadiscription use case"]}
{"index": 17, "ucName": "Seismic", "steps": ["1. The Citizen accesses the descriptive screen of how seismic monitoring of the territory takes place and the possibility of acquiring information about the causes of an earthquake, and the measurement and prevention technologies used by the specialists of the operational core.", "2. The system responds by providing the Citizen with the opportunity to view in an always descriptive manner, the characteristics of the instruments, the work done by the specialists, and the national bodies with which they collaborate."], "dataset": "eANCI", "act": ["accesses,acquiring", "responds,providing,view"], "obj": ["the citizen, descriptive screen, seismic monitoring, territory, information, causes of an earthquake, measurement, prevention technologies, specialists, operational core", "the citizen, instruments, specialists, national bodies"]}
{"index": 18, "ucName": "ViewEnvironmentalToxicologicalResults", "steps": ["1. The Citizen accesses this tab in order to be personally aware of the environmental situation in the municipality in which he or she resides, whether it is being kept under control, and what values are at risk and why this situation exists.", "2. The system responds with a descriptive screen about the toxicological values received from the chemical and toxicological analyses carried out by the Civil Defense on the environment and municipal land."], "dataset": "eANCI", "act": ["accesses, be, is, being kept, are, exists", "responds,carried out"], "obj": ["citizen, tab, municipality", "civil defense, environment, municipal land"]}
{"index": 19, "ucName": "Volunteerism", "steps": ["1. The Citizen accesses the introductory screen.", "2. The system responds by displaying the descriptive tab about general information about this aspect of Civil Defense, and the possibility of knowing the prerequisites for participation.", "3. The Citizen becomes aware of what is written, and therefore selects the link where the use case ComeBecomeVolunteer is called.", "4. The system responds by allowing him to view this description."], "dataset": "eANCI", "act": ["accesses", "responds, displaying, knowing", "becomes aware, selects, is called", "responds, allowing, view"], "obj": ["the citizen, introductory screen", "the system, the descriptive tab, general information, this aspect of civil defense, the possibility, the prerequisites for participation", "the citizen, the use case comebecomevolunteer", "the system, him, this description"]}
{"index": 20, "ucName": "Volcanic", "steps": ["1. The Citizen accesses this tab, from the Risks use case if he wants to know more, about the volcanic situation in his municipality, and the possibility of viewing the Civil Defense monitoring methods.", "2. The system responds with the correct display of a descriptive screen about the different types of eruptions of a volcano, making available, the possibility to view the current volcanic situation of the municipality.", "3. The Citizen wants to know how the present volcanoes are being monitored, and therefore, will invoke the MonitoraggioVulcanico use case", "4. The system provides the Citizen with a link to the MonitoraggioVulcanico use case, so that he or she can learn about the actual situation."], "dataset": "eANCI", "act": ["accesses, wants, know, possibility, viewing", "responds, making", "wants,know,invoke", "provides,learn"], "obj": ["citizen, risks, civil defense, municipality", "system, screen, types, eruptions, volcano, possibility, situation, municipality", "the citizen, present volcanoes, monitoraggiovulcanico use case", "the system, the citizen, the monitoraggiovulcanico use case, the actual situation"]}
{"index": 21, "ucName": "CalculateAmount", "steps": ["1. The Citizen presses the button related to the tax calculation function.", "2. The System presents the list of fees and taxes for which the amount can be calculated.", "3. The Citizen selects the tax of interest.", "4. The System shows a form to be filled in for calculation.", "5. The Citizen enters the necessary data.", "6. The System verifies the correctness of the data, computes the amount and shows it to the Citizen."], "dataset": "eANCI", "act": ["presses", "presents", "selects", "shows,filled", "enters", "verifies, computes, shows"], "obj": ["citizen,button", "the system, list of fees and taxes", "the citizen, tax", "form", "citizen, data", "system, citizen"]}
{"index": 22, "ucName": "CalculateImportUnful", "steps": ["1. The Citizen presses the button related to the tax calculation function.", "2. The System presents the list of taxes and fees for which the amount can be calculated.", "3. The Citizen selects the tax of interest.", "4. The System shows a form to be filled in for calculation.", "5. The Citizen enters the necessary data.", "6. The System verifies the correctness of the data but fails to perform the calculation, notifying the user of the reason for failure."], "dataset": "eANCI", "act": ["presses", "presents", "selects", "shows, filled", "enters", "verifies, fails, notifying"], "obj": ["citizen,button,tax calculation function", "system", "citizen, tax", "a form", "the citizen, the necessary data", "the system, the correctness of the data, the calculation, the user, the reason for failure"]}
{"index": 23, "ucName": "EditEMailAdministrator", "steps": ["1. Administrator accesses the email edit form.", "2. The system shows the form to enter the new e-mail.", "3. The administrator enters the new email and presses the confirmation button.", "4. The system updates the new email."], "dataset": "eANCI", "act": ["accesses", "shows,enter", "enters,presses", "updates"], "obj": ["administrator, email edit form", "form, new e-mail", "administrator, email", "the new email"]}
{"index": 24, "ucName": "Dispute Fine", "steps": ["1. The Citizen clicks on the button to access the online fine management feature.", "2. The System redirects the Citizen to the desired section.", "3. The Citizen clicks on the online fine payment button.", "4. The System searches for fines against the Citizen in the database for which payment has not yet been received.", "5. The Citizen selects the fine for which he/she wishes to make a dispute.", "6. The System displays all available information related to the fine, as well as the form to be filled in for the dispute.", "7. The Citizen enters the necessary information.", "8. The System verifies that the information is correct, forwards the dispute request to the appropriate person and notifies the Citizen."], "dataset": "eANCI", "act": ["clicks,access", "redirects", "clicks, payment", "searches,has been received", "selects, wishes, make", "displays", "enters", "verifies, forwards, notifies"], "obj": ["citizen,button", "system, citizen", "the online fine payment button", "system, fines, citizen, database, payment", "citizen, fine", "system, information, form", "the citizen, information", "system, citizen"]}
{"index": 25, "ucName": "ICI", "steps": ["1. The Citizen clicks on the button to access the Online Tax Payment area.", "2. The System displays the list of taxes that can be paid online.", "3. The Citizen selects the section dedicated to Municipal Property Tax and its payment.", "4. The System redirects the Citizen to the necessary section, showing the form of the relevant tax and the relevant amount to be paid.", "5. The Citizen confirms the correctness of the information and initiates the transaction, selecting the preferred payment method.", "6. The System performs the transaction and displays a successful payment message."], "dataset": "eANCI", "act": ["clicks,access", "displays", "selects", "redirects,showing", "confirms,initiates,selecting", "performs,displays"], "obj": ["citizen,button,online tax payment area", "the list of taxes", "municipal property tax, payment", "system, citizen, section, form, tax, amount", "citizen, information, transaction, payment method", "transaction,successful payment message"]}
{"index": 26, "ucName": "IPPA", "steps": ["1. The Citizen clicks on the button to access the Online Tax Payment area.", "2. The System displays the list of fees that can be paid online.", "3. The Citizen selects the section dedicated to 'Advertising and Public Display Tax and its payment and enters the file code.'", "4. The System redirects the Citizen to the necessary section, showing the form of the relevant tax and the relevant amount to be paid.", "5. The Citizen confirms that the information is correct, selects the preferred payment method and initiates the transaction.", "6. The System performs the transaction and displays a successful payment message."], "dataset": "eANCI", "act": ["clicks,access", "displays", "selects,enters", "redirects,showing", "confirms,selects,initiates", "performs,displays"], "obj": ["citizen,button", "system, list, fees", "citizen, section, advertising and public display tax, payment, file code", "system, citizen, section, form, tax, amount", "citizen,information,payment method,transaction", "system,transaction,successful payment message"]}
{"index": 27, "ucName": "IRPEF", "steps": ["1. The Citizen clicks on the button to access the Online Tax Payment area.", "2. The System displays the list of taxes that can be paid online.", "3. The Citizen selects the section dedicated to Personal Income Tax and its payment.", "4. The System redirects the Citizen to the necessary section, showing the form of the relevant tax and the relevant amount to be paid.", "5. The Citizen confirms the correctness of the information, selects the preferred payment method and initiates the transaction.", "6. The System performs the transaction and displays a successful payment message."], "dataset": "eANCI", "act": ["clicks,access", "displays", "selects", "redirects,showing", "confirms,selects,initiates", "performs,displays"], "obj": ["the citizen, button, online tax payment area", "taxes", "the citizen, personal income tax, payment", "the system, citizen, tax, amount", "the citizen, the information, the preferred payment method, the transaction", "the system, transaction, successful payment message"]}
{"index": 28, "ucName": "Forms", "steps": ["1. The Citizen clicks on the button to access forms section.", "3.", "2. The System redirects the Citizen to the required section and displays the various forms available for download. The Citizen selects the desired form.", "4. The System starts the download."], "dataset": "eANCI", "act": ["clicks,access", [], "redirects,displays,selects", "starts"], "obj": ["the citizen,button,forms section", [], "system, citizen", "download"]}
{"index": 29, "ucName": "PaymentFines", "steps": ["1. The Citizen clicks on the button to access the online fine management feature.", "2. The System redirects the Citizen to the desired section.", "3. The Citizen clicks on the button to pay fines online.", "4. The System searches for fines against the Citizen in the database for which payment has not yet been received.", "5. The Citizen selects the fine for which he/she wishes to make payment.", "6. The System displays the fine form and the relevant amount to be paid.", "7. The Citizen verifies that the information is correct and initiates the transaction, selecting the preferred payment method.", "8. The System performs the transaction and displays a successful payment message."], "dataset": "eANCI", "act": ["clicks,access", "redirects", "clicks, pay", "searches,has received", "selects, wishes, make", "displays", "verifies, initiates, selecting", "performs,displays"], "obj": ["citizen,button", "the system, citizen, section", "citizen", "system, citizen", "citizen, fine, payment", "system, fine form, amount", "citizen, information, transaction, payment method", "the system, transaction, successful payment message"]}
{"index": 30, "ucName": "PaymentUnsuccessful", "steps": ["1. The Citizen clicks on the button to access the Online Payment area of taxes or fines.", "2. The System displays the list of taxes/fines that can be paid online.", "3. The Citizen selects the tax/fine of interest", "4. The System redirects the Citizen to the necessary section, showing the form to the Citizen. The Citizen initiates the transaction.", "5. ", "6. The System does not allow the transaction because there were problems with the selected payment method."], "dataset": "eANCI", "act": ["clicks,access", "displays", "selects", "redirects,showing,initiates", [], "does not allow, were"], "obj": ["the citizen, button, online payment area, taxes, fines", "list of taxes/fines", "the citizen, the tax, fine of interest", "the system, the citizen, the citizen, the transaction", [], "the system, transaction, problems, payment method"]}
{"index": 31, "ucName": "SearchVerbaliMulte", "steps": ["1. The Citizen clicks on the button to access the online fine management feature.", "3.", "2. The System redirects the Citizen to the desired section. The Citizen clicks on the button to search for fines (only charged to him/her).", "4. The System searches for the citizen's charge fines (paid and unpaid) in the database and displays them in a list in which you can browse to show all available information for a given fine."], "dataset": "eANCI", "act": ["clicks,access", [], "redirects,clicks,search", "searches,displays,browse,show"], "obj": ["the citizen, the button, the online fine management feature", [], "system, citizen", "system, citizen's charge fines, database, list, information, fine"]}
{"index": 32, "ucName": "RequestIPPA", "steps": ["1. The Citizen clicks on the button to access the municipality's service request area.", "2. The System redirects the Citizen to the necessary section.", "3. The Citizen selects the section dedicated to the Advertising and Public Display Tax request.", "4. The System displays the form of the relevant request,automatically obtaining the necessary data.", "5. The Citizen enters additional data necessary for correct completion of the form,confirms the correctness of the information and sends the request.", "6. The System notifies the employee of the request."], "dataset": "eANCI", "act": ["clicks, access", "redirects", "selects", "displays,obtaining", "enters,confirms,sends", "notifies"], "obj": ["the citizen,button,municipality's service request area", "the system, citizen", "the citizen, the section", "system, form, request, data", "the citizen,additional data,form,information,request", "system, employee, request"]}
{"index": 33, "ucName": "RequestIPPAAccepted", "steps": ["1.", "3. The Clerk displays the notification received.", "2. The System shows the Clerk the request made by the citizen. The Clerk certifies the validity of the request by checking the accuracy of the data and enables the bureaucratic procedure for requesting the service.", "4. The System sends a confirmation e-mail to the citizen who requested the service."], "dataset": "eANCI", "act": [[], "displays", "shows, certifies, checking, enables", "sends"], "obj": [[], "the clerk, notification", "the system, the clerk, the clerk, the citizen", "the system, confirmation e-mail, the citizen"]}
{"index": 34, "ucName": "EditEMailCitizen", "steps": ["1. Citizen accesses the edit e- mail form.", "3.", "2. The system shows the form the enter the new e-mail. The citizen enters the new email and presses the confirmation button.", "4. The system updates the new e-mail."], "dataset": "eANCI", "act": ["accesses", [], "shows,enters,presses", "updates"], "obj": ["citizen, edit e-mail form", [], "the system, form, new e-mail, citizen, new email, confirmation button", "the system, e-mail"]}
{"index": 35, "ucName": "RequestIPPARified", "steps": ["1.", "3. The Clerk displays the received notification.", "2. The System shows the Clerk the request made by the citizen. The Clerk reveals an error in the request and rejects the procedure the request.", "4. The System sends a notification to the citizen who requested the service."], "dataset": "eANCI", "act": [[], "displays", "shows, reveals, rejects", "sends"], "obj": [[], "notification", "the system, clerk, request, citizen, clerk, request, procedure, request", "system, notification, citizen, service"]}
{"index": 36, "ucName": "RequestTOSAP", "steps": ["1. The Citizen clicks on the button to access the municipality's service request area. \n", "2. The System redirects the Citizen to the necessary section. \n", "3. The Citizen selects the section dedicated to the request for Tax for the Occupation of Public Land and Areas. \n", "4. The System displays the relevant request form,automatically obtaining the necessary data. \n", "5. The Citizen enters additional data necessary for the correct completion of the form,confirms the correctness of the information and sends the request. \n", "6. The System notifies the employee of the request."], "dataset": "eANCI", "act": ["clicks, access", "redirects", "selects", "displays,obtaining", "enters,confirms,sends", "notifies"], "obj": ["citizen, button, municipality's service request area", "the system, the citizen, the necessary section", "the section dedicated to the request for tax for the occupation of public land and areas", "system, request form", "the citizen", "the system, the employee, the request"]}
{"index": 37, "ucName": "RequestTOSAPAccepted", "steps": ["1.", " \n3. The Clerk displays the notification received.", " \n2. The System shows the Clerk the request made by the citizen.", " The Clerk certifies the validity of the request by checking the accuracy of the data and enables the bureaucratic procedure for requesting the service.", " \n4. The System sends a confirmation e-mail to the citizen who requested the service."], "dataset": "eANCI", "act": [[], "displays", "shows, made", "certifies, checking, enables", "sends,requested"], "obj": [[], "clerk, notification", "system, clerk, request, citizen", "clerk,request,data,procedure,service", "system, confirmation e-mail, citizen"]}
{"index": 38, "ucName": "RequestTOSAPRifted", "steps": ["1.", "3. The Clerk displays the received notification.", "2. The System shows the Clerk the request made by the citizen. The Clerk reveals an error in the request and rejects the procedure the request.", "4. The System sends a notification to the citizen who requested the service."], "dataset": "eANCI", "act": [[], "displays", "shows, reveals, rejects", "sends"], "obj": [[], "the clerk, notification", "system, clerk, request, citizen, clerk, error, request, procedure, request", "4, the system, notification, citizen, service"]}
{"index": 39, "ucName": "TIA", "steps": ["1. The Citizen clicks on the button to access the Online Tax Payment area.", "2. The System displays the list of taxes that can be paid online.", "3. The Citizen selects the section dedicated to the Environmental Hygiene Fee and its payment.", "4. The System redirects the Citizen to the necessary section, showing the form of the relevant fee and the relevant amount to be paid.", "5. The Citizen confirms the correctness of the information,selects the preferred payment method and initiates the transaction.", "6. The System performs the transaction and displays a successful payment message."], "dataset": "eANCI", "act": ["clicks,access", "displays", "selects, dedicates", "redirects,showing", "confirms, selects, initiates", "performs,displays"], "obj": ["the citizen, button, online tax payment area", "the system, list of taxes", "the citizen, section, environmental hygiene fee, payment", "system, citizen, section, form, fee, amount", "the correctness of the information, the preferred payment method, the transaction", "the system,transaction,payment message"]}
{"index": 40, "ucName": "TOSAP", "steps": ["1. The Citizen clicks on the button to access the Online Tax Payment area.", "2. The System displays the list of taxes that can be paid online.", "3. The Citizen selects the section dedicated to the Tax for the Occupation of Public Land and Areas and its payment and enters the file code.", "4. The System redirects the Citizen to the necessary section, showing the form of the relevant fee and the relevant amount to be paid.", "5. The Citizen confirms that the information is correct, selects the preferred payment method and initiates the transaction.", "6. The System performs the transaction and displays a successful payment message."], "dataset": "eANCI", "act": ["clicks,access", "displays", "selects, enters", "redirects,showing", "confirms,selects,initiates", "performs,displays"], "obj": ["the citizen, button, online tax payment area", "the system, list of taxes", "the citizen, the section, the tax for the occupation of public land and areas, the file code", "the system, the citizen, section, form, fee, amount", "citizen,information,preferred payment method,transaction", "system, transaction, message"]}
{"index": 41, "ucName": "Forms", "steps": ["1. The Citizen clicks on the button to access forms section.", "3.", "2. The System redirects the Citizen to the required section and displays the various forms available for download. The Citizen selects the desired form.", "4. The System starts the download."], "dataset": "eANCI", "act": ["clicks,access", [], "redirects,displays,selects", "starts"], "obj": ["the citizen,button,forms section", [], "system, citizen, citizen", "the download"]}
{"index": 42, "ucName": "ConsultationHelpOn-Line", "steps": ["1. The Citizen enters the dedicated online help section.", "2. The system presents a screen containing the list of features.", "3. The Citizen accesses the help information by clicking on the link related to the functionality he/she wants to receive.", "4. The system presents the help information, explaining the methods and actions to be performed for the specific functionality."], "dataset": "eANCI", "act": ["enters", "presents,containing", "accesses,clicking,wants,receive", "presents,explaining"], "obj": ["the citizen,online help section", "a screen, the list of features", "the citizen, help information, link, functionality", "system, help information, methods, actions, functionality"]}
{"index": 43, "ucName": "DataErrati", "steps": ["1. System displays a message to the terminal screen indicating that the request entered was incorrect.", "2. Citizen reads the notification message.", "3. The system resubmits the input form."], "dataset": "eANCI", "act": ["displays,indicating", "reads", "resubmits"], "obj": ["system, message, terminal screen, request", "notification message", "input form"]}
{"index": 44, "ucName": "ServiceNotAvailable", "steps": ["1. System displays a message on the terminal screen indicating that the request cannot be made.", "2. Citizen reads the notification message.", "3. The system resubmits the input form."], "dataset": "eANCI", "act": ["displays,indicating", "reads", "resubmits"], "obj": ["message,terminal screen,request", "notification message", "the system, input form"]}
{"index": 45, "ucName": "EditEMailEmployee", "steps": ["1. The employee accesses the edit e-mail form.", "2. The system shows the form for the entry of the new e-mail.", "3. The employee enters the new email and presses the confirmation button.", "4. The system updates the new email."], "dataset": "eANCI", "act": ["accesses", "shows", "enters,presses", "updates"], "obj": ["edit e-mail form", "system, form, entry, e-mail", "new email, confirmation button", "system, email"]}
{"index": 46, "ucName": "EditEmployee", "steps": ["1. The administrator presses the EditEmployee button.", "2. The system displays a form for editing the employee.", "3. The administrator enters the data.", "4. The system saves the changes made."], "dataset": "eANCI", "act": ["presses", "displays", "enters", "saves"], "obj": ["administrator,editemployee button", "form, employee", "the data", "the changes made"]}
{"index": 47, "ucName": "ChangePasswordAdministrator", "steps": ["1. The administrator wants to change the password and presses the change password button.", "2. The system displays the form for entering the old password.", "3. The administrator enters the old password, the new password and presses the confirm button.", "4. The system notifies that the password has been changed."], "dataset": "eANCI", "act": ["wants, change, presses", "displays,entering", "enters,presses", "notifies,has been changed"], "obj": ["administrator, password, change password button", "form,old password", "the administrator, old password, new password, confirm button", "password"]}
{"index": 48, "ucName": "ChangePasswordCitizen", "steps": ["1. The citizen wants to change the password and presses the change password button.", "2. The system displays the form for entering the old password and the new one.", "3. The citizen enters the old password, the new password and presses the confirm button.", "4. The system notifies that the password has been changed."], "dataset": "eANCI", "act": ["wants, change, presses", "displays", "enters,presses", "notifies,has been changed"], "obj": ["the citizen, password, change password button", "the form", "citizen,old password,new password,confirm button", "password"]}
{"index": 49, "ucName": "ChangePasswordEmployee", "steps": ["1. The employee wants to change the password and presses the change password button.", "2. The system displays the form for entering the old password and the new one.", "3. The employee enters the old password, the new password and presses the confirm button.", "4. The system notifies that the password has been changed."], "dataset": "eANCI", "act": ["wants, change, presses", "displays,entering", "enters,presses", "notifies,has been changed"], "obj": ["employee, password, change password button", "the system, the form, the old password, the new one", "employee,old password,new password,confirm button", "the password"]}
{"index": 50, "ucName": "RecoverPasswordCitizen", "steps": ["1. Citizen has forgotten his password and presses on the Recover Password button.", "2. The system displays the password recovery screen that requires entering the user name and ID card code.", "3. The citizen enters his/her data and presses the confirmation button.", "4. The system verifies the correctness of the data and sends the password to the citizen's email address."], "dataset": "eANCI", "act": ["has forgotten, presses", "displays,requires,entering", "enters,presses", "verifies,sends"], "obj": ["citizen, password, recover password button", "password recovery screen, user name, id card code", "citizen, data, confirmation button", "system, correctness, data, password, citizen's email address"]}
{"index": 51, "ucName": "AuthenticationCitizen", "steps": ["1. Citizen logs in to authentication session.", "2. The system displays the login form for entering data (username and password).", "3. The citizen enters the data and submits the authentication request.", "4. The system verifies the accuracy of the data and grants access to the citizen."], "dataset": "eANCI", "act": ["logs, is", "displays", "enters,submits", "verifies,grants"], "obj": ["citizen,authentication session", "system, login form, data, username, password", "the citizen, the data, the authentication request", "the system, the accuracy, the data, the citizen"]}
{"index": 52, "ucName": "RecoverPasswordAdministrator", "steps": ["1. The administrator has forgotten the password and presses the password recovery button.", "2. The system shows the form for entering the freshman.", "3. The administrator enters his/her matriculation number and presses the confirmation button.", "4. The system verifies the data and sends the password to the administrator's email address."], "dataset": "eANCI", "act": ["has forgotten,presses", "shows", "enters,presses", "verifies, sends"], "obj": ["administrator, password", "the system, the form, the freshman", "administrator,matriculation number,confirmation button", "system, data, password, administrator's email address"]}
{"index": 53, "ucName": "PasswordRecoveryEmployee", "steps": ["1. The employee has forgotten his password and presses the password recovery button.", "2. The system shows the form for entering the matriculation number.", "3. The employee enters his/her matriculation number and presses the confirmation button.", "4. The system verifies the data and sends the password to the employee's email address."], "dataset": "eANCI", "act": ["has forgotten,presses", "shows,entering", "enters,presses", "verifies,sends"], "obj": ["employee, password, password recovery button", "matriculation number", "matriculation number, confirmation button", "the system, the data, the password, the employee's email address"]}
{"index": 54, "ucName": "RegistrationCitizen", "steps": ["1. Citizen accesses the registration form.", "2. The system displays the registration form.", "3. The citizen enters his/her data and presses the confirmation button.", "4. The system checks the data for correctness, saves it and sends an e-mail of successful registration to the citizen."], "dataset": "eANCI", "act": ["accesses", "displays", "enters,presses", "checks, saves, sends"], "obj": ["registration form", "registration form", "the citizen, his/her data, confirmation button", "the system, the data, an e-mail, the citizen"]}
{"index": 55, "ucName": "RegistrationCitizen", "steps": ["1. Citizen accesses the registration form.", "2. The system displays the registration form.", "3. The citizen enters his/her data and presses the confirmation button.", "4. The system checks the data for correctness, saves it and sends an e-mail of successful registration to the citizen."], "dataset": "eANCI", "act": ["accesses", "displays", "enters,presses", "checks, saves, sends"], "obj": ["registration form", "registration form", "the citizen, data, confirmation button", "the system, the data, an e-mail, the citizen"]}
{"index": 56, "ucName": "Employee Search", "steps": ["1. The administrator presses on the Employee Search button.", "3.", "2. The system displays the form to search for an employee. The administrator performs a search using the employee's data.", "4. The system returns the data of the searched employee."], "dataset": "eANCI", "act": ["presses", [], "displays,performs", "returns"], "obj": ["administrator,employee search button", [], "system, form, employee, administrator, search, data", "data,employee"]}
{"index": 57, "ucName": "ChangeOfResidence", "steps": ["1. ", "3. ", "5. ", "6. ", "7. The Citizen presses on the Change of Residence button. ", "2. The system shows the citizen the form to fill out. The citizen enters the data of his new residence. ", "4. The system notifies the citizen that the request has been successfully submitted and is stored in the system. The clerk logs into the system and views the request received. The clerk verifies the data, fills in the document with the rest of the data to be entered, and confirms the operation. The system saves the form and updates the data."], "dataset": "eANCI", "act": [[], [], [], [], "presses", "shows, enters", "notifies, logs, views, verifies, fills, confirms, saves, updates"], "obj": [[], [], [], [], "the citizen, the change of residence button", "the system, the citizen, the form, the citizen, the data, his new residence", "system, citizen, clerk"]}
{"index": 58, "ucName": "ChangeOfResidenceOtherCommunity", "steps": ["1.", "3.", "5.", "6.", "7.", "8.", "9. The Citizen presses on the Change of Residence button.", "2. The system shows the citizen the form to fill out. The citizen enters the data of his new residence.", "4. The system notifies the citizen that the request has been successfully submitted and the request is stored. The clerk logs into the system and views the request received. The clerk verifies the data, fills in the document with the rest of the data to be entered, and confirms the operation. The system saves the form and updates the data. The clerk sends a document with the request made by the citizen to the clerk of the other municipality. The clerk of the other municipality verifies the document and sends a positive notification to the other clerk and a notification to the citizen."], "dataset": "eANCI", "act": [[], [], [], [], [], [], "presses", "shows, enters", "notifies, logs, views, verifies, fills, confirms, saves, updates, sends, verifies, sends"], "obj": [[], [], [], [], [], [], "citizen, change of residence button", "the system, the citizen, the form, the citizen, the data, his new residence", "system, citizen, request, clerk, document, municipality, notification"]}
{"index": 59, "ucName": "ChangeFamilyState", "steps": ["1.", "3. The Citizen presses on the Change Family Status button.", "2. The system shows the citizen the form to fill out. The citizen enters the data of the new household and submits the request.", "4. The system sends the request to the appropriate clerk."], "dataset": "eANCI", "act": [[], "presses on", "shows, fills out, enters, submits", "sends"], "obj": [[], "the citizen,change family status button", "the system, the citizen, the form, the citizen, the data, the new household, the request", "request, clerk"]}
{"index": 60, "ucName": "DeletePractice", "steps": ["1.", "3. The citizen presses the delete practice button (ID Card, Change of Residence) if the practice has not been initialized.", "2. The system asks the citizen for confirmation. The citizen confirms the operation.", "4. The system deletes the practice."], "dataset": "eANCI", "act": [[], "presses,initializes", "asks,confirms", "deletes"], "obj": [[], "citizen, delete practice button, id card, change of residence, practice", "system, citizen, operation", "the practice"]}
{"index": 61, "ucName": "EditPractice", "steps": ["1. The citizen presses the practice edit button (ID Card, Change of Residence) if the practice has not been initialized.", "3.", "2. The system displays a form for editing the practice. The citizen enters the data.", "4. The system saves the changes made."], "dataset": "eANCI", "act": ["presses,edit,has,been,initialized", [], "displays,enters", "saves"], "obj": ["the citizen, the practice edit button, the practice", [], "system, form, practice, citizen, data", "the system, the changes"]}
{"index": 62, "ucName": "AuthenticationEmployee", "steps": ["1. Employee logs in to authentication session.", "2. The system displays the login form for entering data (username and password).", "3. The employee enters data and submits the authentication request.", "4. The system verifies the accuracy of the data and allows the employee to log in."], "dataset": "eANCI", "act": ["logs in,authentication session", "displays", "enters,submits", "verifies,allows"], "obj": ["employee,authentication session", "system, login form, data, username, password", "data,authentication request", "the system, the accuracy, the data, the employee"]}
{"index": 63, "ucName": "RequestCartaDiDentity", "steps": ["1. The Citizen displays the family status and selects a family member.", "2. The system displays a form for entering personal data(Height, special marks, etc.)", "3. The Citizen enters the data, selects the payment method and presses the confirm button.", "4. The system shows the screen with documentation to be shown at the counter on the days and hours the office is open.", "5. The citizen confirms the transaction.", "6. The system notifies the clerk of the request."], "dataset": "eANCI", "act": ["displays, selects", "displays,entering", "enters,selects,presses", "shows,be shown", "confirms", "notifies"], "obj": ["the citizen, family member", "form, personal data", "citizen, data, payment method, confirm button", "system, screen, documentation, counter, days, hours, office", "transaction", "clerk,request"]}
{"index": 64, "ucName": "RequestAcceptedIdentityCard", "steps": ["1.", "3.", "5. The clerk displays the notification received.", "2. The system shows the clerk the citizen's request for the creation of the identity card. The clerk certifies the validity of the request by checking the accuracy of the data and enables the ID card creation procedure.", "4. The system sends a confirmation e-mail to the citizen who requested the creation of the ID card. The citizen goes to the counter."], "dataset": "eANCI", "act": [[], [], "displays,received", "shows, certifies, checking, enables", "sends,goes"], "obj": [[], [], "clerk,notification", "the system, the clerk, the citizen, the identity card, the request, the data, the id card creation procedure", "system, confirmation e-mail, citizen, id card, citizen, counter"]}
{"index": 65, "ucName": "RequestRejectedIdentityCard", "steps": ["1.", "3. The clerk displays the notification received.", "2. The system shows the clerk the citizen's request to create an identity card. The clerk detects an error in the data and rejects the ID card creation procedure.", "4. The system sends an e-mail notification to the citizen who requested the ID card creation."], "dataset": "eANCI", "act": [[], "displays", "shows,detects,rejects", "sends,requested"], "obj": [[], "clerk,notification", "system, clerk, citizen, request, id card creation procedure", "e-mail notification, citizen, id card creation"]}
{"index": 66, "ucName": "RequestCertificates", "steps": ["1. The citizen selects a specific certificate(birth certificates, marital status certificates).", "2. The system displays the form for entering the data of the person concerned.", "3. The citizen enters the data of the person concerned.", "4. The system displays a screen with the requested certificate.", "5. The citizen selects the payment and shipping method.", "6. The system sends the certificate."], "dataset": "eANCI", "act": ["selects", "displays,entering", "enters", "displays", "selects", "sends"], "obj": ["certificate, birth certificates, marital status certificates", "the system, the form, the data, the person concerned", "citizen, data, person", "screen,certificate", "payment, shipping method", "certificate"]}
{"index": 67, "ucName": "RequestCertificatesThirds", "steps": ["1. The citizen selects a specific certificate(birth certificates, marital status certificates).", "2. The system displays the form for entering the data of the person concerned.", "3. The citizen enters the data of the person concerned (see note).", "4. The system stores the data of the citizen and interested person in a special form", "5. The system shows a screen with the requested certificate.", "6. The citizen selects the mode of payment and shipping.", "7. The system sends the certificate."], "dataset": "eANCI", "act": ["selects", "displays,entering", "enters", "stores", "shows", "selects", "sends"], "obj": ["certificate, birth certificates, marital status certificates", "the system, the form, the data, the person concerned", "citizen, data, person", "system, data, citizen, person, form", "screen,certificate", "citizen,mode of payment,shipping", "certificate"]}
{"index": 68, "ucName": "RequestToMarry", "steps": ["1. The Citizen presses on the RequestToMarry button.", "2. The system shows the citizen the form to fill out.", "3. The citizen enters all his/her data, the partner's data and presses the confirmation button.", "4. The system automatically creates the form to be submitted with self-certification and family status of the applicant citizen and sends the form to the clerk.", "5. The clerk receives the notification and publishes the marriage application."], "dataset": "eANCI", "act": ["presses", "shows,fill out", "enters,presses", "creates,submits,sends", "receives, publishes"], "obj": ["citizen, requesttomarry button", "system, citizen, form", "citizen,his/her data,partner's data,confirmation button", "the system, the form, self-certification, family status, the applicant citizen, the form, the clerk", "the clerk, the notification, the marriage application"]}
{"index": 69, "ucName": "RequestStateOfFamily", "steps": ["1. The Citizen presses on the Family Status button.", "3.", "2. The system displays the Family Status to the citizen. The citizen chooses whether to print or send the family status to his/her e-mail.", "4. The system executes the choice made by the citizen."], "dataset": "eANCI", "act": ["presses", [], "displays,chooses,print,send", "executes"], "obj": ["citizen, family status button", [], "system, family status, citizen, citizen, family status, e-mail", "the system, the choice, the citizen"]}
{"index": 70, "ucName": "IdentityCardRenewal", "steps": ["1. The Citizen presses on the Identity Card Renewal button.", "2. The system directly sends a renewal request from the citizen to the appropriate clerk.", "3. The citizen goes to the counter to renew the ID card."], "dataset": "eANCI", "act": ["presses,presses", "sends", "goes,renew"], "obj": ["the citizen, identity card renewal button", "renewal request, citizen, clerk", "citizen, counter, id card"]}
{"index": 71, "ucName": "LoseIdentityCard", "steps": ["1. The Citizen presses on the LoseIdentityCard button.", "2. The system directly sends a lost card notification to the appropriate clerk.", "3. The Citizen goes to the clerk's office with a copy of the loss report."], "dataset": "eANCI", "act": ["presses", "sends", "goes,output"], "obj": ["citizen, loseidentitycard", "lost card notification, appropriate clerk", "the citizen, the clerk's office, the loss report"]}
{"index": 72, "ucName": "LostElectoralCard", "steps": ["1. The Citizen presses on the Lost Electoral Card button.", "2. The system directly sends a lost card notification to the appropriate clerk.", "3. The Citizen goes to the clerk's office with a copy of the lost card report."], "dataset": "eANCI", "act": ["presses", "sends", "goes"], "obj": ["lost electoral card button", "system, lost card notification, clerk", "citizen, clerk's office, lost card report"]}
{"index": 73, "ucName": "CancellationCitizen", "steps": ["1.", "3. The clerk presses the delete-citizen button.", "2. The system asks the clerk for confirmation. The clerk confirms the operation.", "4. The system deletes the citizen."], "dataset": "eANCI", "act": [[], "presses", "asks,confirms", "deletes"], "obj": [[], "clerk, delete-citizen button", "system, clerk, confirmation, clerk, operation", "citizen"]}
{"index": 74, "ucName": "ElectoralCardRequest", "steps": ["1. The Citizen presses on the Electoral Card button.", "2. The system displays the card request form.", "3. Citizen confirms the operation", "4. The system sends a notification to the clerk.", "5. The citizen will receive the voter card, which will be delivered to his/her home."], "dataset": "eANCI", "act": ["presses", "displays", "confirms", "sends", "receive,be delivered"], "obj": ["citizen,electoral card button", "card request form", "citizen,operation", "notification, clerk", "citizen, voter card, home"]}
{"index": 75, "ucName": "ViewPractice", "steps": ["1. Citizen clicks on the button view practices(ID Card, Change of Residence).", "2. The system displays a screen with the practices that concern the citizen."], "dataset": "eANCI", "act": ["clicks,view", "displays"], "obj": ["citizen, button, view practices, id card, change of residence", "screen, practices, citizen"]}
{"index": 76, "ucName": "Practice Accepted", "steps": ["1. The Clerk accepts the file.", "2. The system sets the practice as accepted. It then sends a notification to the Citizen."], "dataset": "eANCI", "act": ["accepts", "sets,sends"], "obj": ["the clerk, the file", "system, practice, notification, citizen"]}
{"index": 77, "ucName": "PracticeRejected", "steps": ["1. The Clerk rejects the file.", "2. The system sets the practice as rejected. It then sends a notification to the Citizen."], "dataset": "eANCI", "act": ["rejects", "sets, sends"], "obj": ["clerk, file", "the system, the practice, a notification, the citizen"]}
{"index": 78, "ucName": "ViewPracticesAwaitingEmployee", "steps": ["1. Employee selects 'View Requests on Hold'.", " \n2. The System shows the list of pending practices."], "dataset": "eANCI", "act": ["selects", "shows"], "obj": ["employee,view requests on hold", "system, list of pending practices"]}
{"index": 79, "ucName": "Night Reception", "steps": ["1. The user selects the Social Assistance feature by selecting 'Night Reception Request'.", " \n2. The system displays the form for entering the applicant and recipient data.", " \n3. The user enters his/her own data and if necessary enters the data of a third person specifying the relationship with that person. He also specifies an alternative home or address and a possible date of appointment with social workers. He then submits the form.", " \n4. The system picks up the master data of the requesting citizen and the receiving citizen (if different from the requestor), and data regarding the receiving Citizen's household.", " The request is sent to the Social Services office and the user is notified of the submission."], "dataset": "eANCI", "act": ["selects", "displays,entering", "enters, enters, specifying, specifies, submits", "picks up", "is sent, is notified"], "obj": ["user, social assistance feature, night reception request", "the system, the form, the applicant, the recipient data", "user, data, third person, relationship, home or address, date of appointment, social workers, form", "system, master data, requesting citizen, receiving citizen, requestor, receiving citizen's household", "social services office, user"]}
{"index": 80, "ucName": "Sickness Allowance", "steps": ["1. User selects 'Request Sickness Allowance'.", " \n2. The system displays the page with the information for requesting the INPS office for the sickness allowance, also allowing the user to print it out."], "dataset": "eANCI", "act": ["selects", "displays, allowing, print"], "obj": ["user, request sickness allowance", "the system, the page, the information, the inps office, the sickness allowance, the user"]}
{"index": 81, "ucName": "Housing Assistance", "steps": ["1. The user selects the Social Assistance feature by selecting 'Housing Assistance Request (Evictions)'.", " \n2. The system displays the form for entering the applicant's and recipient's data (if different).", " \n3. The user enters his/her own data and those of the recipient (if the recipient is a third person)if necessary specifying the relationship with that person, also specifies the new domicile.", " The user selects the attached documentation (minutes of enforceable eviction, the new registered lease and the ISEE model). He/she then submits the form.", " \n4. The system retrieves the master data of the recipient citizen, and data regarding the recipient Citizen's household.", " The request is sent to the Social Services office and the user is notified of the submission."], "dataset": "eANCI", "act": ["selects", "displays,entering", "enters, specifying, specifies", "selects,submits", "retrieves", "is sent, is notified"], "obj": ["user, social assistance feature, housing assistance request (evictions", "form", "user, his/her own data, recipient, person, domicile", "the attached documentation, minutes of enforceable eviction, the new registered lease, the isee model, the form", "system, master data, recipient citizen, data, recipient citizen's household", "social services office, user"]}
{"index": 82, "ucName": "Home careDomestic assistance", "steps": ["1. User selects 'Request home care elderly, minors, disabled.'", " \n2. The system displays the form for entering the applicant and recipient data.", " \n3. The user enters the master data of the applicant and if necessary enters the data of a third person specifying the relationship with that person.", " \n4. The system retrieves the data of the applicant citizen , the master data of the recipient citizen (in case the applicant and the recipient were not the same person), and the data concerning the household of the recipient Citizen.", " \n5. The user specifies the psycho-physical conditions of the recipient specifying the attached documents (disability certificate issued by the ASL commission and/or health card of the attending physician and/or certificate of the pension provider,ISEE model) finally specifying a possible date of appointment with social workers. Then submit the form.", " \n6. The system picks up data regarding any social welfare services the recipient already uses.", " It then forwards the request to the Social Services office and notifies the Citizen that the request has been made."], "dataset": "eANCI", "act": ["selects", "displays,entering", "enters,enters", "retrieves", "specifies, specifying, specifying, submit", "picks up", "forwards, notifies"], "obj": ["request home care elderly, minors, disabled", "form,applicant,recipient,data", "user, master data, applicant, third person, person", "system,data,applicant,citizen,master,data,recipient,citizen,applicant,recipient,person,data,household,recipient,citizen", "user, recipient, asl commission, health card, attending physician, pension provider, isee model, social workers", "system, data, social welfare services, recipient", "social services office, citizen"]}
{"index": 83, "ucName": "Economic Assistance", "steps": ["1. User selects 'Request economic assistance elderly, minor orphans, AIDS patients, prisoners, adults in need.'", " \n2. The system displays the form for entering the data of the applicant and the recipient.", " \n3. The user enters his/her own data and if necessary enters the data of a third person specifying the relationship with that person.", " \n4. The system retrieves the data of the applicant citizen , the master data of the recipient citizen (in case the applicant and the recipient were not the same person), and the data regarding the household of the recipient Citizen.", " \n5. The user specifies the psycho-physical conditions of the recipient specifying the attached documents (disability certificate issued by the ASL commission and/or health card of the attending physician and/or certificate of the pension provider,ISEE model) finally specifying a possible date of appointment with social workers. Then submit the form.", " \n6. The system picks up data regarding any social welfare services the recipient already uses.", " It then forwards the request to the Social Services office and notifies the user that the request has been made."], "dataset": "eANCI", "act": ["selects", "displays", "enters,enters,specifying", "retrieves", "specifies, specifying, specifying, submit", "picks up, uses", "forwards,notifies"], "obj": ["economic assistance, elderly, minor orphans, aids patients, prisoners, adults in need", "the system, the form, the data, the applicant, the recipient", "user, data, person, relationship", "system, data, applicant citizen, master data, recipient citizen, applicant, recipient, person, data, household, recipient citizen", "user, recipient, attached documents, disability certificate, asl commission, health card, attending physician, certificate of the pension provider, isee model, date of appointment, social workers, form", "data, social welfare services, recipient", "social services office, user, request"]}
{"index": 84, "ucName": "DeleteEmployee", "steps": ["1. The administrator presses the delete employee button.", " \n2. The system asks the administrator for confirmation.", " \n3. The administrator confirms the operation.", " \n4. The system deletes the 'employee."], "dataset": "eANCI", "act": ["presses", "asks, confirmation", "confirms", "deletes"], "obj": ["administrator,delete employee button", "administrator", "the administrator, the operation", "employee"]}
{"index": 85, "ucName": "AssistanceGirlsMothersMinors", "steps": ["1. The user selects the Social Assistance feature by selecting 'Request for Assistance to GirlsMothers and Minors in Difficulty'.", " \n2. The system displays the form for entering the applicant's and recipient's data.", " \n3. The user enters his/her own data and those of the recipient of the request (himself/herself, other person) if necessary specifying the relationship with that person. He/she also specifies a possible appointment date with Social Workers. He/she then submits the form.", " \n4. The system retrieves from the system the master data of the recipient citizen, and data regarding the household of the recipient Citizen.", " The request is sent to the Social Services office and the user is notified of the submission."], "dataset": "eANCI", "act": ["selects,selecting", "displays,entering", "enters, specifying, specifies, submits", "retrieves", "is sent, is notified"], "obj": ["social assistance, request for assistance to girlsmothers and minors in difficulty", "the system, the form, the applicant's data, the recipient's data", "the user, the recipient, social workers, the form", "master data, recipient citizen, data, household, recipient citizen", "social services office, user"]}
{"index": 86, "ucName": "ResidentialResidential care", "steps": ["1. User selects 'Request residential and semi-residential care.'", " \n2. The system displays the form for entering the applicant's and recipient's data.", " \n3. The user enters his/her own data and if necessary enters the data of a third person specifying the relationship with that person.", " \n4. The system retrieves the master data of the applicant, the recipient citizen (if the recipient is a third person), and data regarding the household of the recipient Citizen.", " \n5. The user specifies the recipient's psycho-physical condition, the reason for the request, the type of service requested, and the hours required. He/she then submits the form.", " \n6. The system forwards the request to the appropriate ASL and notifies the user that the request has been made."], "dataset": "eANCI", "act": ["selects", "displays,entering", "enters,enters,specifying", "retrieves", "specifies,submits", "forwards, notifies"], "obj": ["user, request residential and semi-residential care", "applicant,recipient", "user, data, third person, relationship", "master data, applicant, recipient citizen, recipient, third person, household, recipient citizen", "user, recipient's psycho-physical condition, reason for the request, type of service requested, hours required, form", "the system, the request, the appropriate asl, the user, the request"]}
{"index": 87, "ucName": "Usury Victims Funds", "steps": ["1. The user selects the feature 'Application for Solidarity Fund Allocation for Victims of Usury and Extortion.'", " \n2. The system displays the information and related forms to be downloaded and sent to the Prefecture, offering in addition the possibility to print it out."], "dataset": "eANCI", "act": ["selects", "displays,be downloaded,sent,offering,print"], "obj": ["user, feature, application for solidarity fund allocation for victims of usury and extortion", "information,forms,prefecture"]}
{"index": 88, "ucName": "IndemnityAccompaniment", "steps": ["1. User selects 'Request Accompaniment Allowance'. ", "\n2. The system displays the information about the disability pension and shows the link to download the relevant form to send to INPS, providing the option to print it out.", " It also shows direct links to the request for family status and marital status."], "dataset": "eANCI", "act": ["selects", "displays, shows, providing", "shows"], "obj": ["user, request accompaniment allowance", "disability pension, inps", "family status, marital status"]}
{"index": 89, "ucName": "ShowPracticeAttendedEmployee", "steps": ["1. The system displays information regarding the selected practice with its practice acceptance or practice rejection options.", " \n2. The Clerk can Accept or Reject the practice if it is already complete with all the documentation, necessary signatures and after verifying it. He/she can also print the practice data if necessary."], "dataset": "eANCI", "act": ["displays,regarding", "accept, reject, complete, verifying, print"], "obj": ["system, information, practice, practice acceptance, practice rejection options", "clerk, accept, reject, practice, documentation, signatures, data"]}
{"index": 90, "ucName": "PlanZoneAssistance", "steps": ["1. The user remotely selects the Social Assistance feature by selecting 'Zone Plan: assistance services'.", " \n2. The system displays the zone plan regarding assistance services."], "dataset": "eANCI", "act": ["remotely selects, selecting", "displays"], "obj": ["zone plan: assistance services", "system, zone plan, assistance services"]}
{"index": 91, "ucName": "War veteran qualification", "steps": ["1. The user selects the 'Request for Recognition of Qualification as a veteran or orphan of labor' feature.", " \n2. The system shows the information and related forms to be downloaded and sent to the Prefecture,offering the option to print it out.", " It also shows a direct link to the page for requesting the Birth Certificate, Residence Certificate and Death Certificate."], "dataset": "eANCI", "act": ["selects", "shows,be downloaded,sent,offering,print", "shows"], "obj": ["request for recognition of qualification as a veteran or orphan of labor", "information, forms", "birth certificate,residence certificate,death certificate"]}
{"index": 92, "ucName": "DisabledParkingRelease", "steps": ["1. The user selects the Social Assistance feature by selecting 'Disabled Parking Release.'", " \n2. The system displays the form for entering applicant and recipient data (if different).", " \n3. The user enters the master data of the applicant and those of the recipient (if different) if necessary specifying the relationship to that person.", " Also specified is the type of documentation attached to the traffic police command (medical-legal certificate issued by the ASL commission).", " It then submits the form.", " \n4. The system picks up the master data of the recipient citizen.", " The request is sent to the traffic police command and the user is notified of the submission."], "dataset": "eANCI", "act": ["selects,selecting", "displays, entering", "enters, specifying", "specified,attached,issued", "submits", "picks up", "is sent, is notified"], "obj": ["user, social assistance, disabled parking release", "system, form, applicant, recipient, data", "user, master data, applicant, recipient, relationship, person", "traffic police command, medical-legal certificate, asl commission", "the form", "system, master data, recipient citizen", "the traffic police command, the user"]}
{"index": 93, "ucName": "DisabledMobilityService", "steps": ["1. User selects 'Disabled Mobility and Transportation Service.'", " \n2. The system displays the form for entering applicant and recipient data.", " \n3. The user enters his/her own data and if necessary enters the data of a third person specifying the relationship with that person.", " \n4. The system picks up the data of the applicant citizen , the master data of the recipient citizen (in case the applicant and recipient were not the same person), and the data regarding the household of the recipient Citizen.", " \n5. The user specifies the psycho-physical conditions of the recipient specifying the attached documents (disability certificate issued by the ASL commission and/or health card of the attending physician and/or certificate of the pension provider,ISEE model) finally specifying a possible date of appointment with the social workers. Then submit the form.", " \n6. The system picks up data regarding any social welfare services the recipient already uses.", " It then forwards the request to the Social Services office and notifies the user that the request has been made."], "dataset": "eANCI", "act": ["selects", "displays, entering", "enters, enters, specifying", "picks up", "specifies, specifying, specifying, submit", "picks up", "forwards,notifies"], "obj": ["user, disabled mobility and transportation service", "form,applicant,recipient data", "user, data, person, relationship", "system, data, applicant, citizen, master data, recipient, household, recipient citizen", "user, psycho-physical conditions, recipient, attached documents, disability certificate, asl commission, health card, attending physician, certificate of the pension provider, isee model, date of appointment, social workers, form", "data, social welfare services, recipient", "social services office, user"]}
{"index": 94, "ucName": "UnsubscribeNewsInformagiovani", "steps": ["1. Citizen requests unsubscription from advertisement service related to informagiovani news.", "2. The system displays a form to confirm the request.", "3. The citizen confirms the unsubscribe operation.", "4. The system deletes the citizen from the advertisement service."], "dataset": "eANCI", "act": ["requests,unsubscription", "displays,confirm", "confirms,unsubscribe", "deletes"], "obj": ["citizen, unsubscription, advertisement service, informagiovani news", "system, form", "citizen,unsubscribe operation", "system, citizen, advertisement service"]}
{"index": 95, "ucName": "EnterCitizen", "steps": ["1. The clerk logs into the system, and activates the citizen registration procedure.", "2. The system displays the form for entering a new citizen.", "3. The clerk enters the citizen's data and submits the registration request.", "4. The system receives the form, checks that the citizen entered by the clerk is not already in the system."], "dataset": "eANCI", "act": ["logs, activates", "displays", "enters,submits", "receives,checks,entered"], "obj": ["clerk, system, citizen registration procedure", "the system, the form, a new citizen", "clerk, citizen's data, registration request", "the system, the form, the citizen, the clerk, the system"]}
{"index": 96, "ucName": "CancellationCardGiovani", "steps": ["1. Citizen requests cancellation of CardGiovani.", "2. The system displays a form for entering the Card number.", "3. The citizen enters the number.", "4. The system verifies the existence of the card and the citizen's membership.", "5. The system displays a form for confirming the request.", "6. The citizen confirms the deletion of the card.", "7. The system deletes the youth card from the repository."], "dataset": "eANCI", "act": ["requests", "displays", "enters", "verifies", "displays", "confirms, deletion", "deletes"], "obj": ["citizen,cardgiovani", "card number", "the number", "the card, the citizen's membership", "form", "citizen,card", "youth card, repository"]}
{"index": 97, "ucName": "CardCanceled", "steps": ["1. Citizen decides he wants to cancel the youth card and then enters in the form that he wants to cancel it.", "2. The system receives the form notifies that the card has been cancelled and resubmits the form."], "dataset": "eANCI", "act": ["decides,enters,wants,cancel,wants,cancel", "receives,notifies,resubmits"], "obj": ["citizen, youth card", "the system, the form, the card, the form"]}
{"index": 98, "ucName": "EliminationConsultationReservation", "steps": ["1. Citizen requests cancellation of interview reservation in the counseling center.", "2. The system displays a form to confirm the request.", "3. The citizen confirms the deletion of the reservation.", "4. Thesystemeliminatesreservation."], "dataset": "eANCI", "act": ["requests, cancellation", "displays,confirm", "confirms, deletion", "eliminates"], "obj": ["citizen, interview reservation, counseling center", "a form", "citizen, reservation", "thesystemeliminatesreservation"]}
{"index": 99, "ucName": "InformationConsultingYouth", "steps": ["1. The Citizen requests to view the list of consulting rooms.", "3.", "2. The system allows to view the list of counseling centers. Citizen chooses the counseling center.", "4. The system returns information regarding the chosen consultatory displaying such data as: - its location;", "- its opening dates and times.", "- the list of booked interviews (if any)(invoking the use case VisualizationReservationConsu ltory)."], "dataset": "eANCI", "act": ["requests,view", [], "allows,view,chooses", "returns,displaying", "is", "list,booked,invoking"], "obj": ["citizen, consulting rooms", [], "system, list, counseling centers, citizen, counseling center", "information,location", "opening dates, times", "list,booked,interviews,visualizationreservationconsultory"]}
{"index": 100, "ucName": "Information", "steps": ["1. The Citizen requests to view the list of informagiovani news.", "3.", "2. The system allows to view the list of information regarding: - special employment official gazette; - local competition notices information; - study trips. The citizen selects the desired information.", "4. The system returns the information regarding the news specifying: - date of publication of the notice; - expiration date of the notice; - description."], "dataset": "eANCI", "act": ["requests,view", [], "allows, view, selects", "returns"], "obj": ["the list of informagiovani news", [], "system, list, information, special employment official gazette, local competition notices information, study trips, citizen, information", "system, information, news, date, publication, notice, expiration date, description"]}
{"index": 101, "ucName": "EnrollmentCardYouth", "steps": ["1. Citizen applies for youth card.", "2. The system displays a form for submitting the request.", "3. The citizen enters the card application data into a form.", "4. The system receives the form, verifies the data, and submits the request.", "5. The system notifies that the card has been entered and displays the card number and a summary of the data entered in a form."], "dataset": "eANCI", "act": ["applies", "displays,submitting", "enters", "receives,verifies,submits", "notifies, displays"], "obj": ["citizen, youth card", "form", "citizen,card application data,form", "the system, the form, the data, the request", "the system, the card, the card number, a summary, the data, a form"]}
{"index": 102, "ucName": "SubscribeNewsInformagiovani", "steps": ["1. Citizen requests subscription to informagiovani news to receive service-related advertisements.", "2. The system displays a form for submitting the request.", "3. The citizen enters the news request data into a form.", "4. The system receives the form, verifies the data and submits the request."], "dataset": "eANCI", "act": ["requests,receive", "displays,submitting", "enters", "receives,verifies,submits"], "obj": ["citizen, informagiovani news, service-related advertisements", "a form", "citizen,news request data,form", "form, data, request"]}
{"index": 103, "ucName": "ChangePreservationInterview", "steps": ["1. Citizen requests a change of interview reservation in the counseling center.", "2. The system displays a form for editing the reservation fields.", "3. The citizen makes the changes in the form confirms the reservation.", "4. Ilsistemodificalapreservation."], "dataset": "eANCI", "act": ["requests", "displays,editing", "makes,confirms", "modifica"], "obj": ["citizen, interview reservation, counseling center", "form, reservation fields", "citizen,changes,form,reservation", "ilsistemodificalapreservation"]}
{"index": 104, "ucName": "NewsCanceled", "steps": ["1. Citizen decides she wants to cancel informagiovani news and then enters in the form that she wants to cancel it.", "2. The system receives the form notifies that the news has been cancelled and resubmits the form."], "dataset": "eANCI", "act": ["decides, wants, cancel, enters, wants, cancel", "receives,notifies,resubmits"], "obj": ["citizen, informagiovani news", "the system, the form, the news, the form"]}
{"index": 105, "ucName": "ReservationInterview", "steps": ["1. The citizen requests an interview in the preselected counseling center.", "2. The system displays a form for submitting the request.", "3. The citizen enters the interview request data into a form.", "4. The system receives the form, verifies the reservation data, and submits the request.", "5. Citizen requests prints out receipt of interview booking.", "6. Thesystemprintsthebooking."], "dataset": "eANCI", "act": ["requests", "displays,submitting", "enters", "receives,verifies,submits", "requests,prints", "prints"], "obj": ["the citizen, interview, preselected counseling center", "form", "the citizen, the interview request data, a form", "system, form, reservation data, request", "citizen, receipt, interview booking", "booking"]}
{"index": 106, "ucName": "EntryEmployee", "steps": ["1. The administrator logs into the system, via administrative terminal, and activates the Employee Registration procedure.", "2. The system displays the form for entering a new employee.", "3. The Administrator enters the Employee's data and submits the registration request.", "4. The system receives the form, verifies that the matriculation entered by the Administrator is not already in the system and generates a password, saves the entered data and displays a notification of successful registration with the password assigned to the employee."], "dataset": "eANCI", "act": ["logs,activates", "displays", "enters,submits", "receives, verifies, generates, saves, displays"], "obj": ["administrator, system, administrative terminal, employee registration procedure", "form,employee", "administrator, employee's data, registration request", "system, form, administrator, password, data, notification, registration, password, employee"]}
{"index": 107, "ucName": "ReservationInterviewCanceled", "steps": ["1. Citizen decides he wants to cancel the interview reservation and then enters in the form that he wants to cancel it.", "2. The system receives the form notifies that the interview booking has been cancelled and resubmits the form."], "dataset": "eANCI", "act": ["decides, wants, cancel, enters, wants, cancel", "receives,notifies,resubmits"], "obj": ["citizen, interview reservation", "system, form, interview booking"]}
{"index": 108, "ucName": "ViewReservationConsulting", "steps": ["1. Citizen requests viewing of reservation made in a consulting room.", "2. The system returns information regarding the chosen reservation displaying such data as: - Date and time; - Consultatory."], "dataset": "eANCI", "act": ["requests,viewing", "returns, displaying"], "obj": ["citizen, reservation, consulting room", "date and time, consultatory"]}
{"index": 109, "ucName": "DeleteInformation", "steps": ["1. Employee requests news deletion.", "2. The system displays the list of existing news items", "3. The employee chooses a news item.", "4. The system displays a form for confirmation of the operation.", "5. The employee confirms the operation through the form.", "6. The system receives the form, and clears the news data from the system."], "dataset": "eANCI", "act": ["requests", "displays", "chooses", "displays", "confirms", "receives,clears"], "obj": ["employee,news deletion", "the system, list, news items", "news item", "form, confirmation, operation", "employee,operation,form", "the system, the form, the news data, the system"]}
{"index": 110, "ucName": "InformationLibaries", "steps": ["1. The Citizen requests to view the list of libraries.", "3.", "2. The system allows viewing the list of libraries. Citizen chooses the library.", "4. The system returns information regarding the chosen library displaying such data as: - - - - location; opening dates and times; link to the library's website."], "dataset": "eANCI", "act": ["requests,view", [], "allows, viewing, chooses", "returns,displaying"], "obj": ["the citizen, list of libraries", [], "libraries, citizen, library", "information,location,opening dates and times,link,library's website"]}
{"index": 111, "ucName": "InformationEventsInTheTerritory", "steps": ["1. The Citizen requests to view the list of events.", "3.", "2. The system allows viewing the list of events. The Citizen chooses the event.", "4. The system returns information regarding the chosen event displaying such data as: - - - - the location; the date and time of the event; site managing the event (Pro-loco)."], "dataset": "eANCI", "act": ["requests,view", [], "allows, viewing, chooses", "returns,displaying"], "obj": ["the citizen, list of events", [], "system, list of events, citizen, event", "the location, the date and time of the event, site managing the event (pro-loco"]}
{"index": 112, "ucName": "InformationMuseums", "steps": ["1. The Citizen requests to view the list of museums.", "3.", "2. The system allows the list of museums to be displayed. Citizen chooses the museum.", "4. The system returns information regarding the chosen museum displaying such data as: - - - - location; opening dates and times; link to the museum's website."], "dataset": "eANCI", "act": ["requests, view", [], "allows, be displayed, chooses", "returns"], "obj": ["the citizen, list of museums", [], "list of museums, museum", "location, opening dates and times, link to the museum's website"]}
{"index": 113, "ucName": "InformationPromotionTerritory", "steps": ["1. The Citizen requests to view the list of territorial promotions.", "3.", "2. The system allows the list of promotions to be displayed. Citizen chooses the promotion.", "4. The system returns information regarding the chosen promotion."], "dataset": "eANCI", "act": ["requests,view", [], "allows,be displayed,chooses", "returns"], "obj": ["citizen, list of territorial promotions", [], "system, list, promotions, citizen, promotion", "information"]}
{"index": 114, "ucName": "EntryInformation", "steps": ["1. The employee requests a new news entry.", "2. The system displays a form for submitting the request.", "3. The employee enters data about the new news item in a form.", "4. The system receives the form, and enters the news into the system."], "dataset": "eANCI", "act": ["requests", "displays", "enters", "receives,enters"], "obj": ["news entry", "form", "data, form", "the system, the form, the news, the system"]}
{"index": 115, "ucName": "EditInformation", "steps": ["1. Employee requests a news change.", "2. The system displays the list of existing news items", "3. The employee chooses a news item.", "4. The system displays a form for editing the news.", "5. The employee enters data about the news into a form.", "6. The system receives the form, and updates the news data in the system."], "dataset": "eANCI", "act": ["requests", "displays", "chooses", "displays", "enters", "receives,updates"], "obj": ["news change", "the system, list of existing news items", "the employee, news item", "a form", "data,news,form", "the system, the form, the news data, the system"]}
{"index": 116, "ucName": "ViewInformation", "steps": ["1. The Citizen requests to view the information in the territory.", "2. The system returns information regarding the territory by displaying such data as: - libraries;", "- events;", "- museums;", "- promotions present in the territory."], "dataset": "eANCI", "act": ["requests,view", "returns, displaying", "events", "museums", "present"], "obj": ["citizen, information, territory", "the system, information, the territory, data, libraries", "events", "museums", "promotions,territory"]}
{"index": 117, "ucName": "LogoutAdministrator", "steps": ["1. The administrator wants to end the work session and clicks on the Logout button.", "2. The system disconnects the administrator from the system and returns to the main screen."], "dataset": "eANCI", "act": ["wants, end, clicks", "disconnects,returns"], "obj": ["administrator, logout button", "the system, the administrator, the system, the main screen"]}
{"index": 118, "ucName": "Communications", "steps": ["1. The citizen accesses the communications area using the appropriate link", "2. The system displays the form for entering the data required for the communication (e.g. communication of the start of works,D.I.A., communication of the end of works...)", "3. The citizen enters the required data", "4. The system verifies correctness and completeness of the data then displays a summary screen or activates the use case DatiErrati.", "5. The citizen confirms the operation", "6. The system displays the form for printing", "7. The system sends a message notifying the appropriate employee of the request", "8. The citizen makes the printout to be delivered to the municipal office with a revenue stamp."], "dataset": "eANCI", "act": ["accesses", "displays,entering", "enters", "verifies,displays,activates", "confirms", "displays", "sends,notifying", "makes, be delivered"], "obj": ["communications area, link", "form, data, communication, start of works, d.i.a., end of works", "citizen, data", "system, correctness, completeness, data, summary screen, use case datierrati", "the citizen, the operation", "system, form", "system, message, employee, request", "the citizen, the printout, the municipal office, a revenue stamp"]}
{"index": 119, "ucName": "DefinitionBuilding Offenses", "steps": ["1. The citizen accesses the request area definition building offenses using the appropriate link", "2. The system displays the form for entering the data required for the request", "3. The citizen enters the required data", "4. The system verifies the correctness and completeness of the data then displays a summary screen or activates the use case DatiErrati", "5. The citizen confirms the operation", "6. The system displays a message notifying the request", "7. The system sends a request notification message to the appropriate employee."], "dataset": "eANCI", "act": ["accesses", "displays,entering,required", "enters", "verifies,displays,activates", "confirms", "displays,notifying", "sends"], "obj": ["citizen, request area definition building offenses, link", "the system, the form, the data, the request", "citizen,required data", "correctness, completeness, data, summary screen, use case datierrati", "operation", "message", "system, request notification message, employee"]}
{"index": 120, "ucName": "Declaration in lieu of Notarization", "steps": ["1. The citizen accesses the area Dichiarazione sostitutiva dell'atto di notorietà using the appropriate link", "2. The system displays the form for entering the data required for the request", "3. The citizen enters the required data", "4. The system verifies the correctness and completeness of the data then displays a summary screen or activates the DatiErrati use case", "5. The citizen confirms the operation", "6. The system displays a notification message", "7. The system sends a message notifying the appropriate employee of the request."], "dataset": "eANCI", "act": ["accesses", "displays, entering, required", "enters", "verifies,displays,activates", "confirms", "displays", "sends,notifying"], "obj": ["citizen, area dichiarazione sostitutiva dell'atto di notorietà", "the system, the form, the data, the request", "citizen,required data", "system, data, summary screen, datierrati use case", "citizen,operation", "system, notification message", "system, message, employee, request"]}
{"index": 121, "ucName": "VisionPlanRegulator", "steps": ["1. citizen accesses the Regulatory Plan area via the appropriate link", "2. the system displays the document."], "dataset": "eANCI", "act": ["accesses", "displays"], "obj": ["citizen", "document"]}
{"index": 122, "ucName": "SubmitBuildingProject", "steps": ["1. The citizen accesses the submit building project area via the appropriate link.", "2. The system displays the form for entering the required data.", "3. The citizen enters the required data.", "4. The system verifies correctness and completeness of the data then displays a summary screen or activates the use case DatiErrati.", "5. The citizen confirms the operation.", "6. The system displays the form for printing.", "7. The system sends a message notifying the appropriate employee of the request.", "8. The citizen makes the printout to be delivered to the municipal office with the required documents and a revenue stamp attached."], "dataset": "eANCI", "act": ["accesses", "displays,entering", "enters", "verifies,displays,activates", "confirms", "displays", "sends,notifying", "makes,delivered,attached"], "obj": ["citizen,submit building project area,link", "the system, the form, the required data", "the required data", "system, correctness, completeness, data, summary screen, use case datierrati", "the citizen, the operation", "printing", "the system, message, employee, request", "the citizen, the printout, the municipal office, the required documents, a revenue stamp"]}
{"index": 123, "ucName": "SearchBuildingFile", "steps": ["1.", "3.", "5. The citizen accesses the search area", "2. The system displays the form for entering the search key The citizen enters the search key", "4. Thesystemshowstheresultsof the search The citizen selects the file", "6. Thesystemdisplaysthefile."], "dataset": "eANCI", "act": [[], [], "accesses", "displays,enters", "shows,selects", "displays"], "obj": [[], [], "citizen,search area", "system, form, search key, citizen, search key", "thesystemshowstheresultsof the search, the citizen selects the file", "thesystemdisplaysthefile"]}
{"index": 124, "ucName": "RequestAuthorization", "steps": ["1. The citizen accesses the certificate and authorization issuance area using the appropriate link", "2. The system displays the form for entering the data necessary to request the authorization (e.g. authorization connection to the water network, authorization connection to the sewer network ...)", "3. The citizen enters the required data", "4. The system verifies correctness and completeness of the data then displays a summary screen or activates the use case DatiErrati", "5. The citizen confirms the operation", "6. The system displays the form for printing", "7. The system sends a message notifying the appropriate employee of the request", "8. The citizen makes the printout to be delivered to the municipal office with the stamp and attachments."], "dataset": "eANCI", "act": ["accesses,using", "displays,entering,request", "enters", "verifies, displays, activates", "confirms", "displays", "sends,notifying", "makes, to be delivered"], "obj": ["citizen,certificate,authorization,issuance area,link", "system, form, data, authorization, authorization connection to the water network, authorization connection to the sewer network", "citizen,required data", "the system, data, summary screen, use case datierrati", "the citizen, the operation", "form", "appropriate employee, request", "the citizen, the printout, the municipal office, the stamp, attachments"]}
{"index": 125, "ucName": "RequestCopyFileEdilizio", "steps": ["1. The citizen requests a copy of the file using the appropriate button", "2. The system sends the request to the clerk", "3. The system notifies the citizen that the request has been submitted and the copy will be sent to him/her shortly."], "dataset": "eANCI", "act": ["requests", "sends", "notifies,submitted,will be sent"], "obj": ["citizen, copy, file, button", "the system, request, clerk", "system, citizen, request, copy"]}
{"index": 126, "ucName": "Request for Condonation Definition", "steps": ["1. Citizen accesses the request area definition condono using the appropriate link", "2. The system displays the form for entering the data required for the request", "3.", "5. The citizen enters the required data", "4. The system verifies the correctness and completeness of the data then displays a summary screen or activates the use case DatiErrati The citizen confirms the operation", "6. The system displays a message notifying the request", "7. The system sends a request notification message to the appropriate employee."], "dataset": "eANCI", "act": ["accesses", "displays,entering", [], "enters", "verifies,displays,activates,confirms", "displays,notifying", "sends"], "obj": ["citizen,request area definition condono", "form, data, request", [], "the citizen, the required data", "the system, data, summary screen, use case datierrati, the citizen, the operation", "message", "request notification message, appropriate employee"]}
{"index": 127, "ucName": "RequestNumberCivic", "steps": ["1. The citizen accesses the request area house number using the appropriate link", "3.", "5.", "2. The system displays the form for entering the data required for the request. The citizen enters the required data", "4. The system verifies the correctness and completeness of the data then displays a summary screen or activates the use case DatiErrati. The citizen confirms the operation", "6. The system displays a message notifying the request", "7. The system sends a request notification message to the appropriate employee."], "dataset": "eANCI", "act": ["accesses", [], [], "displays, enters", "verifies,displays,activates,confirms", "displays,notifying", "sends"], "obj": ["the citizen, request area house number, the appropriate link", [], [], "the system, the form, the data, the request, the citizen, the data", "system, data, summary screen, use case, datierrati, citizen, operation", "message, request", "notification message, employee"]}
{"index": 128, "ucName": "LogoutCitizen", "steps": ["1. The citizen wants to end the work session and clicks on the Logout button.", "2. The system disconnects the citizen from the system and returns to the main screen."], "dataset": "eANCI", "act": ["wants, end, clicks", "disconnects,returns"], "obj": ["citizen, work session, logout button", "citizen,system,main screen"]}
{"index": 129, "ucName": "RequestCadastralService", "steps": ["1. The citizen accesses the municipal cadastral service area using the appropriate link", "2. The system displays the form for entering the data required for the request", "3. The citizen enters the required data", "4. The system verifies correctness and completeness of the data then displays a summary screen or activates the use case DatiErrati", "5. The citizen confirms the transaction", "6. The system displays the payment method", "7. The citizen makes the choice", "8. The system sends a message notifying the appropriate employee of the request", "9. The system notifies the citizen that the request has been submitted and the copy will be sent to him/her shortly."], "dataset": "eANCI", "act": ["accesses", "displays,entering", "enters", "verifies,displays,activates", "confirms", "displays", "makes", "sends,notifying", "notifies,submitted,will be sent"], "obj": ["the citizen, municipal cadastral service area", "the system, the form, the data, the request", "the citizen,required data", "summary screen, use case datierrati", "citizen,transaction", "system, payment method", "the choice", "message,employee,request", "the system, the citizen, the request, the copy, him/her"]}
{"index": 130, "ucName": "IssuingCertificates", "steps": ["1. The citizen accesses the certificate and permit issuance area using the appropriate link.", "2. The system displays the form for entering the data required for the issuance of the certificate (e.g. certificate of fitness, certificate of habitability, ...).", "3. The citizen enters the required data.", "4. The system verifies correctness and completeness of the data then displays a summary screen or activates the use case DatiErrati.", "5. The citizen confirms the operation.", "6. The system displays the form for printing.", "7. The system sends a message notifying the appropriate employee of the request.", "8. The citizen makes the printout to be delivered to the municipal office with the revenue stamp."], "dataset": "eANCI", "act": ["accesses", "displays", "enters", "verifies,displays,activates", "confirms", "displays", "sends,notifying", "makes, to be delivered"], "obj": ["citizen,certificate,permit issuance area,link", "the system, the form, the data, the issuance, the certificate, certificate of fitness, certificate of habitability", "the citizen, the required data", "system, data, summary screen, use case datierrati", "the citizen, the operation", "form", "system, message, employee, request", "the citizen, the printout, the municipal office, the revenue stamp"]}
{"index": 131, "ucName": "VisionCirculars", "steps": ["1. ", "3. The citizen accesses the circulars area through the appropriate link", "2. The system displays the numbered list of circulars The citizen chooses the circular via link", "4. Thesystemdisplaysthechosencircular"], "dataset": "eANCI", "act": [[], "accesses", "displays,chooses", "displays"], "obj": [[], "the citizen, the circulars area, the appropriate link", "system, numbered list of circulars, citizen", "the chosen circular"]}
{"index": 132, "ucName": "UpdateEnvironmentalAnalysis", "steps": ["1. The municipal clerk after authenticating in the system updates the form that simply provides for the copy of the report of the analysis carried out on the environment by the Civil Defense", "2. The system responds by providing the clerk with a form in which to report the information prepared by the chemical experts.", "3. The employee completes the form field presented by the system and submits it.", "4. The system updates the form and allows it to be viewed by the Citizen."], "dataset": "eANCI", "act": ["authenticating, updates, provides, carried", "responds,providing,report", "completes,submits", "updates,allows,to be viewed"], "obj": ["the municipal clerk, the system, the form, the copy of the report, the analysis, the environment, the civil defense", "the system, the clerk, a form, the information, the chemical experts", "the employee, the system", "system, form, citizen"]}
{"index": 133, "ucName": "UpdateBandsECompetitions", "steps": ["1.", "3. The municipal clerk after authenticating in the system updates the list of associations that have published a new notice of competition.", "2. The system responds by providing the clerk with a form to complete to update the fields: association_logo, description, association_name, notice. The clerk completes the fields of the form presented by the system and submits it.", "4. The system updates the form and allows it to be viewed by the Citizen."], "dataset": "eANCI", "act": [[], "authenticating, updates, have published", "responds,providing,complete,update,completes,presented,submits", "updates,allows"], "obj": [[], "municipal clerk, system, list of associations, notice of competition", "system, clerk, form, fields, association_logo, description, association_name, notice", "the system, form, citizen"]}
{"index": 134, "ucName": "UpdateWeatherConditions", "steps": ["1.", "3. The municipal employee after authenticating in the system updates the weather conditions of the municipality and regional provinces.", "2. The system responds by providing the clerk with a form to complete in order to update the fields: tempMin, tempMax, stateAtmospheric, nameCity, date. The employee completes the fields of the form presented by the system and submits it", "4. The system updates the form and allows it to be viewed by the Citizen."], "dataset": "eANCI", "act": [[], "authenticating,updates", "responds, providing, complete, update, completes, presented, submits", "updates,allows"], "obj": [[], "municipal employee, system, weather conditions, municipality, regional provinces", "clerk, form, tempmin, tempmax, stateatmospheric, namecity, date, employee, fields, form, system", "system, form, citizen"]}
{"index": 135, "ucName": "ActivitiesUseful", "steps": ["1. By selecting this use case, the Citizen accesses a screen for choosing two use cases: Woods, Waste", "2. The system provides a simple and intuitive screen that allows the user to choose which of the two services to visit, to indirectly help maintain acceptable, municipal environmental conditions.", "3. The Citizen chooses one of the two use cases Woods, or Waste.", "4. The system responds to the Citizen's need by displaying the desired page they had requested."], "dataset": "eANCI", "act": ["selecting,accesses,choosing", "provides,allows,choose,visit,help,maintain", "chooses", "responds,displaying,had requested"], "obj": ["citizen,screen,use case,woods,waste", "screen, user, services, environmental conditions", "sentence a does not have any specific entities. the object of sentence a is 'one of the two use cases woods, or waste", "citizen, page"]}
{"index": 136, "ucName": "Announcements And Contests", "steps": ["1. The Citizen accesses the home screen to be able to view the opportunity to view the associations that support Civil Defense.", "2. The system responds to the need by allowing the Citizen to view all the associations that are part of the Civil Defense and that hire staff, with a small image of the association, with next to it the possibility of receiving the download of the notice made available by the association in question.", "3. The Citizen takes note of what the form provides, and chooses from which, among the associations made available, to receive news for a possible recruitment or participation in the competition, about the modalities of the same.", "4. The system responds to this by allowing him or her to view the corresponding competition notice."], "dataset": "eANCI", "act": ["accesses, view, view", "responds, allowing, to view, hire, receiving, made available", "takes, provides, chooses, receive", "responds,allowing,view"], "obj": ["citizen, home screen, opportunity, associations, civil defense", "the system, the need, the citizen, the associations, the civil defense, staff, a small image, the association, the download, the notice, the association", "the citizen, the form, the associations, the competition", "him or her, competition notice"]}
{"index": 137, "ucName": "Woods", "steps": ["1. The Citizen accesses this screen to be able to learn about the advice that Civil Defense makes available to anyone in order to avoid and have people avoid forest fires.", "2. The system provides a screen with a set of rules that the Citizen should follow and have others follow if they are with third parties, to prevent the occurrence of arson, and in case of this, which authority to call."], "dataset": "eANCI", "act": ["accesses, learn, makes, avoid, avoid", "provides,follow,follow,prevent,is,call"], "obj": ["citizen, civil defense, screen, advice, forest fires", "the system, screen, set of rules, the citizen, third parties, arson, authority"]}
{"index": 138, "ucName": "Weather", "steps": ["1. The Citizen accesses this screen to view the weather situation in the municipality where he or she resides.", "2. The system responds to the Citizen's need by allowing him to view, in addition to the weather situation, of his municipality,also that of the provinces of the region to which he belongs, with update date, minimum and maximum temperatures, and of course, weather conditions expressed with a small descriptive image."], "dataset": "eANCI", "act": ["accesses,view,resides", "responds, allowing, view, belongs, expressed"], "obj": ["the citizen, screen, weather situation, municipality", "citizen, municipality, provinces, region"]}
{"index": 0, "ucName": " Register Customer\n \n", "uctext": "  \nRegister a new customer account with the system.  \n \n", "steps": ["Customer first clicks on the button or link to initiate registration process.", "System prompts the customer to fill out his/her first name, last name, billing address, shipping address, email address, and their password.", "Customer enters fields.", "System validates the customer's information.", "System creates a new account for the Customer.", "System creates a session cookie.", "System displays an account home page to Customer."], "dataset": "gamma j", "act": ["clicks,initiate", "prompts,fill out", "enters", "validates", "creates", "creates", "displays"], "obj": ["button, link", "first name, last name, billing address, shipping address, email address, password", "fields", "system, customer's information", "system, new account, customer", "session cookie", "system, account home page, customer"]}
{"index": 1, "ucName": " Login Customer\n \n", "uctext": " \nLogin to a customer account with the system.  \n \n", "steps": ["Customer clicks on the button or link to initiate the login process.", "System prompts the customer for his/her email and password.", "System verifies the information.", "System creates session cookie.", "System displays account home page to the Customer"], "dataset": "gamma j", "act": ["clicks,initiate", "prompts", "verifies", "creates", "displays"], "obj": ["customer, button, link, login process", "customer, email, password", "information", "session cookie", "system, account home page, customer"]}
{"index": 2, "ucName": " Edit Customer Details\n \n", "uctext": " \nEdit the customer account details.  \n \n", "steps": ["1. Customer clicks the button or link to initiate the process to edit the account.", "2. System displays the account home page to the Customer.", "3. Customer clicks the button or link in order to edit the account details.", "4. System verifies the changes.", "5. System stores new account information."], "dataset": "gamma j", "act": ["clicks,initiate,edit", "displays", "clicks,edit", "verifies", "stores"], "obj": ["customer, button, link, process, account", "system, account home page, customer", "customer, button, link, account details", "changes", "account information"]}
{"index": 3, "ucName": " Logout Customer\n \n", "uctext": " \nLogout the customer account on the system.  \n \n", "steps": ["1. Customer clicks the button or link in order to initiate logout process.", "2. System terminates the session cookie.", "3. System displays the home page."], "dataset": "gamma j", "act": ["clicks,initiate", "terminates", "displays"], "obj": ["customer, button, link, logout process", "session cookie", "home page"]}
{"index": 4, "ucName": " Add Item To Cart\n \n", "uctext": " \nCustomer adds item(s) in the cart \n \n", "steps": ["1. Customer clicks the button or link in order to add to the cart with specified quantity.", "2. System adds the item(s) to the cart.", "3. System prompts the Customer to edit the quantity or remove the item from cart.", "4. Customer confirms the items in the cart.", "5. System stores cookie with cart details.", "6. Customer returns to product listings."], "dataset": "gamma j", "act": ["clicks,add", "adds", "prompts,edit,remove", "confirms", "stores", "returns"], "obj": ["button, link, cart, quantity", "the item(s), the cart", "system, customer, quantity, item, cart", "customer, items, cart", "5, system, cookie, cart details", "customer, product listings"]}
{"index": 5, "ucName": " Checkout An Order\n \n", "uctext": " \nCustomer places and confirms an order for the checkout process.  \n \n", "steps": ["Customer clicks the button or link to initiate the checkout process.", "System calculates order of items in the shopping cart.", "System appends cookie with flag for checkout process.", "System presents the customer with the account details and payment methods.", "Customer confirms account details and payment methods.", "Customer confirms order.", "System stores order confirmation and order details.", "System sends email confirmation to the Customer.", "System appends cookie with flag for completed checkout process."], "dataset": "gamma j", "act": ["clicks,initiate", "calculates", "appends", "presents", "confirms", "confirms", "stores", "sends", "appends"], "obj": ["button,link", "order, items, shopping cart", "cookie,flag,checkout process", "customer,account details,payment methods", "account details, payment methods", "order", "order confirmation,order details", "email confirmation, customer", "cookie,flag,checkout process"]}
{"index": 6, "ucName": " Login Administrator\n \n", "uctext": " \nLogin to an Administrator account with the system.  \n \n", "steps": ["Administrator clicks button or link to initiate login process.", "System prompts the Administrator for email and password.", "System verifies information.", "System creates session cookie.", "System displays account home page to Administrator"], "dataset": "gamma j", "act": ["clicks,initiate", "prompts", "verifies", "creates", "displays"], "obj": ["administrator, button, link", "administrator, email, password", "information", "session cookie", "system, account home page, administrator"]}
{"index": 7, "ucName": " Logout Administrator\n \n", "uctext": " \nLogout the Administrator account on the system.  \n \n", "steps": ["Administrator clicks button or link to initiate logout process.", "System terminates the session cookie.", "System displays home page."], "dataset": "gamma j", "act": ["clicks,initiate,logout", "terminates", "displays"], "obj": ["administrator, button, link", "session cookie", "home page"]}
{"index": 8, "ucName": " Add User\n \n", "uctext": "  \nRegister a new customer, sales person, or administrator account with the system.  \n \n", "steps": ["Administrator clicks the button or link to initiate Add user process.", "System prompts the Administrator to fill out first name, last name, username, email address, password, and privileges of the user.", "System validates new user information.", "System creates a new account for the new user with desired privileges.", "System displays account home page to Administrator."], "dataset": "gamma j", "act": ["clicks,initiate", "prompts, fill out", "validates", "creates", "displays"], "obj": ["button,link", "first name, last name, username, email address, password, privileges", "new user information", "account, user, privileges", "system, account home page, administrator"]}
{"index": 9, "ucName": " Remove User\n \n", "uctext": "  \nRemove a user from the system. \n \n", "steps": ["Administrator clicks button or link to initiate the remove user process.", "System prompts the Administrator to select a user by searching or viewing a list of users.", "System displays user information.", "System confirms deletion of selected user.", "System displays account home page to Administrator."], "dataset": "gamma j", "act": ["clicks,initiate", "prompts,select,searching,viewing", "displays", "confirms, deletion", "displays"], "obj": ["administrator,button,link", "administrator, user, users", "user information", "system, user", "account home page, administrator"]}
{"index": 10, "ucName": " Change User Properties\n \n", "uctext": "  \nAlter properties such as passwords and privileges of the user. \n \n", "steps": ["Administrator clicks the button or link to initiate change user properties process.", "System prompts the Administrator to select a user by searching or viewing a list of users.", "System displays the user information.", "System alters the user properties.", "System displays the account home page to Administrator."], "dataset": "gamma j", "act": ["clicks,initiate", "prompts,select,searching,viewing", "displays", "alters", "displays"], "obj": ["administrator,button,link,user properties process", "administrator, user, users", "user information", "user properties", "system, account home page, administrator"]}
{"index": 11, "ucName": " Install Plug-ins\n \n", "uctext": "  \nInstall a new plug-in to the application.  \n \n", "steps": ["Administrator clicks the button or link to initiate Plug-in installation process.", "System prompts the Administrator to upload the Plug-in module.", "System installs plug-in and validates changes.", "System displays plug-in options to the Administrator."], "dataset": "gamma j", "act": ["clicks,initiate", "prompts,upload", "installs,validates", "displays"], "obj": ["administrator, button, link, plug-in installation process", "administrator, plug-in module", "plug-in, changes", "system, plug-in options, administrator"]}
{"index": 12, "ucName": " Remove Plug-ins\n \n", "uctext": "  \nRemove a plug-in from the application.  \n \n", "steps": ["Administrator clicks the button or link to initiate Plug-in deletion process.", "System prompts the Administrator to select the desired Plug-in module.", "System removes the plug-in and validates changes."], "dataset": "gamma j", "act": ["clicks,initiate", "prompts,select", "removes, validates"], "obj": ["administrator, button or link, plug-in deletion process", "administrator", "plug-in, changes"]}
{"index": 13, "ucName": " Manage Plug-in Options\n \n", "uctext": "  \nMake changes to an installed plug-in. \n  \n", "steps": ["Administrator clicks the button or link to initiate Plug-in Options process.", "System prompts the Administrator to select the desired Plug-in module.", "System displays all plug-in options to the Administrator.", "System confirms changes with the Administrator."], "dataset": "gamma j", "act": ["clicks,initiate", "prompts, select", "displays", "confirms"], "obj": ["administrator,button,link,plug-in options process", "administrator, plug-in module", "system, plug-in options, administrator", "system, administrator"]}
{"index": 14, "ucName": " Install patch process\n \n", "uctext": "  \nInstall patches or software updates to the web store. \n  \n", "steps": ["1. Administrator clicks the button or link to initiate Patching process.", "2. System prompts the Administrator to upload the patch.", "3. System automatically installs patches and reinitializes software.", "4. System confirms that patch has been successfully installed."], "dataset": "gamma j", "act": ["clicks,initiate", "prompts,upload", "installs, reinitializes", "confirms,has been installed"], "obj": ["administrator,button,link", "system, administrator", "patches, software", "patch"]}
{"index": 15, "ucName": " Login Sales Person\n \n", "uctext": " \nLogin to an account with the system.  \n \n", "steps": ["Sales Person clicks the button or link to initiate login process.", "System prompts the Sales Person for email and password.", "System verifies the information.", "System creates session cookie.", "System displays the account home page to Sales Person"], "dataset": "gamma j", "act": ["clicks,initiate", "prompts", "verifies", "creates", "displays"], "obj": ["sales person,button,link", "system, sales person, email, password", "the information", "session cookie", "account home page, sales person"]}
{"index": 16, "ucName": " Logout Sales Person\n GAMMA-J Web Store  \n35\n \n", "uctext": " \nLogout the Sales Person account on the system.  \n \n", "steps": ["Sales Person clicks the button or link to initiate logout process.", "System terminates the session cookie.", "System displays home page."], "dataset": "gamma j", "act": ["clicks,initiate", "terminates", "displays"], "obj": ["sales person,button,link,logout process", "session cookie", "home page"]}
{"index": 17, "ucName": " Add Product\n \n", "uctext": "  \nAdd a product to the system. \n \n", "steps": ["Sales Person clicks the button or link to initiate Add Product process.", "System prompts the Sales Person to fill out product name, product id, product description, product price, upload a product image, number of items in inventory, and availability of product.", "System validates the new product information.", "System creates a new product page for the new product.", "System displays the newly created product page."], "dataset": "gamma j", "act": ["clicks,initiate", "prompts,fill out,upload", "validates", "creates", "displays"], "obj": ["sales person,button,link", "product name, product id, product description, product price, product image, number of items in inventory, availability of product", "new product information", "system,product page,new product,new product", "product page"]}
{"index": 18, "ucName": " Remove Product\n \n \n", "uctext": "  \nRemove a product from the system. \n \n", "steps": ["Sales Person clicks the button or link to initiate Remove Product process.", "System prompts the Sales Person to select a product by searching or viewing a list of products.", "System validates the product information.", "System removes the product page and product information from the system.", "System displays the newly created product page."], "dataset": "gamma j", "act": ["clicks,initiate", "prompts, select, searching, viewing", "validates", "removes", "displays"], "obj": ["sales person,button,link,remove product process", "sales person, product, list of products", "product information", "product page,product information", "product page"]}
{"index": 19, "ucName": " Update Product Attributes\n \n", "uctext": "  \nUpdate Product attributes within the system. \n \n", "steps": ["Sales Person clicks the button or link to initiate Update Product Attributes process.", "System prompts the Sales Person to select a product by searching or viewing a list of products.", "System displays all of the product attributes and allows Sales Person to update the product name, product id, product description, product price, update the product image, product availability, and/or the number of items in the inventory.", "System validates the product information.", "System updates the product page and product information within the system.", "System displays the newly updated product page."], "dataset": "gamma j", "act": ["clicks,initiate", "prompts,select,searching,viewing", "displays,allows,update", "validates", "updates,product,product", "displays"], "obj": ["sales person,button,link,update product attributes process", "system, prompts, sales person, product, searching, viewing, list, products", "product attributes, sales person, product name, product id, product description, product price, product image, product availability, number of items in the inventory", "product information", "product page,product information,system", "product page"]}
{"index": 20, "ucName": " Register Customer\n \n", "uctext": "  \nRegister a new customer account with the system.  \n \n", "steps": ["Customer clicks the button or link to initiate registration process.", "System prompts the customer to fill out first name, last name, billing address, shipping address, email address, and password.", "Customer enters fields.", "System validates customer's information.", "System creates a new account for the Customer.", "System creates session cookie.", "System displays account home page to Customer."], "dataset": "gamma j", "act": ["clicks,initiate", "prompts,fill out", "enters", "validates", "creates", "creates", "displays"], "obj": ["button,link", "first name, last name, billing address, shipping address, email address, password", "fields", "information", "system,customer", "session cookie", "system,account home page,customer"]}
{"index": 21, "ucName": " Login Customer\n \n", "uctext": " \nLogin to a customer account with the system.  \n \n", "steps": ["Customer clicks the button or link to initiate login process.", "System prompts the customer for email and password.", "System verifies the information.", "System creates session cookie.", "System displays account home page to Customer"], "dataset": "gamma j", "act": ["clicks,initiate", "prompts", "verifies", "creates", "displays"], "obj": ["button,link", "email, password", "information", "session cookie", "system, account home page, customer"]}
{"index": 22, "ucName": " Edit Customer Details\n \n", "uctext": " \nEdit the customer account details.  \n \n", "steps": ["1. Customer clicks button or link to initiate the process to edit the account.", "2. System displays account home page to Customer.", "3. Customer clicks button or link to edit the account details.", "4. System verifies the changes.", "5. System stores new account information."], "dataset": "gamma j", "act": ["clicks,initiate,edit", "displays", "clicks,edit", "verifies", "stores"], "obj": ["customer, button, link, process, account", "system, account home page, customer", "button, link", "changes", "new account information"]}
{"index": 23, "ucName": " Logout Customer\n \n", "uctext": " \nLogout the customer account on the system.  \n \n", "steps": ["Customer clicks button or link to initiate logout process.", "System terminates the session cookie.", "System displays home page."], "dataset": "gamma j", "act": ["clicks,initiate", "terminates", "displays"], "obj": ["customer, button, link", "session cookie", "home page"]}
{"index": 24, "ucName": " Add Item To Cart\n \n", "uctext": " \nCustomer adds item(s) in the cart \n \n", "steps": ["Customer clicks the button or link to add to the cart with specified quantity.", "System adds the item(s) to the cart.", "System prompt Customer to edit quantity or remove item from cart.", "Customer confirms items in cart.", "System stores cookie with cart details.", "Customer returns to product listings."], "dataset": "gamma j", "act": ["clicks,add", "adds", "prompt,edit,remove", "confirms", "stores", "returns"], "obj": ["customer,button,link,cart,specified quantity", "item(s", "system prompt, customer, quantity, item, cart", "items, cart", "cookie,cart details", "product listings"]}
{"index": 25, "ucName": " Checkout An Order\n \n \n", "uctext": " \nCustomer places and confirms an order for the checkout process.  \n \n", "steps": ["Customer clicks the button or link to initiate the checkout process.", "System calculates order of items in the shopping cart.", "System appends cookie with flag for checkout process.", "System presents customer with account details and payment methods.", "Customer confirms account details and payment methods.", "Customer confirms order.", "System stores order confirmation and order details.", "System sends email confirmation to the Customer.", "System appends cookie with flag for completed checkout process."], "dataset": "gamma j", "act": ["clicks,initiate", "calculates", "appends", "presents,payment", "confirms", "confirms", "stores", "sends", "appends"], "obj": ["button, link", "order,items,shopping cart", "system, cookie, flag, checkout process", "customer, account details, payment methods", "account details, payment methods", "order", "order confirmation, order details", "email confirmation, customer", "cookie,flag"]}
{"index": 0, "ucName": " Modify Use Case  \n", "uctext": "  \nThe use case describes the modification  that the Inventory Admin  can do.  \n", "steps": ["Use case begins when Inventory Admin start searching for an asset", "Inventory Admin Edit the asset", "Inventory Admin modify asset properties"], "dataset": "0000 - inventory", "act": ["begins, start, searching", "edit", "modify"], "obj": ["inventory admin, asset", "inventory admin,asset", "inventory admin,asset properties"]}
{"index": 1, "ucName": " Edit Use Case  \n", "uctext": "  \nThe use case describes the edit operation  that the Inventory Admin  can do.  \n", "steps": ["Use case begins when Inventory Admin start searching for an asset", "Inventory Admin Edit the asset"], "dataset": "0000 - inventory", "act": ["begins, start searching", "edit"], "obj": ["inventory admin,asset", "inventory admin,asset"]}
{"index": 2, "ucName": " Add New Asset  Use Case  \n", "uctext": "  \nThe use case describes the operation of adding a new asset to the inventory .  \n", "steps": ["Use case begins when Administrator start a new asset", "Administrator select asset type", "Administrator select asset location", "Administrator select owner", "Administrator fill all asset properties"], "dataset": "0000 - inventory", "act": ["begins, start", "select", "select", "select", "fill"], "obj": ["administrator,asset", "administrator,asset type", "asset location", "administrator,owner", "asset properties"]}
{"index": 3, "ucName": " Create request  Use Case  \n", "uctext": "  \nThe use case describes the activity of creating a new request that the User  can do.  \n", "steps": ["1. User select basic request form", "2. User type a small request text specifying asset(s) location,..", "3. User click on submit"], "dataset": "0000 - inventory", "act": ["select", "type", "click"], "obj": ["basic request form", "user type, request text, asset(s) location", "user, submit"]}
{"index": 4, "ucName": " Returning Asset  \n", "uctext": "  \nThe use case describes the returning asset update  that the Inventory Admin  can do.  \n", "steps": ["1. Use case begins when Inventory Admin start returning", "2. Inventory Admin select asset state to available"], "dataset": "0000 - inventory", "act": ["begins, start, returning", "select"], "obj": ["inventory admin", "inventory admin, asset state, available"]}
{"index": 5, "ucName": " Approving Request  \n", "uctext": "  \nThe use case describes the approving of requests that an  Inventory Admin  can do.  \n", "steps": ["1. Use case begins when Inventory Admin display pending request list", "2. System display only requests that he has privileges to approve", "3. Inventory Admin select request that he want to approve", "4. Approve is confirmed", "5. System send notes to users"], "dataset": "0000 - inventory", "act": ["use, begins, display", "display,approve", "select,request,want,approve", "approve,confirmed", "send"], "obj": ["inventory admin, pending request list", "requests, privileges", "inventory admin, request", "approve", "notes,users"]}
{"index": 6, "ucName": " change permissions  Use Case\n", "uctext": "  \nThe use case describes the modification  that Department, Facutly or University Administrator can do to a user permissions .  \n", "steps": ["1. Use case begins when Administrator press change permission", "2. Administrator select user", "3. Administrator modify permissions"], "dataset": "0000 - inventory", "act": ["use,press", "select", "modify"], "obj": ["administrator,change permission", "administrator, user", "administrator,permissions"]}
{"index": 7, "ucName": " Authentication Use Case   \n", "uctext": "  \nThe use case describes the authentication .  \n", "steps": ["1. Use case begins user starts the application", "2. User write user name and pas sword", "3. User press login", "4. User is authenticated", "5. User log on to application main page"], "dataset": "0000 - inventory", "act": ["begins,starts", "write", "press", "is authenticated", "log on"], "obj": ["use case, user, application", "user name, pas sword", "user,login", "user,authenticated", "user, application main page"]}
{"index": 8, "ucName": " Search\n", "uctext": "  \nThe use case describes the search operation  that only authorised users can do.  \n", "steps": ["Use case begins when User start fill searching field", "Press submit", "Search results are displayed"], "dataset": "0000 - inventory", "act": ["begins, start, fill", "submit", "are displayed"], "obj": ["use case, user, searching field", "submit", "results"]}
{"index": 9, "ucName": " Create Reports  Use Case\n", "uctext": "  \nThe use case describes the creation of reports  that the User  can do.  \n", "steps": ["Use case begins when User click on a report type", "General report is displayed", "Report can be filtered", "Fields can be sorted"], "dataset": "0000 - inventory", "act": ["begins,click", "is displayed", "filtered", "can be sorted"], "obj": ["report type", "general report", "report", "fields"]}
{"index": 0, "ucName": " Parse\n\n", "uctext": " The user requests the parsing of a transformation language program or a target file. The file to be parsed and the parser file are inputs to HATS-SML. HATS-SML generates an SDT. The output is saved in the application.\n\n", "steps": ["1. User selects the option to parse a transformation language program from currently open application (ALT 1).", "2. User selects a transformation language program file (.tlp) to parse (Refer to Use Case 4) (ALT 2).", "3. The HATS-GUI compares the time stamps on the lexical specification and grammar files to the time stamp on the application's parser file. The parser file is the youngest of the three files (ALT 3, ALT 6).", "4. The HATS-GUI sends a message to the Host OS to start either the ParseTarget or the ParseProgram program and sends the names of the target file or program file, the output file, and the parser file to the Host OS.", "5. HATS-SML parses the input file (ALT 7) and writes the output to the output file.", "6. End of use case."], "dataset": "hats", "act": ["selects,parse", "selects,parse", "compares, is", "sends, start, sends", "parses,writes", "end"], "obj": ["user, option, transformation language program, application", "user, transformation language program file, .tlp, use case 4", "hats-gui, lexical specification, grammar files, application's parser file, parser file", "hats-gui, host os, parsetarget, parseprogram, target file, program file, output file, parser file, host os", "hats-sml, input file, output file", "use case"]}
{"index": 1, "ucName": " Execute Transformation Program\n\n", "uctext": "  The user requests the application of a transformation language program to a target file. HATS-SML applies the transformation language program to the target.  Actors:  User, HATS-SML, Host OS\n\n", "steps": ["User selects the option to execute a transformation language program from the currently selected application.", "User selects a transformation language program file (Refer to Use Case 4) (ALT 1).", "The HATS-GUI compares the time stamp on the lexical specification and grammar files to the time stamp on the parser file. The parser file is younger (ALT 2, ALT 3).", "The HATS-GUI compares the time stamp of the parsed program file and the parser, the transformation language program, and the user-defined library files. The parsed program file is younger than any of these files (ALT 4, ALT 5).", "The HATS-GUI clears the displays for the standard error and standard output.", "The HATS-GUI sends a message to the Host OS to start the ApplyTransformations program and sends the names of the parsed program file and the user-defined library file to the Host OS. The HATS-GUI redirects the standard error and standard output streams of the ApplyTransformation process and collects data written to these streams for later display.", "The HATS-SML ApplyTransformation program writes output SDTs to files named in the transformation language program. (The transformation language program contains all references to input and output files. The HATS-GUI does not handle file input and file output for ApplyTransformaion.)", "End of use case."], "dataset": "hats", "act": ["selects,executes", "selects", "compares, is", "compares, is", "clears", "sends, sends, redirects, collects", "writes,contains,does not handle", "end"], "obj": ["user, option, transformation language program, application", "transformation language program file", "hats-gui, lexical specification, grammar files, parser file, parser file", "hats-gui, parsed program file, parser, transformation language program, user-defined library files, parsed program file", "hats-gui,displays,standard error,standard output", "hats-gui, host os, applytransformations program, parsed program file, user-defined library file, host os, hats-gui, applytransformation process", "hats-sml applytransformation,sdts,transformation language program,transformation language program,hats-gui,applytransformaion", "use case"]}
{"index": 2, "ucName": " Select Application\n\n", "uctext": "  The user selects an application.\n\n", "steps": ["System requests from Host OS a list of existing applications within current directory.", "Host OS returns list of files within current directory.", "System displays list of existing applications within current directory (ALT 1, ALT 2).", "User selects an application within the list (ALT 2).", "System sets selected application as the current application.", "End of use case."], "dataset": "hats", "act": ["requests,output", "returns", "displays", "selects", "sets,select", "end of use case"], "obj": ["host os, applications, directory", "list of files, current directory", "existing applications, current directory, alt 1, alt 2", "user, application, list", "system, selected application, current application", "use case"]}
{"index": 3, "ucName": " Select File\n\n", "uctext": "  The user wants to perform some operation, and the system requests a filename.  A list of file names in the currently selected application is presented.  The user selects one file name in the application. Actors: User, Host OS\n\n", "steps": ["1. System requests from Host OS a list of files in the current directory.", "2. Host OS only returns list of files in the current directory.", "3. System displays this list of files (ALT 1, ALT 2).", "4. User selects a file within the list (ALT 2, ALT 3).", "5. System sets selected file as the current file.", "6. End of use case."], "dataset": "hats", "act": ["requests, list", "returns", "displays", "selects", "sets", "end"], "obj": ["host os, list of files, current directory", "list of files, current directory", "system, list, files", "file", "system,selected file,current file", "use case"]}
{"index": 4, "ucName": " Close Application\n\n", "uctext": "  The user wants to perform some operation on a selected application. These operations include open, close, save, save as, create new, edit files within application, and configure the application.\n\n", "steps": ["\n1. User selects option to close the currently selected application", "\n2. System asks for confirmation from user to close application.", "\n3. User confirms to close application (ALT 1).", "\n4. System checks that the changes to currently selected application’s configuration have been saved (ALT 2).", "\n5. System sets currently selected application to ‘none’.", "\n6. End of use case.\n\n"], "dataset": "hats", "act": ["selects,close", "asks,close", "confirms", "checks,have been saved", "sets", "end"], "obj": ["option, application", "confirmation, user, application", "user, application", "changes, currently selected application’s configuration", "currently selected application, none", "use case"]}
{"index": 5, "ucName": " Save Application\n\n", "uctext": " None\n\n", "steps": ["User selects option to save currently selected application.", "System requests Host OS to save configuration file for the selected application.", "Host OS saves the configuration file for the selected application into a non-volatile storage (ALT 1).", "System informs user that application has been saved.", "End of use case. Software Requirements Specification"], "dataset": "hats", "act": ["selects,save", "requests, save", "saves", "informs,has been saved", "end"], "obj": ["option,application", "system, host os, configuration file, selected application", "host os, configuration file, application, non-volatile storage", "application", "use case, software requirements specification"]}
{"index": 6, "ucName": " Save Application As\n", "uctext": " None\n\n", "steps": ["User selects to save a currently open application using a different directory name.", "System requests user for a name to save the open application.", "User enters or selects a name for the application to be saved (ALT 1).", "System confirms that application name is unique (ALT 2).", "System requests Host OS to create new directory with the given name.", "Host OS creates new application with the entered name (ALT 3).", "System requests Host OS to copy core files, configuration files, and .tlp files to the new directory.", "Host OS copies all files from selected application to created application (ALT 3).", "System informs user that application has been saved with entered name.", "End of use case."], "dataset": "hats", "act": ["selects,save", "requests,save", "enters,selects,saved", "confirms", "requests, create", "creates", "requests,copy", "copies,creates", "informs,has been saved", "use"], "obj": ["open application, different directory name", "name,open application", "name,application", "application name", "system, host os, directory", "host os, new application, entered name, alt 3", "core files,configuration files,.tlp files,new directory", "host os, files, selected application, created application", "application,user", "use case"]}
{"index": 7, "ucName": " Edit Files in an Application\n\n", "uctext": " None\n\n", "steps": ["User selects option to edit a file within the currently selected application.", "User selects file to edit (Use Case 4).", "System checks application to determine if editor is associated with this file. An editor is associated with the file if the configuration explicitly associates this file with an editor or an editor is associated with files of this type. An editor is associated with this file (ALT 1).", "The HATS-GUI sends message to Host OS to start the preferred editor in new process and passes file name to editor.", "Host OS initiates process, puts editor in process, sends the filename as argument.", "End of use case."], "dataset": "hats", "act": ["selects,edit", "selects", "checks, determine, is, is, associates, is", "sends, start, passes", "initiates,puts,sends", "end"], "obj": ["user, option, file, application", "file", "system checks application, editor, file, configuration, editor, file, editor, files, editor", "hats-gui, host os, preferred editor, file name, editor", "host os, process, editor, filename", "use case"]}
{"index": 8, "ucName": " Create New Application\n\n", "uctext": " None\n\n", "steps": ["User selects option to create a new application.", "Close existing application if one is selected (Refer to Use Case 5 – Scenario 1).", "System asks user to enter a name and location for new application.", "User enters name and location for new application (ALT 1).", "System requests Host OS to create new application.", "Host OS creates new application (ALT 2).", "System informs user that new application has been created.", "End of use case."], "dataset": "hats", "act": ["selects,create", "close,refer", "asks,enter", "enters", "requests,create", "creates", "informs,has been created", "end"], "obj": ["option, application", "existing application, one, use case 5, scenario 1", "user, name, location, application", "user, name, location, application", "host os, new application", "host os, new application, alt 2", "application", "use case"]}
{"index": 9, "ucName": "  Configure Editor List.\n\n", "uctext": "  The user selects an application.  The user configures the settings of the selected application.  The settings of an application include, available editors, SDT display colors, SDT display shapes, default number of levels to expand, file associations between files and editors, and file associations between target files and transformation language program.\n\n", "steps": ["1. User selects option to configure editors.", "2. The system prompts for editor name and configuration information. Editor configuration information must be sufficient to start the editor on the Host OS.", "3. User enters editor name and parameters (ALT 1).", "4. System saves editor configuration in application configuration.", "5. End of use case."], "dataset": "hats", "act": ["selects,configure", "prompts, start", "enters", "saves", "end"], "obj": ["option,editors", "editor name, configuration information, editor configuration information, host os", "editor name,parameters", "system, editor configuration, application configuration", "5, use case"]}
{"index": 10, "ucName": " Configure SDT display.\n\n", "uctext": " None\n\n", "steps": ["User selects option to configure the colors and shapes of the graphical representation of an SDT.", "System displays a list containing types of displayed nodes and their corresponding current configured colors. The types of displayed nodes are given in Table 4.", "User selects a type of node from list. (ALT 1).", "System displays a list of supported colors and shapes.", "User selects a color and a shape from the list for the selected type of displayed node (ALT 2).", "System sets the selected values as the color and shape for the type of displayed node selected.", "End of use case."], "dataset": "hats", "act": ["selects,configure", "displays,are given", "selects", "displays", "selects", "sets", "end"], "obj": ["option, colors, shapes, graphical representation, sdt", "list, types of displayed nodes, corresponding current configured colors, table 4", "user, type of node, list", "colors,shapes", "user, color, shape, list, type, node", "selected values, color, shape, type, displayed node", "use case"]}
{"index": 11, "ucName": "  Configure Expand Levels.\n\n", "uctext": " None\n\n", "steps": ["1. User selects option to configure the default number of levels to expand in response to a single mouse click.", "2. System asks user to select or enter a number of levels to expand.", "3. User enters or selects a number of levels to expand. Number entered is a natural number.", "4. System sets the entered or selected number of levels as the default number of levels to expand.", "5. End of use case."], "dataset": "hats", "act": ["selects,configure,expand", "asks, select, enter, expand", "enters, selects, expand, entered", "sets,expand", "end"], "obj": ["user, option, default number of levels, mouse click", "number of levels", "user, levels, number, number, natural number", "the entered or selected number of levels, the default number of levels to expand", "5, end of use case"]}
{"index": 12, "ucName": "  File Associations:  Editors.\n\n", "uctext": " None\n\n", "steps": ["User selects option to associate file types with editors (ALT 1).", "System displays a list of configured editors. (Refer to Use Case 6.)", "System displays a list of file types.", "User selects a file type from list (ALT 2).", "User selects an editor from list (ALT 2).", "System associates the selected file type with the selected editor. When the user tries to edit a file of the type selected, the system will request the Host OS to initiate a process with the associated editor. (Refer to Use Case 5.)", "End of use case."], "dataset": "hats", "act": ["selects,associate", "displays", "displays", "selects", "selects", "associates, tries, edit, will request, initiate", "end"], "obj": ["user, option, file types, editors", "system, list, configured editors", "file types", "file type", "editor", "system, file type, editor, user, file, system, host os, process, editor", "use case"]}
{"index": 13, "ucName": " Save Configuration\n\n", "uctext": " None\n\n", "steps": ["1. User selects option to save configuration.", "2. System saves configuration with the application.", "3. End of use case."], "dataset": "hats", "act": ["selects,save", "saves", "end"], "obj": ["user, option, configuration", "configuration,application", "end of use case"]}
{"index": 14, "ucName": "  SDT Display.\n\n", "uctext": " The user wants to display and manipulate a graphical representation of an SDT. Manipulation of a graphical representation of an SDT includes selecting and unselecting displayed nodes, navigation through the display using a navigation window and scrolling, expanding and collapsing displayed nodes, hiding displayed nodes, searching for SDT sub-trees, and finding smallest well-formed trees.\n\n", "steps": ["User selects option to view and manipulate a graphical representation of an SDT.", "User selects SDT to view and manipulate (Refer to Use Case 4).", "System displays a graphical representation of the selected SDT in an on-screen work area.", "The work area of the SDT display contains the following elements:", "a) A window that displays the displayed graph representation of the SDT.", "b) A text window that displays the labels of the leaf nodes in the currently displayed graph.", "c) If either window is too small to contain all the information to be presented, the windows will have scroll bars to facilitate scrolling.", "The system will respond to dragging of scroll buttons (or pressing arrow keys) by shifting the display in the appropriate direction.", "d) If the SDT is too large for the window, a separate, small window with a compressed view of the SDT will be displayed.", "In this window, a displayed graph of the entire SDT will be drawn.", "The nodes of this displayed graph will be smaller than the displayed nodes in the SDT display work area.", "It is not necessary that the user be able to read node labels.", "It is only necessary that the user be able to see the high-level structure of the SDT.", "A small box named the locator box will be displayed showing the part of the SDT currently displayed in the main SDT display window.", "User is able to manipulate the displayed graph representation of the SDT. (See the remaining scenarios.)"], "dataset": "hats", "act": ["selects,view,manipulate", "selects,view,manipulate", "displays", "contains", "displays", "displays", "is, contain, presented, will have, facilitate, scrolling", "respond,dragging,shifting", "display, will be displayed", "displayed, drawn", "will be smaller", "be able to read", "see", "will be displayed", "is able to manipulate"], "obj": ["option,graphical representation,sdt", "sdt", "graphical representation, sdt, on-screen work area", "the work area, sdt display, elements", "window,graph representation,sdt", "the labels of the leaf nodes, the currently displayed graph", "window,scroll bars,scrolling", "system, scroll buttons, arrow keys, display", "sdt, window, separate, small window, compressed view", "window,graph,sdt", "nodes,graph,displayed nodes,sdt display work area", "user", "the user, the high-level structure of the sdt", "locator box, sdt, sdt display window", "graph representation, sdt"]}
{"index": 15, "ucName": "  Select nodes.\n\n", "uctext": " None\n\n", "steps": ["User selects one or more displayed nodes. Displayed node selection methods are described here.", "A single node can be selected by a right mouse click on the node.", "A single node can be selected via the keyboard by moving the keyboard cursor to a node and pressing the enter key. The keyboard cursor is moved between nodes using the tab key.", "Several nodes can be selected by drawing a mouse box around the desired nodes.", "Several nodes can be selected by holding the shift key down and selecting individual displayed nodes. When a user selects a set of nodes using these operations (and the shift key is not held down), the previously selected set of nodes (if any) is unselected.", "System highlights the smallest well-formed tree of the selected nodes in the displayed graph.", "System finds corresponding portion of leaf text of the selected nodes in the displayed graph.", "System highlights the corresponding portion of leaf text.", "If both SDT and Pretty-printed text are displayed, the system will find the corresponding pretty-printed text and highlight that text in the Pretty-print text window.", "End of use case."], "dataset": "hats", "act": ["selects,are described", "be selected, click", "selected, moving, pressing, moved", "can be selected, drawing", "can be selected, holding, selecting, selects, is held down, is unselected", "highlights", "finds", "highlights", "displayed, find, highlight", "end"], "obj": ["user, nodes, node selection methods", "node", "keyboard, enter key, keyboard cursor, node, tab key, nodes", "nodes, mouse box", "node,shift key,user", "system,tree,nodes,graph", "leaf text, selected nodes, displayed graph", "corresponding portion of leaf text", "sdt, pretty-printed text, pretty-print text window", "use case"]}
{"index": 16, "ucName": "  Navigation window navigation.\n\n", "uctext": " None\n\n", "steps": ["The user clicks the mouse in the navigation window SDT display.", "The system determines the node in the displayed graph closest to the mouse cursor and redraws the displayed graph with this node in the center of the main display.", "The system updates the locator box in the navigation window display.", "End of use case."], "dataset": "hats", "act": ["clicks", "determines,redraws", "updates", "end"], "obj": ["user, mouse, navigation window, sdt display", "system, node, graph, mouse cursor, node, graph, node, main display", "locator box, navigation window display", "use case"]}
{"index": 17, "ucName": "  Expand\n\n", "uctext": " None\n\n", "steps": ["User points the mouse cursor at a node and clicks the left mouse button (ALT 1).", "System displays the tree by expanding descendants of the node in the displayed graph. The number of levels to expand is given by the application configuration. If fewer than this number of levels exist, then all descendants of the chosen node are displayed.", "System changes the shape and color of selected node as specified in the application configuration to indicate that it has become an expanded node.", "End of use case."], "dataset": "hats", "act": ["points,clicks", "displays, expanding, is, exist, are displayed", "changes,indicate,has become", "end"], "obj": ["user, mouse cursor, node, left mouse button", "tree, node, graph, application configuration, levels, descendants", "shape, color, node, application, configuration, node", "use case"]}
{"index": 18, "ucName": "  Collapse\n\n", "uctext": " None\n\n", "steps": ["1. User points the mouse cursor at a node and clicks the left mouse button.", "2. System removes all descendants of the selected node from the displayed graph.", "3. System changes the shape and color of selected node as specified in the application configuration to indicate that it has become a collapsed node.", "4. End of use case."], "dataset": "hats", "act": ["points,clicks", "removes", "changes,indicate,has become", "end"], "obj": ["mouse cursor, node, left mouse button", "node, graph", "shape, color, node, application, configuration, node", "use case"]}
{"index": 19, "ucName": "  Hide nodes\n\n", "uctext": " None\n\n", "steps": ["User selects one or more displayed nodes. (Refer to Use Case 7.)", "User selects option to hide selected displayed nodes.", "System removes the selected nodes from the displayed graph.", "System changes the types of the displayed nodes remaining on the screen to indicate that there are hidden nodes in the displayed graph.", "End of use case."], "dataset": "hats", "act": ["selects,refer", "selects,hide,displayed", "removes", "changes,indicate", "end"], "obj": ["user, use case 7", "option, nodes", "the selected nodes, the displayed graph", "the types, the displayed nodes, the screen, hidden nodes, the displayed graph", "use case"]}
{"index": 20, "ucName": " Search\n\n", "uctext": " None\n\n", "steps": ["User selects option to search SDT for a desired sub-tree.", "System asks user for the criteria to search nodes. Search criteria for SDTs are presented in Appendix E.", "User enters search criteria.", "System finds the first matching sub-tree in the SDT starting at the current keyboard cursor location (ALT 1).", "System creates a displayed graph for the sub-tree matching the search criteria. The displayed nodes of the matching sub-tree are highlighted. If no nodes match the search criteria, none are highlighted.", "If both SDT and Pretty-printed text are displayed, the pretty-printed text corresponding to the highlighted nodes of the SDT is highlighted.", "End of use case."], "dataset": "hats", "act": ["selects", "asks,search,presented", "enters", "finds,starting", "creates, highlighted, match, highlighted", "are displayed, is highlighted", "end"], "obj": ["user, option, sdt, sub-tree", "system, user, criteria, nodes, sdts, appendix e", "search criteria", "system, sub-tree, sdt, keyboard cursor location, alt 1", "system, graph, sub-tree, nodes, criteria", "sdt, pretty-printed text, pretty-printed text, sdt", "use case"]}
{"index": 21, "ucName": "  Repeat Search\n\n", "uctext": " None\n\n", "steps": ["User selects option to repeat a search SDT for a desired sub-tree.", "System finds the next matching sub-tree in the SDT starting at the current keyboard cursor location. Software Requirements Specification", "System creates a displayed graph for the sub-tree matching the search criteria. The displayed nodes of the matching sub-tree are highlighted. If no nodes match the search criteria, none are highlighted.", "If both SDT and Pretty-printed text are displayed, the pretty-printed text corresponding to the highlighted nodes of the SDT is highlighted.", "End of use case."], "dataset": "hats", "act": ["selects,repeat", "finds,starting", "creates,are,are,are highlighted,are highlighted", "are displayed, is highlighted", "end"], "obj": ["user, option, search sdt, sub-tree", "system, sub-tree, sdt, keyboard cursor location, software requirements specification", "system, graph, nodes, criteria", "sdt, pretty-printed text, pretty-printed text, sdt", "use case"]}
{"index": 22, "ucName": "  Copy Text From Text Window.\n\n", "uctext": " None\n\n", "steps": ["1. System displays text of leaf nodes in currently displayed graph in a text window.", "2. User selects a portion of displayed text.", "3. System highlights selected portion of text in the text window.", "4. User selects option to copy selected text. Minimally, the system will copy selected text in response to the Ctrl-Insert key combination.", "5. System puts the selected and copied text in the Host OS copy/paste buffer.", "6. End of use case."], "dataset": "hats", "act": ["displays", "selects", "highlights", "selects, copy", "puts,puts,puts", "end"], "obj": ["system, text, leaf nodes, graph, text window", "portion of displayed text", "selected portion of text, text window", "user, option, text, system, text, combination", "selected and copied text, host os copy/paste buffer", "use case"]}
{"index": 23, "ucName": "  Refresh Display.\n\n", "uctext": " None\n\n", "steps": ["The user selects the option to refresh the display of the SDT.", "The system disposes of the currently displayed SDT.", "The system reads the SDT file and displays the newly generated SDT. The display of the SDT contains approximately the same number of nodes as the previously displayed SDT.", "End of use case."], "dataset": "hats", "act": ["selects,refresh,display", "disposes", "reads,displays,contains", "end"], "obj": ["refresh the display of the sdt", "sdt", "system, sdt file, sdt, sdt", "use case"]}
{"index": 24, "ucName": "  Display Pretty-Printed Text\n\n", "uctext": " The user wants to display and manipulate a text representation of the result of applying a transformation language program to a target file.  Manipulation of text includes selecting text and searching for sub-strings.\n\n", "steps": ["1. User selects option to view and manipulate a pretty-printed text from a particular successful transformation.", "2. User selects pretty-printed text to view and manipulate. (Refer to Use Case 4.)", "3. System displays the pretty-printed text in a work window.", "a) The work area of the display of pretty-printed text contains a text window that displays the text.", "b) If the window is too small to contain all the information to be presented, the windows will have scroll bars to facilitate scrolling. The system will respond to dragging of scroll buttons (or pressing arrow keys) by shifting the display in the appropriate direction.", "4. User is able to manipulate the pretty-printed text. (See the remainder of the scenarios.)", "5. End of use case."], "dataset": "hats", "act": ["selects,view,manipulate", "selects,view,manipulate", "displays", "contains, displays", "will have, will respond, shifting", "is able to manipulate", "end"], "obj": ["option, text, transformation", "user, text, use case 4", "text, work window", "text window, text", "window,window,system,scroll bars,scroll buttons,arrow keys", "the pretty-printed text, the remainder of the scenarios", "use case"]}
{"index": 25, "ucName": "  Select text.\n\n", "uctext": " None\n\n", "steps": ["1. User selects a portion of the displayed pretty-printed text. Text selection methods are described here.", "• Text can be selected by clicking and dragging the mouse across an area of text.", "• Text can be selected by holding the shift key and moving the keyboard cursor using the arrow keys.", "When a user selects text using these operations, the previously selected text (if any) is unselected.", "2. System highlights selected portion of the displayed pretty-printed text.", "3. If both pretty-printed text and graphical representation of SDT are displayed, the system finds the corresponding displayed nodes of the SDT of the selected portion of pretty-printed text and highlights the corresponding displayed nodes of the SDT.", "4. End of use case."], "dataset": "hats", "act": ["selects,are", "can be selected, clicking, dragging", "be,selected,holding,moving", "selects,unselected", "highlights", "displayed, finds, highlights", "end"], "obj": ["user, text, text selection methods", "text,mouse,area,text", "shift key, keyboard cursor, arrow keys", "text, these operations, the previously selected text", "selected portion, displayed pretty-printed text", "sdt, sdt", "use case"]}
{"index": 26, "ucName": "  Search\n", "uctext": " None\n\n", "steps": ["1. User selects option to search pretty-printed text for desired text.", "2. System asks user for the criteria to search text. Text search criteria are given in Appendix F.", "3. User enters or selects criteria to search text.", "4. System finds those portions of pretty-printed text that match the search criteria and highlights those portions of the text that match (ALT 1).", "5. If both the pretty-printed text and the graphical representation of an SDT are displayed, the system finds the corresponding nodes of the SDT of the selected portion of pretty-printed text and highlights the corresponding nodes of the SDT.", "6. End of use case."], "dataset": "hats", "act": ["selects", "asks,are given", "enters,selects,search", "finds,highlights", "displayed, finds, highlights", "end"], "obj": ["option, text", "system, user, criteria, text, text search criteria, appendix f", "criteria, text", "system, portions, text, search criteria, portions, text", "pretty-printed text, graphical representation, sdt, system, nodes, sdt, text, nodes, sdt", "use case"]}
{"index": 27, "ucName": " Generate Pretty-printed Output\n\n", "uctext": " The user requests the application of a pretty-print style file to a target SDT. The necessary file names are passed to HATS-SML, HATS-SML applies the pretty-print style to the SDT, and a formatted text file is generated.\n\n", "steps": ["\n1. User selects the option to pretty-print a target from the currently selected application.", " \n2. User selects a target SDT (Refer to Use Case 4) (ALT 1).", " 3. No pretty-print style file is associated with the target file. The HATS-GUI prompts the user to select a pretty-print style file.", "\n4. User selects a pretty-print style file (Refer to Use Case 4) (ALT 2). ", "\n5. HATS-GUI generates a file name by appending “.txt” to the target SDT root name.", " \n6. The HATS-GUI verifies that no file with this name exists in the current directory.", " This file becomes the output file name (ALT 3).", "\n7. The HATS-GUI sends a message to the Host OS to start the Pretty-print program and sends the target SDT file name, the pretty-print style file name, and the output file name to Pretty-print as command line arguments.", "\n8. HATS-SML applies the style file to the target SDT and writes the output to the output file specified on the command line (ALT 6).", "\n9. HATS-SML terminates.", "\n10. End of use case.\n\n"], "dataset": "hats", "act": ["selects,pretty-print", "selects", "prompts,select", "selects", "generates, appending", "verifies,exists", "becomes", "sends, start, sends", "applies, writes", "terminates", "end"], "obj": ["option, target, application", "user, target sdt, use case 4, alt 1", "hats-gui, pretty-print style file, pretty-print style file", "user, use case 4, alt 2", "hats-gui, .txt, sdt root name", "hats-gui, current directory", "alt 3", "hats-gui, host os, pretty-print, sdt file, pretty-print style file", "hats-sml, style file, target sdt, output file, command line", "hats-sml", "10, use case"]}
{"index": 0, "ucName": " Start and Stop Diagnostics Use Case", "uctext": "  \nThis use case provides the actor the means to start and stop diagnostic processing.  The actor in this case is the administrator user (see 2.5.1 ).\n", "steps": ["\n1. The user launches the tool by double -clicking the icon associate d with the tool or typing the application’s name.", "\n2. The tool momentarily displays a splash screen identifying the tool, identifying developing and sponsoring organizations as appropriate, and listing copyright information.", "\n3. The tool displays the main window o f the tool.", "  \n4. The user starts the diagnostic processing by selecting a menu item named “Start Diagnostics” from a drop down menu named “Status”.", "\n5. Include (Authenticate User). ", " If the user has the appropriate privilege (i.e., the user is the administrator user) the tool requests a confirmatory response from the user to start the diagnostic processing.", "\n6. If the user confirms the desire to start diagnostic processing, the tool starts the processing and displays an animated indication that diagnostic processing is active.", "\n7. If the user responds negatively to the confirmation, the tool does not start the diagnostic processing but the user remains authenticated.", "\n8. If the user does not have the appropriate privilege, the tool does not start the diagnostic processing.", "\n9. The u ser secures the tool by selecting a menu item named “Logout” from the drop down menu named “File”.", "\n10. The tool returns the current user’s privileges to those of the general user.", "\n11. If a period of 15 minutes elapses whereby the user does not secure the tool, the  users privileges will automatically revert to those of a general user.\n"], "dataset": "pnnl", "act": ["launches, double-clicking, typing", "displays, identifying, identifying, listing", "displays", "starts, selecting", "include, authenticate", "has, is, requests, start", "confirms, starts, displays", "responds,does not start,remains", "does not have, does not start", "secures,selecting", "returns", "elapses,secure,revert"], "obj": ["user, tool, icon, application", "splash screen, tool, developing and sponsoring organizations, copyright information", "window", "user,diagnostic processing,menu item,start diagnostics,drop down menu,status", "authenticate user", "user, privilege, tool, user, response, user, diagnostic, processing", "user, tool, processing, indication, diagnostic processing", "user, tool, user", "user, privilege, tool, diagnostic processing", "menu item, drop down menu", "tool, user, privileges, general user", "period, 15 minutes, user, tool, privileges, general user"]}
{"index": 1, "ucName": " Browse Current Diagnostics  Use Case", "uctext": "  \nThis use case provides the actor the means to view current diagnostic results.  The actor in this case is the user (see 2.5.1 ).\n", "steps": ["The tool displays the main (initial) window, listing buildings under diagnosis.", "The user selects a building of interest.", "The tool displays the subsystems window, tiled on top the main (initial) window.", "The user selects a subsystem of interest.", "The tool displays the condition window, tiled on top the subsystems window.", "The user selects a diagnostic of interest.", "The tool displays the diagnostic information window for that diagnostic."], "dataset": "pnnl", "act": ["displays,listing", "selects", "displays, tiled", "selects", "displays, tiled", "selects", "displays"], "obj": ["main (initial) window, buildings", "building", "subsystems window, main (initial) window", "subsystem", "tool,condition window,subsystems window", "diagnostic", "diagnostic information window, diagnostic"]}
{"index": 2, "ucName": " Browse Historical Diagnostics Use Case", "uctext": "  \nThis use case provides the actor the means to view historical  diagnostic results.  The actor in this case is the user (see 2.5.1 ).\n", "steps": ["The user clicks the \"History\" button.", "The tool displays the diagnostic history window depicting the historical results of the selected condition of interest over the default viewing period in the form  of a color map.  The window provides a scroll bar for scrolling through historical results if data are available prior to the default viewing period.  The default viewing period extends backward one week prior to the current date.  Sliding the scroll bar does not change the viewing period displayed.  The default time resolution for the window is one hour.", "The user slides the scroll bar backward or forward to view previous results up to the current time.", "The tool displays the results within a viewing period  of one week, adding results to the beginning or ending of the period while dropping results of the opposite end.  The tool does not change the viewing period.", "The user may close the diagnostic history window by clicking the \"Close\" button.", "The tool dismis ses the diagnostic history window and the diagnostic information window and makes the condition window the current window."], "dataset": "pnnl", "act": ["clicks", "displays,depicting,provides,scrolling,are,extends,sliding,does,change,is", "slides,view", "displays,adding,dropping,does not change", "close,click", "dismisses, makes"], "obj": ["history", "tool, diagnostic history window, historical results, selected condition of interest, default viewing period, color map, window, scroll bar, historical results, data, default viewing period, viewing period, default time resolution, window", "user, scroll bar, results, time", "tool, results, viewing period, week, results, period, results, end, tool, viewing period", "user, diagnostic history window, \"close\" button", "tool,diagnostic history window,diagnostic information window,condition window,current window"]}
{"index": 3, "ucName": " Configure Diagnostics Use Case", "uctext": "  \nThis use case provides the actor the means to configure the diagnostic tool.  This includes defining the buildings containing systems to be diagnosed, defining the systems themselves, specifying equipment setpoints, selecting diagnostic sensitivity, and modif ying fixed data.  The actor in this case is the administrator user (see 2.5.1 ).\n", "steps": ["When presented with the main window, the user may select the \"Configure Diagnostics\" menu item from the menu entitled \"File\".", "If the user has not already been authenticated as the administrator user, include (Authenticate User).", "If the user has the appropriate privilege, the tool displays the configuration window.", "The user may click the \"Recall\" button to read previously saved changes from a disk file or database.", "The tool populates the window with the data from the disk file.", "The user makes the desired changes to the configuration and can click the button labeled \"Save\" to save the changes.  Otherwise, the user can click the button labeled \"Close\".", "If the user clicks the button labeled \"Save\", the tool will request confirmation to save the changes.", "If the user confirms, the tool will request a name for the disk file in which to save the modified data to permanent storage.", "The user will enter a name for the file or cancel the operation.", "If the user enters a name for  the file, the tool will save the changes.  If the user cancels the operation, the tool will perform no function.", "If the tool completes the save operation, the tool will ask the user if the changes are to be relayed to the diagnostic processing for immediate use.", "If the user confirms the changes are to be relayed to the diagnostic processing, the tool relays the changes if the processing is currently active.  Otherwise, the tool does not relay the changes.", "If the user clicks the button labeled \"Close\", the tool will request confirmation for the close and the potential loss of any changes.", "If the user confirms, the tool will dismiss the configuration window, ignoring any changes and returns the user to the main window.  If the user rejects the initial desire to close, the tool will perform no function."], "dataset": "pnnl", "act": ["presented, select", "has, been authenticated, include", "has,displays", "click,read", "populates", "makes,click,click", "clicks,request", "confirms,request,save", "enter, cancel", "enters,save,cancels,perform", "completes, will ask, are, to be relayed", "confirms, relays, relay", "clicks,will request", "confirms, dismiss, ignoring, returns, rejects, perform"], "obj": ["main window, user, \"configure diagnostics\" menu item, menu entitled \"file", "user, administrator user, (authenticate user", "user, tool, configuration window", "user, recall, button, changes, disk file, database", "window, data, disk file", "user, configuration, button, changes, button", "user, button, tool", "user, tool, name, disk file, data, permanent storage", "name, file, operation", "the user, the tool, the user, the tool", "the tool, the tool, the user, the changes, the diagnostic processing, immediate use", "user, changes, diagnostic processing, tool, tool", "user, button, tool", "configuration window, changes, user, main window, tool, function"]}
{"index": 4, "ucName": " Authenticate User", "uctext": "  \nThis use case establishes the privileges of the user for certain functions of the tool.    \n", "steps": ["The tool displays a window for entry of authenticating information, i.e., user name and password, to validate and establish the privileges of the user.", "The user enters their user name and password.", "The tool attempts to authenticate the user and indicates whether authentication has succeeded or not.", "If authentication is unsuccessful, the user is returned to the authentication window to reenter the information.", "The tool permits three attempts at authentication before dismissing the authentication window and returning the user to the previous window.", "The user may cancel the authentication process at any time and return to the previous window."], "dataset": "pnnl", "act": ["displays,entry,validate,establish", "enters", "attempts,authenticate,indicates,has succeeded", "is,returned,reenter", "permits, dismissing, returning", "may cancel, return"], "obj": ["user name, password", "user name, password", "the user", "authentication, user, authentication window, information", "three attempts, authentication, authentication window, user, previous window", "the user, authentication process, previous window"]}
{"index": 0, "ucName": "\nManage  Requests \n", "uctext": " The main requests management page that coordinator will manage all  request from customer or to suppliers\n", "steps": ["\n 1 The coordinator press “Manage  Requests”\n", " 2 The coordinator use any function.\n", " 3 The coordinator will manage all requests function. \n"], "dataset": "viper", "act": ["press", "use", "manage,requests,function"], "obj": ["the coordinator, manage requests", "the coordinator, function", "coordinator,requests,function"]}
{"index": 1, "ucName": "\nAdd Request\n", "uctext": " Coordinator can add new request  and send it to his supplier\n", "steps": ["1 The coordinator press \"Add Request\"", "2 The coordinator fills the request form.", "3 The coordinator will send the request to supplier"], "dataset": "viper", "act": ["press", "fills", "send"], "obj": ["add request", "coordinator", "coordinator, request, supplier"]}
{"index": 2, "ucName": "\nView Requests\n", "uctext": " Coordinator issues requests , coordinator can show all  requests that sent his supplier or that came from his customer\n", "steps": ["1 The coordinator press \"View Requests\"", "2 The coordinator view list of requests."], "dataset": "viper", "act": ["press", "view"], "obj": ["coordinator", "coordinator,view,list,requests"]}
{"index": 3, "ucName": "\nView Request Details\n", "uctext": " Coordinator can show the details of any request that he chose.\n", "steps": ["1 The coordinator press \"View Request Details\"", "2 The coordinator views the details of a request."], "dataset": "viper", "act": ["press", "views"], "obj": ["the coordinator, view request details", "coordinator,details,request"]}
{"index": 4, "ucName": "\nEdit Request\n", "uctext": " The Coordinator can edit  request and notify his supplier\n", "steps": ["1 The coordinator press \"Edit Request\"", "2 The coordinator modifies the request information.", "3 The coordinator will send a notification to supplier"], "dataset": "viper", "act": ["press", "modifies", "send"], "obj": ["edit request", "coordinator,request information", "coordinator, notification, supplier"]}
{"index": 5, "ucName": "\nDelete Request\n", "uctext": " The Coordinator can delete  request and notify his supplier\n", "steps": ["The coordinator press \"Delete Request\"", "The information about the request will show.", "Press \"Delete\" to processing the deleting", "The coordinator will send a notification to supplier"], "dataset": "viper", "act": ["press", "show", "press, delete, processing, deleting", "send"], "obj": ["delete request", "the request", "delete\", deleting", "notification, supplier"]}
{"index": 6, "ucName": "\nManage Items \n", "uctext": " The main items management page that coordinator will manage the items that he have and may supply to customer\n", "steps": ["1 The coordinator press \"Manage Items\"", "2 The coordinator use any function.", "3 The coordinator will manage all items function."], "dataset": "viper", "act": ["press", "use", "manage"], "obj": ["coordinator, manage items", "the coordinator,any function", "coordinator,items,function"]}
{"index": 7, "ucName": "\nAdd Item\n", "uctext": " Coordinator can add new items  and may supply it to our customer \n", "steps": ["1 The coordinator press \"Add Item\"", "2 The coordinator fills the item form.", "3 The coordinator will save the item."], "dataset": "viper", "act": ["press", "fills", "save"], "obj": ["coordinator,add item", "coordinator, item form", "item"]}
{"index": 8, "ucName": "\nView Items\n", "uctext": " The coordinator can view all  items that he have ,that may receive from supplier and may supply it for his customers\n", "steps": ["The coordinator press \"View Items\"", "The coordinator view list of Items"], "dataset": "viper", "act": ["press", "view"], "obj": ["view items", "list of items"]}
{"index": 9, "ucName": "\nView Item Details\n", "uctext": " Coordinator can show the details of any items that he chooses.\n", "steps": ["1 The coordinator press \"View Item Details\"", "2 The coordinator views the details of an item."], "dataset": "viper", "act": ["press", "views"], "obj": ["coordinator,view item details", "the coordinator, details, item"]}
{"index": 10, "ucName": "\nEdit Item.\n", "uctext": " The Coordinator can edit item that he want.\n", "steps": ["The coordinator press \"Edit Item\"", "The coordinator modifies the item information.", "The coordinator will send a notification to supplier or customer if need. "], "dataset": "viper", "act": ["press", "modifies", "will send"], "obj": ["edit item", "item information", "coordinator,notification,supplier,customer"]}
{"index": 11, "ucName": "\nDelete Item\n", "uctext": " The Coordinator can delete any item from his list and his supply.\n", "steps": ["1 The coordinator press \"Delete Item\"", "2 The information about the item will show.", "3 Press \"Delete\" to processing the deleting"], "dataset": "viper", "act": ["press", "will show", "press,delete,processing,deleting"], "obj": ["coordinator", "item", "delete\",deleting"]}
{"index": 12, "ucName": "\nManage Resources Locations\n", "uctext": " The main resources locations management page that coordinator will manage the resources locations that he have and may use it to store or supplying.\n", "steps": ["1 The coordinator press \"Manage Resources Locations\"", "2 The coordinator use any function.", "3 The coordinator will manage all resources locations function. "], "dataset": "viper", "act": ["press", "use", "manage"], "obj": ["the coordinator,manage resources locations", "function", "resources, locations, function"]}
{"index": 13, "ucName": "\nAdd Location\n", "uctext": " Coordinator can add new resources locations and may start to use it in our supply and storing.\n", "steps": ["1 The coordinator press \"Add Location\"", "2 The coordinator fills the location form.", "3 The coordinator will save the location."], "dataset": "viper", "act": ["press", "fills", "will save"], "obj": ["the coordinator, add location", "location form", "the coordinator, location"]}
{"index": 14, "ucName": "\nView Locations\n", "uctext": " The coordinator can view all resources locations that he have, that use to supplying our customer and store our items.\n", "steps": ["The coordinator press \"View Locations\".", "The coordinator view list of Locations."], "dataset": "viper", "act": ["press", "view"], "obj": ["view locations", "coordinator,locations"]}
{"index": 15, "ucName": "\nView Location Details\n", "uctext": " Coordinator can show the details of resource location that he chooses.\n", "steps": ["1 The coordinator press \"View Location Details\"", "2 The coordinator views the details of a location."], "dataset": "viper", "act": ["press", "views"], "obj": ["coordinator,view location details", "the coordinator, the details, a location"]}
{"index": 16, "ucName": "\nEdit Location.\n", "uctext": " The Coordinator can edit a location that he wants.\n", "steps": ["\n 1 The coordinator press “Edit Location”\n", " 2 The coordinator modifies the location information.\n"], "dataset": "viper", "act": ["press", "modifies"], "obj": ["edit location", "coordinator,location information"]}
{"index": 17, "ucName": "\nDelete Location\n", "uctext": " The Coordinator can delete any location from his list.\n", "steps": ["1 The coordinator press \"Delete Location\"", "2 The information about the location will show.", "3 Press \"Delete\" to processing the deleting"], "dataset": "viper", "act": ["press", "will show", "press,delete,processing,deleting"], "obj": ["delete location", "the location", "delete,processing,deleting"]}
{"index": 18, "ucName": "\nEdit Profile\n", "uctext": " The supplier can edit his profile. The profile contains the name of the supplier, the address, contact person and e-mail… etc.\n", "steps": ["1 He clicks on the proper link to edit his profile.", "2 Whether he make changes or not, when he clicks on the proper link to submit the profile values, the current values of the profile is saved and he is returned to the main menu."], "dataset": "viper", "act": ["clicks,edit", "make,clicks,submit,is saved,is returned"], "obj": ["link, profile", "he, profile values, he, current values of the profile, he, main menu"]}
{"index": 19, "ucName": "\nView Supply Requests\n", "uctext": " To show a list of pending requests. \n", "steps": ["1 He clicks on the proper link to view supply requests.", "2 A list of pending requests is listed."], "dataset": "viper", "act": ["clicks,view", "listed"], "obj": ["supply requests", "pending requests"]}
{"index": 20, "ucName": "\nView Request Details\n", "uctext": " To view extended details of the chosen request.\n", "steps": ["1 He clicks on the proper link to view supply requests.", "2 A list of pending requests is listed.", "3 He clicks on the proper link on a request to display its details."], "dataset": "viper", "act": ["clicks, view", "is listed", "clicks,display"], "obj": ["link, supply requests", "pending requests", "a request"]}
{"index": 21, "ucName": "\nSend Feedback on Request\n", "uctext": " The supplier states whether he can supply all the requested items or part of them and the time frame to deliver them. \n", "steps": ["1 He input his feedback and submits.", "2 A success (or error) message is displayed."], "dataset": "viper", "act": ["input,submits", "is displayed"], "obj": ["feedback", "success, error, message"]}
{"index": 22, "ucName": "\nEdit Profile\n", "uctext": " The customer can edit his profile. The profile contains the name of the customer, his address, contact person and e-mail… etc.\n", "steps": ["1 He clicks on the proper link to edit his profile.", "2 Whether he makes changes or not, when he clicks on the proper link to submit the profile values, the current values of the profile is saved and he is returned to the main menu."], "dataset": "viper", "act": ["clicks,edit", "makes, clicks, submit, is saved, is returned"], "obj": ["the proper link", "main menu"]}
{"index": 23, "ucName": "\nAdd Request\n", "uctext": " Customer can add new request.\n", "steps": ["1 The Customer press \"Add Request\"", "2 The Customer fills the request form.", "3 The Customer will send the request to the Coordinator."], "dataset": "viper", "act": ["press", "fills", "send"], "obj": ["the customer", "the customer, the request form", "the customer, the request, the coordinator"]}
{"index": 24, "ucName": "\nView Requests\n", "uctext": " Customer can view all his pending requests that were sent to the Coordinator.\n", "steps": ["1 The Customer press \"View Requests\"", "2 The Customer view list of requests."], "dataset": "viper", "act": ["press", "view"], "obj": ["the customer, view requests", "the customer, view list of requests"]}
{"index": 25, "ucName": "\nEdit Request\n", "uctext": " The Customer can edit  request and notify the Coordinator.\n", "steps": ["1 The Customer press \"Edit Request\"", "2 The Customer modifies the request information.", "3 A notification will be sent to the Coordinator."], "dataset": "viper", "act": ["press", "modifies", "will be sent"], "obj": ["customer", "customer, request information", "notification, coordinator"]}
{"index": 26, "ucName": "\nDelete Request\n", "uctext": " The Coordinator can delete  request and notify his supplier\n", "steps": ["The Customer press \"Delete Request\"", "The information about the request will show.", "Press \"Delete\" to processing the deleting", "The Customer will send a notification to supplier"], "dataset": "viper", "act": ["press", "will show", "press, delete, processing, deleting", "send"], "obj": ["customer,delete request", "request", "delete\",deleting", "customer,notification,supplier"]}
{"index": 27, "ucName": "\nManage Customers \n", "uctext": " The main customers management page that coordinator will manage all customers information\n", "steps": ["1 The coordinator press \"Manage  Customers\"", "2 The coordinator use any function.", "3 The coordinator will manage all customers function. "], "dataset": "viper", "act": ["press", "use", "manage"], "obj": ["manage customers", "the coordinator, any function", "coordinator,customers,function"]}
{"index": 28, "ucName": "\nAdd Customer\n", "uctext": " Coordinator can add new Customer.\n", "steps": ["The coordinator press \"Add Customer\"", "The coordinator fills the new customer form.", "The coordinator will send the customer to supplier"], "dataset": "viper", "act": ["press", "fills", "send"], "obj": ["add customer", "the new customer form", "coordinator,customer,supplier"]}
{"index": 29, "ucName": "\nView Customers\n", "uctext": " coordinator can view a list of all customers.\n", "steps": ["The coordinator press \"View Customers\"", "The coordinator view list of customers."], "dataset": "viper", "act": ["press", "view"], "obj": ["coordinator", "coordinator,customers"]}
{"index": 30, "ucName": "\nView Customer Details\n", "uctext": " Coordinator can show the details of any customer that he chose.\n", "steps": ["The coordinator press \"View Customer Details\"", "The coordinator views the details of a customer."], "dataset": "viper", "act": ["press", "views"], "obj": ["view customer details", "coordinator,details,customer"]}
{"index": 31, "ucName": "\nEdit Customer\n", "uctext": " The Coordinator can edit  customer him.\n", "steps": ["1 The coordinator press \"Edit Customer\"", "2 The coordinator modifies the request information.", "3 The coordinator will send a notification to the customer."], "dataset": "viper", "act": ["press", "modifies", "send"], "obj": ["edit customer", "the coordinator, the request information", "coordinator,customer"]}
{"index": 32, "ucName": "\nDelete Customer\n", "uctext": " The coordinator can delete a certain customer\n", "steps": ["The coordinator press \"Delete Customer\"", "The information about the customer will show.", "Press \"Delete\" to processing the deleting", "The coordinator will send a notification to the customer on option."], "dataset": "viper", "act": ["press", "will show", "press, delete, processing, deleting", "will send"], "obj": ["coordinator,delete customer", "the customer", "delete\", deleting", "notification"]}
{"index": 33, "ucName": "\nManage Suppliers\n", "uctext": " The main suppliers management page that coordinator will manage all suppliers information\n", "steps": ["1 The coordinator press \"Manage  Suppliers\"", "2 The coordinator use any function.", "3 The coordinator will manage all suppliers function. "], "dataset": "viper", "act": ["press", "use", "manage"], "obj": ["the coordinator, manage suppliers", "coordinator, function", "coordinator, suppliers"]}
{"index": 34, "ucName": "\nAdd Supplier\n", "uctext": " Coordinator can add new Supplier\n", "steps": ["1 The coordinator press \"Add Supplier\"", "2 The coordinator fills the new Supplier form.", "3 The coordinator will send the Supplier to supplier"], "dataset": "viper", "act": ["press", "fills", "send"], "obj": ["coordinator,add supplier", "coordinator, supplier form", "the coordinator, supplier, supplier"]}
{"index": 35, "ucName": "\nView Suppliers\n", "uctext": " coordinator can view a list of all Suppliers.\n", "steps": ["\n 1 The coordinator press “View Suppliers”\n", " 2 The coordinator view list of Suppliers.\n"], "dataset": "viper", "act": ["press", "view"], "obj": ["coordinator", "coordinator, view, list, suppliers"]}
{"index": 36, "ucName": "\nView Supplier Details\n", "uctext": " Coordinator can show the details of any Supplier that he chose.\n", "steps": ["1 The coordinator press \"View Supplier Details\"", "2 The coordinator views the details of a Supplier."], "dataset": "viper", "act": ["press", "views"], "obj": ["coordinator,view supplier details", "coordinator,details,supplier"]}
{"index": 37, "ucName": "\nEdit Supplier\n", "uctext": " The Coordinator can edit  Supplier and notify him (on option.)\n", "steps": ["1 The coordinator press \"Edit Supplier\"", "2 The coordinator modifies the Supplier information.", "3 The coordinator will send a notification to the Supplier."], "dataset": "viper", "act": ["press", "modifies", "send"], "obj": ["edit supplier", "coordinator, supplier information", "3, coordinator, notification, supplier"]}
{"index": 38, "ucName": "\nDelete Supplier\n", "uctext": " The coordinator can delete a certain Supplier\n", "steps": ["The coordinator press \"Delete Supplier\"", "The information about the customer will show.", "Press \"Delete\" to processing the deleting", "The coordinator will send a notification to the Supplier on option."], "dataset": "viper", "act": ["press", "will show", "press, delete, processing, deleting", "send"], "obj": ["delete supplier", "customer", "delete\",deleting", "coordinator,notification,supplier,option"]}
{"index": 0, "ucName": " View Inventory\n", "uctext": " The system should provide a categorized view of the entire inventory to the Cons truction Junction s taff.\nStarting at the department level, users can navigate  into the inventory item categories and subcategories, all the way down to an individual inventory item.  ", "steps": ["1. User accesses the main inventory screen", "2. The screen displays all inventory departments", "3. User clicks a department cell", "4. The screen displays all inventory categories for the selected department", "5. User clicks a category cell that contains sub-categories", "6. The screen displays all inventory sub-categories for the selected category", "7. User clicks a sub-category cell (leaf category)", "7.1. For a Unique Item category: The screen displays a list of all inventory items for that selected category. User clicks an item in the items list. The screen displays the details for the item", "7.2. For a Stock Item category: The screen displays the details for that Stock Item category", "7.3. For a Under $5 category: Nothing happens – The category cell is not clickable."], "dataset": "2009 - inventory 2.0", "act": ["accesses", "displays", "clicks", "displays", "clicks", "displays", "clicks", "displays,clicks,displays", "displays", "happens, is not"], "obj": ["user, inventory, screen", "screen,inventory,departments", "department,cell", "screen,inventory categories,department", "user, category cell, sub-categories", "inventory sub-categories, selected category", "user, sub-category cell, leaf category", "unique item category, screen, inventory items, category, user, item, items list, screen, details, item", "7.2, stock item category, stock item category", "under $5 category, category cell"]}
{"index": 1, "ucName": " Manage Departments and Add Department\n", "uctext": " The system should allow inventory administrators to customize the inventory structure by defining the invent ory departments (not to be con fused actual retail floor departments known later in this document as stocking locations).  ", "steps": ["1.1. User accesses the main inventory screen", "1.2. System displays the Add Department button", "1.3. User clicks the Add Department button", "1.4. User enters the Department data", "1.5. System validates the Department data", "1.6. System adds the new Department to the inventory", "1.7. User is taken back to the main inventory screen"], "dataset": "2009 - inventory 2.0", "act": ["accesses", "displays", "clicks,add", "enters", "validates", "adds", "is taken back"], "obj": ["main inventory screen", "add department button", "user, add department button", "department", "department", "system, department, inventory", "user, main inventory screen"]}
{"index": 2, "ucName": " Manage Departments and Edit Department\n", "uctext": " The system should allow inventory administrators to customize the inventory structure by defining the invent ory departments (not to be con fused actual retail floor departments known later in this document as stocking locations).  ", "steps": ["2.1. User navigates to a Department (see View Inventory)", "2.2. System displays the Edit Department button", "2.3. User clicks the Edit Department button", "2.4. System displays the Department data", "2.5. User edits Department data", "2.6. System validates the Department data", "2.7. System updates the Department information", "2.8. User is taken back to the Department screen"], "dataset": "2009 - inventory 2.0", "act": ["navigates", "displays", "clicks,edit", "displays", "edits", "validates", "updates", "is taken back"], "obj": ["user,department", "edit department button", "edit department button", "department", "user, department", "department", "department", "user,department screen"]}
{"index": 3, "ucName": " Manage Departments and Delete Department\n", "uctext": " The system should allow inventory administrators to customize the inventory structure by defining the invent ory departments (not to be con fused actual retail floor departments known later in this document as stocking locations).  ", "steps": ["3.1. User navigates to a Department (see View Inventory)", "3.2. System displays the Edit Department button", "3.3. User clicks the Edit Department button", "3.4. System displays the Department data", "3.5. User clicks the Delete Department button", "3.6. System validates the Department deletion", "3.7. System removes the Department from the inventory", "3.8. User is taken back to the main inventory screen"], "dataset": "2009 - inventory 2.0", "act": ["navigates", "displays", "clicks", "displays", "clicks", "validates", "removes", "is taken back"], "obj": ["3.1, user, department, view inventory", "edit department button", "edit department button", "department", "delete department button", "system, department", "system,department,inventory", "user, main inventory screen"]}
{"index": 4, "ucName": " Manage Categories and Add Category\n", "uctext": " The system should allow inventory administrators to customize the inventory structure by defining the inventory departments and categories.  ", "steps": ["1.1. User navigates to a Department or Category (see View Inventory)", "1.2. System displays the Add Category buttons: Unique Item; Stock Item.", "1.3. User clicks the desired Add Category button", "1.4. System displays the appropriate screen for the Category type: Unique Item; Stock Item.", "1.5. User enters Category data", "1.6. System validates the Category data", "1.7. System adds the new Category to the inventory", "1.8. User is taken back to the parent Department or Category of the added Category"], "dataset": "2009 - inventory 2.0", "act": ["navigates", "displays", "clicks", "displays", "enters", "validates", "adds", "is taken back"], "obj": ["user, department, category", "add category buttons, unique item, stock item", "user, add category button", "system, displays, appropriate screen, category type, unique item, stock item", "user, category", "1.6, system, category data", "system, category, inventory", "user, department, category"]}
{"index": 5, "ucName": " Manage Categories and Edit Category\n", "uctext": " The system should allow inventory administrators to customize the inventory structure by defining the inventory departments and categories.  ", "steps": ["2.1. User navigates to a Category (see View Inventory)", "2.2. System displays the Edit Category button", "2.3. User clicks the Edit Category button", "2.4. System displays the appropriate screen for the Category type: Unique Item; Stock Item", "2.5. User edits Category data", "2.6. System validates the Category data", "2.7. System updates the Category information", "2.8. User is taken back to the Category screen"], "dataset": "2009 - inventory 2.0", "act": ["navigates", "displays", "clicks,edit", "displays", "edits", "validates", "updates", "is taken back"], "obj": ["user, category", "edit category button", "edit category button", "2.4, system, category, unique item, stock item", "category", "2.6, system, category", "system, category information", "user,category screen"]}
{"index": 6, "ucName": " Manage Categories and Delete Category\n", "uctext": " The system should allow inventory administrators to customize the inventory structure by defining the inventory departments and categories.  ", "steps": ["3.1. User navigates to a Category (see View Inventory)", "3.2. System displays the Edit Category button", "3.3. User clicks the Edit Category button", "3.4. System displays the appropriate screen for the Category type: Unique Item; Stock Item", "3.5. User clicks the Delete Category button", "3.6. System validates the Category deletion", "3.7. System removes the Category from the inventory", "3.8. User is taken back to the parent Department or Category of the deleted Category"], "dataset": "2009 - inventory 2.0", "act": ["navigates,see", "displays", "clicks", "displays", "clicks,delete", "validates", "removes", "is taken back"], "obj": ["user, category", "edit category button", "edit category button", "system, screen, category type, unique item, stock item", "user, delete category button", "system, category", "3.7, category, inventory", "user, department, category, category"]}
{"index": 7, "ucName": " Manage Categories and Move Categories\n", "uctext": " The system should allow inventory administrators to customize the inventory structure by defining the inventory departments and categories.  ", "steps": ["4.1. User navigates to a Department or Category (see View Inventory)", "4.2. System displays the Move Categories button", "4.3. User clicks the Move Categories button", "4.4. System displays the Move Categories screen", "4.5. User selects Categories to move", "4.6. User selects target location on categorized inventory for the moved Categories", "4.6.1. User may select an existing Department or Category", "4.6.2. User may choose to create a new Category to hold the moved Categories.", "In this case, user selects the parent Department or Category of the new Category to be created", "User enters the new Category data", "4.7. User selects the type of move to be performed", "4.7.1. Move selected categories as -is and make them children of the target Department or Category", "4.7.2. Merge the contents (items) of the selected categories and add them to the target Department or Category", "4.8. System validates the entered data", "4.9. System moves the selected Categories", "4.10. User is taken back to the parent Department or Category of the moved Categories"], "dataset": "2009 - inventory 2.0", "act": ["navigates", "displays", "clicks", "displays", "selects,move", "selects", "select", "may choose,create,hold", "selects,creates", "enters", "selects", "move,make", "merge, add", "validates", "moves", "is taken back"], "obj": ["department, category", "move categories button", "user, move categories button", "move categories,screen", "user, categories", "target location, categorized inventory, moved categories", "department,category", "category,categories", "user, department, category, category", "user, category, data", "type, move", "selected categories, target department, category", "the contents, items, the selected categories, the target department, category", "system, data", "categories", "user, department, category, categories"]}
{"index": 8, "ucName": " Manage Attributes and Details and View Item Attributes\n", "uctext": " The system should allow inventory administrators to customize the attributes and det ails available for each inventory item. Attributes can be defined for each department, and details can be defined for each department and/or category. ", "steps": ["1.1. User accesses the main inventory screen", "1.2. System displays the Edit Attributes button", "1.3. User clicks the Edit Attributes button", "1.4. System displays the Edit Attributes screen which displays all existing item attributes and their attribute x department assignments", "1.5. Optionally, user filters view by attribute status (active, inactive, all)", "1.6. User clicks the Done button", "1.7. User is taken back to the main inventory screen"], "dataset": "2009 - inventory 2.0", "act": ["accesses", "displays", "clicks", "displays,displays", "filters", "clicks", "is taken back"], "obj": ["user, main inventory screen", "system, edit attributes button", "user, edit attributes button", "system, edit attributes screen, item attributes, attribute x department assignments", "optionally, user, filters, view, attribute, status", "user, done button", "user, main inventory screen"]}
{"index": 9, "ucName": " Manage Attributes and Details and View Item Details\n", "uctext": " The system should allow inventory administrators to customize the attributes and det ails available for each inventory item. Attributes can be defined for each department, and details can be defined for each department and/or category. ", "steps": ["2.1. User accesses the main inventory screen", "2.2. System displays the Edit Details button", "2.3. User clicks the Edit Details button", "2.4. System displays the Edit Details screen which displays all existing item details and their detail x department and category assignments", "2.5. Optionally, user filters view by detail status (active, inactive, all)", "2.6. User clicks the Done button", "2.7. User is taken back to the main inventory screen"], "dataset": "2009 - inventory 2.0", "act": ["accesses", "displays", "clicks", "displays", "filters", "clicks", "is taken back"], "obj": ["user, main inventory screen", "edit details button", "edit details button", "edit details screen, existing item details, detail x department, category assignments", "2.5, user, filters, view, detail status, active, inactive, all", "done button", "user,main inventory screen"]}
{"index": 10, "ucName": " Manage Attributes and Details and Edit Item Attributes\n", "uctext": " The system should allow inventory administrators to customize the attributes and det ails available for each inventory item. Attributes can be defined for each department, and details can be defined for each department and/or category. ", "steps": ["3.1. User accesses the main inventory screen", "3.2. System displays the Edit Attributes button", "3.3. User clicks the Edit Attributes button", "3.4. System displays the Edit Attributes screen which displays all existing item attributes and their attribute x department assignments", "3.5. Optionally, user filters view by attribute status (active, inactive, all)", "3.6. User edits attributes", "3.6.1. User changes attribute x department assignments", "3.6.2. User changes attribute data", "3.6.3. User changes attribute active x inactive status", "3.6.4. User creates new attribute", "3.6.5. System validates the attribute data", "3.6.6. System updates the Item Attribute information", "3.7. User clicks the Done button", "3.8. User is taken back to the main inventory screen"], "dataset": "2009 - inventory 2.0", "act": ["accesses", "displays", "clicks", "displays,displays", "filters,view", "edits", "changes", "changes", "changes", "creates", "validates", "updates", "clicks", "is taken"], "obj": ["user, inventory screen", "system, edit attributes button", "edit attributes button", "edit attributes screen, existing item attributes, attribute x department assignments", "user, attribute, status", "user, attributes", "user changes attribute x department assignments", "user, attribute data", "attribute active, inactive status", "user, attribute", "attribute data", "system, item attribute information", "user, done button", "user, main inventory screen"]}
{"index": 11, "ucName": " Manage Attributes and Details and Edit Item Details\n", "uctext": " The system should allow inventory administrators to customize the attributes and det ails available for each inventory item. Attributes can be defined for each department, and details can be defined for each department and/or category. ", "steps": ["4.1. User accesses the main inventory screen", "4.2. System displays the Edit Details button", "4.3. User clicks the Edit Details button", "4.4. System displays the Edit Details screen which displays all existing item details and their detail x department and category assignments", "4.5. Optionally, user filters view by detail status (active, inactive, all)", "4.6. User edits details", "4.6.1. User changes detail x department or category assignments", "4.6.2. User changes detail data", "4.6.3. User changes detail active x inactive status", "4.6.4. User creates new detail", "4.6.5. System validates the detail data", "4.6.6. System updates the Item detail information", "4.7. User clicks the Done button", "4.8. User is taken back to the main inventory screen"], "dataset": "2009 - inventory 2.0", "act": ["accesses", "displays", "clicks", "displays,displays", "filters", "edits", "changes", "changes", "changes", "creates", "validates", "updates", "clicks", "is taken back"], "obj": ["user,main inventory screen", "edit details button", "edit details button", "edit details screen, existing item details, detail x department, category assignments", "user, filters, view, detail status, active, inactive, all", "details", "user, detail x, department, category assignments", "user", "user, detail, status", "user, creates, new, detail", "system, detail data", "system, item detail information", "user, done button", "main inventory screen"]}
{"index": 12, "ucName": " Add Item  to Inventory\n", "uctext": " Items are typically added to the inventory as part of the donation processes. This is called adding an item in donation processing. Alternatively, items can be added during routine inventory maintena nce. This is called adding an item in inventory management mode.  ", "steps": ["User accesses the main inventory screen", "The screen displays all inventory departments in matrix format (see View Inventory)", "User drills down to the appropriate category for the item", "If in donation processing mode, the item entry screen is presented automatically", "If in inventory management mode, the list of existing inventory items in that category is displayed", "User clicks the Add Item button", "The appropriate item entry screen is presented", "User fills in item information", "User confirms the addition of the new item", "Inventory is updated", "System gives the option of printing an item tag", "User prints item tag(s) for unique or stock item(s)", "User attaches tag(s) to the item(s)"], "dataset": "2009 - inventory 2.0", "act": ["accesses", "displays", "drills down", "is presented", "is displayed", "clicks,add", "is presented", "fills", "confirms,addition", "is updated", "gives", "prints", "attaches"], "obj": ["the main inventory screen", "inventory departments, view inventory", "appropriate category", "donation processing mode, item entry screen", "inventory management mode, list, inventory items, category", "user, add item button", "item entry screen", "item information", "the new item", "inventory", "printing, item tag", "user, item tag(s), unique or stock item(s", "user, tag(s), item(s"]}
{"index": 13, "ucName": " Manage Inventory Items and Modify Inventory Item\n", "uctext": " The system should allow various management actions to be performed on items existing in the inventory. These include modifying, deleting and splitting an item, and viewing the item‟s details and item history. These actions are only available for Unique and Stock items.  ", "steps": ["1.1. User accesses the main inventory screen", "1.2. The screen displays all inventory departments in matrix format with option to select and/or edit items to move them to a new department/category", "1.3. User drills down to the desired existing inventory item (see View Inventory )", "1.4. The item detail screen is presented ", "1.5. User modifies item information ", "1.6. The system validates item information ", "1.7. Item information is updated in the inventory ", "1.8. System gives the option of re -printing then item tag ", "1.9. User optionally re -prints the item tag and attaches it to the item"], "dataset": "2009 - inventory 2.0", "act": ["accesses", "displays,select,edit,move", "drills,see", "is presented", "modifies", "validates", "is updated", "gives,output", "optionally re-prints, attaches"], "obj": ["main inventory screen", "screen,inventory departments,matrix,option,items,department,category", "user, existing inventory item, view inventory", "item detail screen", "user, item information", "the system, item information", "item information, inventory", "system, option, re-printing, item tag", "user, item tag, item"]}
{"index": 14, "ucName": " Manage Inventory Items and Adjust Item Quantity\n", "uctext": " The system should allow various management actions to be performed on items existing in the inventory. These include modifying, deleting and splitting an item, and viewing the item‟s details and item history. These actions are only available for Unique and Stock items.  ", "steps": ["2.1. User accesses the main inventory screen", "2.2. The screen displays all inventory departments in matrix format", "2.3. User drills down to the desired existing inventory item (see View Inventory)", "2.4. The item detail screen is presented", "2.5. User changes the item quantity", "2.6. The system displays a confirmation screen where a reason for the adjustment must be specified by the user", "2.7. The system validates the item change", "2.8. Item information is updated in the inventory"], "dataset": "2009 - inventory 2.0", "act": ["accesses", "displays", "drills,see", "is presented", "changes", "displays, must be specified", "validates", "is updated"], "obj": ["user, main inventory screen", "screen,inventory departments,matrix format", "user, existing inventory item", "the item detail screen", "item quantity", "2.6, system, confirmation screen, reason, adjustment, user", "system, item change", "item information, inventory"]}
{"index": 15, "ucName": " Manage Inventory Items and Split Inventory Item\n", "uctext": " The system should allow various management actions to be performed on items existing in the inventory. These include modifying, deleting and splitting an item, and viewing the item‟s details and item history. These actions are only available for Unique and Stock items.  ", "steps": ["3.1. User accesses the main inventory screen", "3.2. The screen displays all inventory departments in matrix format", "3.3. User drills down to the desired existing inventory item (see View Inventory )", "3.4. The item detail screen is presented", "3.5. User clicks the Split Item button", "3.6. The system displays the Item Split screen", "3.7. User builds the list of items that the original item will be split into", "3.7.1. User can clone the original item to add new item(s) to the list that have similar attributes as the original item", "3.7.2. User can add new items to the list by selecting Unique and Stock categories in the same way as adding a new item to the inventory (see Add Item to Inventory )", "3.8. Once the list is complete, user confirms the split", "3.9. The system validates the split", "3.10. Item information is updated in the inventory", "3.10.1. The original (split) item is updated in the inventory", "3.10.2. Any new items that were added to the split list are added to the inventory maintaining parental history"], "dataset": "2009 - inventory 2.0", "act": ["accesses", "displays", "drills down, see", "is presented", "clicks", "displays", "builds, be, split", "clone,add,have", "can add,selecting,adding", "is, confirms", "validates", "is updated", "is updated", "added,added,maintaining"], "obj": ["user, main inventory screen", "screen,inventory departments,matrix format", "user, existing inventory item, view inventory", "item detail screen", "user, split item button", "item split screen", "user, list of items, original item", "user, item, list, item", "3.7.2, user, unique, stock, add item to inventory", "3.8, list, user", "the system, the split", "information, inventory", "inventory", "3.10.2, split list, inventory, parental history"]}
{"index": 16, "ucName": " Manage Inventory Items and View Inventory Item History\n", "uctext": " The system should allow various management actions to be performed on items existing in the inventory. These include modifying, deleting and splitting an item, and viewing the item‟s details and item history. These actions are only available for Unique and Stock items.  ", "steps": ["4.1. User accesses the main inventory screen", "4.2. The screen displays all inventory departments in matrix format", "4.3. User drills down to the desired existing inventory item (see View Inventory )", "4.4. The item detail screen is presented", "4.5. User clicks the Item History button", "4.6. The system displays the Item History screen containing current and historical information about the inventory item"], "dataset": "2009 - inventory 2.0", "act": ["accesses", "displays", "drills down,see", "is presented", "clicks", "displays,containing"], "obj": ["main inventory screen", "the screen, inventory departments", "user, existing inventory item, view inventory", "item detail screen", "user, item history button", "the system, item history screen, current and historical information, inventory item"]}
{"index": 17, "ucName": " Suggest Item Price\n", "uctext": " The system should assist in the task of pricing a new inventory item by making  pricing suggestions to the user when adding to or modifying an  item in the inventory. The suggested price s should be calculated based on the original and sale prices of similar items that currently exist or existed in the inventory in the past. ", "steps": ["User accesses the inventory entry screen (see Add Item to Inventory, Manage Inventory Items)", "System shows price recommendations based on current item data and default price suggestion configuration options", "User modifies item data", "System makes new price suggestions based on new item data"], "dataset": "2009 - inventory 2.0", "act": ["accesses", "shows", "modifies", "makes, suggests"], "obj": ["user, inventory entry screen, add item to inventory, manage inventory items", "price recommendations, item data, default price suggestion configuration options", "item data", "system,price suggestions,new item data"]}
{"index": 18, "ucName": " View Acquisi tions\n", "uctext": " Acquisition records for Drop -Off, Pickup and Decon donations are created in the CRM system. Inventory Management u sers should be able to view all past and current acquisitions . Receiving Associates use this function to locate an expected acquisition  when receiving a donation  at the loading dock.  Pickup and Decon crews may also use this function to initiate the process of receiving items while in the truck, on their way to the receiving dock.  Drop Off acquisitions are not typically pre-scheduled as Pi ck Up and Decon acquisitions  except for those submitted through the organizational website . As such, when a donor arrives with an unexpected drop off donation, a new acquisition needs to be able to be created in the CRM system first , at either the customer service desk or at the dock,  before it can be viewed in the acquisitions screen.  ", "steps": ["1. User accesses the acquisitions screen", "2. The screen displays a list of all acquisitions, latest ones at the top of the list", "3. User may optionally filter the acquisitions displayed on the screen by changing filtering options", "4. User clicks on an acquisition record", "5. System display the details for that acquisition, including expected items"], "dataset": "2009 - inventory 2.0", "act": ["accesses", "displays", "may,filter,displayed,changing", "clicks", "display"], "obj": ["user,acquisitions screen", "the screen, a list of all acquisitions, the list", "acquisitions, screen, filtering options", "user, acquisition record", "system, details, acquisition, items"]}
{"index": 19, "ucName": " Receive Acquisition\n", "uctext": " A donor in possession of a valid acquisition number can proceed to the receiving dock where the items to be donated will be received and processed, and a donation receipt will be generated.  Alternatively, a donor may go directly to the receiving dock, in which case a new acquisition is cre ated by the Receiving Associate before items can be received and processed. The screens used for the acquisition process should simplify and expedite the data entry process, allowing the Receiving Associate to enter only the information needed to generate  the donation receipt. Additional attributes needed to complete the item information and effectively add the item to the inventory can be added at a second step , after the receipt has been printed and the donor has been served. The Receiving Associate can print temporary acquisition labels for items that require further processing.  Pick Up and Decon crews may also initiate the receiving process, entering as much detailed information about the donated items as desired, and generating a donation receipt. The y cannot, however, add items to the inventory or complete the acquisition process. A Receiving Associate is required to review all the acquisition information before those actions can take place.  ", "steps": ["1. Donor or Primary Contact arrives at receiving dock with a valid donation number", "2. Receiving Associate locates donation request in the system  (see View Acquisitions )", "3. System displays donation request information", "4. Receiving Associate enters information about each donated item into the donation request  (see Add Item to Inventory )", "4.1. A new item can be added to the list by cloning an existing item", "4.2. A new item can be added by clicking the Add Item button", "4.3. An item can be removed by setting the received quantity to zero", "5. Receiving Associate prints a donation receipt", "6. Receiving Associate optionally writes information to the receipt by hand  such as condition", "7. Donation receipt is given to the Donor or Primary Contact", "8. Receiving Associate prints item tags for unique and stock items  (see Add Item to Inventory )", "9. Receiving Associate attaches printed tags to corresponding items", "10. Receiving Associate closes donation request"], "dataset": "2009 - inventory 2.0", "act": ["arrives", "receiving,locates,see", "displays", "enters,see", "added,cloning", "added,clicking", "removed,setting", "prints", "receiving, associate, optionally, writes, information, receipt, hand, condition", "is given", "prints,see,add", "attaches", "closes"], "obj": ["donor, primary contact, receiving dock, donation number", "receiving associate, donation request, system, view acquisitions", "donation request information", "receiving associate,information,donated item,donation request", "a new item, the list, an existing item", "add item", "item,received quantity", "receiving associate, donation receipt", "receiving associate, receipt, condition", "donor,primary contact", "receiving associate, item tags, unique and stock items, add item to inventory", "receiving associate, printed tags, corresponding items", "receiving associate, donation request"]}
{"index": 20, "ucName": " Sell Item\n", "uctext": " Any item in the inventory may be purchased by a Construction Junction customer. The sale of the item is processed by QuickBooks POS and the inventory must be updated accordingly.  ", "steps": ["1. Buyer arrives at the cashier or checkout desk with the items to be purchased", "2. Sales associate scans the item tags", "3. Sales associate processes the sale of the items in QuickBooks POS", "4. The system updates the inventory to reflect the sale"], "dataset": "2009 - inventory 2.0", "act": ["arrives", "scans", "processes", "updates, reflect"], "obj": ["1, cashier, checkout desk, items", "sales associate, item tags", "sales associate, sale, items, quickbooks pos", "the system, the inventory"]}
{"index": 0, "ucName": " “WeatherFDDA”:  Setting up a  real time or off-line FDDA job", "uctext": " The objective of this feature is to automate the set up of new real time and off-line FDDA jobs. This use case describes the set up of GMOD jobs, re-runs and case studies. At this point, RTFDDAensemble jobs will be submitted to the MM as 'by hand' jobs or through a job configuration file.The MM will provide a default GMOD job configuration, which can be changed by the user. It is important to note that the model manager will accept andrun “custom” GMOD jobs. These are jobs that are also set up through the Setup-module, but donot use the default GMOD configuration  For a “custom” GMOD job, e.g., the user may choose tosupply his/her own input data, own pre-processors or a customized version of a MM5 executable.MM's Job-Setup module will allow the user to substitute the default configuration, but it is theuser's responsibility to make sure that these scripts, executables, etc.  reside on the cluster orclusters where the job will be running on. Submitting a “custom” GMOD job thought the Job-Setupmodule will allow the user to save the job's configuration with the MM.\n\n     ", "steps": ["User chooses to \"Set up a Weather FDDA Job\".", "User may choose a cluster where the job should run on.", "User decides what model should be used: MM5 or WRF.", "User defines a JOBID.", "User determines domains: creates own domains (Note: This may only apply to MM5 jobs. From earlier discussions: creating domain files for WRF takes a long time.) or chooses between a number of pre-defined domains or submits own TERRAIN files", "User defines when a job is to be run and/or what cycle to run. If the cycle time is in the past, then the user is prompted to specify whether the job is a \"case study\" or \"re-run\".", "User supplies other job specific information, such as, cycle interval, forecast length and other applicable information.", "User can specify whether to write restart files and the frequency of how often they are to be written.", "User can choose between predefined sigma-level configurations or supply own sigma-level configuration", "User has the option to specify the number of nodes to use.", "User can choose to receive email notification upon start, end and termination of the job.", "User chooses between standard or custom IC/BC data sources: standard: ETA, AVNFTP (GFS), GFS004 or custom: provide data source (e.g., host:Full_Path_to_Dir) or For off-line jobs, the user must specify the data source, i.e., location (MetVault ora directory) and time period. Important note for re-runs, if the input data is to obtain from the MetVault, then MetVault returns the data that was available and used in that cycle.", "Depending on the choice above, user can provide custom IC/BC pre-processor or choose the standard: standard processing or provide own pre-processing script", "User is given the option to run additional pre-processors for the IC/BC data, such as, LDAS or supply own custom pre-processor or skip this option.", "User chooses between standard and/or custom obs data sources and processing: Standard: WMO, SAMS, MADIS, GTS, RAWS, okmeso, SatWinds, ACARS, etc. and/or provide custom obs source1 and custom obs processor1, provide custom obs source2 and custom obs processor2, etc. or For off-line jobs, the user must specify the data source, i.e., location (MetVault or a directory) and time period. Important note for re-runs, if the input data is to obtain from the MetVault, then MetVault returns the data that was available and used in that cycle.", "Depending on the choice of the model different options are given to the user: MM5: The domain size and number of nodes for this job was determined earlier. Based on both choices, the user is presented with different MM5-executables to choose from. These executables have been compiled in advanced. The MM will be able to retrieve the compile info about the executables, e.g., domain size, number of nodes, number of sigma levels, etc. These few executables are standard executables. Or, the user can also supply own executable, e.g., its location on the cluster, WRF: User defines model options", "User chooses whether or not to run Final Analysis. This may only apply to re-runs and case studies.", "User chooses whether or not to run Prelim. Analysis. This may only apply to re-runs and case studies.", "User chooses whether or not run additional processing on the model output.", "User can choose to save the model output in MetVault. If \"yes\", user must specify what output file is to be sent to the MetVault.", "User is given the option to save and submit the job now. Submitting now, would run IC/BC-data and obs processing and the model, no post-processing.", "User chooses whether or not to run post-processing. If \"yes\", then s/he will go through the action sequence in 3.4.", "User can save the above job configuration. Job configurations can be saved to a file.", "User submits the job."], "dataset": "model manager", "act": ["chooses,set up", "choose,should run", "decides,should be used", "defines", "determines, creates, chooses, submits", "defines, is, run, is, prompted, specify, is", "supplies", "specify, write", "can choose,supply", "has,option,specify", "choose,receive", "chooses,provide,must specify,obtain,returns", "provide,choose,provide,choose,provide", "is given, run, supply, skip", "chooses, specify, obtain, returns", "depending, are, is, was, determined, is, presented, choose, have, compiled, retrieve, be, are, can, supply, defines", "chooses,run,apply", "chooses,run,apply", "chooses,run", "choose,save,specify,sent", "is given, save, submit, run", "chooses, chooses, run, will go through", "can save, can be saved", "submits"], "obj": ["set up a weather fdda job", "cluster", "user, mm5, wrf", "jobid", "mm5 jobs, wrf, terrain files", "job, cycle time, user, case study, re-run", "cycle interval, forecast length, other applicable information", "restart files, frequency", "user, sigma-level configuration, sigma-level configurations", "number of nodes", "user, email notification, start, end, termination, job", "standard, custom, ic, bc, eta, avnftp, gfs, gfs004, host, full_path_to_dir, off-line jobs, user, metvault, directory, time period, re-runs, input data, cycle", "choice, user, custom ic, bc pre-processor, standard, standard processing, own pre-processing script", "option, additional pre-processors, ic/bc data, ldas, custom pre-processor, option", "user, standard, custom obs data sources, processing, standard, wmo, sams, madis, gts, raws, okmeso, satwinds, acars, custom obs source1, custom obs processor1, custom obs source2, custom obs processor2, off-line jobs, data source, location, metvault, directory, time period, re-runs, input data, metvault, metvault, data, cycle", "mm5, domain size, number of nodes, mm5-executables, compile info, executables, number of sigma levels, user, executable, cluster, wrf, model options", "user, final analysis, re-runs, case studies", "prelim. analysis, re-runs, case studies", "additional processing, model output", "metvault, metvault", "user, ic/bc-data, obs processing, model, post-processing", "user", "user, job configuration, job configuration, file", "job"]}
{"index": 1, "ucName": " “ClimoFDDA”:  Setting up a  ClimoFDDA job\n", "uctext": " The objective of this feature is to integrate the GCAT functionalities within the MM. Suppose the user is logged on to the system and has made the following choices “Submit a newjob” -> “Set up a new model job”. S/he is then presented with two more options: “ Weather FDDA” and “Climo”.\n     ", "steps": ["1. Chooses to \"Set up a Climo Job\".", "2. User defines a JOBID.", "3. User supplies other job parameters. For details, see GCAT tool.", "4. User determines the domain location.", "5. User can specify locations for pseudo-obs and custom cross sections.", "6. User picks a pre-configured MM5 setup.", "7. User sets the time line for the job: start time, end time and what years.", "8. User sets the ensemble options: •hourly •min, max, mean, standard deviation,.... •diurnal cycle •typical moment.", "9. User can request the number of nodes this job should run on.", "10. User chooses whether or not run additional processing on the model output.", "11. User can choose to save the model output in MetVault. If \"yes\", user must specify what output, e.g., member and/or ensemble output is to be send to the MetVault.", "12. User is given the option to save and submit the job now. Submitting now, would run the member models, the ensemble, and possible model output processing, no post-processing.", "13. User chooses whether or not to run post-processing on the ensemble output. If \"yes\",then s/he will be presented with the following options:•Plots (NCL or RIP) •NAPS •MDV •Sites •MEDOC (1 – 4) •Raster •PRF •Wind Roses •...For each output product, the user is prompted to supply a destination host and location,where the output files should be copied.", "14. The user can also specify whether the members\" output should be post-processed. S/he can specify which year-output to post-process and what post-processor(s) to use and where the output files should be copied.", "15. The user can specify whether another process (coupled app) should be run on the post-process output products. This needs further clarification.", "16. User can save the above job configuration. Job configurations can be saved to a file.", "17. User submits the job."], "dataset": "model manager", "act": ["chooses,set up", "defines", "supplies, see", "determines", "specify", "picks", "sets", "sets", "request,run", "chooses,run", "choose, save, specify, send", "is given, save, submit, submitting, would run", "chooses, run, be presented, supply, be copied", "specify, specify, specify, use, copied", "specify,run,needs", "save,save", "submits"], "obj": ["set up a climo job", "jobid", "user, job parameters, gcat tool", "domain location", "pseudo-obs, custom cross sections", "user, mm5", "user, time line, job, start time, end time, years", "ensemble options, hourly, min, max, mean, standard deviation, diurnal cycle, typical moment", "user, nodes, job", "user", "metvault", "option, job, member models, ensemble, model output processing, post-processing", "user, post-processing, ensemble, output, plots, ncl, rip, naps, mdv, sites, medoc, raster, prf, wind roses, output product, user, destination host, location, output files", "user, members, year-output, post-processor(s), output files", "the user, another process, coupled app, post-process output products", "user, job configuration, job configurations, file", "job"]}
{"index": 2, "ucName": " Set up and submit a “post-processing” job\n", "uctext": "The objective of this feature is to provide the ability to only run “post-processing” on an existing model output file. It will also provide the post-processing part of the use case “WeatherFDDA” in 3.1. Suppose the user is logged on to the system and has made the following choice, “Submit a new job”.\n     ", "steps": [" \n1.User selects “Set up a new 'post-processing' job” .", "\n2.User is prompted to supply location and name of the model output file:\n•If the model output file will be produced by a running or scheduled FDDA-job,\nthen the user supplies JOBID & cycle time\n•If the model output file already exists, then the user supplies its location.", "\n3.User chooses the type of post-processing:•Plots (NCL or RIP)•NAPS•MDV•Sites•MEDOC (1 – 4) •Stereo•Verification", "\n4.For each of the options chosen in 3., the user can supply a custom configuration file (ifthis is applicable) or use the default configuration file.", "\n5.User must supply destination location for the output products.", "\n6.User can specify the number of nodes this job should run on", "\n7.User can save this job's setting. Job configurations can be saved to a file.", "\n8.User submits job.\n"], "dataset": "model manager", "act": ["selects", "prompted, supply, be, produced, running, scheduled, exists, supplies", "chooses", "supply, use", "supply", "specify,run", "can save, can be saved", "submits"], "obj": ["user, \"set up a new 'post-processing' job", "user, location, name, model output file, running or scheduled fdda-job, jobid, cycle time, location", "plots, naps, mdv, sites, medoc, stereo, verification", "options, user, configuration file, file", "destination location, output products", "user, number of nodes, job", "user, job, job configurations, file", "job"]}
{"index": 3, "ucName": " Submit a 'By-hand' job\n", "uctext": " The objective of this feature is to accommodate the current GMOD-framework. It will also give the user the ability to run customized jobs. In order to submit a custom job to the MM, the user must first identify the cluster(s), where his/her job should run on. Then, log on to this machine, perform operations that are necessary for setting up the job and then register the job with the MM (see Action Sequence below). It is important to note that since a 'by-hand' job wasn't set up through MM's Job-Setup module, the MM doesn't know what the job is actually doing. In order for the MM to accept the job, the user will have to provide certain mandatory information about the job. Suppose the user is logged on to the system and has made the following choice, “Submit a new job”.\n     ", "steps": [" \n1.User selects “Submit a 'By Hand' Job”", "\n2.User supplies:Mandatory:•job id (GMUAE, GWDPG,...)•location of the script (host:/full_path_to_script)•time when to run the script•estimated time of how long the script will run•name(s) of executable(s)•max. runtime for the executable(s)•number of nodes •location of output products (such as: host:/dir_path) Optional:•frequency of how often the script should run•job type•any additional information", "\n3.User can save the job's settings. Job configurations can be saved to a file.", "\n4.User submits job.", "\n5.User can view his/her job in the job queue (see 3.1.).", "\n6.User can receive an email notification when job is started, finished or killed. \n"], "dataset": "model manager", "act": ["selects", "supplies", "save,can be saved", "submits", "view", "receive, started, finished, killed"], "obj": ["user, submit a 'by hand' job", "job id, location of the script, time when to run the script, estimated time of how long the script will run, name(s) of executable(s), max. runtime for the executable(s), number of nodes, location of output products, frequency of how often the script should run, job type, any additional information", "user, job's settings, job configurations, file", "job", "job, queue", "email notification"]}
{"index": 4, "ucName": "Load a job configuration from a file and submit the job\n", "uctext": " The objective of this feature is to provide the ability to load a job configuration into MM from a file. Suppose the user is logged on to the system and has made the following choice, “Submit a new job”.\n     ", "steps": ["1. User selects \"Submit a job configuration file\".", "2. User supplies file name to load.", "3. User can make changes to the configuration.", "4. User can save the changed configuration.", "5. User submits the job."], "dataset": "model manager", "act": ["selects", "supplies,load", "can make, make", "save", "submits"], "obj": ["user, submit a job configuration file", "file name", "user, configuration", "configuration", "job"]}
{"index": 5, "ucName": "Retrieve and run a previously saved job configuration\n", "uctext": "The objective of this feature is to provide the ability to retrieve a previous job configuration and to re-run this job or change its settings and run it again.\n     ", "steps": ["1. User logs on with user id/password.", "2. User chooses to look at his/her previously saved job configurations. A table of saved jobs may include the following attributes: •Job id•Job type•Cycle time that was run last (if applicable)•time this job was run last•...", "3. User selects a job. User can change or delete this job configuration.", "4. User changes the job configuration.", "5. User can save the changed job configuration.", "6. User submits job."], "dataset": "model manager", "act": ["logs, on", "chooses, look, include", "selects, change, delete", "changes", "save", "submits"], "obj": ["user, user id, password", "user, his/her, job configurations, table, jobs, attributes, job id, job type, cycle time, time, job", "job, job configuration", "job configuration", "user, job configuration", "job"]}
{"index": 6, "ucName": " View scheduled, running and old jobs\n", "uctext": " The objective of this feature is to facilitate monitoring of running jobs, viewing the job queue and viewing jobs that ran in the past.\n     ", "steps": [" \n1.User logs on with user id/password.", "\n2.User chooses to look at all running jobs, all scheduled jobs (the job queue), past jobs orall jobs (running, scheduled, old).", " User selects one of the four options.", "\n3.User is presented with a job table.", " Depending on the user's choice in 2, the job tablemay present the following attributes to the user:•user id – the 'owner' of the job •Job id•Job type – such as: GMOD, climoFDDA, FDDA-re-run, case study, custom,....•Job priority •start time•remaining time (estimated) or time it took to run the job•cycle (if applicable)•stage (Pre-processing, F-analysis, Prelim. Analysis,...)•status ( SCHEDULED, RUNNING, status in % - if applicable, DONE)•cluster and nodes (for a running job)•number of processors•and others", "\n4.User can select a job and receive more detailed information", "\n5.User can look at a jobs log files.", " \n6.User can delete his/her jobs from the job queue.", " A “super user” can delete any job fromthe job queue.", "\n7.User can stop his/her running job.", " A “super user” can stop any running job.", "\n8.User can re-start his/her job.", " A “super user” can re-start any job.", "\n9.User can resume his/her stopped job.", " A “super user” can resume any stopped job. \n"], "dataset": "model manager", "act": ["logs, on", "chooses, look", "selects", "is presented", "present", "select,receive", "look", "delete", "can delete,delete", "stop", "stop", "re-start", "can re-start", "resume", "resume"], "obj": ["user id, password", "running jobs, scheduled jobs, past jobs, all jobs", "one,options", "user, job table", "user id, job id, job type, job priority, start time, remaining time, cycle, stage, status, cluster and nodes, number of processors", "user, job, information", "jobs log files", "user, jobs, job queue", "super user,job,job queue", "user,job", "super user", "user, job", "super user”, job", "user,job", "super user, job"]}
{"index": 0, "ucName": "DeleteCulturalHeritage", "uctext": "Delete a cultural object in the system.", "steps": ["1. View the list of CulturalHeritage as a result of the use case SearchCulturalHeritage, it selects and activates a function of elimination.", "2 Asks confirmation.", "3 Confirm the operation.", "4 Delete the cultural choice."], "dataset": "eTour", "act": ["view,selects,activates", "asks", "confirm", "delete"], "obj": ["culturalheritage,searchculturalheritage", "confirmation", "3, operation", "4, cultural choice"]}
{"index": 1, "ucName": "ViewRefreshmentPointCard", "uctext": "View the details of a selected point of rest.", "steps": ["1. View the list of points of rest as a result of the use case SearchRefreshmentPoint, it selects and activates a function to view the card.", "2 Upload data to a selected restaurant."], "dataset": "eTour", "act": ["view,selects,activates", "upload"], "obj": ["list of points of rest, use case, searchrefreshmentpoint, function, card", "data,restaurant"]}
{"index": 2, "ucName": "ViewConventionHistory", "uctext": "View the history of conventions derived from a selected point of rest.", "steps": ["1. Access the features on the display of historical conventions.", "2 Upload data on conventions from the restaurant selected."], "dataset": "eTour", "act": ["access", "upload"], "obj": ["features, display, historical conventions", "data"]}
{"index": 3, "ucName": "ViewTouristCard", "uctext": "View the details of a selected account Tourist.", "steps": ["1. Tourists from the list obtained by activating the use case SearchTourist will select and activate a function for displaying the card.", "2. Upload data to the selected account."], "dataset": "eTour", "act": ["obtained, activating, use, select, activate, displaying", "upload"], "obj": ["tourists, list, use case, function, card", "data,selected account"]}
{"index": 4, "ucName": "Active / InactiveTouristAccount", "uctext": "Enable or disable the account of a tourist.", "steps": ["1. Activate the feature for the activation / deactivation by a given sheet tourist.", "2 Asks for confirmation of activation / deactivation.", "3 Confirm the operation.", "4 Enable / disable the account of the visitor you selected."], "dataset": "eTour", "act": ["activate, activate, deactivation", "asks", "confirm", "enable,disable,selected"], "obj": ["feature,activation,deactivation,sheet,tourist", "activation, deactivation", "3, operation", "account,visitor"]}
{"index": 5, "ucName": "SearchTourist", "uctext": "Returns the list of tourist account in the system according to certain parameters.", "steps": ["1. Access the search functionality of a tourist.", "2 Show the form.", "3 Fill out the form and submit.", "4 Processing the request."], "dataset": "eTour", "act": ["access", "show", "fill,submit", "processing"], "obj": ["search functionality", "the form", "the form", "the request"]}
{"index": 6, "ucName": "ModifyTouristAccountData", "uctext": "Change data of a selected account Tourist.", "steps": ["1. Tourists from the list obtained by activating the use case SearchTourist it selects and activates a function to modify data.", "2 Loads the data selected and displays them in a form allowing the change.", "3 Edit the fields in the form and submit.", "4 Verify the information and asks for confirmation of the change. Where the data is invalid or insufficient, the system activates the use case Errored.", "5 Confirm the operation.", "6. Stores the modified data selected account."], "dataset": "eTour", "act": ["obtained,activating,search,selects,activates,modify", "loads,displays", "edit,submit", "verify,asks,activates", "confirm", "stores"], "obj": ["tourists, use case, searchtourist", "the data selected, a form", "fields, form", "4, information, confirmation, change, data, system, use case errored", "operation", "modified data, selected account"]}
{"index": 7, "ucName": "DeleteTouristAccount", "uctext": "Delete the account of a tourist from the system.", "steps": ["Tourists from the list obtained by activating the use case SearchTourist will select and activate a feature for disposal.", "Asks for confirmation of the transaction.", "Confirm the operation.", "Delete the selected data."], "dataset": "eTour", "act": ["obtained,activating,select,activate", "asks", "confirm", "delete"], "obj": ["tourists, list, use case, searchtourist, feature", "confirmation,transaction", "the operation", "the selected data"]}
{"index": 8, "ucName": "ModifyBanner", "uctext": "Changing the image of a banner ad.", "steps": ["Receives a list of turning points of the rest use case SearchRefreshmentPoint and select one from accessing the function of editing a banner.", "View the list of banner associated with the point of rest.", "Select a banner from the list and enter the editing functionality.", "Displays a form for the selection of an image.", "Select a picture and send the request to change the system.", "Check the characteristics of the inserted and asks for confirmation of the change of the banner. In the event that the inserted image is not valid, enable the use case Errored.", "Confirmation of the transaction change.", "Bookmark this new image for the selected banner."], "dataset": "eTour", "act": ["receives,select,accessing,editing", "view", "select,enter", "displays", "select, send, change", "check,asks,enable", "confirmation", "bookmark"], "obj": ["turning points, rest use case, searchrefreshmentpoint, function, banner", "list, banner, point of rest", "banner, list, editing functionality", "form,selection,image", "picture,request,system", "inserted,confirmation,banner,image,errored", "transaction change", "image,selected banner"]}
{"index": 9, "ucName": "CheckBannerNumber", "uctext": "Check if a point Refreshments included the maximum number of allowed banners to it.", "steps": ["1. Load the data of the Convention of refreshment point and verify that the number of banners is less than the specified number of the current banner.", "If not checked, will end the operation input and displays a notification.", "2 Confirmation of the reading of the notification.", "3 Recovers the previous state."], "dataset": "eTour", "act": ["load, verify", "end,displays", "confirmation", "recovers"], "obj": ["convention of refreshment point, number of banners, specified number, current banner", "operation, input, notification", "notification", "previous state"]}
{"index": 10, "ucName": "DeleteBanner", "uctext": "Delete a banner ad associated with a refreshment bar on the computer.", "steps": ["Receives a list of turning points of the rest use case SearchRefreshmentPoint and select one from accessing the function of removal of the banner.", "View the list of banner associated with the point of rest.", "Select a banner from the list and enter the function of elimination.", "Displays a message confirming the deletion.", "Confirm the operation.", "Removes the banner."], "dataset": "eTour", "act": ["receives,accessing,select", "view", "select, enter", "displays,confirming", "confirm", "removes"], "obj": ["list of turning points,rest use case searchrefreshmentpoint,removal of the banner", "list, banner, point of rest", "banner, list, function of elimination", "message", "the operation", "the banner"]}
{"index": 11, "ucName": "InsertCulturalHeritage", "uctext": "Inserts a new cultural object in the system.", "steps": ["1. Activate the feature for the insertion of a new cultural good.", "2 Displays the corresponding form.", "3 Fill out the form with the data of the cultural and submit.", "4 Verify the data entered and asks for confirmation of the transaction. Where the data is invalid or insufficient, the system activates the use case Errored.", "5 Confirm the operation.", "6. Memorize your new cultural good."], "dataset": "eTour", "act": ["activate", "displays", "fill out,submit", "verify,asks,activates", "confirm", "memorize"], "obj": ["the feature, the insertion, a new cultural good", "the corresponding form", "the form, the data, the cultural", "data entered, confirmation of the transaction, data, system, use case errored", "operation", "new cultural good"]}
{"index": 12, "ucName": "InsertBanner", "uctext": "Inserting a new banner associated with a point of rest.", "steps": ["Receives a list of turning points of the rest use case SearchRefreshmentPoint and select one from the list and access to the function of inserting banners.", "Displays a form for the selection of an image.", "Select an image and sends the request for entering the system.", "Check the characteristics of the inserted, check that the number of banner did not exceed the maximum point of the restaurant and asks for confirmation of the insertion of the banner. In the event that the inserted image is not valid, enable the use case Errored.", "Confirm the operation of insertion.", "Remember the banners associated with the selected point of rest."], "dataset": "eTour", "act": ["receives,select,access,access,inserting", "displays", "select, sends", "check, check, asks, enable", "confirm, insertion", "remember"], "obj": ["turning points,rest,use case,searchrefreshmentpoint,banners", "form,selection,image", "an image, the request", "characteristics, number, banner, maximum point, restaurant, confirmation, image, use case errored", "operation, insertion", "banners,selected point of rest"]}
{"index": 13, "ucName": "InsertNews", "uctext": "Inserts a new news in the system.", "steps": ["1. Activate the feature to insert a news.", "2 Displays the corresponding form.", "3 Fill out the form and submit.", "4 Verify the data entered and asks for confirmation of the transaction. Where the data is invalid or insufficient, the system activates the use case Errored.", "5 Confirm the operation of insertion.", "6. Stores the data of the new news."], "dataset": "eTour", "act": ["activate,insert", "displays", "fill,submit", "verify,asks,activates", "confirm", "stores"], "obj": ["feature,news", "form", "form", "data,confirmation,transaction,data,system,use case errored", "operation", "data,news"]}
{"index": 14, "ucName": "DeleteNews", "uctext": "Delete a news in the system.", "steps": ["1. Activate the function of elimination of a news.", "2 View all news in a form.", "3 Select a news from the list and submit the form.", "4 Asks for confirmation of the transaction.", "5 Confirm the deletion of the news.", "6. Delete the data news."], "dataset": "eTour", "act": ["activate", "view", "select,submit", "asks", "confirm, deletion", "delete"], "obj": ["function, elimination, news", "news,form", "news,form", "confirmation", "the deletion of the news", "data,news"]}
{"index": 15, "ucName": "ModifyNews", "uctext": "Change data of a news on the computer.", "steps": ["1. Activate the editing functionality of a news.", "2 View all news in a form.", "3 Select a news from the list and submit the form.", "4 Load the data of news and displays them in a form for editing.", "5 Change data in the form and submit.", "6. Check the modified information and asks for confirmation of the transaction. Where the data is invalid or insufficient, the system activates the use case Errored.", "7 Confirm the operation of changing the data news.", "8 Stores data modified news."], "dataset": "eTour", "act": ["activate", "view", "select,submit", "load,displays", "change,submit", "check,asks,activates", "confirm,changing", "modified"], "obj": ["editing functionality", "news,form", "news,form", "data,news", "data,form", "modified information,confirmation of the transaction,the data,the system,use case errored", "operation,changing,data,news", "8, stores, data, modified, news"]}
{"index": 16, "ucName": "ViewFeedback", "uctext": "View all feedback for a particular site.", "steps": ["1. View the list of sites as a result of the use case SearchSite, it selects and activates a function to view the feedback.", "2 Upload Site Feedback selected."], "dataset": "eTour", "act": ["view,view,selects,activates", "upload,selected"], "obj": ["list of sites, use case, searchsite, feedback", "upload, site feedback"]}
{"index": 17, "ucName": "ViewReportStatistic", "uctext": "View statistical report relating to a selected location.", "steps": ["1. Activate the feature on the statistical report.", "2 Upload the list of places in the system and displays them in a form.", "3 Select a location and submit the form.", "4 Upload midsize site feedback obtained by activating the SearchSite use case for the location selected. Prepare the statistical report."], "dataset": "eTour", "act": ["activate", "upload,displays", "select, submit", "upload,activate,prepare"], "obj": ["feature,statistical report", "list of places, system, form", "location,form", "midsize site feedback, searchsite use case, location, statistical report"]}
{"index": 18, "ucName": "ModifyComment", "uctext": "Editing a comment by a feedback selected.", "steps": ["1. View the list of sites as a result of the use case SearchSite, it selects and activates a function of change in the selected comment.", "2 Upload feedback issued to that site and displays them in a form.", "3 Select a feedback from the list and submit the form.", "4 Displays a form for editing the comment of feedback selected.", "5 Edit the comment and submit the form.", "6. Verify the data entered and asks for confirmation of the change. Where the data is invalid or insufficient, the system activates the use case Errored.", "7 Confirm the operation.", "8 Remember the comment changed."], "dataset": "eTour", "act": ["view, selects, activates", "upload,issued,displays", "select, submit", "displays,editing,selected", "edit,submit", "verify,asks,activates", "confirm", "remember, changed"], "obj": ["list of sites, use case searchsite, function of change, selected comment", "feedback,site,form", "feedback,form", "editing, comment, feedback", "comment,form", "data, confirmation, change, data, system, use case errored", "the operation", "comment"]}
{"index": 19, "ucName": "SearchSite", "uctext": "Searching for a specific site on the computer.", "steps": ["1. Activate the search functionality of a site.", "2 Show the form for research", "3 Fill in the form of research and submit", "4 Processing the request."], "dataset": "eTour", "act": ["activate", "show", "fill in, submit", "processing"], "obj": ["search functionality", "form, research", "research,form", "the request"]}
{"index": 20, "ucName": "DeleteTag", "uctext": "Removes one or more search tags in the system.", "steps": ["1. Access the functionality to delete a tag.", "2. Research in the existing system, the tags and displays them in a form.", "3. Select one or more tags from the list and sends the request for deletion.", "4. Delete the selected search tag."], "dataset": "eTour", "act": ["access,delete", "research,displays", "select,sends", "delete"], "obj": ["functionality, tag", "research, system, tags, form", "one or more tags, list, request for deletion", "the selected search tag"]}
{"index": 21, "ucName": "ExistingErrorTag", "uctext": "He was asked to enter a search tags already in the system.", "steps": ["1. Notice the error message and asks for confirmation of its reading.", "2 Confirmation of the reading of the notification.", "3 Recovers the previous state."], "dataset": "eTour", "act": ["notice,asks", "confirmation,reading", "recovers"], "obj": ["the error message, confirmation, its reading", "reading,notification", "recovers,previous,state"]}
{"index": 22, "ucName": "ModifyCulturalHeritage", "uctext": "Change data of a cultural object in the system.", "steps": ["1. View the list of cultural goods as a result of the use case SearchCulturalHeritage, it selects and activates a function of change.", "2 Load the data of the cultural and displays the form for editing.", "3 Change data in the form and submit.", "4 Verify the data entered and asks for confirmation of the transaction. Where the data is invalid or insufficient, the system activates the use case Errored.", "5 Confirm the operation.", "6. Stores the modified data of the cultural."], "dataset": "eTour", "act": ["view, selects, activates", "load,displays", "change,submit", "verify,asks,activates", "confirm", "stores"], "obj": ["use case searchculturalheritage, function of change", "data,form", "data,form", "data, data, system, use case errored", "operation", "data"]}
{"index": 23, "ucName": "InsertTag", "uctext": "Inserts a new tag search.", "steps": ["1. Access the functionality of inserting new tag search.", "2. Show the form for entering a tag.", "3. Fill out the form with the required information and submit.", "4. Verify the data entered and check if the tag is already present in the system. In the latter case the active use case ExistingErrorTag.", "Instead, if the data is invalid or insufficient, the system activates the use case Errored."], "dataset": "eTour", "act": ["access, inserting", "show", "fill, submit", "verify,entered,check,present,active,case", "activates"], "obj": ["functionality, inserting, new, tag, search", "form", "form, information", "data, tag, system, existingerrortag", "data, system, use case errored"]}
{"index": 24, "ucName": "ModifyPassword", "uctext": "The Agency Operator chooses to change the password associated with your account", "steps": ["5 Choose to change your password by pressing the appropriate Button", "6. Upload the form to change the password associated with that work agency", "7 Change your password by entering the new choice and confirming", "8 Save your changes"], "dataset": "eTour", "act": ["choose, change, pressing", "upload,change", "change,entering,confirming", "save"], "obj": ["password,button", "the form, the password, that work agency", "change your password, new choice", "changes"]}
{"index": 25, "ucName": "ModifyPasswordError", "uctext": "He was asked to enter a password but is not confirmed in a correct way.", "steps": ["4 Notify an error message.", "5 Confirmation of the reading of the notification.", "6. Back to change your password."], "dataset": "eTour", "act": ["notify", "reading", "change"], "obj": ["error message", "confirmation,reading,notification", "change your password"]}
{"index": 26, "ucName": "Registration", "uctext": "Requires the creation of a new system.", "steps": ["1. Enable the logging feature.", "2 View the registration form.", "3 Fill out the form and submit.", "4 Verify the data entered and asks for confirmation of the transaction. Where the data is invalid or insufficient, the system activates the use case Errored.", "5 Confirm the operation.", "6. Create a new account with the data entered."], "dataset": "eTour", "act": ["enable", "view", "fill out,submit", "verify,asks,activates", "confirm", "create"], "obj": ["logging feature", "registration form", "the form", "data,confirmation,transaction,data,system,use case,errored", "operation", "account"]}
{"index": 27, "ucName": "SEARCH", "uctext": "Research and cultural heritage for all.", "steps": ["1. Activate the search functionality.", "2. Displays the corresponding form.", "3. Fill out the form and submit.", "4. Gets the position of the Guest citing the case of use location and process research."], "dataset": "eTour", "act": ["activate", "displays", "fill out, submit", "gets, citing"], "obj": ["search functionality", "the corresponding form", "form", "position,guest,case,location,process,research"]}
{"index": 28, "ucName": "LOGIN", "uctext": "Ensures a registered user to access the system with the privileges that fall.", "steps": ["1. Activate the login feature.", "2 Displays the corresponding form.", "3 Fill out the form with login information and submit.", "4 Check the correctness of the data, if not corrected on the use case LoginError."], "dataset": "eTour", "act": ["activate", "displays", "fill out,submit", "check,corrected"], "obj": ["login feature", "form", "form", "correctness, data, use case, loginerror"]}
{"index": 29, "ucName": "LoginError", "uctext": "The data supplied for the login is incorrect.", "steps": ["1. Notice that the data entered for the login is not valid and asks for confirmation of the reading.", "2 Confirmation of the reading of the notification.", "3 Recovers the previous state."], "dataset": "eTour", "act": ["notice,asks", "confirmation,reading", "recovers"], "obj": ["data, login, confirmation, reading", "notification", "recovers, previous, state"]}
{"index": 30, "ucName": "Logout", "uctext": "Ends the current session.", "steps": ["1. Access the functionality of disconnection from the system.", "2 Asks for confirmation of the transaction.", "3 Confirm the request for disconnection.", "4 Disconnects the Registered User."], "dataset": "eTour", "act": ["access, disconnection", "asks", "confirm", "disconnects"], "obj": ["functionality, disconnection, system", "confirmation of the transaction", "request for disconnection", "registered user"]}
{"index": 31, "ucName": "InsertBanner", "uctext": "Inserting a new banner associated with the point of rest.", "steps": ["1. Select the feature for the insertion of a new banner.", "2 Displays a form for the selection of an image.", "3 Select an image and sends the request for entering the system.", "4 Check the characteristics of the inserted, check that the number of banner did not exceed the maximum point of the restaurant and asks for confirmation of the insertion of the banner. In the event that the inserted image is not valid, enable the use case Errored.", "5 Confirm the operation of insertion.", "6. Remember the banners associated with the point of rest."], "dataset": "eTour", "act": ["select, insertion, output", "displays,selection", "select, sends", "check, check, asks, enable", "confirm", "remember"], "obj": ["feature, insertion, banner", "a form, the selection, an image", "3, image, request, system", "characteristics, number, banner, maximum point, restaurant, insertion, banner, inserted image, use case errored", "operation, insertion", "banners,point of rest"]}
{"index": 32, "ucName": "ModifyBanner", "uctext": "Changing the image of a banner ad.", "steps": ["1. Select the editing functionality of the banner.", "2. View the list of banners associated with the point of rest.", "3. Select a banner from the list and enter the editing functionality.", "4. Displays a form for the selection of an image.", "5. Select a picture and send the request to change the system.", "6. Check the characteristics of the inserted image and ask for confirmation of the change of the banner. In the event that the inserted image is not valid, enable the use case Errored.", "7. Confirmation of the transaction change.", "8. Bookmark this new image for the selected banner."], "dataset": "eTour", "act": ["select", "view", "select, enter", "displays", "select,send", "check, ask, enable", "confirmation", "bookmark,select"], "obj": ["editing functionality, banner", "list of banners, point of rest", "banner,editing functionality", "form, selection, image", "picture,request,system", "characteristics, image, confirmation, change, banner, image, use case errored", "transaction,change", "new image"]}
{"index": 33, "ucName": "SearchCulturalHeritage", "uctext": "Returns the list of cultural objects in the system according to certain parameters.", "steps": ["1. Activate the search functionality of a cultural object.", "2 Show the form for research.", "3 Fill in the search form and submit.", "4 Processing the request."], "dataset": "eTour", "act": ["activate", "show", "fill, submit", "processing"], "obj": ["search functionality, cultural object", "the form for research", "search form", "processing the request"]}
{"index": 34, "ucName": "DeleteBanner", "uctext": "Delete a banner ad associated with the point of rest.", "steps": ["1. Select the feature for removal of the banner.", "2 View the list of banner associated with the point of rest.", "3 Select a banner from the list and enter the function of elimination.", "4 Displays a message confirming the deletion.", "5 Confirm the operation.", "6. Removes the banner."], "dataset": "eTour", "act": ["select", "view", "select, enter", "displays,confirming", "confirm", "removes"], "obj": ["feature", "list, banner, point, rest", "a banner, the list, the function of elimination", "message", "operation", "the banner"]}
{"index": 35, "ucName": "ModifyMenu", "uctext": "Change the daily menu of a restaurant.", "steps": ["1. Activate the editing functionality of the menu.", "2. Displays a form with seven days of the week.", "3. Select a day of the week and submit the form.", "4. Upload the data menu for the selected day and loads them into a form.", "5. Edit menu of the selected day and submit the form.", "6. Verify the data entered and asks for confirmation of the edit menu. Where the data are insufficient or invalid, the active use case Errored.", "7. Confirm the operation.", "8. Saves changes to the menu selected."], "dataset": "eTour", "act": ["activate", "displays", "select,submit", "upload,loads", "edit,submit", "verify,asks,are,errored", "confirm", "saves, changes, selected"], "obj": ["editing functionality, menu", "form,days,week", "day,week,form", "data menu, selected day, form", "edit menu,selected day,form", "the data, edit menu, the data, the active use case errored", "the operation", "changes,menu"]}
{"index": 36, "ucName": "DeleteMenu", "uctext": "Delete a daily menu of a restaurant.", "steps": ["1. Enable the functionality of deleting a menu.", "2 Displays a form containing the seven days of the week.", "3 Select a day of the week and submit the form.", "4 Calls to confirm the deletion.", "5 Confirm the operation.", "6. Delete the daily menu selection."], "dataset": "eTour", "act": ["enable, deleting", "displays", "select,submit", "confirm,delete", "confirm", "delete"], "obj": ["functionality, menu", "form,seven days of the week", "day of the week", "4 calls", "operation", "the daily menu selection"]}
{"index": 37, "ucName": "ModifyRefreshmentPoint", "uctext": "Change data point associated refreshment.", "steps": ["1. Enable the functionality of the information required by the point of rest.", "2 Upload data point Refreshments and displays them in a form.", "3 Change data in the form and submit.", "4 Verify the data entered and asks for confirmation of the change. Where the data is invalid or insufficient, the system activates the use case Errored.", "5 Confirm the operation.", "6. Stores the modified data of the point of rest."], "dataset": "eTour", "act": ["enable", "upload,refreshments,displays", "change,submit", "verify,asks,activates", "confirm", "stores"], "obj": ["functionality, information, point of rest", "data point,refreshments", "data,form", "data,change,data,system,errored", "the operation", "modified data, point of rest"]}
{"index": 38, "ucName": "ConventionRequest", "uctext": "Require to conclude a Convention between the points of rest and the agency involved.", "steps": ["1. Enable the functionality to request the Convention to the Agency.", "2 Displays a form for entering data of the Convention.", "3 Inserts the data in the form of the agreement and submit.", "4 Verify the data entered and asks for confirmation of the request. Where the data is invalid or insufficient, the system activates the use case Errored.", "5 Confirm the operation.", "6. Send the request to the Convention."], "dataset": "eTour", "act": ["enable,request", "displays,entering", "inserts,submit", "verify,asks,activates", "confirm", "send"], "obj": ["convention, agency", "a form, data of the convention", "inserts, data, form, agreement, submit", "data,confirmation,request,data,system,use case,errored", "operation", "the request, the convention"]}
{"index": 39, "ucName": "ViewPersonalStatistic", "uctext": "Viewing statistics for Point Of Restaurants", "steps": ["1. Select the feature to display personal statistics.", "2 Displays a form that shows data for the statistics associated refreshment point."], "dataset": "eTour", "act": ["select,display", "displays, shows"], "obj": ["feature", "displays, form, data, statistics, refreshment point"]}
{"index": 40, "ucName": "ModifySearchPreference", "uctext": "Edit your personal search preferences.", "steps": ["1. Access to functionality for the modification of personal search preferences.", "2 Upload your search preferences and displays them in a form.", "3 Edit the fields in the form and submit.", "4 Asks confirmation.", "5 Confirmation for changing search preferences.", "6. Memorize search preferences changed."], "dataset": "eTour", "act": ["access, modification", "upload,displays", "edit,submit", "asks", "changing", "memorize,changed"], "obj": ["functionality, modification, personal search preferences", "search preferences, form", "fields, form", "confirmation", "search preferences", "search preferences"]}
{"index": 41, "ucName": "ModifyTouristData", "uctext": "Change data associated with your account.", "steps": ["1. Access to functionality for the modification of data.", "2 Loads the data and displays them in a form.", "3 Edit the fields in the form and submit.", "4 Check the modified information and asks for confirmation of the change. Where the data is invalid or insufficient, the system activates the use case Errored.", "5 Confirmation of the transaction change.", "6. Stores the modified data."], "dataset": "eTour", "act": ["access,modification", "loads,displays", "edit,submit", "check,asks,activates", "confirmation", "stores"], "obj": ["functionality,modification,data", "the data, a form", "fields, form", "modified information, data, system, use case errored", "confirmation, transaction, change", "modified data"]}
{"index": 42, "ucName": "ModifyGenericPreference", "uctext": "Edit Preferences generic personal.", "steps": ["1. Access to functionality for the modification of generic personal preferences.", "2 Upload your preferences and the general view in a form.", "3 Edit the fields in the form and submit.", "4 Asks for confirmation of the change.", "5 Confirm the operation.", "6. Stores preferences changed."], "dataset": "eTour", "act": ["access, modification", "upload", "edit, submit", "asks", "confirm", "changed"], "obj": ["functionality, modification, personal preferences", "preferences, view, form", "fields,form", "confirmation, change", "the operation", "preferences"]}
{"index": 43, "ucName": "ViewPreferredSite", "uctext": "View the list of personal favorites.", "steps": ["1. Select the feature to display the list of personal favorites.", "2 Upload the list of bookmarks."], "dataset": "eTour", "act": ["select, display", "upload"], "obj": ["feature,personal favorites", "list of bookmarks"]}
{"index": 44, "ucName": "ViewCulturalHeritageCard", "uctext": "View the details of the selected cultural.", "steps": ["1. View the list of cultural goods as a result of the use case SearchCulturalHeritage, it selects and activates a function to view the card.", "2 Loads the data for the selected cultural."], "dataset": "eTour", "act": ["view,selects,activates", "loads"], "obj": ["cultural goods, use case searchculturalheritage, card", "the data, the selected cultural"]}
{"index": 45, "ucName": "ViewVisitedSites", "uctext": "View the list of sites for which it has issued a feedback.", "steps": ["1. Select the feature to display the list of sites visited personal.", "2 Upload the list of sites for which the tourist has issued a Feedback."], "dataset": "eTour", "act": ["select,display", "upload,issued"], "obj": ["feature, list of sites", "list of sites, tourist, feedback"]}
{"index": 46, "ucName": "InsertPreferenceSite", "uctext": "Inserts a site selected in the list of bookmarks.", "steps": ["1. Activate the feature for the insertion of the selected site from the bookmarks.", "2 Prompt the inclusion", "3 Confirm the input.", "4 Inserts the selected site in the list of bookmarks."], "dataset": "eTour", "act": ["activate, insertion", "prompt", "confirm", "inserts"], "obj": ["feature, insertion, site, bookmarks", "the inclusion", "confirm, input", "inserts, site, list, bookmarks"]}
{"index": 47, "ucName": "DeleteSiteFromPreferences", "uctext": "Tourism delete a site from the list of bookmarks.", "steps": ["1. Choose to remove your site from the list of bookmarks by specific features.", "2 Prompt removal", "3 Confirm the removal.", "4 Removes the selected site from the list of bookmarks."], "dataset": "eTour", "act": ["choose, remove", "removal", "confirm", "removes"], "obj": ["your site, list of bookmarks, specific features", "prompt removal", "removal", "site,bookmarks"]}
{"index": 48, "ucName": "InsertFeedback", "uctext": "Inserts a feedback for the selected site.", "steps": ["1. Activate the feature on the issue of feedback.", "2 Verify that the visitor has not already issued a feedback for the site and displays a form for entering the feedback for the selected site. In case the visitor has already issued a feedback for the site selected, activates the use case FeedbackAlreadyReleased.", "3 Fill out the form, selecting one vote and inserting a comment, then submit.", "4 Verify the data entered and confirm the cheide. Where the data is invalid or insufficient, the system activates the use case Errored.", "5 Confirming the issue of feedback.", "6. Remember feedback and inserts the selected site in the list of sites visited."], "dataset": "eTour", "act": ["activate", "verify,displays,activates", "fill,selecting,inserting,submit", "verify,confirm,activates", "confirming", "remember, inserts"], "obj": ["feature,issue,feedback", "visitor,feedback,site,form,use case", "the form, vote, comment", "data,cheide,use case errored", "the issue of feedback", "feedback,site,list,sites"]}
{"index": 49, "ucName": "ModifyComment", "uctext": "Edit the comment previously issued.", "steps": ["1. Choose to change the comment on the feedback for the site issued by the appropriate functionality.", "2 Verify the data entered and asks for confirmation of the change. Where the data is invalid or insufficient, the system activates the use case Errored.", "3 Confirm the change of the comment.", "4 Edit commentary on selected feedback."], "dataset": "eTour", "act": ["choose,change", "verify,asks,activates", "confirm", "edit"], "obj": ["comment, feedback, site", "the data entered, confirmation of the change, the data, the system, the use case errored", "the change of the comment", "commentary,feedback"]}
{"index": 50, "ucName": "FeedbackAlreadyReleased", "uctext": "", "steps": ["1. Notification that the user has already issued a feedback for the site and cancel the operation to insert a new feedback.", "2 Confirmation of the reading of the notification.", "3 Recovers the previous state."], "dataset": "eTour", "act": ["notification,issued,cancel,insert", "confirmation", "recovers"], "obj": ["user, feedback, site, feedback", "notification", "the previous state"]}
{"index": 51, "ucName": "Localization", "uctext": "Returns the current position of the tourist.", "steps": ["n Description: Returns the current position of the tourist.", "Participating Actor: System initialization", "Entry conditions: He began a search or an advanced search.", "Flow of events Gps System:", "1. The system requires the data for the position.", "2 The GPS calculates the position of the tourist.", "3 The system is on hold until the data of the position."], "dataset": "eTour", "act": ["returns", "system initialization", "began,search,search", "flow of events gps system", "requires", "calculates", "is on hold"], "obj": ["current position, tourist", "system initialization", "a search, an advanced search", "gps system", "the system, the data, the position", "gps,position,tourist", "the system, hold, data, position"]}
{"index": 52, "ucName": "AdvancedSearch", "uctext": "The tourist searching for a site using the potential offered by the Advanced Search.", "steps": ["1. Enable the advanced search feature from your personal area.", "2 View the advanced search form.", "3 Fill in the form of advanced search and submit.", "4 Gets the position of relying on the tourist event of the use location and process the request."], "dataset": "eTour", "act": ["enable", "view", "fill, submit", "gets,process"], "obj": ["advanced search feature, personal area", "the advanced search form", "the form of advanced search", "position, relying, tourist event, use location, process, request"]}
{"index": 53, "ucName": "ViewSiteCard", "uctext": "View the details of a particular site.", "steps": ["1. Select the function for displaying the card on a site chosen.", "2 Upload data from the database."], "dataset": "eTour", "act": ["select, displaying", "upload"], "obj": ["function, card, site", "data"]}
{"index": 54, "ucName": "DeleteRefreshmentPoint", "uctext": "Delete a refreshment from the system.", "steps": ["1. View a list of points of rest as a result of the use case SearchCulturalHeritage, it selects and activates a function of elimination.", "2 Asks for confirmation of the transaction.", "3 Confirm the deletion.", "4 Deletes the selected point of rest."], "dataset": "eTour", "act": ["view, selects, activates", "asks", "confirm, deletion", "deletes"], "obj": ["list of points of rest, use case searchculturalheritage, function of elimination", "confirmation,transaction", "the deletion", "the selected point of rest"]}
{"index": 55, "ucName": "ActiveConvention", "uctext": "Convention active request by a refreshment point.", "steps": ["1. Enable the activation function of the Convention.", "2 Load the data request of the Convention from the point of rest and displays the corresponding form.", "3 Check the data of the agreement and decide for activation.", "4 Asks for confirmation of the activation.", "5 Confirm the operation.", "6. Processing the request."], "dataset": "eTour", "act": ["enable,activate", "load,request,displays", "check,decide", "asks,confirmation", "confirm", "processing"], "obj": ["the activation function of the convention", "data request, convention, point of rest, form", "data,agreement", "confirmation", "operation", "the request"]}
{"index": 56, "ucName": "ModifyDataRefreshmentPointAgency", "uctext": "Edit the data pertaining to a designated point of rest.", "steps": ["1. View a list of points of rest as a result of the use case SearchRefreshmentPoint, it selects an active and functional data changes.", "2 Upload data from the point of rest and displays the form of change.", "3 Change data in the form and submit.", "4 Verify the data entered in form and asks for confirmation of the transaction. Where the data is invalid or insufficient, the system activates the use case Errored.", "5 Confirm the operation.", "6. Stores the modified data of the point of rest."], "dataset": "eTour", "act": ["view, list, selects", "upload,displays", "change,submit", "verify,asks,activates", "confirm", "stores"], "obj": ["list,points,result,use case,searchrefreshmentpoint,data changes", "data,point of rest,form of change", "data,form", "form, transaction, data, system, use case errored", "operation", "point of rest"]}
{"index": 57, "ucName": "SearchRefreshmentPoint", "uctext": "Returns the list of points of rest in the system according to certain parameters.", "steps": ["1. Activate the search functionality of a point of rest.", "2 Show the form for research.", "3 Fill in the search form and submit.", "4 Processing the request."], "dataset": "eTour", "act": ["activate", "show", "fill, submit", "processing"], "obj": ["search functionality, point of rest", "form, research", "search form", "request"]}
{"index": 0, "ucName": "Create and Deactivate Patients Use Case", "uctext": "An HCP is able to create a patient  or disable a selected patient . The create/disable patients and HCP transaction is logged (UC5).\n\n", "steps": ["The HCP enters a patient as a new user of iTrust Medical Records system.", "Only the name and email are provided.", "The patient's assigned MID and a secret key (the initial password) are personally provided to the user, with which the user can reset his/her password.", "The HCP can edit the patient according to data format 6.4 with all initial values (except patient MID) defaulting to null and/or 0 as appropriate.", "Patient MID should be the number assigned when the patient is added to the system and cannot be edited.", "The HCP does not have the ability to enter/edit/view the patient's security question/password.", "The HCP selects a patient to deactivate.", "The HCP is presented with a confirmation containing the name of the patient and determines if it is the patient they intend to deactivate.", "A deactivated patient can not be modified or log into the system, and can only be reactivated by the administrator.", "The HCP uploads a comma-seperated value file containing one patient per row.", "The fields of the CSV file must include at least the first name, last name, and e-mail address, with additional columns available for the other demographic values.", "The patients are created, the tables are populated, and the MIDS and temporary passwords are displayed to the HCP in a table.", "The event is logged."], "dataset": "iTrust", "act": ["enters", "are provided", "assigned, provided, reset", "can edit, defaulting", "assigned, added, edited", "enter,edit,view", "selects, deactivate", "is presented, containing, determines, intend, deactivate", "deactivated, modified, log, reactivated", "uploads", "must include", "are created,are populated,are displayed", "is logged"], "obj": ["hcp,patient,itrust medical records system", "name, email", "mid, secret key, initial password, password", "hcp,patient,mid", "patient mid, number, system", "ability, security question, password", "patient", "hcp, confirmation, name, patient, patient", "deactivated patient, system, administrator", "comma-seperated value file, one patient per row", "csv file, first name, last name, e-mail address, columns, demographic values", "patients, tables, mids, temporary passwords, hcp, table", "event"]}
{"index": 1, "ucName": "Enter/edit personal health records Use Case", "uctext": "An HCP chooses to enter/edit personal health information for a patient . The information is viewed/edited by the HCP .\n\n", "steps": ["The health care personnel enters a MID of a patient and confirms their selection.", "The health care personnel may enter/edit personal health information including Patient Information (Data Format 6.4.1), Insurance Information (6.4.2), Emergency Contact Information (6.4.3), and Patient's Health Information (((requirements:df4|6.4.4().", "The HCP can indicate drug allergies.", "The HCP can indicate the patient has passed away, providing an appropriate diagnosis code.", "The HCP can select a medication from a pull down list and add it to the list of medications the patient is allergic to.", "The medication is checked against the patient's current and future prescriptions.", "The HCP is notified of any current or future prescriptions to which the patient has a drug allergy."], "dataset": "iTrust", "act": ["enters,confirms", "enter,edit", "can indicate", "indicate,has passed away,providing", "select,add", "is checked", "is notified, has"], "obj": ["mid", "data format 6.4.1, 6.4.2, 6.4.3, df4|6.4.4", "the hcp, drug allergies", "hcp, patient, diagnosis code", "medication, pull down list, list, medications, patient", "medication,patient's current and future prescriptions", "hcp, drug allergy, patient"]}
{"index": 2, "ucName": "Document office visit Use Case", "uctext": "An HCP chooses to document  or edit  an office visit for a patient .\n\n", "steps": ["The HCP enters a MID or name of a patient and confirms their selection.", "The HCP documents the following information related to an office visit. All events are logged (UC5, S8). Required information is designated; all other information is optional:", "Date (required)", "Hospital location of the office visit, if any, (the default should be the HCP's home location) (required)", "Appointment type (required) (UC60)", "Notes (numbers, characters, #, ;, ?, -, ', ., :, blankspace and carriage return are all allowed input values) (required)", "Option to send patient a billing statement (UC60)", "Basic Health Metrics (UC51) (required)", "Prescribed Medications (NDC, see Data Format 6.6)", "Lab procedures that are ordered (LOINC code, see Data Format 6.11)(UC26)", "Patient Specific Instructions (UC44)", "Diagnoses (via the ICD-9CM code)", "Medical procedures (CPT code) performed", "Immunizations given (CPT Code, see UC15, S1)", "Patient referral (UC33).", "HCPs can return to an office visit and modify or delete the fields of the office visit (notes, health metrics UC51, prescriptions, laboratory procedures (UC26), referral (UC33), diagnoses, procedures, and/or immunizations (UC15)). The event is logged (UC 5, S8) and the HCP is returned in the specific office visit record to verify his or her changes.", "The HCP has selected a medication prescribed from a pull down list. The HCP provides the dosage in milligrams, the start and end date for the prescription, and any special instructions.", "The instructions can contain numbers, characters, #, ;, ?, -, ', ., :, blankspace and carriage return.", "The HCP must provide instructions (can neither be empty nor the default form field value), or else they cannot add the prescription.", "The HCP can add the prescription to the list of medications (UC37)."], "dataset": "iTrust", "act": ["enters,confirms", "documents, are logged, is designated", "required", "should be", "appointment, type", "are", "send,output", "required", "see", "are ordered", "specific", "diagnoses", "performed", "given", "referral", "return, modify, delete, logged, returned, verify", "selected, provides", "can contain", "provide,be,can,be,cannot add", "add"], "obj": ["hcp, mid, name, patient", "information,office visit,uc5,s8", "date,required", "hospital location, office visit, hcp's home location", "appointment type,required,uc60", "numbers,characters,#,;,?,-,',.,:,blankspace,carriage return", "patient, billing statement", "basic health metrics, uc51", "prescribed medications, ndc, data format 6.6", "lab procedures, loinc code, data format 6.11, uc26", "patient, specific instructions, uc44", "diagnoses, icd-9cm code", "medical procedures, cpt code, performed", "immunizations, cpt code, uc15, s1", "patient referral, uc33", "hcps, office visit, notes, health metrics uc51, prescriptions, laboratory procedures (uc26), referral (uc33), diagnoses, procedures, immunizations (uc15), event, uc 5, s8, hcp, specific office visit record, his or her changes", "hcp, medication, pull down list, dosage, milligrams, start date, end date, prescription, special instructions", "numbers, characters, #, ;, ?, -, ', ., :, blankspace, carriage return", "hcp, instructions, form field value, prescription", "prescription, list of medications"]}
{"index": 3, "ucName": "Determine operational profile Use Case", "uctext": "The software tester authenticates himself or herself in the iTrust Medical Records system (UC2). He or she is then presented with the actual operational profile of the operations of the iTrust Medical Records where the use percentage is the % of total transactions for each particular transaction logging type, broken-down by each of the user types (patient, LHCP, UHCP, admin, tester(\n\n", "steps": ["The software tester authenticates himself or herself in the iTrust Medical Records system (UC2).", "He or she is then presented with the actual operational profile of the operations of the iTrust Medical Records where the use percentage is the % of total transactions for each particular transaction logging type, broken-down by each of the user types (patient, LHCP, UHCP, admin, tester(."], "dataset": "iTrust", "act": ["authenticates", "presented,broken-down"], "obj": ["software tester, itrust medical records system", "itrust medical records"]}
{"index": 4, "ucName": "Declare/undeclare Personal Representative Use Case", "uctext": "The HCP selects a patient by typing in the MID of the patient . The HCP can choose to add or remove another registered user as a personal health representative to that patient.\n\n", "steps": ["The HCP selects a patient by typing in the MID of the patient.", "The HCP can choose to add or remove another registered user as a personal health representative to that patient."], "dataset": "iTrust", "act": ["selects,typing", "can choose,add,remove"], "obj": ["hcp, mid", "hcp, registered user, personal health representative, patient"]}
{"index": 5, "ucName": "Maintain standards lists Use Case", "uctext": "An administrator chooses to maintain the standards list for immunizations , diagnoses , allowable drugs , or allowable physical services .\n\n", "steps": ["The administrator will maintain (add/update) a listing of allowable immunizations that an HCP can use.", "The administrator will store (1) the CPT code (The CPT code set accurately describes medical, surgical, and diagnostic services and is designed to communicate uniform information about medical services and procedures among physicians, coders, patients, accreditation organizations, and payers for administrative, financial, and analytical purposes. About CPT) and (2) up to 30 alpha characters giving the name of the immunization.", "The administrator will maintain a listing of allowable diagnoses that an LHCP can use.", "The administrator will store (1) the ICD-9CM code (The International Statistical Classification of Diseases and Related Health Problems (most commonly known by the abbreviation ICD) provides codes to classify diseases and a wide variety of signs, symptoms, abnormal findings, complaints, social circumstances and external causes of injury or disease. NHCS Classification of Diseases, Functioning and Disability) for the diagnosis ; (2) a classification that the diagnosis is either chronic/long-term OR short term; and (3) up to 30 alphanumeric characters giving the name of the diagnosis.", "The administrator will maintain (add/update) a listing of allowable drugs that an HCP can use.", "The administrator will store (1) the National Drug Code (The National Drug Code (NDC) is a universal product identifier used in the United States for drugs intended for human use. National Drug Code Directory)", "The administrator will maintain (add/update) a listing of allowable physical services (including laboratory procedures) that an HCP can use.", "The administrator will store information of a LOINC code (Logical Observation Identifiers Names and Codes (LOINC) is a database and universal standard for identifying medical laboratory observations. LOINC c/o Medical Informatics) according to Data Format 6.11. The administrator may choose to upload a file containing LOINC code information .", "The administrator selects a file containing LOINC information and chooses to upload it.", "LOINC data from this file is added to a listing of allowable physical services (including laboratory procedures that an HCP can use).", "If the file contains more fields than are supported by Data Format 6.11, all fields in Data Format 6.11 will be updated."], "dataset": "iTrust", "act": ["maintain, add, update", "store", "will maintain,can use", "will store", "will maintain, add, update", "will store", "maintain, add, update", "store,upload", "selects, chooses, upload", "is added,can use", "contains,are,supported,will be updated"], "obj": ["the administrator, listing of allowable immunizations, hcp", "administrator, cpt code, cpt code set, medical, surgical, diagnostic services, physicians, coders, patients, accreditation organizations, payers, administrative, financial, analytical purposes, name of the immunization", "administrator, listing, allowable diagnoses, lhcp", "1) the icd-9cm code, (2) a classification that the diagnosis is either chronic/long-term or short term, (3) up to 30 alphanumeric characters giving the name of the diagnosis", "administrator, listing, allowable drugs, hcp", "national drug code, national drug code, ndc, united states, drugs, human use, national drug code directory", "administrator,allowable physical services,laboratory procedures,hcp", "administrator, loinc code, logical observation identifiers names and codes, loinc, medical informatics, data format 6.11, file", "administrator, file, loinc information", "loinc data, listing of allowable physical services, laboratory procedures, hcp", "file, fields, data format 6.11, fields, data format 6.11"]}
{"index": 6, "ucName": "Identify risk of chronic disease Use Case", "uctext": "Through the Personal Health Records page, an LHCP chooses a chronic disease and a patient. The data in the database is analyzed according to the risk factors for the disease to determine if the patient exhibits one or more risk factors. Currently available risk factors for chronic diseases are defined for Diabetes (Type 1 and Type2) and Heart Disease. When the chosen patient satisfies the preconditions of the chosen chronic disease , the LHCP is provided with a warning message if that patient exhibits three or more risk factors. The message will display the risk factors that the patients exhibit.\n\n", "steps": ["Through the Personal Health Records page, an LHCP chooses a chronic disease and a patient.", "The data in the database is analyzed according to the risk factors for the disease to determine if the patient exhibits one or more risk factors.", "Currently available risk factors for chronic diseases are defined for Diabetes (Type 1 and Type2) and Heart Disease.", "When the chosen patient satisfies the preconditions of the chosen chronic disease, the LHCP is provided with a warning message if that patient exhibits three or more risk factors.", "The message will display the risk factors that the patients exhibit."], "dataset": "iTrust", "act": ["chooses", "is analyzed,determine,exhibits", "are defined", "satisfies, is provided, exhibits", "will display, exhibit"], "obj": ["personal health records page, lhcp, chronic disease, patient", "data, database, risk factors, disease, patient, risk factors", "diabetes, type 1, type 2, heart disease", "patient,preconditions,chronic disease,lhcp,warning message,risk factors", "risk factors"]}
{"index": 7, "ucName": "Proactively Determine Needed Patient Care Use Case", "uctext": "An HCP chooses Office Visit Reminders and then to identify chronic patients who need an office visit , older patients who need a flu shot , or any patient who is overdue for an immunization . The HCP is presented with a listing of patients for whom they are a DLHCP who need care because of satisfying the one of preceding conditions. The presented patient information shall include each patient's name and home phone number so that reminder calls can be made. The list is sorted based on the alphabetical order of the patients' last names, and then first names.\n\n", "steps": [" An alive patient who has not had an office visit for more than one year and who has been diagnosed with\ndiabetes mellitus (is diagnosed with ICD code beginning with 250:http://icd9cm.chrisendres.com/index.php?action=child&recordid=1765 (\nasthma (is diagnosed with ICD code beginning with 493:http://icd9cm.chrisendres.com/index.php?action=child&recordid=4700 (, or\ncirculatory-system disease (is diagnosed with an ICD code between 390 and 459 inclusive: http://icd9cm.chrisendres.com/index.php?action=child&recordid=4025 (.\n An alive patient over 50 years old who has not had a flu shot (CPT codes 90656, 90658, 90660 per http://www.influenza.com/index.cfm?fa=ADDITIONAL_RES_HC_2 during the months Sept - Dec of the last calendar year (or during the months Sept - Dec of the current calendar year if the retrieval time is between Sept - Dec).", "\n An alive patient under the age of 19 who has not had proper immunizations per the immunization schedule.", " The “catch up schedule” is relevant when the patient did not begin the immunizations according to the recommended schedule.", "\nHepatitis B (90371) three doses: at birth, at age 1 month, at age 6 months; catch up schedule: at least 4 weeks between dose 1 and dose 2 and at least 8 weeks between dose 2 and dose 3", "\nRotavirus (90681) three doses: at age 6 weeks, at age 4 months, at age 6 months; catch up schedule: at least 4 weeks between dose 1 and dose 2 and at least 4 weeks between dose 2 and dose 3", "\nDiphtheria, Tetanus, Pertussis (90696) six doses: at age 6 weeks, at age 4 months, at age 6 months, at age 15 months, at age 4 years, at age 11 years; catch up schedule: at least 4 weeks between dose 1 and dose 2, at least 4 weeks between dose 2 and dose 3, at least 6 months between doses 3 and 4, at least 6 months between dose 4 and dose 5, at least 5 years between dose 5 and dose 6", "\nHaemophilus influenzae (90645) three doses: at 6 weeks, at age 4 months, at age 12 months; catch up schedule: at least 4 weeks between dose 1 and dose 2 and at least 4 weeks between dose 2 and dose 3 if first dose is administered at younger than 12 months; if first dose is administered between 12 and 14 months, at least 8 weeks between dose 1 and dose 2 and dose three is canceled; if first dose is administered at or after 15 months, only one dose is required", "\nPneumococcal (90669) four doses: at age 6 weeks, at age 4 months, at age 6 months, at age 12 months; catch up schedule: at least 4 weeks between dose 1 and dose 2 and at least 4 weeks between dose 2 and dose 3 and at least 8 weeks between dose 3 and dose 4 if first dose is administered at younger than 12 months; if first dose is administered between 12 and 14 months, at least 8 weeks between dose 1 and dose 2 and dose three is canceled; if first dose is administered at or after 15 months, only one dose is required", "\nPoliovirus (90712) four doses: at age 6 weeks, at age 4 months, at age 6 months, 4 years; catch up schedule: at least 4 weeks between dose 1 and dose 2, at least 4 weeks between dose 2 and dose 3, at least 4 weeks between doses 3 and 4, dose 4 is not required if dose 3 was administered at the age of 4 or older", "\nMeasles, Mumps, Rubella (90707) two doses: at age 12 months, at age 4 years; catch up schedule: at least 4 weeks between dose 1 and dose 2", "\nVaricella (90396) two doses: at age 12 months, at age 4 years; catch up schedule: at least 3 months between dose 1 and dose 2", "\nHepatitis A (90633) two doses: at age 12 months; at age 18 months: catch up schedule: at least 6 months between dose 1 and dose 2", "\nHuman Papillomavirus (90649) Female only, three doses; at age 9 years; at age 9 years + 2 months; at age 9 years + 6 months; catch up schedule: at least two months between dose 1 and dose 2; at least four months between dose 2 and dose 3\n"], "dataset": "iTrust", "act": ["has,been,diagnosed,is,diagnosed,is,diagnosed,has,had", "has,had", "is, did not begin", "at birth, at age 1 month, at age 6 months, catch up schedule", "three doses, catch up schedule", "diphtheria, tetanus, pertussis (90696) six doses, at age 6 weeks, at age 4 months, at age 6 months, at age 15 months, at age 4 years, at age 11 years, catch up schedule, at least 4 weeks between dose 1 and dose 2, at least 4 weeks between dose 2 and dose 3, at least 6 months between doses 3 and 4, at least 6 months between dose 4 and dose 5, at least 5 years between dose 5 and dose 6", "three doses, catch up schedule, is administered, is administered, is administered", "administered, administered, administered, administered, administered, canceled, required", "administered", "two doses, catch up schedule", "at", "at, at, at, between", "only, doses, schedule, between, between"], "obj": ["alive patient, office visit, diabetes mellitus, icd code beginning with 250, asthma, icd code beginning with 493, circulatory-system disease, icd code between 390 and 459 inclusive, alive patient over 50 years old, flu shot, cpt codes 90656, cpt codes 90658, cpt codes 90660, months sept - dec of the last calendar year, retrieval time between sept - dec", "alive patient,age of 19,immunizations,immunization schedule", "catch up schedule, patient, immunizations, recommended schedule", "hepatitis b,90371,birth,1 month,6 months,dose 1,dose 2,dose 3,4 weeks,8 weeks", "rotavirus, 90681, three doses, age 6 weeks, age 4 months, age 6 months, catch up schedule, at least 4 weeks, dose 1, dose 2, at least 4 weeks, dose 2, dose 3", "diphtheria, tetanus, pertussis, 90696, six doses, age 6 weeks, age 4 months, age 6 months, age 15 months, age 4 years, age 11 years, catch up schedule, at least 4 weeks between dose 1 and dose 2, at least 4 weeks between dose 2 and dose 3, at least 6 months between doses 3 and 4, at least 6 months between dose 4 and dose 5, at least 5 years between dose 5 and dose 6", "haemophilus influenzae,90645,6 weeks,4 months,12 months,4 weeks,4 weeks,12 months,12 months,14 months,8 weeks,15 months", "pneumococcal, 90669, four doses, age 6 weeks, age 4 months, age 6 months, age 12 months, 4 weeks, dose 1, dose 2, 8 weeks, dose 3, dose 4, younger than 12 months, 12 months, 14 months, three, 15 months, one dose", "poliovirus, 90712, at age 6 weeks, at age 4 months, at age 6 months, 4 years, at least 4 weeks between dose 1 and dose 2, at least 4 weeks between dose 2 and dose 3, at least 4 weeks between doses 3 and 4, dose 4, dose 3, at the age of 4 or older", "measles, mumps, rubella, 90707, two doses, age 12 months, age 4 years, catch up schedule, at least 4 weeks, dose 1, dose 2", "varicella, 90396, two doses, age 12 months, age 4 years, catch up schedule, at least 3 months, dose 1, dose 2", "hepatitis a, 90633, 12 months, 18 months, 6 months", "human papillomavirus, 90649, female, three doses, at age 9 years, at age 9 years + 2 months, at age 9 years + 6 months, catch up schedule, at least two months between dose 1 and dose 2, at least four months between dose 2 and dose 3"]}
{"index": 8, "ucName": "Maintain a hospital listing Use Case", "uctext": "An administrator chooses to maintain the hospital listing .(Note: A personnel may be assigned to more than one (UC 2, S1))\n\n", "steps": ["The administrator will store (1) hospital Id number for the hospital , (2) up to 30 alphanumeric characters giving the name of the hospital, and (3) an address for the hospital.", "The system shall enable the administrator to add a new entry for a hospital, or modify the hospital name in an existing entry.", "Note that the administrator is not allowed through the system interface to delete an existing entry or modify the hospital ID number in an existing entry."], "dataset": "iTrust", "act": ["will store", "enable, add, modify", "note, is, allowed, delete, modify"], "obj": ["hospital id number, name, address", "administrator, hospital", "administrator, system interface, existing entry, hospital id number"]}
{"index": 9, "ucName": "View prescription report Use Case", "uctext": "A patient or personal health representative  or LHCP  chooses to view prescription reports . If the LHCP is not one of the patient's DLHCP or the UAP associated with one of their DLHCP, a message is sent to the patient and their personal representative.\n\n", "steps": ["The user (patient or personal health representative) can choose to view a list of (1) their own prescriptions or (2) the prescriptions for whom the user is a person health representative by choosing one patient from a a list of these patients.", "A prescription list is then displayed , sorted by start date (the later date is ranked earlier).", "The user (LHCP) selects a patient from the list of requested reports.", "At this point, the LHCP can view a prescription list for that patient , sorted by start date (the later date is ranked earlier).", "The prescription report is titled with the patient name.", "The prescription list includes medication, date prescribed, start date, end date for each prescription, and the name of the doctor who prescribed the medication."], "dataset": "iTrust", "act": ["can choose, to view, is", "is displayed, sorted, ranked", "selects", "view,sorted", "is titled", "includes"], "obj": ["user, patient, personal health representative, prescriptions, prescriptions, user, person health representative, patient, patients", "prescription list", "lhcp, patient", "lhcp, prescription list, patient, start date, date", "prescription report, patient name", "medication, date prescribed, start date, end date, doctor"]}
{"index": 10, "ucName": "Create, Disable, and Edit Personnel Use Case", "uctext": "An admin creates a LHCP, an ER, a Laboratory Technician (LT), or a public health agent (PHA) . A LHCP creates UAPs . Once entered, the admin or LHCP is presented a detailed confirmation screen to approve .\n\n", "steps": ["An administrator enters a LHCP, ER, or public health agent as a user of iTrust Medical Records system, initially only the name and email are provided.", "A secret key is personally provided to the user, with which the user can reset his/her password.", "The admin must specify a specialty for a new LHCP (one of: General Physician, Heart Surgeon, OB/GYN, Pediatrician, Surgeon) and for a new LT (one of blood, tissue, or general).", "The data for personnel can be edited according to Data Format 6.2 (all fields mandatory except for associated MID and Street Address 2).", "The administrator shall be allowed to assign a LHCP to multiple hospitals, and the administrator can choose among only the hospitals provided in the hospital list pull down menu.", "The hospital ID numbers for a LHCP are stored in the Medical Care Personnel Affiliation database (data format 6.8).", "The administrator shall be allowed to assign a LT to a single hospital, and the administrator can choose among only the hospitals provided in the hospital list pull down menu.", "The hospital ID numbers for a LT are stored in the Medical Care Personnel Affiliation database (data format 6.11).", "A LHCP enters an UAP as a user of iTrust Medical Records system according to data format 6.2 (all fields mandatory)."], "dataset": "iTrust", "act": ["enters,are provided", "is provided,can reset", "must specify", "can be edited", "shall be allowed, assign, can choose", "are stored", "shall be allowed to assign, can choose", "are stored", "enters"], "obj": ["administrator, lhcp, er, public health agent, user, itrust medical records system, name, email", "secret key, user, password", "lhcp, general physician, heart surgeon, ob/gyn, pediatrician, surgeon, lt, blood, tissue, general", "data format 6.2", "administrator, lhcp, hospitals, hospital list pull down menu", "hospital id numbers, lhcp, medical care personnel affiliation database, data format 6.8", "administrator, lt, hospital, hospitals, hospital list pull down menu", "hospital id numbers, lt, medical care personnel affiliation database, data format 6.11", "lhcp, uap, itrust medical records, data format 6.2"]}
{"index": 11, "ucName": "View emergency electronic health record Use Case", "uctext": "A LHCP or ER chooses to view an emergency report and provides an MID . The LHCP/ER is presented with a patient confirmation . The LHCP obtains a printable report (meaning you should minimize the space taken up to provide the information( containing vital information for the patient:\n\nName\nAge\nGender\nEmergency contact (name and phone number)\nAllergies\nBlood type\nA list of all diagnosis codes chronic/long-term diagnoses for the patient and well as all short term diagnoses made within the last 30 days. Display the ICD-9CM code and the name of the diagnoses. Sort by most recent first.\nA list of all prescriptions the patient is likely to be currently taking as determined by the end date of the prescription has passed by 91 days or less. Display the National Drug Code and the name of the prescription. Sort by most recent first.\nA list of all immunizations the patient has had. Display the CPT Code and the name of the immunization. Sort by most recent first.\n", "steps": ["The LHCP or ER enters a MID.", "The LHCP or ER confirms the input."], "dataset": "iTrust", "act": ["enters", "confirms"], "obj": ["lhcp, er, mid", "lhcp, er"]}
{"index": 12, "ucName": "View Comprehensive Patient Report Use Case", "uctext": "The LHCP requests a comprehensive patient report for a particular patient . The LHCP is able to view the comprehensive patient report  from a list of his/her previous requests .\n\n", "steps": ["The LHCP enters a patient medical identification number (MID) and confirms his/her input.", "The LHCP can view the comprehensive patient report for the specified patient, which includes the information below.", "All patient demographic information (address, phone, etc.), see (UC4) and Data Format 6.1", "The entire history of personal health records, see (UC10) and Data Format 6.4", "All diagnoses, including those not normally viewable by the requesting LHCP, see (UC11) and Data Format 6.5", "All designated HCPs (MIDs and Names), see (UC6)", "All allergies, procedures, medications, office visits, and known relatives, see (UC11) and Data Format 6.5, 6.6", "All MIDs and names of people that this person is representing, see (UC13)", "All MIDs and names of people that this person is represented by, see (UC13)", "The LHCP views a list of requests he/she has made for reports, with the status and pertinent information about the requests."], "dataset": "iTrust", "act": ["enters,confirms", "can view", "see", "see", "see", "see", "see", "see", "see", "views, has made"], "obj": ["lhcp, patient medical identification number, mid", "lhcp, comprehensive patient report, specified patient, information below", "address, phone", "personal health records", "diagnoses, lhcp, uc11, data format 6.5", "hcps, mids, names", "allergies, procedures, medications, office visits, known relatives", "mids, names, people, person", "mids, names, people, person", "lhcp, list, requests, reports, status, information, requests"]}
{"index": 13, "ucName": "Take Satisfaction Survey Use Case", "uctext": "A patient or personal health representative can answer any of the following questions relative to a previous (in UC9, S1) office visit according to Data Format 6.13.\n\nHow many minutes did you wait in the waiting room?\nHow many minutes did you wait in the examination room before seeing your physician?\nHow satisfied were you with your office visit?\nHow satisfied were you with the treatment or information you received?\nThe answers to the survey are stored.\n\n", "steps": ["A patient or personal health representative can answer any of the following questions relative to a previous (in UC9, S1) office visit according to Data Format 6.13.", "How many minutes did you wait in the waiting room?", "How many minutes did you wait in the examination room before seeing your physician?", "How satisfied were you with your office visit?", "How satisfied were you with the treatment or information you received?", "The answers to the survey are stored."], "dataset": "iTrust", "act": ["can answer", "did,wait", "wait, seeing", "were satisfied", "were, received", "are stored"], "obj": ["patient, personal health representative, questions, office visit", "minutes,waiting room", "minutes, examination room, physician", "your office visit", "treatment, information", "answers, survey"]}
{"index": 14, "ucName": "View Physician Satisfaction Survey Results Use Case", "uctext": "A user chooses to view physician satisfaction survey results. The user provides a zip code  or a hospital code and an (optional) physician type (from a pull-down list: see data format 6.2 - general, surgeon, heart specialist, pediatrician, OB/GYN). The patient is provided with the following for each physician of that type that practices in a zip code (based upon the address/zipcode provided in UC2) that match the first three digits of the provided zip code:\n\nName\nAddress\nAverage number of minutes patients wait in waiting room\nAverage number of minutes patients wait in examination room prior to seeing physician\nAverage office visit satisfaction\nAverage satisfaction with treatment/information\nPercentage of office visits for which satisfaction information is available\n", "steps": ["A user chooses to view physician satisfaction survey results.", "The user provides a zip code or a hospital code and an (optional) physician type (from a pull-down list: see data format 6.2 - general, surgeon, heart specialist, pediatrician, OB/GYN).", "The patient is provided with the following for each physician of that type that practices in a zip code (based upon the address/zipcode provided in UC2) that match the first three digits of the provided zip code:", "Name", "Address", "Average number of minutes patients wait in waiting room", "Average number of minutes patients wait in examination room prior to seeing physician", "Average office visit satisfaction", "Average satisfaction with treatment/information", "Percentage of office visits for which satisfaction information is available."], "dataset": "iTrust", "act": ["chooses, view", "provides,see", "is provided,practices,match", "name", "address", "wait", "wait", "visit, satisfaction", "satisfaction", "is available"], "obj": ["user, physician, satisfaction, survey, results", "zip code, hospital code, physician type, general, surgeon, heart specialist, pediatrician, ob/gyn", "the patient, each physician, a zip code, the address/zipcode, the first three digits, the provided zip code", "name", "address", "number,minutes,patients,waiting room", "minutes,patients,examination room,physician", "office visit satisfaction", "satisfaction, treatment, information", "office visits"]}
{"index": 15, "ucName": "Manage Lab Procedures Use Case", "uctext": "An HCP can create a lab procedure for a given office visit . An HCP can view a previously created lab procedure for a given office visit . An HCP can reassign a previously created lab procedure . An HCP can remove a previously created lab procedure . An HCP can add commentary to a pending lab procedure and update the lab procedure status to completed . A patient may view his or her own lab procedure results . A Lab Technician can view his or her priority queue of lab procedures . A Lab Technician can record the results of a lab procedure . A Lab Technician can update the status of a lab procedure as received . All events are logged (UC5).\n\n", "steps": ["An HCP can create a lab procedure for a given office visit.", "The HCP selects a procedure code, a priority from 1 to 3 (1=most important, 3=not as important), and Lab Technician (listed with his/her specialty and the number of pending lab procedures in his/her priority queue, grouped by priority).", "The HCP saves the new lab procedure, or cancels the lab procedure creation.", "The status of the lab procedure is marked as in transit.", "An HCP can view a previously created lab procedure for a given office visit.", "The HCP can view patient name, lab procedure code, current lab procedure status, timestamp, and Lab Technician name.", "An HCP can reassign a previously created lab procedure to a different Lab Technician if the lab procedure is not yet in the testing state.", "The HCP selects a different Lab Technician from the list of available Lab Technicians (displayed with Lab Technician specialty and the number of pending lab procedures in his/her priority queue, grouped by priority).", "The HCP confirms the reassignment, or cancels the reassignment.", "An HCP can remove a previously created lab procedure for a given office visit.", "The HCP chooses to remove the lab procedure as long as the status is either in transit or received.", "The HCP is prompted to confirm that he/she wishes to remove the lab procedure.", "An HCP can add commentary to a pending lab procedure.", "The HCP enters a comment for a lab procedure with status as pending.", "Upon entering a comment, the lab procedure status is updated to completed.", "A patient may view his or her own lab procedure.", "On the associated office visit page, the patient can see the current status of the lab procedure, the HCP name, and the timestamp.", "If the lab procedure status is marked as completed, the patient can see the results and the HCP-provided comments.", "A Lab Technician can view his or her assigned lab procedures.", "The Lab Technician sees a list of all lab procedures assigned to him/her that have a status of received, followed by a list of lab procedures that remain in transit.", "The list of received lab procedures is sorted by priority (from most important to least important), with a secondary sort by timestamp (oldest to newest).", "The first lab procedure in the received list is marked with a status of testing, and all other lab procedures have a status of received.", "The list of in transit lab procedures is sorted by timestamp, from oldest to most recent.", "In both lists, the Lab Technician is provided the lab procedure ID, lab procedure code, status, priority, HCP name, and timestamp.", "A Lab Technician can record the results of a lab procedure.", "The Lab Technician enters the lab procedure numerical result and confidence interval for the lab procedure with the status of testing.", "Upon recording the results of the lab procedure, the status is updated to pending.", "A Lab Technician can update the status of a lab procedure to received.", "In the list of in transit lab procedures, the Lab Technician can update the status to received when the sample has been received in his/her lab."], "dataset": "iTrust", "act": ["create", "selects,listed,grouped", "saves, cancels", "is marked", "view,created", "can view", "can reassign, is", "selects,displayed", "confirms, cancels", "remove,created", "chooses,remove", "is prompted, confirm, wishes, remove", "add", "enters", "entering,updated", "view", "can see", "is marked, can see", "can view", "sees", "is sorted", "marked,have", "is sorted", "is provided", "record", "enters", "recording,updated", "update,received", "update,received,received"], "obj": ["hcp, lab procedure, office visit", "procedure code, priority, lab technician, specialty, number of pending lab procedures, priority queue", "the hcp, new lab procedure, lab procedure creation", "status, lab procedure, in transit", "hcp, lab procedure, office visit", "hcp, patient name, lab procedure code, current lab procedure status, timestamp, lab technician name", "hcp, lab technician, lab procedure", "hcp, lab technician, lab technician, lab technician specialty, priority, lab procedures, queue, priority", "the reassignment, the reassignment", "hcp, lab procedure, office visit", "hcp, lab procedure, status, transit, received", "the hcp, lab procedure", "hcp, commentary, lab procedure", "hcp, comment, lab procedure, status", "comment,lab procedure status", "patient, lab procedure", "office visit page, patient, status, lab procedure, hcp name, timestamp", "lab procedure status, patient, results, hcp-provided comments", "lab technician, lab procedures", "lab technician,lab procedures,received,transit", "list,lab procedures,priority,timestamp", "lab procedure, status, testing, lab procedures, status, received", "list, in transit lab procedures, timestamp", "lab technician, lab procedure id, lab procedure code, status, priority, hcp name, timestamp", "lab technician, results", "lab technician, lab procedure, numerical result, confidence interval, status, testing", "results,lab procedure,status", "lab technician, status, lab procedure", "lab technician, status, sample, lab"]}
{"index": 16, "ucName": "Alert Users by Email Use Case", "uctext": "An email alert is sent out to the iTrust user in the event of a changed password , status change in laboratory procedure , comprehensive report requested and generated. Note to students: the iTrust system does NOT currently support actual email sending, only a “fake” email sending facility. All email notifications should be executed through the fake email utility.\n\n", "steps": ["The user has successfully changed his/her password (UC3, S2).", "An email informing the user of the password change is sent to the user including the MID but not the password.", "The status of a laboratory procedure has been updated (UC26, S3).", "The patient is notified with the following information: the LOINC number and the updated status."], "dataset": "iTrust", "act": ["has changed", "is sent", "has been updated", "is notified"], "obj": ["user,password,uc3,s2", "email, user, password change, user, mid, password", "status, laboratory procedure", "loinc number, updated status"]}
{"index": 17, "ucName": "View Patients", "uctext": "The LHCP chooses to view all patients with which he or she has ever had an office visit with. The patient’s name (clickable to view PHR), address, and date of last office visit are displayed. The list is sorted by the date of the last office visit (most recent first).\n\n", "steps": ["The LHCP chooses to view all patients with which he or she has ever had an office visit with.", " The patient’s name (clickable to view PHR), address, and date of last office visit are displayed.", " The list is sorted by the date of the last office visit (most recent first)."], "dataset": "iTrust", "act": ["chooses,view,has,had", "are displayed", "is sorted"], "obj": ["lhcp, patients, office visit", "patient’s name, address, date of last office visit", "date,office visit"]}
{"index": 18, "ucName": "Find LHCPs with experience with a diagnosis", "uctext": "A patient has just been diagnosed with a condition and wants to find the LHCPs in the area who have handled that condition. The patient chooses 'My Diagnoses” and is presented with a listing of all their own diagnoses, sorted by diagnosis date (more recent first). The patient can select a diagnosis and will be presented with the LHCPs in the patient's living area (based upon the first three numbers of their zip code) who have handled this diagnosis in the last three years. The list is ranked by the quantity of patients the LHCP has treated for that diagnosis (each patient is only counted once regardless of the number of office visits). For each LHCP, the following information is displayed:\n\nName of LHCP linked to contact information for that LHCP\nThe quantity of unique patients treated by that LHCP for that diagnosis (each patient is only counted once regardless of the number of office visits)\nList of all prescriptions given by that LHCP for that diagnosis\nList of all laboratory procedures ordered by that LHCP for that diagnosis\nThe LCHP's average visit satisfaction\nThe LHCP's average treatment satisfaction\n", "steps": ["A patient has just been diagnosed with a condition and wants to find the LHCPs in the area who have handled that condition.", "The patient chooses \"My Diagnoses\" and is presented with a listing of all their own diagnoses, sorted by diagnosis date (more recent first).", "The patient can select a diagnosis and will be presented with the LHCPs in the patient's living area (based upon the first three numbers of their zip code) who have handled this diagnosis in the last three years.", "The list is ranked by the quantity of patients the LHCP has treated for that diagnosis (each patient is only counted once regardless of the number of office visits).", "For each LHCP, the following information is displayed:", "Name of LHCP linked to contact information for that LHCP", "The quantity of unique patients treated by that LHCP for that diagnosis (each patient is only counted once regardless of the number of office visits)", "List of all prescriptions given by that LHCP for that diagnosis", "List of all laboratory procedures ordered by that LHCP for that diagnosis", "The LCHP's average visit satisfaction", "The LHCP's average treatment satisfaction."], "dataset": "iTrust", "act": ["has,been diagnosed,wants,to find", "chooses,is presented,sorted", "select,will be presented", "is ranked, has treated, is counted", "is displayed", "linked", "treated, counted", "list", "list,ordered", "average,visit, satisfaction", "is"], "obj": ["condition, lhcps", "the patient, my diagnoses, a listing of all their own diagnoses, diagnosis date", "the patient, diagnosis, lhcps, living area, zip code, three years", "list, quantity, patients, lhcp, diagnosis, patient, office visits", "lhcp, information", "lhcp, contact information", "unique patients, lhcp, diagnosis", "prescriptions, lhcp, diagnosis", "laboratory procedures, lhcp, diagnosis", "lchp", "treatment satisfaction"]}
{"index": 19, "ucName": "Authenticate Users Use Case", "uctext": "A user enters their MID and their password to gain role-based entry into the iTrust Medical Records system  or requests that their password be changed . A session that has been inactive for more than ten minutes is terminated . Upon successful authentication, the user will be directed to a personalized home page based on their role. An authenticated session ends when the user logs out or closes the iTrust application.\n\n", "steps": ["If the security question/answer has been set (it is not null), present security question and obtain answer.", "If answer to security question is correct, allow user to change their password. An email notification is sent.", "Electronic sessions must terminate after ten minutes of inactivity.", "Ensure that authentication is reset after a period of inactivity that exceeds ten minutes."], "dataset": "iTrust", "act": ["has been set, present, obtain", "allow,send", "must terminate", "ensure, reset"], "obj": ["security question,answer", "email notification", "electronic sessions", "authentication, period of inactivity, ten minutes"]}
{"index": 20, "ucName": "Messaging between LHCP and patient", "uctext": "An LHCP wants to send a message to a patient and/or that patient's personal representative  or a patient or personal representative wants to send a message to one of their DLHCP or that of a person they are representing . LHCPs and patients/representatives may reply to messages. An LHCP or patient/representative may view a message . An LHCP or patient/representative can sort his or her message inbox and message outbox . An LHCP or patient/representative can modify and save his/her message displaying filter  or view his/her message inbox  including only the messages satisfying the specified filtering criteria in the saved filter.\n\n", "steps": [" A patient or personal representative for a patient chooses to send a message to an LHCP (no multiple recipients allowed in a single message).", " The patient/representative is presented with a pull down menu of his/her DLHCP.", " The patient/representative chooses one of these DLHCP and types the subject (up to 100 characters) and text of a message (up to 1000 characters), and clicks the send button.", " A row for showing the message subject, the name of the recipient, and the timestamp (which includes both date and time) is then visible in the patient/representative’s message outbox.", " A bolded row for showing the message subject, the name of sender, and the timestamp is then visible in the LHCP's message inbox.", " A fake email is sent to the LHCP alerting the user that a new message has arrived.", " After a message is sent, the patient or personal representative is directed to his/her message outbox.", "\n An LHCP chooses to send a message to a patient/representative (no multiple recipients allowed in a single message).", " The LHCP enters and confirms the patient/representative's MID.", " The LHCP types the subject (up to 100 characters) and the text of a message (up to 1000 characters), and clicks the send button. A row for showing the message subject, the name of the recipient, and the timestamp is then visible in the LHCP’s message outbox.", " A bolded row for showing the message subject, the name of the sender, and the timestamp is then visible in the patient/representative’s message inbox, and a fake email is sent to the patient/representative that indicates that he/she has a new message from an LHCP.", " After a message is sent, the LHCP is directed to to his/her message outbox.", "\n A patient or patient representative wishes to reply to a message.", " The patient/representative views his or her message inbox.", " The patient/representative opens the message to which he or she wishes to reply , and then clicks the reply link above the message text.", " The patient/representative enters the text of the response message (up to 1000 characters) he or she wishes to send, then clicks the send button.", " A row for showing the message subject (now preceded by “RE:”), the name of the recipient,", " and the timestamp is then visible in the patient/representative’s message outbox.", " A bolded row for showing the message subject (now preceded by “RE:”), the name of the sender, and timestamp is then visible in the LHCP’s message inbox.", " A fake email is sent to the LHCP alerting the LHCP that a new message reply has arrived.", "\n An LHCP wishes to reply to a message.", " The LHCP views his or her message inbox.", " The LHCP opens the message to which he or she wishes to reply , and then clicks the reply link above the message text.", " The LHCP enters the text of the response message (up to 1000 characters) he or she wishes to send, then clicks the send button.", " A row for showing the message subject (now preceded by “RE:”), the name of the recipient, and the timestamp are then visible in the LHCP’s message outbox.", " A bolded row for showing the message subject (now preceded by “RE:”), the name of sender, and timestamp are then visible in the patient/representative’s message inbox.", " A fake email is sent to the patient/representative alerting the patient/representative that a new message reply has arrived.", "\n A user (a patient, patient representative, or LHCP) wishes to read a message from the message inbox or outbox.", " The user chooses to open his or her message inbox/outbox.", " Each row in the message inbox/outbox includes the message subject, the name of either the sender (only for the case of inbox) or recipient (only for the case of outbox), and timestamp.", " By default, the messages in the message inbox/outbox should be ordered by timestamp, the most recent first.", " Each row for an unread message in the message inbox is bolded.", " The user selects a message from the message inbox/outbox to read by clicking the “Read” link beside the row for the message, and then the message subject, the name of the sender, the name of the the recipient, timestamp, and the message text shall be displayed in a new page.", " After a message in the message inbox is read (i.e., displayed in a new page), the row for the message in the message inbox is not bolded anymore.", "\n A user (a patient, patient representative, or LHCP) can sort messages in his or her message inbox by either the sender's last name or timestamp (but not both) in either ascending or descending order (where timestamps in descending order would have the most recent first).", " A user can sort messages in his or her message outbox by the recipient's last name or timestamp (but not both) in either ascending or descending order.", " To do so, a user selects one option out of the “Sort by” labeled drop-down box (with options of “Sender/Recipient” or “Timestamp”) and selects one option out of the “by order of” labeled drop-down box (with options of “ascending” or “descending”), and then click the “Sort” button.", " Note that the sorted order is not saved for later viewing after the message inbox or outbox is reopened again (where the default sorting is always used).", "\n A user (an LHCP or patient/representative) can modify his/her message displaying filter by modifying the following filtering criteria: (1) the sender (i.e., the sender's name is exactly the same as the specified string), (2) the subject (i.e., the subject is exactly the same as the specified string), (3) has the words (i.e., the subject or the message body has the specified substring), (4) doesn't have (i.e., neither the subject nor the message body has the specified substring), (5) time stamp falling into the period defined by the starting date and ending date (inclusive) (the user interface shall provide both the option of typing in a specific date in the date format and the option of selecting a date from a calendar for the current month).", " Note that a single filter includes values for these five filtering criteria (rather than five filters for these five filtering criteria) and a value could be an empty string, indicating that this criterion has no impact on filtering (i.e., imposing no constraints related to this criterion).", " The user interface shall be initially populated with the values of the filtering criteria from the previously saved filter.", " After the user modifies the criteria, the user chooses to click the “Cancel” button to cancel the modifications of the filter (i.e., repopulate the user interface with the values of the filtering criteria from the previously saved filter), to click the “Test Search” button to search (i.e., displaying the message inbox  including only the messages satisfying the specified filtering criteria), or to click the “Save” button to save the modified filter.", " Each user is associated with only one filter (being saved across login sessions) and applies only this saved filter.", " The user's associated filter initially has all empty inputs for the filtering criteria before the user modifies it.\n"], "dataset": "iTrust", "act": ["chooses, send", "is presented", "chooses,types,clicks", "is, showing, is, visible", "bolded, visible", "is sent,alerting,has arrived", "sent, is sent, is directed", "chooses,send", "enters,confirms", "types,clicks,is,showing,is", "is, visible, sent, indicates", "sent, directed", "wishes,reply", "views", "opens, clicks", "enters, wishes, send, clicks", "showing", "is, is, visible", "is preceded, is visible", "is sent,alerting,has arrived", "wishes,reply", "views", "opens, clicks", "enters, wishes, send, clicks", "are, visible", "are,visible", "sent, alerting, has arrived", "wishes to read", "chooses,open", "includes", "ordered", "is bolded", "selects, clicking, be displayed", "read,displayed,is,bolded,is", "sort", "sort", "selects,selects,click", "note, saved, reopened, used", "modify, modifying, typing, selecting", "includes, could be, indicating, imposing", "populated, saved", "modifies, chooses, click, cancel, repopulate, click, search, displaying, click, save", "is associated, is saved, applies", "has,modifies"], "obj": ["patient, personal representative, patient, message, lhcp, message", "patient/representative,dlhcp", "patient/representative, dlhcp, subject, message", "message subject, recipient, timestamp, date, time, patient/representative’s message outbox", "message subject, name of sender, timestamp", "lhcp, email, message", "message,patient,personal representative,message outbox", "lhcp, message, patient, representative", "lhcp, patient/representative's mid", "lhcp, subject, message, message subject, recipient, timestamp, lhcp’s message outbox", "message subject, name of the sender, timestamp, patient/representative’s message inbox, email, patient/representative, lhcp", "message, lhcp, message, outbox", "patient, patient representative, message", "message inbox", "patient/representative, message, reply link, message text", "patient, representative, text, response message, characters, send button", "message subject, name of the recipient", "timestamp,patient,representative,message outbox", "a bolded row, the message subject, “re:”, the name of the sender, timestamp, lhcp’s message inbox", "lhcp, lhcp", "message", "lhcp, message inbox", "lhcp, message, message, reply link, message text", "lhcp, response message, send button", "message subject, recipient, timestamp, lhcp’s message outbox", "the message subject,name of sender,timestamp,patient/representative’s message inbox", "email,patient,representative,patient,representative,message reply", "user, patient, patient representative, lhcp", "message inbox, message outbox", "message subject, name, sender, recipient, timestamp", "messages, message inbox, outbox, timestamp", "row, unread message, message inbox", "message inbox/outbox, message subject, name of the sender, name of the the recipient, timestamp, message text", "message, message inbox, row, message, message inbox", "user, patient, patient representative, lhcp, message inbox, sender's last name, timestamp, ascending order, descending order, timestamps in descending order", "user, messages, message outbox, recipient's last name, timestamp, order", "user, option, sort by, drop-down box, sender/recipient, timestamp, by order of, ascending, descending, sort button", "message inbox, outbox", "lhcp,patient,representative,message,filter,sender,sender's name,string,subject,subject,subject,string,subject,message body,substring,subject,message body,substring,time stamp,period,starting date,ending date,date,date,user interface,option,typing,date,date,format,option,selecting,date,calendar,month", "single filter, values, five filtering criteria, five filters, filtering criteria, value, empty string, criterion, filtering, criterion", "values, filtering criteria, filter", "user, criteria, user, cancel button, modifications, filter, user interface, values, filtering criteria, filter, test search button, message inbox, messages, criteria, save button, filter", "user, filter, filter", "user, associated filter, inputs, filtering criteria, user"]}
{"index": 21, "ucName": "Find LHCPs for prescription renewal Use Case", "uctext": "A patient wants to renew the patient's expired prescriptions (i.e., prescriptions' end dates are earlier than the current date) and therefore wants to find the LHCPs who earlier wrote the patient's expired prescriptions (it is assumed that the doctors who wrote prescriptions are all LHCPs so no LHCP checks on the prescription-writing doctors are needed). The patient chooses “My Expired Prescription Reports” and is presented with a list of the patient's expired prescriptions , sorted by start date (the later date is ranked earlier closer to the top). The patient can select to view contact information of a selected LHCP shown in the expired prescription list .\n\n", "steps": ["The expired prescription report list is titled with the patient name.", "The expired prescription list includes medication, date prescribed (i.e., the day of the office visit), start date, end date for each prescription, and the name of the LHCP who prescribed the medication (where the name of the LHCP is linked to contact information for that LHCP).", "If there are no expired prescriptions, an empty expired prescription list is presented.", "The patient clicks on the name of the LHCP for an expired prescription, and is presented with the contact information for that LHCP (including First Name Last Name, LHCP Type, Street Address 1, Street Address 2, City, State, Zip Code, Phone, and Contact Email);", "if any type of contact information is missing or the whole contact information for the LHCP is not available in the database, the corresponding missing types of information are simply shown as blank."], "dataset": "iTrust", "act": ["is titled", "includes", "are, presented", "clicks, is presented", "is, is, are, shown"], "obj": ["expired prescription report list, patient name", "expired prescription list, medication, date prescribed, day of the office visit, start date, end date, name of the lhcp, lhcp, contact information", "expired prescriptions, expired prescription list", "first name last name, lhcp type, street address 1, street address 2, city, state, zip code, phone, contact email", "contact information, lhcp, database"]}
{"index": 22, "ucName": "Proactively Confirm Prescription-Renewal Needs Use Case", "uctext": "The HCP chooses “Potential Prescription-Renewals” and is presented with a list of patients  that satisfy ALL of the three conditions: (1) patients for whom the HCP is a DLHCP, (2) special-diagnosis-history patients , (3) patients whose prescriptions will expire within 7 days (including the 7th day) from the current date (i.e., (currentDate < = expiredDate < = (currentDate + 7 days)).\n\n", "steps": ["A chronic special-diagnosis-history patient is an alive patient who has been diagnosed with at least one of the following:", "diabetes mellitus (is diagnosed with ICD code beginning with 250:http://icd9cm.chrisendres.com/icd9cm/index.php?action=child&recordid=1894 (,", "asthma (is diagnosed with ICD code beginning with 493:http://icd9cm.chrisendres.com/icd9cm/index.php?action=child&recordid=5000 (, or", "circulatory-system disease (is diagnosed with an ICD code between 390 and 459 inclusive: http://icd9cm.chrisendres.com/icd9cm/index.php?action=child&recordid=4314 (.", "The patient list is titled with the HCP's name.", "The patient list includes the patient's name (i.e., first name and last name), phone number, and contact email address  (so that confirmation calls or emails can be made or sent outside of the iTrust system).", "The list is sorted based on the ascending alphabetical order of the patients' last names, and then first names.", "When a chronic special-diagnosis-history patient satisfies all three conditions and has multiple prescriptions satisfying the third condition, the patient is listed in the list only once.", "The list is a static list with no link on the patient's name, phone number, or contact email address)"], "dataset": "iTrust", "act": ["is,has been diagnosed", "is diagnosed", "is diagnosed,output", "is diagnosed", "is titled", "includes,can be made,can be sent", "is sorted", "satisfies,has,satisfying,is listed", "is"], "obj": ["chronic special-diagnosis-history patient, alive patient", "diabetes mellitus", "asthma", "circulatory-system disease, icd code between 390 and 459 inclusive, http://icd9cm.chrisendres.com/icd9cm/index.php?action=child&recordid=4314", "patient list, hcp's name", "patient's name,first name,last name,phone number,contact email address,confirmation calls,emails,itrust system", "the list, the patients' last names, first names", "a chronic special-diagnosis-history patient, three conditions, multiple prescriptions, third condition, the patient, the list", "patient's name, phone number, contact email address"]}
{"index": 23, "ucName": "Manage Patient Referrals Use Case", "uctext": "A sending HCP refers a patient to another receiving HCP . A receiving HCP views a list of received referrals . A sending HCP views a list of previously sent patient referrals . A patient views the details of his/her referrals . A sending HCP edits a previously sent patient referral . A sending HCP cancels a previously sent patient referral . All events are logged (UC5).\n\n", "steps": [" An HCP chooses to refer a patient to another receiving HCP through the referral feature on a patient's office visit page (UC11).", " The sending HCP must select a receiving HCP by either entering the HCP's MID and confirming the selection , or by searching for the HCP by name.", " The sending HCP is also presented with a text box to include notes about the referral.", " The sending HCP then chooses a priority from 1-3 (1 is most important, 3 is least important) for the referral.", " The HCP may send the referral, cancel the referral, or edit the referral .", " Upon sending a referral, the patient, sending HCP, and receiving HCP receive a message summarizing the newly created referral information (sending HCP name & specialty, receiving HCP name & specialty, patient name, referral notes, and referral creation timestamp); additionally, the sending and receiving HCP messages include the referral priority.", "\n An HCP chooses to view received referrals.", " The receiving HCP is presented with a list of referrals sorted by priority (from most important to least important).", " The receiving HCP then selects a referral to view details and is presented with the name and specialty of the sending HCP, the patient's name, the referral notes, the referral priority, the office visit date with a link to the office visit, and the time the referral was created.", "\n A sending HCP views a list of previously sent patient referrals.", " The HCP may sort the list of referrals by patient name, receiving HCP name, time generated, and/or priority.", " The HCP chooses a specific referral from the list to view complete details about the referral: patient name, receiving HCP name and specialty, time generated, priority, office visit date, and notes.", "\n A patient views a list of his/her referrals.", " The patient may sort the list of referrals by receiving HCP name, time generated, and/or priority.", " The patient chooses a specific referral from the list to view complete details about the referral: sending HCP name and specialty, receiving HCP name and specialty, time generated, priority, office visit date, and notes.", " The patient is also provided with the option to send a message to the receiving HCP to request that an appointment be scheduled.", "\n A sending HCP edits a previously created patient referral as long as the referral has not been viewed by the receiving HCP.", " The sending HCP may edit the priority of the referral and/or the referral notes.", " The sending HCP then chooses to save the edits, cancel the edits, or re-enter the data .", "\n A sending HCP cancels a previously sent patient referral by visiting the office visit page, viewing the details of a previously sent patient referral , and choosing cancel.", " The HCP is asked to confirm the decision to cancel the referral.", " The patient and receiving HCP receive a message (UC30) indicating that the referral was canceled.\n"], "dataset": "iTrust", "act": ["chooses,refer", "select, entering, confirming, searching", "is presented, include", "chooses", "send, cancel, edit", "sending, receive, summarizing, sending, receiving, include", "chooses,view", "is presented, sorted", "selects, is presented", "views, sends", "sort", "chooses,view", "views", "sort", "chooses,view", "is provided, send, request, be scheduled", "sending, edits, created, viewed", "edit", "chooses, save, cancel, re-enter", "cancels,visiting,viewing,choosing,cancel", "asked, confirm, cancel", "receive, receive, indicating"], "obj": ["hcp, hcp, referral feature, patient's office visit page", "hcp, hcp, hcp, mid, hcp", "hcp, text box, notes, referral", "hcp,1-3,1,3", "referral, referral, referral", "referral, patient, sending hcp, receiving hcp, referral information, sending hcp name, specialty, receiving hcp name, patient name, referral notes, referral creation timestamp, sending hcp messages, receiving hcp messages, referral priority", "hcp, referrals", "referrals, priority", "name, specialty, name, notes, priority, date, link, time", "hcp, patient referrals", "list of referrals, patient name, receiving hcp name, time generated, priority", "patient name, receiving hcp name, specialty, time generated, priority, office visit date, notes", "list,referrals", "receiving hcp name, time generated, priority", "specific referral, list, complete details, referral, sending hcp name, specialty, receiving hcp name, specialty, time generated, priority, office visit date, notes", "patient, message, hcp, appointment", "a, hcp, patient referral, referral, hcp", "the sending hcp, priority, referral, referral notes", "hcp", "hcp,office visit page,details,patient referral", "hcp, referral", "the patient, receiving hcp, a message, uc30, the referral"]}
{"index": 24, "ucName": "Report Telemedicine Monitoring Details Use Case", "uctext": "An LHCP or UAP creates a list of patients by adding and confirming patients (by MID) for which he or she will monitor remotely. A patient either chooses to input his or her physiologic measurements (blood pressure and/or glucose levels) , or to input his or her weight, height, and/or pedometer readings . An LHCP can see the blood pressure and glucose levels , or weight, height, and pedometer readings  for the patients he or she is monitoring, with two separate lists for physiologic and height/weight/pedometer readings . A UAP or patient representative can input the blood pressure, glucose levels, height, weight, or pedometer readings for a patient. A patient may have up to 10 physiologic data points in any one day, reported by him/herself, a UAP, or a personal representative . A patient may have at most one height data point, one weight data point, and one pedometer data point in any one day, reported by him/herself, a UAP, or a personal representative.\n", "steps": [" An LHCP or UAP can add and delete patients from his or her monitoring list.", " A patient is added to the list by the LHCP or UAP typing in the patient's MID  or name.", " An LHCP can delete a patient from his or her monitoring list by the LHCP typing the the patient's MID .", " In both cases, the LHCP is presented the name of the patient and must confirm the add/delete.", " For each patient from the monitoring list, the LHCP can choose to edit which types of remote monitoring information (blood pressure, glucose levels, height, weight, and pedometer readings) should be submitted by the patient.", " By default, all types of information are selected for monitoring.", "\n A patient whose at least one physiologic data type is specified to be under monitoring chooses to report their physiologic data.", " He or she can report his or her blood pressure (systolic and diastolic)  and/or glucose levels .", " The input data, a timestamp, and the fact that the status is “self-reported” are saved.", "\n An LHCP chooses to view the physiologic data monitoring details.", " The LHCP is presented with a listing of all his or her patients whose at least one physiologic data type is specified to be under monitoring with their blood pressure and glucose levels, recording timestamp, and whom reported the data (patient, UAP name, personal representative name).", " Patients with no information for the current day are highlighted.", " Patients with blood pressure or glucose level out of range are highlighted (normal blood pressure: systolic 90-140; diastolic 60-90; normal glucose 70-150).", " The LHCP can select a patient to obtain additional information about a patient .", "\n An LHCP selects to view additional information for a patient.", " The LHCP is presented with a screen upon which he/she can choose a date range.", " Once the date range is selected, the LHCP can see the patient name; patient phone number; personal representative (name and phone number), if applicable; and the blood pressure, glucose levels, height, weight, and pedometer readings as well as whom reported the data (patient, UAP name, personal representative name) for that date range.", "\n A UAP can select to report physiologic measurements.", " He/she is presented with a list of the patients whose at least one physiologic data type is specified to be under monitoring and for whom he/she is allowed to report measurements.", " He or she can select a patient and then enter data. He or she can report the blood pressure (systolic and diastolic)  and/or glucose levels  for the patient.", " The input data, a timestamp, and the fact the the status was reported by “case manager” and their MID are saved.", " Only the applicable input entries (those whose corresponding data types of the patient are specified to be under monitoring) are displayed to the UAP.", "\n A patient can select to report physiologic measurements for those whose at least one physiologic data type is specified to be under monitoring andfor whom he/she is a patient representative.", " He/she is presented with a list of the patients whose at least one physiologic data type is specified to be under monitoring and for which he/she is allowed to report measurements.", " He or she can select a patient and then enter data.", " He or she can report the blood pressure (systolic and diastolic)  and/or glucose levels  for the patient.", " The input data and a timestamp and the fact that the status was reported by “patient representative” and their MID are saved.", " Only the applicable input entries (those whose corresponding data types of the patient are specified to be under monitoring) are displayed to the patient.", "\n A patient whose height, weight, or pedometer data type is specified to be under monitoring chooses to report his/her height/weight/pedometer data.", " He or she can report his or her daily height (in the format of digits XXXX.X with the units of “feet”), daily weight (in the format of digits XXXX.X with units of “lbs”), and/or pedometer readings (in the format of up to 10 digits of integer with units of “footsteps”).", " The input data, a timestamp, and the fact that the status is “self-reported” are saved.", " Only the applicable input entries (those whose corresponding data types of the patient are specified to be under monitoring) are displayed to the patient.", "\n An LHCP chooses to view the height/weight/pedometer data monitoring details.", " The LHCP is presented with a listing of all his or her patients whose height, weight, or pedometer data type is specified to be under monitoring with their height, weight and pedometer reading numbers, recording timestamp, and who reported the data (patient name, UAP name, or personal representative name).", " Patients with no information for the current day are highlighted in red.", " Patients with a weight value 5% more or less than the immediate previously recorded weight value are highlighted (if the new weight value exceeds 105% of the previous weight value, the entry should be highlighted yellow; if the new weight value is below 95% of the previous weight value, the entry should be highlighted yellow).", " The LHCP can select a patient to obtain additional information about a patient .", "\n A UAP can select to report height/weight/pedometer measurements.", " He/she is presented with a list of the patients whose height, weight, or pedometer data type is specified to be under monitoring and for which he/she is allowed to report measurements.", " He or she can select a patient and then enter data.", " He or she can report the height, weight, and/or pedometer reading for the patient.", " The input data, a timestamp, and the fact that the status was reported by “case manager” and his/her MID are saved.", " Only the applicable input entries (those whose corresponding data types of the patient are specified to be under monitoring) are displayed to the UAP.", "\n A patient can select to report height, weight, and/or pedometer readings for those for whom he/she is a patient representative. ", "He/she is presented with a list of the patients for which he/she is allowed to report measurements.", " He or she can select a patient and then enter data. He or she can report the height, weight, and/or pedometer readings for the patient.", " The input data, a timestamp, and the fact that the status was reported by “patient representative” and his/her MID are saved.", " Only the applicable input entries (those whose corresponding data types of the patient are specified to be under monitoring) are displayed to the patient.\n"], "dataset": "iTrust", "act": ["add, delete", "is added, typing", "delete,typing", "presented, confirm", "choose, edit", "are selected", "is specified, chooses, to report", "can report", "are saved", "chooses,view", "is presented, is specified, reported", "highlighted", "are highlighted", "select,obtain", "selects,view", "is presented, can choose", "selected, see", "can select,report", "is presented, is specified, is allowed", "select, enter, report", "are saved", "displayed", "select, report", "is presented, is specified, is allowed, to report", "can select,enter", "report", "are saved", "are displayed", "chooses,report", "report", "are saved", "are,displayed", "chooses,view", "is presented, is specified, is", "are highlighted", "are highlighted,should be highlighted,should be highlighted", "select,obtain", "can select,report", "is presented, is specified, is allowed, report", "select,enter", "report", "are saved", "are displayed", "select,report", "is presented, allowed to report", "select, enter, report", "are saved", "are displayed"], "obj": ["lhcp, uap, patients, monitoring list", "lhcp, uap, mid", "lhcp, lhcp, mid", "lhcp, name, patient", "patient,monitoring list,lhcp,remote monitoring information,blood pressure,glucose levels,height,weight,pedometer readings", "information", "patient,physiologic data type,physiologic data", "blood pressure, systolic, diastolic, glucose levels", "input data, timestamp, fact, status", "lhcp, physiologic data monitoring details", "lhcp, patients, physiologic data type, monitoring, blood pressure, glucose levels, recording timestamp, patient, uap name, personal representative name", "patients, information, day", "blood pressure, glucose level, systolic 90-140, diastolic 60-90, glucose 70-150", "the lhcp, a patient", "lhcp, additional information, patient", "lhcp, screen, date range", "date range, lhcp, patient name, patient phone number, personal representative, blood pressure, glucose levels, height, weight, pedometer readings, data, patient, uap name, personal representative name", "physiologic measurements", "a list of the patients, at least one physiologic data type, monitoring, measurements", "he or she, patient, data, blood pressure, systolic, diastolic, glucose levels, patient", "input data, timestamp, case manager, mid", "applicable input entries, corresponding data types, patient, uap", "a patient, physiologic measurements, physiologic data type, monitoring, patient representative", "a list of the patients, physiologic data type, monitoring, measurements", "a patient, data", "he or she, blood pressure, systolic, diastolic, glucose levels, patient", "input data, timestamp, status, patient representative, mid", "applicable input entries, corresponding data types, patient", "height,weight,pedometer data,monitoring", "height,weight,pedometer readings", "input data, timestamp, status", "applicable input entries, corresponding data types, patient", "lhcp, height, weight, pedometer, data monitoring details", "lhcp, height, weight, pedometer data type, height, weight, pedometer reading numbers, recording timestamp, patient name, uap name, personal representative name", "patients, information, day", "patients, weight value, 5%, immediate previously recorded weight value, 105%, previous weight value, yellow, 95%, previous weight value, yellow", "lhcp, patient, patient", "height,weight,pedometer measurements", "height, weight, pedometer data type, measurements", "a patient, data", "height,weight,pedometer reading", "input data, timestamp, status, case manager, mid", "applicable input entries, corresponding data types, patient, uap", "height,weight,pedometer readings", "patients", "a patient, data, height, weight, pedometer readings, the patient", "input data, timestamp, status, patient representative, mid", "applicable input entries, data types, patient, monitoring, patient"]}
{"index": 25, "ucName": "Report Adverse Event Use Case", "uctext": "A patient selects to report an event related to a prescription drug  or immunization  reaction.\n\n", "steps": ["A patient is presented with a listing of all prescription drugs for which he/she has been prescribed and/or has taken in the last 12 months.", "The patient chooses one or more drug(s) for which to report the adverse event.", "The patient is then able to write a textual description which describes the symptoms of the adverse event and to save the information.", "A fake email is sent to the LHCP who prescribed the medication indicating the patient name and MID, drug, and symptoms.", "A patient is presented with a listing of all immunizations for which he/she has been administered in the last 12 months.", "The patient chooses the immunization for which to report the adverse event.", "The patient is then able to write a textual description which describes the symptoms of the adverse event and to save the information.", "A fake email is sent to the LHCP who administered the immunization indicating the patient name and MID, drug, and symptoms."], "dataset": "iTrust", "act": ["is presented, has been prescribed, has taken", "chooses,report", "is able, write, describes, save", "is sent", "presented,has been administered", "chooses,report", "is, able, write, describes, save", "sent, administered, indicating"], "obj": ["patient,listing,prescription drugs,last 12 months", "the patient, drug, adverse event", "patient,description,symptoms,adverse event,information", "lhcp, patient name, mid, drug, symptoms", "a patient, a listing, immunizations, he/she, the last 12 months", "the patient, the immunization, the adverse event", "the patient, textual description, the symptoms, the adverse event, the information", "lhcp, mid"]}
{"index": 26, "ucName": "Monitor Adverse Event Use Case", "uctext": "A public health agent (PHA) selects a specific time period for which he/she would like to see a detailed listing of all adverse events related to prescription drugs  or immunizations  or to see trends in adverse events related to prescription drugs  or immunizations .\n\n", "steps": [" A public health agent is presented with a listing of prescription drug-related adverse events for the time period that do not have a status of “removed”, sorted by NDC.", " The public health agent can select to see the detail of a specific report.", " Upon reading the report, the public health agent can choose to send a “fake email” message to the adverse event reporter to gain more information about the report.", " The public health agent may also choose to remove an adverse event report (such as based upon communication with the reporter or because the report appears to be bogus) .", "\n A public health agent is presented with a listing of immunization-related adverse events for the time period that do not have a status of “removed”, sorted by CPT code .", " The public health agent can select to see the detail of a specific report.", " Upon reading the report, the public health agent can choose to send a “fake email” message to the adverse event reporter to gain more information about the report.", " The public health agent may also choose to remove an adverse event report (such as based upon communication with the reporter or because the report appears to be bogus) .", "\n The adverse event report changes to a status of “removed.” ", "A message of the removal is sent to the adverse event reporter and to the LHCP involved in the report (because the LHCP prescribed the drug or administered the immunization).\n"], "dataset": "iTrust", "act": ["is presented, do not have, sorted", "can select, see", "reading, choose, send, gain", "may choose, remove, appears", "is presented, do have, have, are sorted", "select,see", "reading, send, gain", "choose,remove,appears", "changes", "is sent, prescribed, administered"], "obj": ["agent,listing,adverse events,time period,status,ndc", "the public health agent, detail, specific report", "the report, the public health agent, fake email, the adverse event reporter, the report", "the public health agent, adverse event report, communication, reporter, report", "public health agent, immunization-related adverse events, cpt code", "public health agent, detail, specific report", "public health agent, adverse event reporter", "the public health agent, adverse event report, the reporter", "adverse event report", "message, removal, adverse event reporter, lhcp, report, lhcp, drug, immunization"]}
{"index": 27, "ucName": "Safe Drug Prescription Use Case", "uctext": "While documenting an office visit, the HCP selects to prescribe a patient a drug by selecting its NDC and name. Upon notice of allergies and/or interactions the HCP must either choose to proceed with the prescription  or cancel the prescription and remain on the office visit page. The administrator maintains the override reasons that an HCP can select from .\n\n", "steps": [" The drug desired to be prescribed is checked against the patient's drug allergies.", " The HCP is notified of drug allergy.", "\n The drug desired to be prescribed is checked for interactions between other drugs currently taken by the patient.", " The HCP is notified of possible interactions.", "\n The HCP selects one or more of the override reasons available for selection .", " The patient is sent a “fake email” that the HCP has prescribed a medication that he/she is allergic to or that has a known interaction with a drug he/she is taking.", "\n The system shall enable the administrator to add a new entry for a reason or modify the reason name in an existing entry .", " Note that the administrator is not allowed through the system interface to delete an existing entry or modify the reason ID number in an existing entry.", "\n The system shall store (1) reason id number for the reason ; and (2) up to 80 alphanumeric characters giving the name of the reason .\n"], "dataset": "iTrust", "act": ["desired, checked", "is notified", "checked", "is, notified", "selects", "is sent,has prescribed,is allergic,is taking", "enable, add, modify", "note, is not allowed, delete, modify", "store"], "obj": ["the drug,patient's drug allergies", "hcp, drug allergy", "interactions, drugs, patient", "hcp, interactions", "the hcp, override reasons", "the patient, fake email, hcp, medication, allergic, interaction, drug", "administrator,entry,reason,reason name", "the administrator, the system interface, an existing entry, the reason id number, an existing entry", "reason id number, alphanumeric characters"]}
{"index": 28, "ucName": "Maintain Drug Interaction Use Case", "uctext": "The administrator records  or deletes  a drug interaction between two prescription drugs.\n\n", "steps": ["The administer is presented with two lists of NDC codes/names.", "The administrator chooses a drug from each list to record an interaction between the two drugs.", "The two drugs and a textual description of the possible effects of the interaction are stored.", "The administrator selects one drug and is presented with a listing of all drug interactions currently associated with that drug.", "The administrator can select a particular pair of drugs and delete the interaction between the two drugs."], "dataset": "iTrust", "act": ["is presented", "chooses,record", "are stored", "selects, is presented", "select,delete"], "obj": ["ndc codes/names", "administrator,drug,interaction,drugs", "two drugs, textual description, possible effects, interaction", "administrator,drug,listing,interactions", "administrator,drugs,interaction"]}
{"index": 29, "ucName": "Enter/edit Demographics Use Case", "uctext": "Demographic information is entered and/or edited. The user is presented with a success or failure message and the form is updated so that the user may correct the form or add more information.\n\n", "steps": ["A patient or personal health representative may enter or edit their own demographic information including their security question/answer according to data format 6.1.", "When answer to the security question is typed in, the answer should not appear on the screen (similar to how a password normally appears) and the answer should be confirmed (by the patient or personal health representative) before it is saved.", "HCP must enter the MID of a patient and then enter or edit demographic information with the exception of the patient's security question/password according to data format 6.1.", "An HCP may enter or edit their own demographic information according to data format 6.2.", "An HCP may upload a photo of the patient as part of the patient's demographic records."], "dataset": "iTrust", "act": ["enter, edit", "typed, appear, confirmed, saved", "enter,enter,edit", "enter, edit", "may upload"], "obj": ["patient, personal health representative, demographic information, security question/answer, data format 6.1", "when answer to the security question is typed in, answer, screen, password, answer, patient, personal health representative, answer", "hcp, mid, patient, demographic information, security question/password, data format 6.1", "hcp, demographic information, data format 6.2", "hcp, photo, patient, patient, demographic records"]}
{"index": 30, "ucName": "Log Transaction Use Case", "uctext": "Any event which creates, views, edits, or deletes information is logged . Login failures, valid authentication, and log outs are also logged . Individual audit codes related to specific use cases are presented within each Use Case description.\n\nNote: The subflow and transaction values are based on Use Case. For example, any in the range of 100-199 are for use case one, any in the range of 200-299 are in use case two. The values from range 1-99 are logging events which do not exist in any use case. Miscellaneous transaction codes 1-99 are presented in 5.5 below.\n\n", "steps": ["For Login Failures, the IP Address of the machine, transaction type = 1, and timestamp are recorded.", "For creating, viewing, modifying, or deleting information, the following information is recorded: the MID of the logged in user, any appropriate secondary MID of the user whose information is being accessed, a transaction type corresponding to the given action, and the current timestamp."], "dataset": "iTrust", "act": ["recorded", "creating, viewing, modifying, deleting"], "obj": ["ip address,transaction type,timestamp", "mid, transaction type, timestamp"]}
{"index": 31, "ucName": "View HCP; Designate/Undesignate Designated Licensed Health Care Professional Use Case", "uctext": "The patient chooses to view all LHCPs the patient has ever had an office visit with and those whom he/she had designated. The patient can also add a LHCP to their provider list by searching for the name and/or specialty of a LHCP  and then selecting to add the HCP to their list of providers.\n\n", "steps": [" The LHCP's name, specialty, address, date of office visit, and whether or not the LHCP is a DLHCP for this patient is indicated.", " The list is sorted by the date of the last office visit (most recent first).", "\n The patient can choose to toggle between designating/undesignating any LHCP as being a DLHCP for them.", "\n The patient types a last name or partial last name, and/or providing the specialty.", " The patient may optionally enter a zip code (match on first three numbers of zip code), in addition to the name and/or specialty.", " The LHCP's name, specialty, and address are provided.\n"], "dataset": "iTrust", "act": ["is indicated", "is sorted", "choose, toggle, designating, undesignating", "types,providing", "enter,match", "are provided"], "obj": ["lhcp's name, specialty, address, date of office visit, dlhcp", "date", "patient, lhcp, dlhcp", "name, last name, specialty", "zip code, name, specialty", "name, specialty, address"]}
{"index": 32, "ucName": "View Access Log Use Case", "uctext": "The patient chooses to view his or her access log or that for a person for whom they are a personal health representative. The patient then chooses the beginning and end date for the period of time they would like to view their access log for. The resulting list should include the following for each access:\n\nName of non-DLHCP accessor (with a link to contact information if the viewer is an LHCP)\nRole of non-DLHCP accessor relative to the patient\nDate and time of access\nTransaction Type (See Data Format 6.3)\n", "steps": ["By default, the patient is presented with a list sorted by dates, most recent access first.", "The patient may choose to view the list sorted by the role of the accessor relative to the patient (personal health representative, LHCP, UAP, Emergency Responder; any order is fine as long as the list is sorted by role) as well as by date for each role type, most recent access first."], "dataset": "iTrust", "act": ["is presented,sorted", "choose,view,sorted,simplified,sorted"], "obj": ["list,dates,access", "patient, list, role of the accessor, personal health representative, lhcp, uap, emergency responder, date, role type, access"]}
{"index": 33, "ucName": "View records Use Case", "uctext": "A patient or personal health representative chooses to view medical records  including family history .\n\n", "steps": ["The patient or personal health representative can see patient personal health information (including historical values), immunizations, and office visit information (date, diagnoses, medication, name of attending physician but not notes, laboratory procedures) for (a) their own records and (b) the records for whom the user is a personal representative.", "If a patient or personal health representative has not taken an office visit satisfaction survey for an office visit yet, the patient may choose to take the survey for an office visit (if the survey has already been taken, the patient or personal health representative will not have the ability to take the survey or view their previously submitted survey) (UC24).", "The patient or personal health representative can see an abbreviated health history of their siblings, parents, and both sets of grandparents for which MIDs are available in iTrust.", "They can see diagnoses related to the following (presented as a table with an x if the family member suffered from that diagnosis(:", "high blood pressure (Systolic blood pressure over 240 mmHg and/or a diastolic blood pressure over 120 mmHg);", "high cholesterol (HDL (\"good\") cholesterol levels under 35 mg/dL (milligrams per deciliter) and/or a triglyceride level over 250 mg/dL);", "diabetes (is diagnosed with ICD-9CM code beginning with 250:http://icd9cm.chrisendres.com/index.php?action=child&recordid=1765,;", "cancer (is diagnosed with ICD-9CM code beginning with 199:http://icd9cm.chrisendres.com/index.php?action=child&recordid=1765,;", "heart disease (is diagnosed with ICD=9CM code beginning with 402:http://icd9cm.chrisendres.com/index.php?action=child&recordid=1765,;", "smoking; and", "the cause of death if the family member is deceased."], "dataset": "iTrust", "act": ["can see", "has taken,may choose,has taken,will have,view", "see,can see,are", "can see", "is, over", "under, over", "is diagnosed", "is diagnosed", "is diagnosed", "smoking", "is, deceased"], "obj": ["patient, personal health representative, patient personal health information, historical values, immunizations, office visit information, date, diagnoses, medication, name of attending physician, notes, laboratory procedures, records, personal representative", "patient, personal health representative, office visit satisfaction survey, office visit, patient, survey, survey, patient, personal health representative, survey, survey, uc24", "patient,personal health representative,abbreviated health history,siblings,parents,grandparents,mids,itrust", "diagnoses, table, x, family member, diagnosis", "high blood pressure, systolic blood pressure, diastolic blood pressure", "hdl, cholesterol, 35 mg/dl, triglyceride, 250 mg/dl", "diabetes,icd-9cm code,250,http://icd9cm.chrisendres.com/index.php?action=child&recordid=1765", "cancer,icd-9cm code,199,http://icd9cm.chrisendres.com/index.php?action=child&recordid=1765", "heart disease,icd=9cm,402,http://icd9cm.chrisendres.com/index.php?action=child&recordid=1765", "smoking, and", "death, family member"]}
