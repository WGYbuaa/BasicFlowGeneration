{"index": 0, "ucName": "New Database", "uctext": "It is the first thing a user must do to begin using KeePass. Its main function is the determination of the master password that will unlock the database from now on", "steps": ["User opens KeePass and select New->Database", "User writes his private Master Password and/or selects Key File", "User selects OK", "Master Password confirmation: the user retypes Master Password", "The main database window opens"], "dataset": "keepass", "act": "opens, selects,writes, selects,selects,retypes,opens,", "obj": "Entities/Objects: User, KeePass, New, Database,User, Master Password, Key File,Entities/Objects: User, OK,Entities/Objects: Master Password, user, Master Password,main database window,", "pred_steps": "1. Start the KeePass application.2. Click on the \"Create New Database\" button.3. Set a location and name for the new database file.4. Enter and confirm the desired master password.5. Optionally, provide a key file if desired.6. Click on the \"OK\" or \"Create\" button to create the new database with the specified master password.7. The new database is now created and locked with the provided master password.", "pred_act": "Start, Click, Set, Enter, confirm, provide, Click, create\n", "pred_obj": "keepass application, create new database, new database file, master password, key file, ok, create, new database"}
{"index": 1, "ucName": "Open Database", "uctext": "When choosing to open a database a user is transferred to his documents where he navigates to find the database he wants. When the database is found, the master password is wanted so that the database will be unlocked. Once this is done the user is free to access his data.", "steps": ["User opens KeePass and select Open->Database", "User navigates through his folders", "User selects a database", "User types Master Password", "The main database window opens"], "dataset": "keepass", "act": "opens, select,navigates,selects,types,opens,", "obj": "Entities/Objects: User, KeePass, Open, Database,User, folders,Entities/Objects: User, database,Entities/Objects: User, Master Password,main database window,", "pred_steps": "1. User selects \"Open Database\" option.2. User is transferred to the \"Documents\" directory.3. User navigates to find the desired database file.4. User selects the database file.5. System prompts user to enter the master password.6. User enters the master password.7. System validates the master password.8. If the master password is correct, the database is unlocked.9. User gains access to the data in the database.", "pred_act": "selects, is transferred, navigates, selects, prompts, enters, validates, is, gains\n", "pred_obj": "user, \"open database\" option, \"documents\" directory, database file, system, master password, database, data"}
{"index": 2, "ucName": "Save Database", "uctext": "When a database is opened, the user can access his passwords, organize them into new\ngroups and subgroups, delete and add entries and so much more. But when it is time for the database to close or during his working on the database, he can save the changes made.", "steps": ["User opens KeePass and changes his data", "User selects save database", "Database is saved", "User exits KeePass"], "dataset": "keepass", "act": "opens, changes,\"selects\",\"saved\",exits,", "obj": "User, KeePass, data,Entities/Objects: User, save, database,Entities/Object: Database,Entities/Object: User, KeePass,", "pred_steps": "1. Open the database.2. Access passwords stored in the database.3. Organize passwords into new groups and subgroups.4. Add new password entries.5. Delete existing password entries.6. Save changes made to the database.7. Close the database.", "pred_act": "Open Access Organize Add Delete Save Close\n", "pred_obj": "database, passwords, groups, subgroups, password entries, changes"}
{"index": 3, "ucName": "Print Database", "uctext": "While working on the database, the user has the option to print data from his database. This can be done by selecting print. When this happens, a list of data types that can be printed are shown and the user can select the data to be printed. More specifically fields that can be selected for printing are: Backup entries, which contain entries in the back up group, password groups, group tree, title, username, password, URL, notes, creation time, last access, last modification, expires, icon, UUID and attachment.", "steps": ["User opens KeePass", "User selects print from file menu", "The list of options opens with checked the fields: password groups, title, user name, password, URL, notes", "User selects OK", "Data are print", "User returns on the main window"], "dataset": "keepass", "act": "opens,\"selects, prints\",opens, checked,selects,\"print\",returns,", "obj": "Entities/Objects: User, KeePass,Entities/Objects: User, print, file menu,list, options, fields, password groups, title, user name, password, URL, notes,Entities/Objects: User, OK,Entities/Objects: Data,Entities/Objects: User, main window,", "pred_steps": "1. User selects the option to print data from the database.2. System displays a list of available data types that can be printed.3. User selects the specific data types to be printed from the list:   - Backup entries   - Password groups   - Group tree   - Title   - Username   - Password   - URL   - Notes   - Creation time   - Last access   - Last modification   - Expires   - Icon   - UUID   - Attachment.4. System generates and prints the selected data types.", "pred_act": "selects displays selects generates prints\n", "pred_obj": "user, option to print data from the database, system, list of available data types, specific data types to be printed from the list, backup entries, password groups, group tree, title, username, password, url, notes, creation time, last access, last modification, expires, icon, uuid, attachment, system generates and prints the selected data types"}
{"index": 4, "ucName": "Search Database", "uctext": "There is the ability to search in the database for usernames, groups, passwords, URLs, notes and titles. This is very useful when the user needs to find out very quickly which password is required in one account or what username he has put on another account. It is not necessary to write in the search field all characters. By writing just one character the database will present all data which contains it or are related with it.", "steps": ["User opens KeePass", "User types a password, user name, URL, word of notes, title or group that exist in the database", "The list of data related to search word are appeared in the main window"], "dataset": "keepass", "act": "opens,types, exist,\"appeared\",", "obj": "Entities/Objects: User, KeePass,password, user, name, URL, word, notes, title, group, database,Entities/Objects: list, data, search word, main window,", "pred_steps": "1. Provide a search field for the user to input search queries.2. Allow the user to enter at least one character in the search field.3. Retrieve data from the database that matches the entered character from any of the fields (usernames, groups, passwords, URLs, notes, titles).4. Display all data entries that contain or are related to the entered character.5. Allow the user to refine the search query by entering more characters.6. Update the displayed results based on the refined search query.7. Allow the user to select a specific data entry from the search results.8. Provide the necessary information for the selected data entry to the user.", "pred_act": "Provide, input, Allow, enter, Retrieve, matches, Display, contain, are, related, Allow, refine, entering, Update, Allow, select, Provide\n", "pred_obj": "user, search field, search queries, character, database, data, fields, usernames, groups, passwords, urls, notes, titles, data entries, results, information"}
{"index": 5, "ucName": "Add Group/Subgroup", "uctext": "There is the ability to organize data into groups and subgroups. The user can create a new group or subgroups into an existing group. When creating a group/subgroup the user must select a name and then he can add entries into it.", "steps": ["User opens KeePass and selects to add new group/subgroup", "User types a name and has the option to select an image", "User selects OK", "The group/subgroup is created", "The access returns to the database main window"], "dataset": "keepass", "act": "opens, selects,types, has, select,selects,\"is created\",returns,", "obj": "Entities/Objects: User, KeePass, group, subgroup,User, name, image,Entities/Objects: User, OK,group, subgroup,Entities/Objects: access, returns, database, main window,", "pred_steps": "1. User selects the option to create a new group or subgroup.2. User enters the name of the group or subgroup.3. System validates the name to ensure it is unique and follows any naming conventions.4. User confirms the creation of the group or subgroup.5. System creates the group or subgroup with the provided name.6. User can now add entries (data) into the newly created group or subgroup.", "pred_act": "selects enters validates ensure follows confirms creates add\n", "pred_obj": "user, option, group, subgroup, name, system, conventions, creation, entries, data"}
{"index": 6, "ucName": "Modify group/subgroup", "uctext": "When user wants to change a group or subgroup’s name he has the ability to do that by\nmodifying it.", "steps": ["User opens KeePass and selects modify group/subgroup", "User types the new name and has the option to select an image", "User selects OK", "The group/subgroup changes name", "The access returns to the database main window"], "dataset": "keepass", "act": "opens, selects,types, has, select,selects,changes,returns,", "obj": "Entities/Objects: User, KeePass, group, subgroup,Entities/Objects: User, name, image,Entities/Objects: User, OK,group, subgroup, name,Entities/Objects: access, returns, database, main window,", "pred_steps": "1. User selects the group or subgroup whose name needs to be changed.2. User accesses the option to edit the selected group or subgroup.3. User modifies the name of the selected group or subgroup.4. User confirms the changes.5. System updates the group or subgroup name with the new one.6. System displays a success message indicating that the name change was successful.", "pred_act": "selects accesses modifies confirms updates displays\n", "pred_obj": "group, subgroup, name, option, changes, system, message"}
{"index": 7, "ucName": "Delete Group/Subgroup", "uctext": "When a user wants to delete an existing group/subgroup he can do this by selecting Delete group/subgroup from the edit menu. In order for that to happen, he must have chosen first a group/subgroup.", "steps": ["User opens KeePass and selects a group/subgroup", "User selects to delete the group/subgroup", "A message is appeared to confirm the delete", "User selects yes", "The group/subgroup is deleted", "The main window opens"], "dataset": "keepass", "act": "opens, selects,\"selects, delete\",\"appeared, confirm, delete\",selects,deleted,opens,", "obj": "User, KeePass, group/subgroup,User, group, subgroup,Entities/Objects: message, delete,Entities/Objects: User, yes,group, subgroup,main window,", "pred_steps": "1. User selects a group or subgroup to delete.2. User navigates to the edit menu.3. User selects \"Delete group/subgroup\" option from the edit menu.4. System prompts user to confirm deletion.5. User confirms deletion.6. System deletes the selected group or subgroup.7. Use case ends.", "pred_act": "selectsnavigatesselectspromptconfirmsdeletesends\n", "pred_obj": "user, group, subgroup, edit menu, group/subgroup, system"}
{"index": 8, "ucName": "Find Group/Subgroup", "uctext": "The user selects a group/subgroup and then he chooses “find in this group” from file menu. Then a window appears which prompts the user to write a sequence of characters (letters and numbers) from one character to 200 (or more). After that a menu of options to choose from appears and the user can select to search for: title, user name, password, URL, notes, group name. Search results appear in the main window.", "steps": ["User opens KeePass and selects to find something in a selected group/subgroup", "User types the word to search for", "User selects the fields which will be searched", "User selects OK", "Results appears at the database main window"], "dataset": "keepass", "act": "opens, selects,types, search,\"selects\",selects,\"appears\",", "obj": "Entities/Objects: User, KeePass, group, subgroup,Entities/Objects: User, word,User, fields, searched,Entities/Objects: User, OK,Entities/Objects: Results, database, main window,", "pred_steps": "1. User selects a group/subgroup.2. User chooses \"find in this group\" from file menu.3. A window appears prompting the user to input a sequence of characters (letters and numbers) ranging from one character to 200 or more.4. A menu of options to choose from (title, user name, password, URL, notes, group name) appears.5. User selects an option to search for.6. Search results appear in the main window.", "pred_act": "selects chooses appears input appears selects search appear\n", "pred_obj": "group, subgroup, file menu, window, sequence of characters, title, user name, password, url, notes, group name, main window"}
{"index": 9, "ucName": "Add Entry", "uctext": "The user can add a new entry on the database by clicking add entry on the main menu. When he does this, a window opens which is actually a form. In this form the user completes the fields he wants. He can fill in fields like: group where the entry will be added, title, user name, password, repeat password, URL, notes, expiration date and attachment file. Not all fields are required for an entry to be created. In fact an entry can be added with no fields at all. By selecting OK the entry is created in the group selected.", "steps": ["User opens KeePass and selects to add an entry", "User fills in the form, as many fields as he wants, from 1 to 9", "User selects OK", "The new entry is added in the selected group"], "dataset": "keepass", "act": "opens, selects, add,fills, wants,selects,\"added\",", "obj": "User, KeePass, entry,Entities/Objects: User, form, fields,Entities/Objects: User, OK,Entities/Objects: new entry, selected group,", "pred_steps": "1. User clicks on \"Add Entry\" on the main menu.2. A window opens displaying a form with fields: group, title, user name, password, repeat password, URL, notes, expiration date, and attachment file.3. User completes the desired fields.4. User may leave some fields blank if desired.5. User clicks on \"OK\" to create the entry in the selected group.", "pred_act": "clicks, opens, completes, leave, clicks, create\n", "pred_obj": "user, add entry, main menu, window, form, fields, group, title, user name, password, repeat password, url, notes, expiration date, attachment file, ok, entry, selected group"}
{"index": 10, "ucName": "View/Edit Entry", "uctext": "The user can modify the context of an entry he already has added. This can be done by\nselecting view/edit entry. In order for that to happen, the user must select an entry first.\nWhen he does this, the form he filled in when he created or last modified the entry open.\nThen the user can change the group, title, user name, password, URL, notes, expiration date and attachment file. His changes are saved by clicking OK.", "steps": ["User opens KeePass and selects to view/edit an existing entry", "User changes the fields he wants in the form", "User selects OK", "The modified entry is saved in the selected group"], "dataset": "keepass", "act": "opens, selects, view/edit,changes,selects,\"saved\",", "obj": "User, KeePass, entry,User, fields, form,Entities/Objects: User, OK,Entities/Objects: modified entry, selected group,", "pred_steps": "Functional Steps:1. User selects an entry to modify.2. User clicks on \"view/edit entry\" option.3. Form containing existing entry details opens.4. User modifies the group field.5. User modifies the title field.6. User modifies the user name field.7. User modifies the password field.8. User modifies the URL field.9. User modifies the notes field.10. User modifies the expiration date field.11. User attaches a new file if needed.12. User clicks on the \"OK\" button to save the changes.", "pred_act": "selects, clicks, opens, modifies, modifies, modifies, modifies, modifies, modifies, modifies, attaches, clicks\n", "pred_obj": "entry, view/edit entry, form, group field, title field, user name field, password field, url field, notes field, expiration date field, file, ok button"}
{"index": 11, "ucName": "Duplicate Entry", "uctext": "The user can create an exact copy of an entry. This can be done by selecting an entry and clicking duplicate entry. When this is done the new entry is added in the same group were the first was.", "steps": ["User opens KeePass and selects an existing entry", "User duplicates entry", "The new entry is added below the first one"], "dataset": "keepass", "act": "opens, selects,duplicates,\"added\",", "obj": "User, KeePass, entry,Entities/Objects: User, entry,Entities/Objects: new entry, first one,", "pred_steps": "1. Select an entry to duplicate.2. Click on the \"Duplicate Entry\" option.3. Create a copy of the selected entry.4. Add the new entry to the same group as the original entry.", "pred_act": "Select, duplicate, Click, Duplicate, Create, copy, Add\n", "pred_obj": "entry,entry,entry,entry,group"}
{"index": 12, "ucName": "Delete Entry", "uctext": "The user can delete an existing entry by selecting it and then by clicking delete entry. When this is done a message appears and informs the user that if he deletes the entry he won’t be able to restore it back.", "steps": ["User opens KeePass and selects to delete an existing entry", "A message appears “Are you sure you want to delete the selected entry?”", "User selects yes", "The deleted entry is permanently removed from the database"], "dataset": "keepass", "act": "opens, selects, delete,appears,selects,\"deleted, removed\",", "obj": "User, KeePass, entry,Entities/Objects: message, Are you sure you want to delete the selected entry,Entities/Objects: User, yes,Entities/Objects: deleted entry, database,", "pred_steps": "1. User selects an existing entry.2. User clicks on the \"Delete Entry\" button.3. Message appears informing the user about the consequences of deleting the entry.4. User confirms the deletion by clicking \"OK\" or cancels the operation by clicking \"Cancel\".", "pred_act": "selects, clicks, appears, informing, confirms, clicking, cancels, clicking\n", "pred_obj": "user, entry, delete entry button, message, consequences, deletion, ok, cancel"}
{"index": 13, "ucName": "Change Language", "uctext": "The user can select between a number of translations that are available at KeePass website.There are available translations in Arabic, Brazilian, Bulgarian, Catalan, Chinese(Simplified and Traditional), Czech, Danish, Dutch, English, Estonian, Finnish, French,Galician, German, Greek, Hebrew, Hungarian, Italian, Japanese, Korean, Lithuanian, Macedonian, Malay, Norwegian, Polish, Portuguese, Romanian, Russian, Serbian, Slovak,Spanish, Swedish, Turkish and Ukrainian. All the user has to do is to select change language from the view menu and then the language he wants. If he already has download languages packets he can choose one of them. If he wants another language pack he can select get more language. Doing this he will be transferred at KeePass website and choose the language he wants for downloading..", "steps": ["1. User opens KeePass and selects to change language from the view menu", "2. The user selects a language to load from the list that appears", "3. A message appears that informs user that the installation has been done and in order for the changes to take place KeePass must be restarted", "4. User selects yes (restart now)", "5. KeePass asks to save any changes that may have been made in the database and restarts", "6. User unlocks the database using the Master Password", "7. The database appears translated in the new language"], "dataset": "keepass", "act": "opens, selects,selects, appears,appears, informs, done, must be restarted,Action/Predicate: \"selects\",\"asks, save, restarts\",unlocks,\"appears translated\",", "obj": "User, KeePass, view menu, language,user, language, list,message, user, installation, KeePass, changes,User, yes, restart now,Entities/Objects: KeePass, changes, database,User, database, Master Password,database, new language,", "pred_steps": "1. User clicks on \"View\" menu.2. User selects \"Change Language\" option.3. If user has downloaded language packets, user selects desired language.4. If user wants another language pack, user selects \"Get More Languages\".5. User is redirected to KeePass website.6. User selects desired language for downloading.", "pred_act": "clicks, selects, has downloaded, selects, wants, selects, is redirected, selects\n", "pred_obj": "user, view, change language, language packets, language, language pack, get more languages, keepass website, language"}
{"index": 0, "ucName": "Login", "uctext": "Allow a user to log in to the system", "steps": "1. Verify that username and password have length >=5. If the condition is met go to step two, otherwise notify the user of the error. Search the archive to see if the username and password entered by the user are among the loggable users 3. If the search is successful, the user is logged in to the system.", "dataset": "SMOS", "act": "\"Verify, go, notify, search, log in, output\"", "obj": "username, password, length, step, user, error, archive, loggable users, system", "pred_steps": "1. Display the login screen2. Prompt the user to enter their username3. Validate the entered username4. Prompt the user to enter their password5. Validate the entered password6. Authenticate the user's credentials7. If authentication is successful, grant access to the system8. If authentication fails, display an error message and return to step 2", "pred_act": "Display, Prompt, enter, Validate, Prompt, enter, Validate, Authenticate, grant, display, return\n", "pred_obj": "login screen, user, username, password, user's credentials, system, error message"}
{"index": 1, "ucName": "Assign/RemoveRolesToA User", "uctext": "Allows you to assign or remove roles to a user", "steps": "2. Select the roles to assign or remove to the user 3. Click the 'Submit' button System 1. Displays the role management form 4. Assigns or removes the user's roles as instructed by the Administrator", "dataset": "SMOS", "act": "\"Select, assign, remove, click, displays, assigns, removes\"", "obj": "roles, user, 'Submit' button, System, role management form, Administrator", "pred_steps": "1. Display a list of available roles and users2. Select a user to assign or remove a role3. Select a role to assign or remove to the user4. Validate that the role is not already assigned to the user before assigning it5. Assign the selected role to the user6. Validate that the role is assigned to the user before removing it7. Remove the selected role from the user8. Provide a success message after assigning or removing the role", "pred_act": "Display, Select, assign, remove, Select, assign, remove, Validate, assigning, Assign, Validate, assigned, removing, Remove, Provide, assigning, removing\n", "pred_obj": "available roles, users, user, role, user, role, user, role, user, role, user, role, user"}
{"index": 2, "ucName": "Assign/RemoveTeachingsToA Lecturer", "uctext": "Allows assigning or removing teachings to a lecturer", "steps": "2. Select the academic year 4. Select the desired class 6. Select the teachings to be associated with or removed from the teacher System 1. Displays the teaching management form for the teacher in question 3. Displays the list of available classes for the selected year 5. Displays the list of teachings associated with that class 7. Assigns or removes the teacher's teachings as directed by the Administrator.", "dataset": "SMOS", "act": "\"Select, Displays, Select, Displays, Displays, Assigns or removes\"", "obj": "academic year, class, teachings, teacher, teaching management form, list of available classes, list of teachings, Administrator", "pred_steps": "Functional Steps:1. Log in to the system as an administrator.2. Navigate to the lecturer management section.3. Select the lecturer to whom teachings will be assigned or removed.4. Choose the option to assign teachings or remove teachings.5. If assigning teachings, select the teachings from the available list to assign to the lecturer.6. If removing teachings, select the teachings currently assigned to the lecturer to remove.7. Confirm the action to assign or remove teachings.8. Save the changes.9. Log out of the system.", "pred_act": "Log in, Navigate, Select, Choose, assigning, select, assign, removing, select, assigned, remove, Confirm, assign, remove, Save, Log out\n", "pred_obj": "log in, administrator, lecturer management section, lecturer, teachings, available list, action, changes, log out"}
{"index": 3, "ucName": "Assign/RemoveStudentsToA Parent", "uctext": "Allows you to associate new students to a parent or remove previously entered associations", "steps": "2. Select the students to be assigned or removed to the parent 3. Click the 'Submit' button System 1. Displays the child management form for the parent in question 4. Assign/Remove students associated with a Parent", "dataset": "SMOS", "act": "\"Select, Click, Displays, Assign/Remove\"", "obj": "students, parent, 'Submit' button, System, child management form, Parent", "pred_steps": "1. Display the option to associate a new student to a parent or remove existing associations.2. Prompt the user to select the desired action (associate or remove).3. If the user selects to associate a new student, proceed to step 4. If the user selects to remove associations, proceed to step 7.4. Display a list of available students to associate.5. Prompt the user to select a student to associate.6. Associate the selected student with a parent and update the system accordingly. Return to step 1.7. Display a list of existing associations.8. Prompt the user to select an association to remove.9. Remove the selected association and update the system accordingly. Return to step 1.", "pred_act": "Display, associate, remove, Prompt, select, associate, remove, selects, associate, proceed, selects, remove, proceed, Display, associate, Prompt, select, associate, Associate, update, Return, Display, remove, Prompt, select, remove, Remove, update, Return\n", "pred_obj": "option, student, parent, associations, user, action, list, system"}
{"index": 4, "ucName": "ViewListClasses", "uctext": "Allows you to view the list of classes", "steps": "2. Select the academic year of interest. System 1. Allows you to select the academic year whose class list you want to view. 3. Searches the classes in the archive and displays the class management screen 4. Displays the list of classes for the selected academic year.", "dataset": "SMOS", "act": "\"Select, Allows, select, Searches, displays, Displays\"", "obj": "academic year, System 1, class list, classes, archive, class management screen, list of classes", "pred_steps": "1. Open the application2. Authenticate user if required3. Navigate to the \"Classes\" section4. Retrieve the list of classes from the database5. Display the list of classes on the user interface6. Allow the user to scroll or navigate through the list if required7. Provide sorting and filtering options if necessary8. Handle any errors or exceptions that may occur while retrieving or displaying the list of classes9. Close the application if desired by the user", "pred_act": "Open, Authenticate, Navigate, Retrieve, Display, Allow, Provide, Handle, Close\n", "pred_obj": "application, user, classes, list of classes, database, user interface"}
{"index": 5, "ucName": "InsertNewClass", "uctext": "Insert a new class into the archive", "steps": "2. Fill out the form 3. Click the 'Save' button System 1. The system shows the form to fill out with: name, address, academic year. It performs checks on the validity of the data entered and inserts the new class into the archive; in case the data entered is invalid, it activates the 'ErrorData' use case.", "dataset": "SMOS", "act": "\"Fill, Click, shows, performs, inserts, activates\"", "obj": "Entities/Objects: form, 'Save' button, System, name, address, academic year, data, new class, archive, 'ErrorData' use case", "pred_steps": "1. Open the software application2. Navigate to the archive section3. Click on the option to insert a new class4. Enter the details of the new class (e.g., class name, description, attributes)5. Save the new class6. Verify that the new class has been successfully inserted into the archive7. Close the software application", "pred_act": "Open, Navigate, Click, Enter, Save, Verify, Close\n", "pred_obj": "software application, archive section, new class, class name, description, attributes"}
{"index": 6, "ucName": "ViewClassDetails", "uctext": "Allows you to view the details of a class", "steps": "1. View the screen with the details of an individual class: name, address, school year.", "dataset": "SMOS", "act": "\"View\"", "obj": "Entities/Objects: screen, details, individual class, name, address, school year", "pred_steps": "1. User selects the option to view class details.2. System retrieves the class details from the database.3. System displays the class details to the user, including class name, schedule, instructor, and any additional relevant information.4. User has the option to go back or exit the viewing of class details.", "pred_act": "selects retrieves displays has go exit\n", "pred_obj": "user, option, class details, system, database, class name, schedule, instructor, information"}
{"index": 7, "ucName": "DeleteClass", "uctext": "Delete a class from the archive", "steps": "1. Deletes the class from the archive 2. View updated class list", "dataset": "SMOS", "act": "Deletes, View", "obj": "class, archive, class list", "pred_steps": "1. User selects the \"Archive\" option from the main menu.2. User navigates to the list of classes in the archive.3. User selects the class they want to delete.4. User clicks on the \"Delete\" button.5. System prompts the user for confirmation to delete the class.6. User confirms the deletion.7. System removes the selected class from the archive.8. System displays a success message indicating that the class has been deleted.", "pred_act": "selects, navigates, selects, clicks, prompts, confirms, removes, displays\n", "pred_obj": "user, archive, main menu, archive, class, delete button, system, success message"}
{"index": 8, "ucName": "ViewListAddresses", "uctext": "Allows you to view the list of Addresses", "steps": "1. View list of addresses.", "dataset": "SMOS", "act": "\"View\"", "obj": "Entities/Object: list, addresses", "pred_steps": "1. User selects the \"View Addresses\" option from the main menu.2. System retrieves the list of addresses from the database.3. System displays the list of addresses on the screen.4. User can scroll through the list of addresses if there are more addresses than can be displayed on a single screen.5. User can select a specific address to view more details or perform further actions.6. User can choose to go back to the main menu or perform other actions related to the addresses.", "pred_act": "selects retrieves displays can scroll can select view perform can choose go back perform\n", "pred_obj": "user, view addresses, system, main menu, list of addresses, database, screen, details, actions"}
{"index": 9, "ucName": "InsertNewAddress", "uctext": "Insert a new address into the archive", "steps": "2. Fill out the form 3. Click the 'Save' button System 1. The system shows the form to fill out with: address name. It performs checks on the validity of the entered data and inserts a new address into the archive; in case the entered data is invalid, it activates the use case 'ErrorData'.", "dataset": "SMOS", "act": "\"Fill, Click, Save, shows, perform, checks, inserts, activates\"", "obj": "Entities/Objects: form, 'Save' button, System, address, name, data, archive, 'ErrorData'", "pred_steps": "1. Display the interface for inserting a new address.2. Prompt the user to enter the details of the new address (e.g., street address, city, zip code).3. Validate the entered data to ensure all required fields are filled and in the correct format.4. Save the new address details into the archive.5. Display a confirmation message to the user that the address has been successfully added.6. End of use case.", "pred_act": "Display, Prompt, enter, Validate, ensure, are, filled, Save, Display, added, End\n", "pred_obj": "interface, user, address, street address, city, zip code, data, fields, details, archive, confirmation message, use case"}
{"index": 10, "ucName": "ViewAddressDetails", "uctext": "Allows you to view the details of an address", "steps": "1. Displays the screen with the details of an individual address; specifically :address name.", "dataset": "SMOS", "act": "\"Displays\"", "obj": "Entities/Object: screen, details, individual address, address name", "pred_steps": "1. Open the application or website2. Log in to your account (if required)3. Navigate to the address details page4. Enter the address or select it from a list5. Click on the \"View Details\" button6. Retrieve and display the address details, including the street name, city, state, and zip code7. Optionally, display additional information such as the latitude, longitude, and any associated notes or tags8. Provide an option to edit or update the address details9. Optionally, allow the user to view a map or satellite view of the address location10. Close the address details view or navigate back to the previous page.", "pred_act": "Open, Log, Navigate, Enter, select, Click, Retrieve, display, display, Provide, edit, update, allow, view, Close, navigate\n", "pred_obj": "application, website, account, address, list, button, address details, street name, city, state, zip code, additional information, latitude, longitude, notes, tags, option, user, map, view, page"}
{"index": 11, "ucName": "LoginError", "uctext": "Occurs when user has entered incorrect authentication data.", "steps": "1. View login form", "dataset": "SMOS", "act": "\"View\"", "obj": "login form", "pred_steps": "1. Display an error message indicating incorrect authentication data.2. Clear the input fields for authentication data.3. Allow the user to re-enter authentication data.4. Provide an option for the user to reset their password if needed.", "pred_act": "Display, indicating, Clear, Allow, re-enter, Provide, reset\n", "pred_obj": "error message, input fields, user, authentication data, password"}
{"index": 12, "ucName": "DeleteAddress", "uctext": "Delete an address from the archive", "steps": "1. Checks whether the address has associated classes; if so, displays an error message 'Unable to delete the address, delete associated classes and try again', otherwise deletes the address. 2. Displays updated address list.", "dataset": "SMOS", "act": "\"Checks, displays, deletes, displays\"", "obj": "address, classes, error message, 'Unable to delete the address, delete associated classes and try again', updated address list", "pred_steps": "1. User selects the address to be deleted from the archive.2. System prompts for confirmation before deleting the selected address.3. User confirms the deletion.4. System removes the selected address from the archive.5. System displays a notification confirming the successful deletion of the address.", "pred_act": "selects prompts deleting confirms removes displays\n", "pred_obj": "user, address, archive, system, address, user, deletion, system, address, archive, system, notification, deletion, address"}
{"index": 13, "ucName": "AssignRemoveTeachings", "uctext": "Assign or remove one or more teachings from an address", "steps": "2. Select the teachings to be assigned or removed to the address 3. Click the 'Submit' button System 1. Displays a form from which you can add and/or remove teachings to the address. 4. Associate or remove the selected teachings to the address. 5. Return to the address details view.", "dataset": "SMOS", "act": "\"Select, assign, remove, click, display, add, associate, return\"", "obj": "teachings, address, 'Submit' button, System, form", "pred_steps": "1. Select the address where the teaching or teachings will be assigned or removed.2. Choose the option to assign or remove teachings.3. Select the teaching or teachings that will be assigned or removed.4. Confirm the action to assign or remove the selected teaching or teachings from the address.", "pred_act": "Select, assigned, removed, Choose, assign, remove, Select, assigned, removed, Confirm, assign, remove\n", "pred_obj": "address, option, teaching, teachings, action"}
{"index": 14, "ucName": "ViewListInsignments", "uctext": "Allows viewing the list of teachings", "steps": "1. 2. Search the in the archive and screen of teachings View teachings view the management of the the list of", "dataset": "SMOS", "act": "\"Search, view, manage\"", "obj": "Entities/Objects: archive, screen, teachings, View, management, list", "pred_steps": "1. Open the application2. Navigate to the \"Teachings\" section3. Retrieve the list of teachings from the database4. Display the list of teachings on the user interface5. Allow the user to scroll through the list if necessary6. Enable the user to view detailed information of a specific teaching by selecting it from the list7. When the user selects a teaching, display the detailed information on the user interface8. Provide an option for the user to go back to the list of teachings9. Continue allowing the user to view and navigate through the list of teachings until the action is completed10. Close the application when finished or as desired by the user", "pred_act": "Open, Navigate, Retrieve, Display, Allow, scroll, Enable, view, selecting, selects, display, Provide, go, Continue, allowing, view, navigate, completed, Close, finished\n", "pred_obj": "application, teachings, user, database, user interface"}
{"index": 15, "ucName": "InsertNewTeaching", "uctext": "Insert new teaching into the archive", "steps": "2. Fill out the form 3. Click the 'Save' button System 1. The system shows the form to fill out with: teaching name. It performs checks on the validity of the data entered and inserts the new teaching into the archive; in case the data entered is invalid, it activates the use case 'ErrorData'.", "dataset": "SMOS", "act": "\"Fill, Click, shows, performs, inserts, activates\"", "obj": "Entities/Objects: form, 'Save' button, System, teaching name, data, new teaching, archive, use case 'ErrorData'", "pred_steps": "1. User selects the option to insert a new teaching into the archive.2. System prompts the user to provide the necessary information about the new teaching.3. User enters the title, author, publish date, and other relevant details of the teaching.4. System validates the information provided by the user.5. System adds the new teaching to the archive.6. System displays a confirmation message indicating that the new teaching has been successfully inserted into the archive.7. Use case ends.", "pred_act": "selects prompts provide enters validates adds displays ends\n", "pred_obj": "user, system, teaching, archive, information, title, author, publish date, details, confirmation message, use case"}
{"index": 16, "ucName": "ViewTeachingDetails", "uctext": "Allows you to view the details of a teaching", "steps": "1. View the screen with the details of an individual teaching.", "dataset": "SMOS", "act": "\"View\"", "obj": "Entities/Objects: screen, details, individual teaching", "pred_steps": "Functional steps to implement the use case:1. Open the teaching management system.2. Navigate to the \"Teaching\" section.3. Search for the teaching that you want to view the details of.4. Select the teaching from the search results.5. Display the detailed information of the teaching, including its title, instructor, course code, schedule, location, and any additional details.6. Provide the option to view the teaching materials, such as lecture slides or assignments, if available.7. Allow the user to navigate back to the list of teachings or perform any other relevant actions.8. Close the teaching management system.", "pred_act": "Open, Navigate, Search, want, view, Select, Display, Provide, view, Allow, navigate, perform, Close\n", "pred_obj": "teaching management system, teaching, teaching materials, lecture slides, assignments, teachings"}
{"index": 17, "ucName": "EditTeaching", "uctext": "Edit details of a teaching", "steps": "1. Click on the 'Save' button 2. Perform checks on the validity of the entered data and edit the teaching in the archive; in case the entered data is invalid, activate the 'ErrorData' use case. 3. Displays the updated teaching list.", "dataset": "SMOS", "act": "\"Click, Perform, edit, activate, Displays\"", "obj": "Save button, entered data, teaching, archive, ErrorData use case, updated teaching list", "pred_steps": "1. User selects the option to edit teaching details.2. System displays the current teaching details for the user to modify.3. User makes the necessary changes to the teaching details.4. User saves the changes made to the teaching details.5. System validates the changes and updates the teaching details in the database.6. System displays a confirmation message that the teaching details have been successfully edited.", "pred_act": "selects, displays, modify, makes, saves, made, validates, updates, displays, edited\n", "pred_obj": "user, system"}
{"index": 18, "ucName": "DeleteTeaching", "uctext": "Delete a teaching from the archive", "steps": "1. Delete teaching from the archive 2. View updated teaching list.", "dataset": "SMOS", "act": "Delete, View", "obj": "teaching, archive, teaching list", "pred_steps": "1. User selects the teaching to delete from the archive.2. System prompts user to confirm deletion.3. User confirms the deletion action.4. System removes the selected teaching from the archive.5. System displays a confirmation message that the teaching has been successfully deleted.", "pred_act": "selects prompts confirm confirms removes displays\n", "pred_obj": "user, system, teaching, archive, deletion action, confirmation message"}
{"index": 19, "ucName": "ViewListRegisters", "uctext": "View the list of records for an academic year", "steps": "2. Select school year 1. Display a screen for selecting the academic year of interest. 3. Search the archive for all digital records for that year and display them associated with the class to which they belong.", "dataset": "SMOS", "act": "\"Display, Select, Search, Display\"", "obj": "school year, screen, academic year, archive, digital records, class", "pred_steps": "1. User selects the academic year for which they want to view records.2. System retrieves the list of records associated with the selected academic year.3. System displays the list of records to the user.", "pred_act": "selects want retrieves displays\n", "pred_obj": "user, academic year, records, system"}
{"index": 20, "ucName": "ViewSingleRegisterDetails", "uctext": "View the details of one of the class registers", "steps": "1. Displays on the screen the information contained in the register organized by date. In particular, it shows, for today's date, the list of pupils, specifying: absent/attending, late entries, and a form from which you can manage justifications and disciplinary notes.", "dataset": "SMOS", "act": "\"Displays, shows, specifying, manage\"", "obj": "screen, information, register, date, today's date, list of pupils, absent, attending, late entries, form, justifications, disciplinary notes", "pred_steps": "1. User selects the \"Class Registers\" option from the menu.2. System displays a list of available class registers.3. User selects a specific class register from the list.4. System retrieves and displays the details of the selected class register.5. User can view the details of the selected class register, including student names, IDs, attendance records, and any other relevant information.6. User has the option to go back to the list of class registers or exit the viewing mode.", "pred_act": "selects, displays, selects, retrieves, displays, view, go, exit\n", "pred_obj": "user, system, class registers, menu, list, class register, details, student names, ids, attendance records, relevant information, viewing mode"}
{"index": 21, "ucName": "InsertAbsencesAdmin", "uctext": "Digitization of Registry, data entry by Administrator", "steps": "2. Fill out the form by entering absent/present students and click 'Save' 1. Refresh the screen displayed by date 3. Send the data to the server. The server for each absence sends an e-mail notification to the student's parent. 4. View the updated register data.", "dataset": "SMOS", "act": "\"Fill, enter, click, Refresh, display, Send, sends, notify, View\"", "obj": "form, absent/present students, Save, screen, date, data, server, absence, e-mail notification, student's parent, updated register data", "pred_steps": "1. Open the Registry digitization application.2. Log in to the application with Administrator credentials.3. Select the option to create a new entry in the Registry.4. Enter the required details for the new entry, such as name, ID number, address, etc.5. Save the entered data in the system.6. Verify the accuracy of the entered data.7. Submit the new entry to update the Registry database.8. Log out of the application.", "pred_act": "Open, Log, Select, create, Enter, Save, Verify, Submit, update, Log\n", "pred_obj": "registry digitization application, administrator credentials, registry, name, id number, address, system, registry database"}
{"index": 22, "ucName": "Logout", "uctext": "Allows a user to log out of the system", "steps": "1. View login form", "dataset": "SMOS", "act": "\"View\"", "obj": "login form", "pred_steps": "1. User clicks on the \"Logout\" button.2. System confirms the user's intention to log out.3. System clears the user's session and logs the user out.4. System redirects the user to the login page.5. End of use case.", "pred_act": "clicks confirms clears logs redirects\n", "pred_obj": "user, logout button, user's intention, user's session, user, login page, use case"}
{"index": 23, "ucName": "InsertDelayAdmin", "uctext": "Digitization of Registry, data entry by Administrator", "steps": "2. Fill out the form by entering students with delay and click 'Save' 1. Refresh the displayed screen by date 3. Submit the data to the server. 4. Display updated log data.", "dataset": "SMOS", "act": "\"Fill, enter, click, Refresh, Submit, Display\"", "obj": "form, students, Save, screen, date, data, server, log data", "pred_steps": "1. Login to the system as Administrator.2. Access the Registry digitization module.3. Enter the required data fields for the Registry.4. Validate the entered data for accuracy.5. Save the digitized Registry information.6. Verify the saved data for correctness.7. Submit the digitized Registry data for final processing.8. Log out of the system.", "pred_act": "Login, Access, Enter, Validate, Save, Verify, Submit, Log\n", "pred_obj": "administrator,registry digitization module,data fields,registry,digitized registry information,digitized registry data"}
{"index": 24, "ucName": "EditAbsence", "uctext": "Edit absence by Administrator. Editing is intended as inserting/deleting the absence.", "steps": "2. Edit the absence (Insert or Delete) and click 'Save' 1. Refresh the screen according to the selected date 3. Sends the changed data to the server. The system sends a correction e-mail to the parent of the student.", "dataset": "SMOS", "act": "Actions/Predicates: Edit, Insert, Delete, click, Refresh, send, sends", "obj": "absence, Save, screen, selected date, changed data, server, correction e-mail, parent, student", "pred_steps": "1. Administrator logs into the software system.2. Administrator navigates to the absence management section.3. Administrator selects the absence record to be edited.4. Administrator chooses to insert or delete the absence.5. If inserting absence:   - Administrator enters the details of the new absence (e.g., employee, dates, reason).   - System validates the input.   - System saves the new absence record.6. If deleting absence:   - System prompts the Administrator to confirm the deletion.   - Administrator confirms the deletion.   - System removes the absence record from the system.7. System notifies the Administrator of the successful edit.8. Administrator logs out of the software system.", "pred_act": "logs, navigates, selects, chooses, insert, delete, enters, validates, saves, prompts, confirms, removes, notifies, logs\n", "pred_obj": "administrator, software system, absence management section, absence record, system, employee, dates, reason"}
{"index": 25, "ucName": "EditDelay", "uctext": "editing a delay by Administrator", "steps": "2. User edits the delay and clicks 'Save' 1. Updates the screen based on the selected date 3. The system sends the modified data to the server .", "dataset": "SMOS", "act": "edits, clicks, Updates, sends", "obj": "User, delay, Save, screen, selected date, system, modified data, server", "pred_steps": "1. Log in as Administrator.2. Navigate to the delay editing section.3. Select the delay to be edited.4. Modify the delay details as required.5. Save the changes.6. Verify the updated delay information.7. Log out from the Administrator account.", "pred_act": "Log in\n", "pred_obj": "administrator, delay"}
{"index": 26, "ucName": "DeleteDelay", "uctext": "Deleting a late entry by the Administrator", "steps": "2. Delete a student's late entry and click 'Save' 1. Refresh the screen based on the selected date 3. Delete the late entry from the archive.", "dataset": "SMOS", "act": "\"Delete, click, Refresh, Delete\"", "obj": "student's late entry, 'Save', screen, selected date, late entry, archive", "pred_steps": "1. Administrator logs into the system2. Administrator navigates to the list of late entries3. Administrator selects the late entry to be deleted4. System prompts for confirmation5. Administrator confirms deletion6. System deletes the selected late entry7. System displays a success message8. Administrator logs out from the system", "pred_act": "logs, navigates, selects, prompts, confirms, deletes, displays, logs\n", "pred_obj": "administrator, system, list of late entries, late entry, deletion, success message"}
{"index": 27, "ucName": "ViewExcusedList", "uctext": "ViewExcusedList", "steps": "1. Show all absences of the student recorded school selected Absences already excused are displayed in green, those to be excused in red during the year.", "dataset": "SMOS", "act": "\"Show, display\"", "obj": "absences, student, school, Absences already excused, those to be excused", "pred_steps": "1. User selects the option to view the excused list.2. System retrieves the excused list from the database.3. System displays the excused list to the user.4. User reviews the excused list.5. User exits the excused list view.", "pred_act": "selects retrieves displays reviews exits\n", "pred_obj": "user, system, excused list"}
{"index": 28, "ucName": "ViewListNotes", "uctext": "View list of notes inherent to the student", "steps": "1. Show all student notes recorded during the school year", "dataset": "SMOS", "act": "\"Show, recorded\"", "obj": "student notes, school year", "pred_steps": "1. Open the application2. Log in to the student account3. Navigate to the \"Notes\" section4. Retrieve the list of notes associated with the student5. Display the list of notes on the screen6. Allow the user to view the details of each note by selecting a specific note from the list", "pred_act": "OpenLog inNavigateRetrieveDisplayAllowviewselect\n", "pred_obj": "application, student account, \"notes\" section, list of notes, screen, user, note, list"}
{"index": 29, "ucName": "InsertJustification", "uctext": "Insert Justification", "steps": "2. Fill out the form 3. Click 'Save' 1. Show a form in which to enter the justification fields (justification date). 4. Save the justification.", "dataset": "SMOS", "act": "\"Show, Fill, Click, Save\"", "obj": "form, justification fields, justification date, Save", "pred_steps": "1. Display the form for inserting a justification.2. Prompt the user to enter the justification text.3. Validate the justification text format.4. Save the justification in the database.5. Display a success message indicating the justification has been saved.6. End of use case.", "pred_act": "Display, Prompt, enter, Validate, Save, Display, indicating, has been saved, End\n", "pred_obj": "justification, user, justification text, justification text format, justification, database, success message, justification"}
{"index": 30, "ucName": "InsertNote", "uctext": "Insert Disciplinary Notes", "steps": "2. Fill out the form 3. Click 'Save' 1. Show a form with note fields (student, date, teacher , description). 4. Save the note and send an e-mail notification to the parent.", "dataset": "SMOS", "act": "\"Show, Fill out, Click, Save, Send\"", "obj": "form, note fields, student, date, teacher, description, note, e-mail notification, parent", "pred_steps": "1. User selects \"Insert Disciplinary Notes\" option from the application menu.2. System prompts user to enter student ID.3. User enters student ID.4. System validates the student ID.5. System prompts user to enter the details of the disciplinary note (date, description, etc.).6. User enters the details of the disciplinary note.7. System validates the entered information.8. System saves the disciplinary note in the database linked to the student ID.9. System displays a success message confirming the note insertion.10. Use case ends.", "pred_act": "selects, prompts, enter, enters, validates, prompts, enter, enters, validates, saves, displays, ends\n", "pred_obj": "user, insert disciplinary notes, application menu, system, student id, details of the disciplinary note, date, description, database, message, note insertion, case"}
{"index": 31, "ucName": "ViewJustificationDetails", "uctext": "View the details of a justification", "steps": "1. Show a form with the details of the justification and the ability to edit or delete the justification.", "dataset": "SMOS", "act": "\"Show, edit, delete\"", "obj": "form, details of the justification, ability, justification", "pred_steps": "1. Open the software application2. Log in to the system with valid credentials3. Navigate to the \"Justifications\" section4. Locate the justification you want to view details for5. Click on the justification to open the details6. View the details of the justification, which may include information such as title, description, date created, author, status, etc.7. Optionally, you can download or print the details for future reference8. Close the justification details when finished viewing", "pred_act": "Open, Log, Navigate, Locate, Click, View, include, download, print, Close\n", "pred_obj": "open the software application, log in to the system, navigate to the \"justifications\" section, locate the justification, click on the justification, view the details, download, print, close the justification details"}
{"index": 32, "ucName": "ViewNoteDetails", "uctext": "View the details of a note", "steps": "1. Show a form with note details: student, description, teacher, date.", "dataset": "SMOS", "act": "\"Show\"", "obj": "student, description, teacher, date, form, note details", "pred_steps": "1. User selects the \"View Note\" option from the application menu.2. System retrieves the list of available notes from the database.3. System displays the list of notes to the user.4. User selects a specific note from the list.5. System retrieves the details of the selected note from the database.6. System displays the note details (such as title, content, creation date, etc.) to the user.7. User can choose to navigate back to the list of notes or perform other actions on the selected note.8. Use case ends.", "pred_act": "selects retrieves displays selects retrieves displays choose navigate perform ends\n", "pred_obj": "user, system, list of available notes, database, list of notes, specific note, details of the selected note, note details (such as title, content, creation date, etc.), list of notes"}
{"index": 33, "ucName": "ChangePassword", "uctext": "Allows a user to change their password", "steps": "2. Fill out the form and submit; System 1. Displays the form with the fields: old password, new password, confirm new password. 3. Confirms that the password has been changed.", "dataset": "SMOS", "act": "\"Fill, submit, displays, confirms\"", "obj": "form, System, fields, old password, new password, confirm new password, password", "pred_steps": "1. User selects the option to change password.2. System prompts user to enter current password.3. User enters current password.4. System validates the current password.5. If current password is valid, system prompts user to enter a new password.6. User enters a new password.7. System validates the new password for complexity and strength requirements.8. System prompts user to re-enter the new password for confirmation.9. User re-enters the new password for confirmation.10. System compares the two entries for new password to ensure they match.11. If the new password entries match, system updates the password for the user.12. System displays a success message indicating that the password has been changed.", "pred_act": "selects, prompts, enter, enters, validates, is, prompts, enters, validates, prompts, re-enter, re-enters, compares, ensure, match, updates, displays, indicating, has\n", "pred_obj": "user, option, password, system, user, password, user, password, system, password, password, system, user, password, user, password, system, password, password, system, user, password, password, system, password, user, system, message, password"}
{"index": 34, "ucName": "EditJustification", "uctext": "Edit a Justification", "steps": "1. Edit one or more fields in the displayed form: date justification. Click 'Save' 3. Edit the justification.", "dataset": "SMOS", "act": "Edit, Click, Edit", "obj": "fields, form, date justification, Save, justification", "pred_steps": "1. User selects the \"Edit Justification\" option.2. System displays the current justification information for editing.3. User makes the necessary changes to the justification.4. User saves the changes.5. System updates the justification with the new information.6. System displays a confirmation message that the justification has been successfully edited.", "pred_act": "selectsdisplaysmakessavessupdatesdisplays\n", "pred_obj": "edit justification\", justification, justification, justification"}
{"index": 35, "ucName": "EditNote", "uctext": "Editing a Disciplinary Note", "steps": "1. The user edits one or more fields in the displayed form: Student, description, teacher, date. 2. User clicks on 'Save' 3. The system saves the changes.", "dataset": "SMOS", "act": "edits, clicks, saves", "obj": "user, fields, form, Student, description, teacher, date, Save, system, changes", "pred_steps": "1. User selects the disciplinary note to edit from the list of existing notes.2. System retrieves the selected disciplinary note for editing.3. User modifies the content of the disciplinary note as required.4. User saves the changes made to the disciplinary note.5. System updates the disciplinary note with the new content.6. System displays a confirmation message indicating that the disciplinary note has been successfully edited.", "pred_act": "selects retrieves modifies saves updates displays indicating\n", "pred_obj": "user, system, disciplinary note, content, disciplinary note, disciplinary note, confirmation message, disciplinary note"}
{"index": 36, "ucName": "DeleteJustify", "uctext": "DeleteJustify", "steps": "1. Delete justification.", "dataset": "SMOS", "act": "Delete", "obj": "Entities/Objects: justification", "pred_steps": "1. Select the item or content that you want to delete.2. Right-click on the selected item to open a context menu.3. Click on the \"Delete\" option from the context menu.4. A confirmation dialog box will pop up asking for confirmation to delete the item.5. Click on \"OK\" or \"Delete\" to confirm the deletion.6. If needed, handle any related data cleanup or cascading deletes.7. Display a success message indicating that the item has been successfully deleted.", "pred_act": "Select,right-click,open,Click,pop,asking,delete,Click,confirm,handle,cleanup,Display\n", "pred_obj": "item, content, context menu, delete option, confirmation dialog box, ok, delete, success message"}
{"index": 37, "ucName": "DeleteNote", "uctext": "Delete Disciplinary Notes", "steps": "1. The system sends a notification of errata to the student's parents, then deletes the note data from the archive.", "dataset": "SMOS", "act": "sends, deletes", "obj": "system, notification, errata, student's parents, note data, archive", "pred_steps": "1. User selects the \"Disciplinary Notes\" option from the main menu.2. User searches for the specific disciplinary note to delete.3. User selects the disciplinary note to be deleted.4. System prompts the user for confirmation to delete the selected disciplinary note.5. User confirms the deletion action.6. System deletes the selected disciplinary note from the database.7. System displays a success message confirming the deletion of the disciplinary note.8. End of use case.", "pred_act": "selects searches selects prompts confirms deletes displays\n", "pred_obj": "user, disciplinary notes, main menu, disciplinary note, system, database, success message"}
{"index": 38, "ucName": "PerformStudentMonitoring", "uctext": "Allows you to query the system about the number of absences and notes associated with students.", "steps": "1. Search the archive for students who have, for the current school year a number of absences and notes above a predetermined threshold. 2. Displays a screen presenting the data obtained.", "dataset": "SMOS", "act": "Verbs/Predicates: Search, have, Displays, presenting", "obj": "archive, students, school year, absences, notes, threshold, screen, data", "pred_steps": "1. Identify the student for whom the information needs to be queried.2. Retrieve the student's attendance records from the system.3. Calculate the number of absences based on the attendance records.4. Retrieve the student's notes from the system.5. Display the number of absences and notes associated with the student.", "pred_act": "Identify, needs, be, queried, Retrieve, records, Calculate, Retrieve, Display, associated\n", "pred_obj": "student,attendance records,absences,notes"}
{"index": 39, "ucName": "ViewingOfA Report Card", "uctext": "ViewingA Report Card", "steps": "1. Selects the academic year 3. Chooses the class of the student whose report card you want to view 5. Selects the student and the quarter whose report card you want to view by clicking on the appropriate button. System 2. Displays the list of classes in the system with a 'Report Card' button associated with each class next to it 4. Displays the list of pupils in the class chosen by the user 6. Displays the report card of the chosen pupil referring to the selected term.", "dataset": "SMOS", "act": "\"Selects, Chooses, Selects, Displays, Displays, Displays\"", "obj": "academic year, class, student, report card, system, list of classes, Report Card button, list of pupils, pupil, term", "pred_steps": "1. User logs into the system.2. User navigates to the \"Reports\" section.3. User selects the \"Report Cards\" option.4. System retrieves the list of available report cards.5. User selects the desired report card from the list.6. System displays the selected report card with student information and grades.7. User can view, print, or download the report card as needed.8. User logs out of the system.", "pred_act": "logs navigates selects retrieves selects displays view print download logs\n", "pred_obj": "user, system"}
{"index": 40, "ucName": "EnterPagella", "uctext": "Entering a student's report card performed by the Administrator", "steps": "2. Selects the class of the student whose report card is to be entered 4. Selects the student whose report card is to be entered by clicking on the appropriate button 6. Enters the report card grades, all or in part, and clicks the 'save' button System 1. Displays the list of classes in the system referring to the current academic year with a 'Report Card' button associated with each class next to it 3. Displays the list of pupils in the class chosen by the user 5. Displays the form for entering a report card 7. Inserts grades entered into the archive and returns the user to the class student view page.", "dataset": "SMOS", "act": "\"Selects, Selects, Selects, Enters, Displays, Displays, Displays, Inserts, returns\"", "obj": "class, student, report card, system, academic year, 'Report Card' button, pupils, form, grades, archive, class student view page", "pred_steps": "Functional Steps:1. Login to the system as an Administrator.2. Navigate to the \"Manage Students\" section.3. Select the student for whom you want to enter the report card.4. Click on the \"Update Report Card\" option.5. Enter the student's grades for each subject.6. Save the report card data.7. Display a confirmation message indicating that the report card has been successfully updated.", "pred_act": "Login, Navigate, Select, Click, Enter, Save, Display\n", "pred_obj": "administrator, manage students, student, report card, update report card, grades, subject, confirmation message"}
{"index": 41, "ucName": "EditOfAPage", "uctext": "Use case for editing a student's report card", "steps": "2. Enters the new data and clicks the confirmation button System 1. Displays the form with the fields that can be edited including the grades of different subjects 3. The system displays a confirmation message and displays the form with the list of pupils.", "dataset": "SMOS", "act": "\"Enters, clicks, displays, can be edited, displays, displays\"", "obj": "Entities/Objects: new data, confirmation button, System 1, form, fields, grades, subjects, confirmation message, list of pupils", "pred_steps": "1. Start the editing process for the selected student's report card.2. Display the current data of the report card, including grades and comments.3. Allow the user to modify the grades and comments for each subject.4. Validate the modified grades to ensure they fall within the acceptable range.5. If the validation fails, display an error message and prompt the user to make the necessary corrections.6. Save the modified data to the database.7. Display a success message indicating that the report card has been successfully updated.8. End the editing process.", "pred_act": "Start, Display, Allow, modify, Validate, ensure, fails, display, prompt, make, Save, Display, indicating, updated, End\n", "pred_obj": "editing process, selected student's report card, current data, grades, comments, user, subject, modified grades, acceptable range, error message, necessary corrections, database, success message"}
{"index": 42, "ucName": "DeletionOfAPage", "uctext": "Administrator deletes a report card from the system", "steps": "2. The user accepts the deletion by pressing the confirmation key System 1. The system displays a form to confirm the deletion 3. Displays a message of successful deletion and displays the form with the class list.", "dataset": "SMOS", "act": "accepts, presses, displays, displays, displays", "obj": "user, deletion, confirmation key, System 1, system, form, message, successful deletion, class list", "pred_steps": "1. Administrator logs into the system.2. Administrator navigates to the report cards section.3. Administrator selects the report card to be deleted.4. Administrator confirms the deletion action.5. System deletes the selected report card.6. System displays a success message confirming the deletion.", "pred_act": "logs navigates selects confirms deletes displays\n", "pred_obj": "administrator,system,report cards,report card,action,success message"}
{"index": 43, "ucName": "ViewRequestsSubscription", "uctext": "Allows the administrator to view the list of enrollment requests arrived at the system", "steps": "1 . Displays the list of enrollments yet to be activated.", "dataset": "SMOS", "act": "\"Displays\"", "obj": "enrollments", "pred_steps": "1. Log in to the system as an administrator.2. Navigate to the enrollment requests section of the system.3. View the list of enrollment requests.4. Optionally, filter or search for specific enrollment requests.5. Click on an individual enrollment request to view more details if needed.6. Take any necessary actions on the enrollment requests, such as approving or rejecting them.7. Log out of the system when done.", "pred_act": "Log in, Navigate, View, filter, search, Click, view, Take, approving, rejecting, Log out\n", "pred_obj": "administrator, system, enrollment requests, actions"}
{"index": 44, "ucName": "ViewListUsers", "uctext": "View the list of users in the system", "steps": "1. Search for users in the archive and display their list", "dataset": "SMOS", "act": "\"Search, display\"", "obj": "users, archive, list", "pred_steps": "Functional steps to implement the use case \"View the list of users in the system\":1. Access the user management module.2. Navigate to the \"List of Users\" section.3. Retrieve the list of users from the database.4. Display the list of users on the user interface.5. Provide options to filter or search for specific users if needed.6. Allow the user to select a specific user for further information or actions.7. Ensure the list is updated in real-time to reflect any changes made to the user database.8. Provide appropriate access control to restrict unauthorized users from viewing the list of users.", "pred_act": "Access, Navigate, Retrieve, Display, Provide, filter, search, Allow, select, Ensure, updated, reflect, made, Provide, restrict\n", "pred_obj": "user management module, list of users, database, user interface, user, user database, access control, users"}
{"index": 45, "ucName": "AcceptStudentEnrollment", "uctext": "Allows the administrator to accept a student's enrollment in the system", "steps": "1 . Activates the new user in the system. 2. Displays the list of enrollments yet to be activated.", "dataset": "SMOS", "act": "Activates, Displays", "obj": "user, system, list, enrollments", "pred_steps": "1. Log in to the system as an administrator.2. Access the student enrollment request section.3. Review the student's enrollment request details.4. Verify the student's information and eligibility for enrollment.5. Click on the \"Accept\" button to approve the student's enrollment.6. Update the student's status to \"Enrolled\" in the system.7. Notify the student about the acceptance of their enrollment.8. Log out of the system.", "pred_act": "Log in, Access, Review, Verify, Click, approve, Update, Notify, Log out\n", "pred_obj": "administrator, student, system"}
{"index": 46, "ucName": "RejectStudentEnrollment", "uctext": "Allows the administrator to reject a student's enrollment in the system", "steps": "1. Deletes the system enrollment request. 2. Displays the list of enrollments yet to be activated.", "dataset": "SMOS", "act": "Deletes, Displays", "obj": "system enrollment request, list of enrollments", "pred_steps": "1. Log in to the system as an administrator.2. Navigate to the student enrollment section.3. Search for the student by entering their details.4. Select the student from the search results.5. Click on the \"Reject Enrollment\" button.6. Confirm the rejection action.7. Provide a reason for rejecting the enrollment, if required.8. The system updates the student's enrollment status as rejected.9. Notify the student about the rejection, if necessary.10. Log out of the system.", "pred_act": "Log in, Navigate, Search, entering, Select, Click, Confirm, Provide, rejecting, updates, Notify, Log out\n", "pred_obj": "administrator, system, student, enrollment, student, student, student, rejection, reason, system, student's enrollment status, student, system"}
{"index": 47, "ucName": "Entity Search", "uctext": "Allows the administrator to search the system for all entities characterized by the keywords entered", "steps": "1 . Displays the list of entities related to the searched keywords; in particular, the following are shown in an active list: Classes, Teachings, Addresses, Users found.", "dataset": "SMOS", "act": "\"Displays, shows\"", "obj": "Entities/Objects: Entities, Classes, Teachings, Addresses, Users, object", "pred_steps": "1. Display search interface for administrator.2. Retrieve keywords entered by the administrator.3. Search system for entities matching the entered keywords.4. Display search results to the administrator.5. Allow the administrator to view detailed information about each entity in the search results.", "pred_act": "DisplayRetrieveSearchDisplayAllowView\n", "pred_obj": "search interface, administrator, keywords, system, entities, search results, information"}
{"index": 48, "ucName": "ViewElencoClasses", "uctext": "View Classes", "steps": "1. The system shows the user a screen with all the classes in the database, with a button to access the record of each class.", "dataset": "SMOS", "act": "\"shows, access\"", "obj": "system, user, screen, classes, database, button, record", "pred_steps": "1. User opens the application2. User logs in with valid credentials3. User navigates to the \"Classes\" section4. System retrieves and displays a list of available classes5. User selects a specific class from the list6. System retrieves detailed information about the selected class7. System displays the detailed information to the user8. User may choose to view another class or log out9. User logs out to exit the application", "pred_act": "opens, logs, navigates, retrieves, displays, selects, retrieves, displays, choose, view, log, logs, exit\n", "pred_obj": "application, user, credentials, \"classes\" section, system, list, class, information"}
{"index": 49, "ucName": "EnterAbsences", "uctext": "Digitizing the Register, collecting data from ATA staff class by class", "steps": "2. User selects absent students 3. Clicks save 1. Shows user a screen with pupils and radio buttons to select whether a pupil is absent or present. By default the pupil is present. 4. The system sends the data to the server. The server for each absence sends an e- mail notification to the pupil's parent.", "dataset": "SMOS", "act": "\"selects, clicks, shows, sends, sends\"", "obj": "User, absent students, save, screen, pupils, radio buttons, pupil, server, absence, e-mail notification, pupil's parent", "pred_steps": "1. Access the Register Digitization tool.2. Select the option to collect data from ATA staff.3. Choose the first class to start collecting data.4. Enter the staff details for the selected class.5. Verify the accuracy of the entered data.6. Save the data for the current class.7. Repeat steps 3-6 for each remaining class until all staff data is collected.8. Review and finalize all collected data.9. Save the final data set.10. Close the Register Digitization tool.", "pred_act": "Access, Select, collect, Choose, start, collecting, Enter, Verify, Save, Repeat, collected, Review, finalize, Save, Close\n", "pred_obj": "register digitization tool, data, ata staff, classes, staff, staff details, data set"}
{"index": 50, "ucName": "InsertDelayAta", "uctext": "Digitizing the Register, collecting data from ATA staff class by class", "steps": "2. User selects tardies 3. User clicks 'Confirm' 1. The system shows the user a screen with all pupils present, with a 'tardy' checkbox next to it. If selected, select fields are activated beside it to select the time of the delay 4. The system sends the data to the server.", "dataset": "SMOS", "act": "Actions or predicates: \"selects\", \"clicks\", \"shows\", \"selects\", \"are activated\", \"sends\"", "obj": "User, tardies, Confirm, system, screen, pupils, tardy, checkbox, fields, time, delay, data, server", "pred_steps": "1. Access the Register Digitization feature in the software.2. Select the option to collect data from ATA staff class by class.3. Choose the first class of ATA staff members to begin data collection.4. Enter the data for each staff member in the selected class.5. Save the data entered for the class.6. Repeat steps 3 to 5 for each remaining class of ATA staff members.7. Verify and validate the collected data for accuracy.8. Finalize the data collection process.9. Confirm successful digitization of the register with ATA staff.", "pred_act": "Access, Select, Choose, begin, Enter, Save, Repeat, Verify, validate, Finalize, Confirm\n", "pred_obj": "register digitization feature, software, data, ata staff class, class, ata staff members, staff member, data, class, data, class, ata staff members, data, data collection process, register, ata staff"}
{"index": 51, "ucName": "ViewListClassesDoctor", "uctext": "This use case allows a teacher to view the list of classes in which he or she teaches.", "steps": "2. Select the academic year of interest. Displays the list of academic years in which there is at least one class in which the lecturer teaches 1. 3. Displays the classes associated with the selected academic year.", "dataset": "SMOS", "act": "\"Select, Displays, Displays\"", "obj": "academic year, class, lecturer", "pred_steps": "Functional Steps:1. Log in to the system as a teacher.2. Navigate to the \"Classes\" or \"My Classes\" section.3. Select the option to view the list of classes.4. Retrieve and display the list of classes associated with the logged-in teacher.5. Display relevant class information such as class name, class code, schedule, and number of students enrolled.6. Allow the teacher to select a specific class for more detailed information if needed.7. Provide options to sort or filter the list of classes if necessary.8. Allow the teacher to perform actions such as editing class details or adding new classes if appropriate permissions are granted.9. Provide options to go back to the main dashboard or navigate to other sections as needed.10. Log out of the system once the teacher has finished viewing the list of classes.", "pred_act": "Log in, Navigate, Select, Retrieve, Display, Display, Allow, Provide, Allow, Perform, Provide, Log out\n", "pred_obj": "functional steps, log in, system, teacher, classes, my classes, classes, retrieve, list, classes, teacher, class, class name, class code, schedule, students, class, information, class, options, list, classes, teacher, class, options, list, classes, permissions, dashboard, sections, system, teacher, list, classes"}
{"index": 52, "ucName": "ViewRegister", "uctext": "View Class Register", "steps": "1. View information related to the class register and in particular:Date, Absences, Disciplinary Notes, Tardiness and Excuses.", "dataset": "SMOS", "act": "\"View\"", "obj": "class register, Date, Absences, Disciplinary Notes, Tardiness, Excuses", "pred_steps": "1. User selects the \"View Class Register\" option from the main menu.2. System displays a list of available classes.3. User selects the desired class from the list.4. System retrieves the class register for the selected class.5. System displays the class register, showing the names and details of all students registered for the class.6. User has the option to search for a specific student in the class register.7. User enters the name or student ID of the student to search for.8. System searches the class register for the entered name or student ID.9. System displays the search results, showing the matching student's details.10. User has the option to sort the class register based on certain criteria (e.g., alphabetical order, student ID).11. User selects the desired sorting criteria.12. System sorts the class register based on the selected criteria and displays the sorted register.13. User has the option to export the class register in a specific format (e.g., PDF, Excel).14. User selects the desired export format.15. System generates the class register in the selected format and prompts the user to save the file.16. User provides a file name and location to save the exported class register.17. System saves the exported class register file.18. Use case ends.", "pred_act": "selects displays selects retrieves displays has enters searches displays has selects sorts displays has selects generates prompts provides saves ends\n", "pred_obj": "user, system, \"view class register\", main menu, list of available classes, desired class, class register, names, details of all students, specific student, name, student id, search results, matching student's details, sorting criteria, alphabetical order, export format, pdf, excel, file name, location, exported class register file, use case"}
{"index": 53, "ucName": "DisplayOfAPagellaDoctor", "uctext": "Display of a report card", "steps": "2. Select the academic year of interest. 4. Select one of the displayed classes. 6. Select the student whose report card and the relevant quarter to view by clicking on the appropriate button. 1 . View the list of academic years in which there is at least one class in which the teacher teaches. 3. Displays the classes associated with the selected academic year. 5. Displays the list of pupils in the class chosen by the user 7. Displays the report card of the chosen pupil referring to the specified term.", "dataset": "SMOS", "act": "\"Select, View, Displays, Select, Displays, Displays, Displays\"", "obj": "academic year, class, student, report card, quarter, teacher, pupil, term", "pred_steps": "1. Retrieve student's academic records from the database.2. Calculate the student's grades for each subject based on the records.3. Calculate the overall GPA for the student based on the grades obtained.4. Generate a report card template for the student.5. Populate the report card template with the student's information, grades, and GPA.6. Display the completed report card to the user.", "pred_act": "Retrieve, Calculate, Calculate, Generate, Populate, Display\n", "pred_obj": "student, database, grades, records, gpa, report card template, information, report card, user"}
{"index": 54, "ucName": "DisplayOfAStudentPage", "uctext": "The report card of the requesting student is displayed", "steps": "2. Select the report card of interest 1. The system displays the logged-in student's report cards on file 3. Displays details of the selected report card.", "dataset": "SMOS", "act": "\"Select, displays, Displays\"", "obj": "report card, system, logged-in student's report cards, details, selected report card", "pred_steps": "1. Retrieve the student's information from the database using the student ID.2. Retrieve the grades and other relevant academic information for the student from the database.3. Format the information to display on the report card.4. Display the report card with the student's information and grades on the user interface.5. Allow the user to view and interact with the report card as needed.", "pred_act": "Retrieve, Retrieve, Format, Display, Allow, view, interact\n", "pred_obj": "student,report card,user interface,user,student"}
{"index": 55, "ucName": "NewUser", "uctext": "Enter a new user into the system", "steps": "2. Fill in the form fields 3. Click on the 'Save' button System 1. Displays the user entry form consisting of the following fields: First Name, Last Name, e-mail, cell, login, password, password confirmation. Performs checks on the validity of the entered data and enters the new user into the archive; in case the entered data is invalid, activate the use case 'ErrorData'", "dataset": "SMOS", "act": "\"Fill, Click, Displays, Performs, enters, activate\"", "obj": "Entities/Objects: form fields, 'Save' button, System, user entry form, First Name, Last Name, e-mail, cell, login, password, password confirmation, entered data, archive, use case 'ErrorData'", "pred_steps": "1. Display the user registration form.2. Collect user information (e.g., name, email, password).3. Validate the entered user information.4. Check if the email is already existing in the system.5. If the email is unique, create a new user account.6. Store the user information in the database.7. Display a success message indicating that the user has been successfully added to the system.", "pred_act": "Display, Collect, Validate, Check, create, Store, Display\n", "pred_obj": "user registration form, user information, name, email, password, user information, email, user account, user information, database, success message, user"}
{"index": 56, "ucName": "ViewSchoolStudentData", "uctext": "View school information about the 'user", "steps": "1. 2. Search the 'archive for data related to the record of the class to which the student belongs View data about the student and in particular: Date, Absences, Disciplinary Notes, Tardies and Excuses.", "dataset": "SMOS", "act": "\"Search, View\"", "obj": "archive, data, record, class, student, Date, Absences, Disciplinary Notes, Tardies, Excuses", "pred_steps": "1. User opens the application or webpage2. User logs in or registers (if not already logged in)3. User navigates to the \"School Information\" section4. Application retrieves and displays the user's school information from the database5. User reviews the displayed school information", "pred_act": "openslogs inregistersnavigatesretrievesdisplaysreviews\n", "pred_obj": "user, application, webpage, database, school information"}
{"index": 57, "ucName": "ViewStudentData", "uctext": "This use case allows a parent to view information about their children.", "steps": "1. View a summary table with information about their children and in particular:Date, Absences, Disciplinary Notes, Tardiness and Excuses.", "dataset": "SMOS", "act": "\"View\"", "obj": "summary table, information, children, Date, Absences, Disciplinary Notes, Tardiness, Excuses", "pred_steps": "1. Parent opens the application.2. Parent logs in with their credentials.3. Application verifies the parent's credentials.4. Parent navigates to the \"Children Information\" section.5. Parent selects a specific child to view information about.6. Application retrieves and displays the child's details such as name, age, and school.7. Parent can choose to view additional information such as medical records or academic reports.8. Parent can navigate back to the \"Children Information\" section to select a different child to view their information.9. Parent logs out of the application to secure their account.", "pred_act": "opens, logs, verifies, navigates, selects, view, retrieves, displays, choose, view, navigate, select, view, logs\n", "pred_obj": "parent, application, credentials, parent, parent's credentials, parent, \"children information\" section, parent, child, information, application, child's details, name, age, school, parent, information, medical records, academic reports, parent, \"children information\" section, child, information, parent, application, account"}
{"index": 58, "ucName": "DisplayOfAPage", "uctext": "The required student's report card is displayed", "steps": "2. Select the report card of interest 1. Displays the selected student's report cards 3. Displays details of the selected report card.", "dataset": "SMOS", "act": "\"Select, Displays, Displays\"", "obj": "report card, student's report cards, selected report card", "pred_steps": "1. Retrieve the student's details from the database.2. Calculate the student's grades for each subject based on the stored assessment data.3. Calculate the student's overall GPA.4. Display the student's details, grades for each subject, and overall GPA on the report card interface.5. Allow the user to print or save the report card if needed.", "pred_act": "Retrieve, Calculate, Calculate, Display, Allow, print, save\n", "pred_obj": "student,student,student,student,student"}
{"index": 59, "ucName": "PerformStudentMonitoring", "uctext": "Displays students with a number of notes and absences above a user-specified threshold.", "steps": "1. Search for students with a number of absences and notes above a specified threshold. 2. Displays retrieved information.", "dataset": "SMOS", "act": "\"Search, retrieve, display\"", "obj": "Entities/Objects: students, absences, notes, retrieved information", "pred_steps": "1. User inputs a threshold value for the number of notes and absences.2. System retrieves the list of students along with their respective notes and absences.3. System filters out students who have notes and absences below the specified threshold.4. System displays the list of students who have notes and absences above the user-specified threshold.", "pred_act": "inputs retrieves filters displays\n", "pred_obj": "user, threshold value, number of notes, absences, system, list of students, notes, absences, threshold, user-specified threshold"}
{"index": 60, "ucName": "ViewListRecords", "uctext": "View the list of records for an academic year", "steps": "2. Select academic year 1.Display a screen for selecting the academic year of interest. 3. Search the archive for all digital records for that year and display them associated with the class to which they belong.", "dataset": "SMOS", "act": "\"Display, Select, Search, Display\"", "obj": "academic year, screen, archive, digital records, class", "pred_steps": "1. User selects the academic year for which they want to view records2. System fetches the list of records for the selected academic year3. System displays the list of records to the user for the selected academic year", "pred_act": "selectsfetchesdisplays\n", "pred_obj": "user, system, academic year, list of records"}
{"index": 61, "ucName": "ViewRegister", "uctext": "Details about a class register", "steps": "1. Displays on the screen the information contained in the register organized by date. In particular it shows, for the selected date the list of pupils, specifying: absent/present, late entries and a form from which you can manage justifications and disciplinary notes.", "dataset": "SMOS", "act": "\"Displays, shows, specifying, manage\"", "obj": "Entities/Objects: screen, information, register, date, list of pupils, absent, present, late entries, form, justifications, disciplinary notes", "pred_steps": "1. User opens the software application.2. User navigates to the \"Class Register\" section.3. User selects the desired class from the list of available classes.4. System retrieves and displays the details of the selected class, including class name, class code, schedule, and instructor.5. User has the option to view the list of students enrolled in the class.6. User can search for a specific student within the class register.7. System displays detailed information about the selected student, including student name, ID, and contact details.8. User can make changes or updates to the class register, such as adding or removing students.9. User can save the changes made to the class register.10. User can print or export the class register details for record-keeping purposes.11. User can close the class register and exit the application.", "pred_act": "opens navigates selects retrieves displays view search displays make adding removing save print export close exit\n", "pred_obj": "software application, class register, class, available classes, system, class name, class code, schedule, instructor, students, student, student name, id, contact details"}
{"index": 62, "ucName": "ViewingA Report Card", "uctext": "ViewingA Report Card", "steps": "1. Selects the academic year 3 . Selects the class of the student whose report card you want to view 5. Selects the student whose report card you want to view and the quarter of interest by clicking on the relevant button 2. Displays the list of classes in the system with a 'Report Card' button associated with each class next to it 4. Displays the list of pupils in the class chosen by the user 6. Displays the report card of the chosen pupil referring to the selected semester.", "dataset": "SMOS", "act": "\"Selects, Selects, Selects, Displays, Displays, Displays\"", "obj": "academic year, class, student, report card, quarter, list of classes, Report Card button, system, list of pupils, pupil, semester", "pred_steps": "1. User selects the option to view report card.2. System retrieves the relevant student's report card information from the database.3. System displays the report card details on the screen.4. User has the option to print or save the report card.5. System logs the user's action for audit purposes.", "pred_act": "selects retrieves displays print save logs\n", "pred_obj": "user, option, report card, system, student, information, database, details, screen, print, save, action, audit purposes"}
{"index": 63, "ucName": "RegistrationAlSite", "uctext": "Allows a student to register with the system", "steps": "2. Fills in the form fields 3. Submits the form 1 . Displays the registration form containing: First name, Last name, Mobile phone, e-mail, username, password, password confirmation. 4. Enters the registration request into the system.", "dataset": "SMOS", "act": "\"Displays, Fills, Submits, Enters\"", "obj": "form fields, registration form, First name, Last name, Mobile phone, e-mail, username, password, password confirmation, registration request, system", "pred_steps": "1. User selects the \"Register\" option.2. System prompts the user to enter their full name.3. User enters their full name.4. System validates the entered name.5. System prompts the user to enter their email address.6. User enters their email address.7. System validates the entered email address.8. System prompts the user to enter a username.9. User enters a username.10. System validates the entered username for uniqueness.11. System prompts the user to enter a password.12. User enters a password.13. System validates the entered password for strength.14. System prompts the user to confirm their password.15. User confirms their password.16. System validates the entered password for match.17. System prompts the user to select their course.18. User selects their course from a list of available courses.19. System validates the selected course.20. System prompts the user to upload any required documents.21. User uploads the required documents.22. System validates the uploaded documents.23. System prompts the user to review their registration information.24. User reviews their registration information.25. User submits their registration.26. System saves the user's registration information.27. System sends a confirmation email to the user's email address.28. System displays a success message and completes the registration process.", "pred_act": "selects prompts enter enters validates prompts enter enters validates prompts enter enters validates prompts confirm confirms validates prompts select selects validates prompts upload uploads validates prompts review reviews submits saves sends displays completes\n", "pred_obj": "user, register, system, full name, email address, username, password, course, documents, registration information, confirmation email, success message"}
{"index": 64, "ucName": "ViewUserDetails", "uctext": "View a user's details", "steps": "1. View the user's detailed information and in particular: First Name, Last Name, e-mail, cell, login, password.", "dataset": "SMOS", "act": "\"View\"", "obj": "user's detailed information, First Name, Last Name, e-mail, cell, login, password", "pred_steps": "1. Select the option to view user details.2. Input the user identifier or search for the user by name.3. Retrieve the user details from the database based on the provided user identifier or name.4. Display the user details on the screen, including information such as name, address, contact details, and any other relevant information.5. Allow the user to view and verify the displayed details.6. Optionally, provide the option to print or export the user details.7. End the process.", "pred_act": "Select, Input, search, Retrieve, Display, Allow, verify, provide, print, export, End\n", "pred_obj": "option, user details, user identifier, user, name, user details, database, user identifier, name, user details, screen, name, address, contact details, option, user details, process"}
{"index": 65, "ucName": "EditUser", "uctext": "Edit one or more data regarding a user in the system", "steps": "1. Click on the 'edit' button System 2. Performs checks on the validity of the entered data and edits the user; in case the entered data is invalid, activate the use case 'ErrorData'", "dataset": "SMOS", "act": "\"Click, performs, checks, edits, activate\"", "obj": "entities: edit button, System, entered data, user, use case 'ErrorData'", "pred_steps": "1. User selects the option to edit user data.2. System displays the user data for editing.3. User modifies the desired data fields.4. User saves the changes.5. System validates the modified data.6. System updates the user data in the system.7. System confirms the successful update to the user.", "pred_act": "selects displays modifies saves validates updates confirms\n", "pred_obj": "user, system"}
{"index": 66, "ucName": "DeleteUser", "uctext": "Delete a user from the system", "steps": "1. Deletes the user from the archive 2. Displays the list of updated users or", "dataset": "SMOS", "act": "Deletes, Displays", "obj": "user, archive, list, updated users", "pred_steps": "1. Identify the user to be deleted from the system.2. Verify the permissions of the user initiating the deletion process.3. Confirm the deletion action with a confirmation prompt.4. Remove all related data and information associated with the user from the system.5. Update any relevant database records to reflect the user's deletion.6. Notify the user and any relevant stakeholders about the deletion if necessary.7. Log the deletion action with a timestamp for auditing purposes.8. End the deletion process and update the system interface to reflect the changes.", "pred_act": "Identify, Verify, Confirm, Remove, Update, Notify, Log, End, Update\n", "pred_obj": "user, system, permissions, deletion process, confirmation prompt, data, information, database records, stakeholders, timestamp, system interface"}
{"index": 0, "ucName": "Input anagrafica of a laboratory", "uctext": ":\nIt allows the operator to enter the anagrafica of a laboratory analysis or any data that the characterize", "steps": "The operator activates the execution of the anagrafica input service Laboratory\n[S1] View the mask to enter information needed\n[S2] Inserts data about the anagrafica of laboratory\n[S3] Confirm placement\n[S4] Verify the data entered\n[S5] Stores data\n[S6] Notify that the operation it is finished with success", "dataset": "easyClinic", "act": "activates, View, Inserts, Confirm, Verify, Stores, Notify", "obj": "operator, execution, anagrafica input service, Laboratory, mask, information, data, anagrafica of laboratory, operation", "pred_steps": "1. Display the option to enter laboratory analysis data.2. Prompt the operator to enter the required \"anagrafica\" data.3. Provide input fields for the operator to enter details such as patient name, age, gender, etc.4. Allow the operator to save the entered \"anagrafica\" data.5. Validate the entered data to ensure accuracy and completeness.6. Display a confirmation message upon successful data entry.7. End the process.", "pred_act": "Display, Prompt, Provide, Allow, save, Validate, ensure, Display, End\n", "pred_obj": ""}
{"index": 1, "ucName": "Delete visit", "uctext": ":\nIt allows the operator to delete a visit previously recorded", "steps": "The operator activates the execution of service elimination of a visit\n1 View the list of visits in chronological order\n2 Select the visit to delete\n3 Confirm the selection\n4 View the mask for viewing of visit\n5 Confirm the delete\n6 Delete the visit and examinations related to it\n7 Notify the operator that the operation was concluded successfully", "dataset": "easyClinic", "act": "activates, views, selects, confirms, deletes, notifies", "obj": "operator, execution, service elimination, visit, list of visits, chronological order, mask, view, delete, examinations, notification, operation, success", "pred_steps": "1. Select the visit record to be deleted.2. Confirm the deletion action.3. Delete the selected visit record.4. Display a confirmation message that the visit has been successfully deleted.", "pred_act": "Select, Confirm, Delete, Display\n", "pred_obj": "visit record, deletion action, visit record, confirmation message, visit"}
{"index": 2, "ucName": "Input examination", "uctext": ":\nIt allows the operator to record results of a examination supported by a patient required a visit held in outpatient", "steps": "The operator activates the execution of input service of data from an examination\n1 View the mask to record of examination\n2 Input necessary data to registration of examination\n3 Confirm input\n4 Verify the data inserted by operator\n5 Stores data confirm the elimination \n6 Notify the operator that the operation was concluded successfully", "dataset": "easyClinic", "act": "activates, views, inputs, confirms, verifies, stores, notify", "obj": "operator, execution, input service, data, examination, mask, record, registration, input, data inserted, elimination, operation", "pred_steps": "1. Log in to the system with operator credentials.2. Navigate to the \"Examinations\" tab.3. Select the option to record results for a patient visit.4. Enter the patient's details or search for the patient's record.5. Select the specific examination conducted during the visit.6. Enter the examination results and any additional notes.7. Save the recorded results.8. Repeat the process for additional examinations or patients if needed.9. Log out of the system.", "pred_act": "Log in, Navigate, Select, record, Enter, search, Select, Enter, Save, Repeat, Log out\n", "pred_obj": "log in, operator credentials, system, examinations tab, record results, patient visit, patient's details, patient's record, specific examination, examination results, additional notes, save, recorded results, additional examinations, patients, log out"}
{"index": 3, "ucName": "Changing examination", "uctext": ":\nIt allows the operator to change a examination  previously recorded", "steps": "The operator activates the execution of service to modify an examination\n1 View a list of tests carried out in chronological order\n2 Select the examination by change\n3 Confirm your selection \n4 View the mask for the modification of a examination\n5 Change of data \n6 Confirm Changes \n7 Verify the data inserted by operator\n8 updates the examination.\n6 Notify the operator that the operation was concluded successfully", "dataset": "easyClinic", "act": "activates, views, selects, confirms, views, changes, confirms, verifies, updates, notifies", "obj": "operator,execution of service,examination,list of tests,chronological order,examination by change,selection,mask,modification of a examination,data,changes,operator,examination,operation", "pred_steps": "1. Login to the system with operator credentials.2. Navigate to the \"Examinations\" module.3. Search for the examination record to be edited.4. Select the examination record from the search results.5. Click on the \"Edit\" or \"Modify\" button.6. Update the necessary fields or details of the examination.7. Save the changes made to the examination record.8. Verify that the changes are reflected in the system.9. Log out of the system to end the session.", "pred_act": "Login, Navigate, Search, Select, Click, Update, Save, Verify, Log\n", "pred_obj": "operator credentials, examinations module, examination record, edit or modify button, fields or details, system, session"}
{"index": 4, "ucName": "Delete examination", "uctext": ":\nIt allows the operator to delete a Visit previously recorded", "steps": "The operator activates the execution of service elimination of an examination\n1 View a list of examinations conducted in chronological order\n2 Select the examination to change\n3 Confirm your selection \n4 View the mask for viewing examination\n5 confirms the deletion\n6 Delete the examination \n7 Notify the operator that the operation was concluded successfully", "dataset": "easyClinic", "act": "activates, views, selects, confirms, deletes, notifies", "obj": "operator,execution,service,elimination,examination,list,examinations,examination(to change),mask,deletion", "pred_steps": "1. Operator selects the option to manage recorded Visits.2. Operator selects the Visit they want to delete.3. System prompts the Operator to confirm the deletion.4. Operator confirms the deletion.5. System removes the selected Visit from the records.6. System displays a confirmation message that the Visit has been successfully deleted.", "pred_act": "selects, selects, prompts, confirms, removes, displays\n", "pred_obj": "operator, visits, visit, operator, visit, operator, visit, system, operator, system, visit, system, visit"}
{"index": 5, "ucName": "Book visit", "uctext": ":\nIt allows the operator to meet request for a booking service made by an ambulatory patient\nThe Operator has an interest in the record renting an outpatient service requested by a patient", "steps": "The operator activates the execution of service booking service\n1 The Operator has received a request for a first visit\n2 View the mask for booking of outpatient service\n3 Select the type of visit that the patient wants to make\n4 Inserts motivation of the request\n5 Confirm data inserted\n6 Verify that the sequence of reservations are valid (See BrValSeq)\n7 Select available dates\n8 Confirm your reservation \n9 Stores data \n10 Notify the operator that the operation was concluded successfully", "dataset": "easyClinic", "act": "activates, has received, View, Select, Inserts, Confirm, Verify, Select, Confirm, Stores, Notify", "obj": "Operator, execution, service booking service, request, first visit, mask, booking, outpatient service, type of visit, patient, motivation, data, sequence of reservations, BrValSeq, available dates, reservation, operation", "pred_steps": "1. Log in to the operator system.2. Access the request for booking service made by the ambulatory patient.3. Review the details of the booking request.4. Check the availability of the outpatient service for the requested date and time.5. If available, confirm the booking for the patient.6. Notify the patient about the confirmed booking.7. Update the booking status in the system.8. Close the request for booking service.9. Log out of the operator system.", "pred_act": "Log in, Access, Review, Check, confirm, Notify, Update, Close, Log out\n", "pred_obj": "operator system, request for booking service, ambulatory patient, details of the booking request, availability of the outpatient service, requested date and time, booking, patient, booking status"}
{"index": 6, "ucName": "Changing reservation", "uctext": ":\nIt allows the operator to meet request to change a reservation a service by Outpatient", "steps": "The operator activates the execution of service to changing a reservation\n1 View the list of reservations for the patient\n2 Select the reservation to be changed\n3 Confirm the selection\n4 View the mask for changing the reservations\n5 Select dates available\n6 confirm the change \n7 verifies that the sequence of reservations is valid (See BrValSeq)\n8 updates the data\n9 Notify the operator that the operation was concluded successfully", "dataset": "easyClinic", "act": "activates, views, selects, confirms, views, selects, confirms, verifies, updates, notifies", "obj": "operator,execution,service,reservation,list,reservations,patient,mask,dates,sequence,reservations,BrValSeq,data", "pred_steps": "1. Log in to the system as an operator.2. Navigate to the reservations section.3. Search for the reservation request for the Outpatient service.4. Select the reservation request that needs to be changed.5. Click on the option to edit the reservation.6. Modify the necessary details of the reservation (date, time, service type, etc.).7. Save the changes made to the reservation.8. Notify the user about the changes to the reservation.9. Log out of the system.", "pred_act": "Log in, Navigate, Search, Select, Click, edit, Modify, Save, Notify, Log out\n", "pred_obj": "operator, reservations section, reservation request, outpatient service, user"}
{"index": 7, "ucName": "Cancel Reservation", "uctext": ":\nIt allows the operator to meet request for annulment of a renting an outpatient service by a patient", "steps": "The operator activates the execution of service cancellation of a Reservations\n1 View the list of reservations for the patient\n2 Select the reservation to be changing\n3 Confirm cancellation \n4 Verify that the sequence of reservations are valid (See BrValSeq)\n5 Cancel Reservation \n6 Notify the operator that the operation was concluded successfully", "dataset": "easyClinic", "act": "activates, View, Select, Confirm, Verify, Cancel, Notify", "obj": "operator, execution, service cancellation, Reservations, list, reservations, patient, reservation, sequence, reservations, BrValSeq, Reservation", "pred_steps": "1. Operator receives request for annulment of outpatient service rental from patient.2. Operator verifies patient identity and rental details.3. Operator confirms availability of outpatient service for annulment.4. If service is available for annulment, operator proceeds with the cancellation process.5. Operator updates system with annulment request and reason provided by patient.6. System notifies relevant parties about the annulment request.7. Operator informs patient about the successful annulment of the outpatient service rental.", "pred_act": "receives verifies confirms is proceeds updates notifies informs\n", "pred_obj": "operator, request, annulment, outpatient service rental, patient, operator, patient identity, rental details, operator, availability, outpatient service, annulment, service, operator, cancellation process, operator, system, annulment request, reason, patient, system, parties, annulment request, operator, patient, annulment, outpatient service rental"}
{"index": 8, "ucName": "Changing anagrafica of the patient", "uctext": ":\nIt allows the operator to change the anagrafica of a patient that are at outpatient\nIt deals with the modification of data about anagrafica a Patient", "steps": "The operator activates the execution of change Service  of the anagrafica of the patient\n1 View the mask for editing the anagrafica of patient\n2 Change the anagrafica of patient\n3 Confirm Changes \n4 Verify the data inserted by operator\n5 Remember the updates\n6 Notify that the operation finished with success", "dataset": "easyClinic", "act": "activates, View, Change, Confirm, Verify, Remember, Notify", "obj": "operator, execution, change Service, anagrafica, patient, mask, editing, data, updates, operation, success", "pred_steps": "1. Log in to the system as an operator.2. Navigate to the patient management section.3. Search for the outpatient patient whose anagrafica needs to be changed.4. Select the patient from the search results.5. Click on the option to edit patient details.6. Update the required anagrafica information for the patient.7. Save the changes.8. Verify that the changes have been successfully applied to the patient's anagrafica.", "pred_act": "Log in, Navigate, Search, Select, Click, Update, Save, Verify\n", "pred_obj": "operator, patient management section, outpatient patient, anagrafica, search results, patient, option to edit patient details, anagrafica information, patient, patient's anagrafica"}
{"index": 9, "ucName": "input anagrafica of patient", "uctext": ":\nIt allows the operator to enter the anagrafica of a patient who contact the outpatient for the first time.", "steps": "1 View the mask for input of necessary information\n2 Inserts data about anagrafica of Patient\n3 Confirm input\n4 Verify the data inserted by operator\n5 Build and assigns Hospital Card (See BrCreCar)\n10 First visit", "dataset": "easyClinic", "act": "\"View, Inserts, Confirm, Verify, Build, assigns\"", "obj": "mask, necessary information, data, anagrafica, Patient, operator, Hospital Card, BrCreCar, First visit", "pred_steps": "1. Operator opens the software system.2. Operator navigates to the section for entering patient information.3. Operator selects the option to add a new patient.4. Operator enters the patient's personal details (anagrafica) such as name, date of birth, address, contact information.5. Operator saves the entered information.6. System validates the entered data for completeness and accuracy.7. If the data is valid, the system displays a confirmation message.8. If the data is invalid, the system prompts the operator to correct the errors.9. The process is completed.", "pred_act": "opens, navigates, selects, enters, saves, validates, displays, prompts\n", "pred_obj": "operator, software system, section, patient information, option, patient, personal details, name, date of birth, address, contact information, information, data, system, confirmation message, errors, process"}
{"index": 10, "ucName": "Access section of patient", "uctext": ":\nIt allows access to this patient by enabling the operator to meet one or more Requests received by Patient", "steps": "The operator activates the execution of service access to section patient\n1 valid patient\n2 View mask of section patient", "dataset": "easyClinic", "act": "activates, View", "obj": "operator, execution, service, access, section, patient, View, mask", "pred_steps": "1. Login to the system with valid credentials.2. Access the list of patient requests.3. Select the patient request to fulfill.4. Review the details of the request.5. Acknowledge the request to begin the process.6. Fulfill the request according to the patient's needs.7. Update the status of the request as completed.8. Save the completed request information.9. Log out of the system.", "pred_act": "Login, Access, Select, Review, Acknowledge, Fulfill, Update, Save, Log\n", "pred_obj": "system, patient requests, request, request, patient's needs, request, request information"}
{"index": 11, "ucName": "Changing anagrafica laboratory", "uctext": ":\nIt allows the operator to change the anagrafica of a laboratory analysis\nIt deals with the modification of data about anagrafica of laboratory analysis", "steps": "The operator activates the execution of service changing of the anagrafica of laboratory\n1 View the list of laboratories in the SIO\n2 Select the laboratory which change the anagrafica\n3 Confirm your selection\n4 View the mask for editing the anagrafica of laboratory\n5 Changing the angrafica of laboratory\n6 Confirm the changes\n7 Verify the data insert by operator\n8 updates data\n9 Notify that the operation finished with success", "dataset": "easyClinic", "act": "activates, View, Select, Confirm, View, Changing, Confirm, Verify, updates, Notify", "obj": "operator, execution, service, changing, anagrafica, laboratory, list, laboratories, SIO, laboratory, mask, editing, anagrafica, laboratory, angrafica, laboratory, data, operator, updates, operation, success", "pred_steps": "1. Select the option to modify laboratory analysis data from the system menu.2. Enter the required authentication credentials to access the modification functionality.3. Search for the specific laboratory analysis by providing relevant identification details.4. Retrieve the existing anagrafica data associated with the laboratory analysis.5. Update the necessary fields or attributes of the anagrafica information as required.6. Validate the modified data to ensure accuracy and completeness.7. Save the changes made to the anagrafica data of the laboratory analysis.8. Confirm the successful modification of the anagrafica data.9. Exit the modification functionality.", "pred_act": "Select, modify, Enter, access, Search, providing, Retrieve, associated, Update, Validate, ensure, Save, Confirm, Exit\n", "pred_obj": "laboratory analysis data, system menu, authentication credentials, laboratory analysis, identification details, anagrafica data, anagrafica information"}
{"index": 12, "ucName": "Validate patient", "uctext": ":\nHe works to perform the functions necessary to authenticate an patient", "steps": "The Operator active enforcement of a depending on a specific patient\n1 View the mask for validating the patient\n2 input the code of hospital Card\n3 Confirm validation \n4 Verify that the code of hospital card or tax code to identify a patient within SIO\n5 Get patient information\n6 Transfer patient data to the memory", "dataset": "easyClinic", "act": "\"active, View, input, Confirm, Verify, Get, Transfer\"", "obj": "Operator, enforcement, patient, mask, code, hospital Card, tax code, SIO, patient information, patient data, memory", "pred_steps": "1. Display the login screen to the user.2. Prompt the user to enter their username and password.3. Validate the entered credentials against the stored user data.4. If the credentials are invalid, display an error message and allow the user to retry entering the credentials.5. If the credentials are valid, authenticate the user and grant access to the system.6. Provide the user with the necessary functions and options to perform actions related to patient authentication.7. End the authentication process.", "pred_act": "Display, Prompt, enter, Validate, display, allow, retry, entering, authenticate, grant, Provide, perform, End\n", "pred_obj": "login screen, user, username, password, credentials, user data, error message, system, functions and options, actions, patient authentication, authentication process"}
{"index": 13, "ucName": "Show clinic folder", "uctext": ":\nAllows a patient to view clinic folder own folder using the specific locations displaced of the outpatient", "steps": "The patient activates the execution of service display clinic folder\n1 Access to the database and retrieves information in patient clinic folder\n2 View details of patient and the list of visits in chronological order and pathology", "dataset": "easyClinic", "act": "activates, accesses, retrieves, views", "obj": "patient, execution, service, display, clinic, folder, database, information, details, list, visits, chronological order, pathology", "pred_steps": "1. Authenticate the patient by verifying their credentials.2. Retrieve the patient's personal information from the database.3. Retrieve the clinic folder associated with the patient from the database.4. Display the specific locations of the outpatient clinics in a list.5. Allow the patient to select a specific outpatient clinic from the list.6. Retrieve the specific location details for the selected outpatient clinic from the database.7. Display the selected outpatient clinic's location details to the patient.8. End the use case.", "pred_act": "Authenticate, verifying, Retrieve, Retrieve, Display, Allow, select, Retrieve, Display, End\n", "pred_obj": "authenticate, patient, verifying, credentials, retrieve, patient's, personal information, database, retrieve, clinic folder, patient, database, display, specific locations, outpatient clinics, list, allow, patient, select, specific outpatient clinic, list, retrieve, specific location details, selected outpatient clinic, database, display, selected outpatient clinic's location details, patient, end, use case"}
{"index": 14, "ucName": "Show Reservations", "uctext": ":\nAllows a patient to view thr list of reservation profits using the appropriate locations displaced of the outpatient", "steps": "The patient activates the execution of service displaying their reservations\n1 Access to the database and retrieves information of the useful patient reservation\n2 View the list of the patient bookings in chronological order", "dataset": "easyClinic", "act": "activates, accesses, retrieves, view", "obj": "patient, execution, service, reservations, database, information, patient reservation, list, patient bookings", "pred_steps": "1. Patient selects the \"View Reservations\" option from the menu.2. System retrieves the list of reservation profits from the database.3. System displays the list of reservation profits on the screen.4. Patient can scroll through the list to view all the available reservations.5. Patient selects a specific reservation to view more details.6. System displays the details of the selected reservation.7. Patient can go back to the list of reservation profits or exit the view.8. Patient can also filter the list of reservation profits based on location.9. System applies the selected filter and updates the list accordingly.10. Patient can repeat steps 4-9 to view reservation profits from different locations.", "pred_act": "selects, retrieves, displays, scroll, view, selects, view, displays, go, exit, filter, applies, updates, repeat, view\n", "pred_obj": "patient, view reservations, system, reservation profits, database, screen, reservation, location"}
{"index": 15, "ucName": "Show anagrafica", "uctext": ":\nAllows a patient of view their anagrafica data using the specific locations displaced of the outpatient", "steps": "The patient activates the execution of service display their anagrafica data\n1 Access to the database and retrieves information about patient anagrafica\n2 View information patient anagrafiche", "dataset": "easyClinic", "act": "activates, accesses, retrieves, view", "obj": "patient, execution, service, anagrafica data, access, database, information, view", "pred_steps": "1. Patient selects the \"View Anagrafica Data\" option in the outpatient application.2. System retrieves the patient's anagrafica data associated with the specific locations of the outpatient.3. System displays the patient's anagrafica data, including personal information and medical history, on the screen.4. Patient reviews the displayed anagrafica data.5. Patient closes the anagrafica data viewing screen. 6. Use case ends.", "pred_act": "selects retrieves displays reviews closes ends\n", "pred_obj": "patient, view anagrafica data, outpatient application, system, patient's anagrafica data, specific locations, outpatient, personal information, medical history, screen, anagrafica data viewing screen, use case"}
{"index": 16, "ucName": "Access Box Tower", "uctext": ":\nAllows the patient to access a locations of internally displaced of the outpatient", "steps": "Patient access to one of the locations displaced of the outpatient\n1 valid patient\n2 find patients information\n3 Transfer patient data in the memory\n4 View the root mask of a box tower", "dataset": "easyClinic", "act": "access, find, Transfer, View", "obj": "patient, location, outpatient, patient information, patient data, memory, root mask, box tower", "pred_steps": "1. Authenticate the patient's credentials.2. Display a list of available internally displaced outpatient locations.3. Allow the patient to select a specific location.4. Retrieve the address and contact information of the selected location.5. Display the location details to the patient.6. Provide options for the patient to navigate to the selected location if needed.7. End the process.", "pred_act": "Authenticate, Display, Allow, Retrieve, Display, Provide, End\n", "pred_obj": "patient,location"}
{"index": 17, "ucName": "Validation patient", "uctext": ":\nHe works to perform the functions necessary to authenticate an patient", "steps": "Patient access to Box Tower \n1 View the mask for the login operation\n2 input the code of Hospital Card PIN\n3 Confirm validation \n4 Verify that the couple (Hospital Card PIN)\n5 identifies a patient within SIO", "dataset": "easyClinic", "act": "\"access View input Confirm Verify identifies\"", "obj": "Patient, Box Tower, mask, login operation, code, Hospital Card PIN, validation, couple, SIO", "pred_steps": "1. Capture patient's login credentials (username and password)2. Verify the validity of the login credentials3. Retrieve the patient's authentication information from the database4. Compare the entered password with the stored password5. If the passwords match, grant access to the patient6. If the passwords do not match, deny access and prompt for re-entry of credentials", "pred_act": "Capture Verify Retrieve Compare grant deny prompt\n", "pred_obj": "patient's login credentials, username, password, login credentials, patient's authentication information, database, password, stored password, passwords, patient, passwords, credentials"}
{"index": 18, "ucName": "Report reservations", "uctext": ":\nIt allows the operator to have a report on reservation", "steps": "The operator activates the execution of service report reservation\n1 View the mask for viewing of the report of reservation\n2 Select the time gap\n3 Select the type of information summary\n4 Confirm selection \n5 Access to the database and found in the training required\n6 View information obtained", "dataset": "easyClinic", "act": "activates, views, selects, confirms, accesses, found, views", "obj": "operator,execution,service report reservation,mask,report,reservation,time gap,type,information summary,selection,database,training,information", "pred_steps": "1. Operator selects the \"Reservation Report\" option from the software interface.2. System retrieves reservation data from the database.3. System generates a report based on the retrieved reservation data.4. System displays the report on the screen for the operator to view.5. Operator has the option to print or save the report for further review or distribution.", "pred_act": "selects retrieves generates displays view print save\n", "pred_obj": "operator, reservation report, software interface, system, reservation data, database, report, screen, operator, option, report"}
{"index": 19, "ucName": "Report visits", "uctext": ":\nIt allows the operator to have a record of the outpatient visits, inside so have a total of visits made by a patient, visits supported by a doctor etc", "steps": "The operator activates the execution of service record visits\n1 View the mask for viewing the reporting of visits\n2 Select the time gap\n3 Select the type of information summary\n4 Confirm selection \n5 Access to the database and found in the required training\n6 View information obtained", "dataset": "easyClinic", "act": "activates,views,selects,confirms,accesses,found,views", "obj": "operator,execution,service record visits,mask,reporting,visits,time gap,type,information summary,selection,database,training,information", "pred_steps": "1. Open the software application.2. Navigate to the \"Outpatient Visits\" section.3. Select the option to add a new visit record.4. Enter the patient's information (e.g., name, ID).5. Enter the doctor's information (e.g., name, ID).6. Enter the visit details (e.g., date, purpose).7. Save the visit record.8. Repeat steps 3-7 for each outpatient visit.9. To view the total number of visits made by a patient, search for the patient's record and view the visit count.10. To view the total number of visits supported by a doctor, search for the doctor's record and view the visit count.", "pred_act": "Open, Navigate, Select, Enter, Enter, Enter, Save, Repeat, To view, search, view, To view, search, view\n", "pred_obj": "software application, outpatient visits, visit record, patient's information, doctor's information, visit details, visit record, visits, patient's record, visit count, visits, doctor's record, visit count"}
{"index": 20, "ucName": "Report examinations", "uctext": ":\nIt allows the operator to have a report on tests carried out in reference to visits made in outpatient", "steps": "The operator activates the execution of reporting service examinations\n1 View the mask for viewing the reporting of examinations\n2 Select the storm\n3 Confirm your selection \n4 Access to the database and found in the required training\n5 View information obtained", "dataset": "easyClinic", "act": "activates, View, Select, Confirm, Access, found, View", "obj": "operator, execution, reporting service, examinations, mask, viewing, reporting, storm, selection, database, training, information", "pred_steps": "1. Log in to the software system.2. Navigate to the \"Reports\" section.3. Select the option for \"Tests carried out in reference to outpatient visits.\"4. Enter the necessary parameters such as date range or specific visit details.5. Click on the \"Generate Report\" button.6. View the generated report on tests carried out in reference to outpatient visits.7. Optionally, export the report in a desired format (e.g., PDF, Excel).8. Log out of the software system.", "pred_act": "Log in, Navigate, Select, Enter, Click, View, export, Log out\n", "pred_obj": "software system, reports section, option for \"tests carried out in reference to outpatient visits\", parameters, date range, specific visit details, generate report button, generated report, tests, outpatient visits, report, format, pdf, excel"}
{"index": 21, "ucName": "The average time of waiting", "uctext": ":\nIt allows the operator to get an estimate the average time required to serve a booking", "steps": "The operator activates the execution of service for calculating the estimated average time\n1 View a mask to see the result of the calculation estimation of average time to serve a request reservations\n2 Start function \n3 View results calculating", "dataset": "easyClinic", "act": "activates, views, see, start, views, calculating", "obj": "operator, activation, execution, service, calculating, estimated average time, mask, result, calculation, estimation, average time, request reservations, function, results", "pred_steps": "1. Operator inputs the booking details.2. System retrieves the historical data of similar bookings.3. System calculates the average time required to serve similar bookings.4. System displays the estimated average time to the operator.", "pred_act": "inputs retrieves calculates displays\n", "pred_obj": "operator, booking details, system, historical data, similar bookings, average time, estimated average time"}
{"index": 22, "ucName": "Delete anagrafica laboratory", "uctext": ":\nIt allows the operator to remove the anagrafica of a laboratory analysis.\nIt works for the elimination of data at anagrafica on a laboratory analysis.", "steps": "The operator activates the execution of the elimination of the anagrafica of the laboratory.\n1 View the list of laboratories in the SIO.\n2 Select the laboratory which needs to change the anagrafica.\n3 Confirm your selection.\n4 View the mask to eliminate the anagrafica of the laboratory.\n5 Confirm the delete of laboratory.\n6 Delete the data about anagrafica of laboratory.\n7 Notify that the operation is finished with success.", "dataset": "easyClinic", "act": "activates, View, Select, Confirm, View, Confirm, Delete, Notify", "obj": "operator, execution, elimination, anagrafica, laboratory, list, laboratories, SIO, laboratory(duplicate), mask, delete, data", "pred_steps": "1. Select the \"Anagrafica\" section in the software.2. Search for the specific laboratory analysis record that needs to be removed.3. Select the laboratory analysis record to be deleted.4. Click on the \"Delete\" or \"Remove\" option.5. Confirm the deletion action when prompted.6. Verify that the laboratory analysis record has been successfully removed from the \"Anagrafica\" section.7. End the process.", "pred_act": "Select, Search, select, Click, Confirm, Verify, End\n", "pred_obj": "anagrafica\", software, laboratory analysis record, deletion action"}
{"index": 23, "ucName": "Plans reservations", "uctext": ":\nIt allows the operator to view and print plans of bookings made for each type visit in tabular form", "steps": "The operator activates the execution of service to view and print plans reservations\n1 View a mask to view and print plans reservations\n2 Select the type of visit\n3 Enable \n4 Access to the database and found in the required training\n5 View information obtained", "dataset": "easyClinic", "act": "activates, view, print, select, enable, access, found, view", "obj": "operator, execution of service, plans reservations, mask, type of visit, database, required training, information obtained", "pred_steps": "1. Open the software application.2. Log in with the operator credentials.3. Navigate to the \"Bookings\" section of the application.4. Select the specific type of visit for which plans need to be viewed (e.g., medical check-up, dental appointment).5. Retrieve the booking data for the selected type of visit.6. Display the booking plans in tabular form, including details such as date, time, patient name, and other relevant information.7. Implement a print functionality within the application.8. Allow the operator to select the print option for the displayed booking plans.9. Print the tabular form of booking plans on the designated printer.10. Close the application after viewing and printing the booking plans.11. Log out from the operator account to secure the system.", "pred_act": "Open, Log, Navigate, Select, Retrieve, Display, Implement, Allow, Print, Close, Log\n", "pred_obj": "software application, operator credentials, \"bookings\" section, specific type of visit, booking data, booking plans, date, time, patient name, relevant information, print functionality, print option, designated printer, operator account, system"}
{"index": 24, "ucName": "Inserting doctor anagrafica", "uctext": ":\nIt allows the operator to input the anagrafica of a doctor who works at the outpatient.\nThe Operator is responsible for the input of the doctor anagrafica in the SIO.", "steps": "View the mask for input of needed information\nInsert data of doctor anagrafica\nConfirm input\nVerify the data insert by the operator\nStore data\nNotify that the operation is finished with success\nData entered invalid:\n4.1. Display a message showing the data deemed invalid\n4.2. Take back running from point 1, underpinned the fields of the form with data inserted by the operator", "dataset": "easyClinic", "act": "\"View, Insert, Confirm, Verify, Store, Notify, Display, Take back, output\"", "obj": "Entities/Objects: mask, needed information, data of doctor anagrafica, input, data, operator, operation, message, data deemed invalid, point, fields, form, data inserted by the operator", "pred_steps": "1. Open the software application.2. Navigate to the \"Doctor Anagrafica\" section.3. Click on the \"Add New Doctor\" button.4. Enter the doctor's details in the required fields (e.g., name, contact information, specialization).5. Click on the \"Save\" button to save the doctor's details in the system.6. Verify that the doctor's anagrafica has been successfully added to the SIO.", "pred_act": "Open, Navigate, Click, Enter, Click, Verify\n", "pred_obj": "software application, doctor anagrafica, add new doctor, save, sio"}
{"index": 25, "ucName": "Changing  doctor anagrafica", "uctext": ":\nIt allows the operator to change the anagrafica of a doctor who works at the outpatient. It deals with the modification of data about a doctor anagrafica", "steps": "The operator activates the execution of Chanching service of the doctor anagrafica\n1 View the list of doctors present in the SIO.\n2 Select the anagrafica doctor which change the anagrafica\n3 Confirm the selection\n4 View the mask for changing of the doctor anagrafica\n5 Changing the anagrafica of doctor\n6 Confirm Changes\n7 Verify the data insert by operator\n8 Remember the updates\n9 Notify that the operation is finished with success.", "dataset": "easyClinic", "act": "actions: activates, View, Select, Confirm, Changing, Confirm, Verify, Remember, Notify", "obj": "operator, execution, Chanching service, doctor anagrafica, list of doctors, SIO, anagrafica doctor, mask, data, updates, operation, success", "pred_steps": "1. Select the option to modify doctor information in the system.2. Search for the specific doctor by entering their ID or name.3. Display the current anagrafica data of the selected doctor.4. Edit the anagrafica fields as needed (e.g., name, address, contact information).5. Validate the modified anagrafica data.6. Save the changes to the doctor's profile.7. Display a confirmation message indicating successful modification of the anagrafica data.", "pred_act": "Select, modify, Search, entering, Display, Edit, Validate, Save, Display, indicating\n", "pred_obj": "doctor, id, name, anagrafica, name, address, contact information, anagrafica, anagrafica"}
{"index": 26, "ucName": "Delete doctor anagrafica", "uctext": ":\nIt allows the operator to delete the anagrafica of a doctor who works at the outpatient", "steps": "The operator activates the execution of delete of the register service laboratory\n1 View the list of laboratories that are in the SIO\n2 Select the doctor which changing the anagrafica\n3 Confirm the selection\n4 View the mask to delete the doctor anagrafica\n6 confirm to delete of doctor\n7 Delete the data  about anagrafica of doctor\n8 Notify that the operation is finished with success", "dataset": "easyClinic", "act": "activates, View, Select, Confirm, View, confirm, Delete, Notify", "obj": "operator, execution, delete, register service, laboratory, list, laboratories, SIO, doctor, anagrafica, selection, mask, data", "pred_steps": "1. Operator selects the option to manage doctors' records.2. Operator searches for the doctor's record by name or ID.3. Operator selects the doctor's record to delete.4. System prompts for confirmation to delete the record.5. Operator confirms the deletion.6. System deletes the doctor's record from the system.7. System displays a success message confirming the deletion of the doctor's record.", "pred_act": "selects searches selects prompts confirms deletes displays\n", "pred_obj": "operator, option, doctors' records, doctor's record, name, id, system, confirmation, success message"}
{"index": 27, "ucName": "Validate operator", "uctext": ":\nHe works to perform the functions necessary to authenticate an operator", "steps": "The operator tries to log on system\n1 View the mask for validation of operator\n2 Inserts login and password\n3 Confirm data\n4 verify login and identify password of a operator within the SIO\n5 allows access\n6 View the main mask", "dataset": "easyClinic", "act": "tries, View, Inserts, Confirm, verify, allows, View", "obj": "operator, system, mask, validation, login, password, data, SIO, access, main mask", "pred_steps": "1. User inputs username and password.2. System verifies the credentials.3. If the credentials are valid, the system grants access and logs the operator in.4. If the credentials are invalid, the system displays an error message.5. The operator can now perform authenticated functions.", "pred_act": "inputs verifies grants logs are displays perform\n", "pred_obj": "user, username, password, system, credentials, credentials, system, access, system, error message, operator"}
{"index": 28, "ucName": "Record visit", "uctext": ":\nIt allows the operator to record a visit held in outpatient", "steps": "The operator activates the execution of registration service of a visit\n1 View the mask to record of the visit\n\n2 inputs the neccesary data of the registration of visit\n3 Confirm input\n4 Verify the data inserted by operator\n5 Stores data\n6 Notify the operator that the operation was concluded successfully", "dataset": "easyClinic", "act": "activates, View, inputs, Confirm, Verify, Stores, Notify", "obj": "operator, execution, registration service, visit, mask, record, neccesary data, registration, input, data, operation", "pred_steps": "1. Access the outpatient visit recording feature.2. Enter the patient's details.3. Select the date and time of the visit.4. Record the reason for the visit.5. Enter the diagnosis and treatment provided during the visit.6. Save the visit record.7. Confirm the visit recording process is completed successfully.", "pred_act": "Access, Enter, Select, Record, Enter, Save, Confirm\n", "pred_obj": "outpatient visit recording feature, patient's details, date, time, reason for the visit, diagnosis, treatment, visit record, visit recording process"}
{"index": 29, "ucName": "Changing visit", "uctext": ":\nIt allows the operator to change a visit previously recorded", "steps": "The operator activates the execution of service editing a visit\n1 View the list of visits in chronological order\n2 Select the visit by change\n3 Confirm your selection \n4 View the mask for the modification of a visit\n5 Changing data of the visit\n6 Confirm Changes \n7 Verify the data insert by operator\n8 Remember the updates\n9 Notify to the operator that the operation was concluded successfully", "dataset": "easyClinic", "act": "activates, views, selects, confirms, views, changes, confirms, verifies, remembers, notifies", "obj": "operator, execution, service, visit, list, visits, chronological order, change, selection, mask, modification, data, updates, operation", "pred_steps": "1. Select the \"Visits\" option from the main menu.2. Search and locate the visit that needs to be changed.3. Select the visit to open its details.4. Locate and click on the \"Edit\" or \"Modify\" option.5. Modify the necessary fields or information for the visit.6. Save the changes made to the visit.7. Close the visit details window.8. Verify that the changes are reflected in the visit record.", "pred_act": "Select, Search, locate, Select, open, Locate, click, Modify, Save, Close, Verify, are, reflected\n", "pred_obj": "visits\" option, main menu, visit, \"edit\" or \"modify\" option, fields or information, changes, visit details window, visit record"}
{"index": 0, "ucName": "AuthenticationAdministrator", "uctext": "AuthenticationAdministrator", "steps": "1. Administrator logs in to the system. \n2. The system displays the login form for entering data (user name and password). \n3. The administrator enters the data and submits the authentication request. \n4. The system receives the form, verifies the data and allows the administrator access to the system with the specified access permissions.", "dataset": "eANCI", "act": "logs, displays, enters, submits, receives, verifies, allows", "obj": "Administrator, system, login form, data, user name, password, authentication request, access permissions", "pred_steps": "1. Enter username and password.2. Validate username and password.3. If valid, grant access as an administrator.4. If invalid, display error message and prompt for re-entry of username and password.5. End.", "pred_act": "Enter Validate grant display prompt End\n", "pred_obj": "username, password, access, administrator, error message"}
{"index": 1, "ucName": "LogoutEmployee", "uctext": "LogoutEmployee", "steps": "1. The employee wants to end the work session and clicks on the Logout button. \n2. The system disconnects the employee from the system and returns to the main screen.", "dataset": "eANCI", "act": "\"wants, clicks, disconnects, returns\"", "obj": "employee, work session, Logout button, system, main screen", "pred_steps": "Functional Steps:1. Verify the user is currently logged in as an employee.2. End the current employee session.3. Clear the employee authentication token.4. Redirect the user to the login page.5. Display a confirmation message indicating successful logout.", "pred_act": "Verify, End, Clear, Redirect, Display\n", "pred_obj": "user, employee, employee, employee, user"}
{"index": 2, "ucName": "HowToBecomeAVolunteer", "uctext": "HowToBecomeAVolunteer", "steps": "1. The Citizen accesses this descriptive screen \n2. The system responds to the need by letting him know how to become a Civil Defense volunteer, and of the requirements that the Citizen will necessarily have to meet. \n3. The Citizen takes note of what is written and therefore wishes to access the associated form, and therefore, the use case DownloadModule will be called.", "dataset": "eANCI", "act": "accesses, responds, letting, take note, wishes to access, will be called", "obj": "Citizen, descriptive screen, system, Civil Defense volunteer, requirements, written, associated form, DownloadModule", "pred_steps": "1. User navigates to the volunteer opportunities page.2. User browses through the available volunteer positions.3. User selects a specific volunteer position to learn more about.4. User reviews the requirements and responsibilities of the selected volunteer position.5. User clicks on the \"Apply Now\" button associated with the selected volunteer position.6. User fills out the volunteer application form.7. User submits the completed volunteer application form.8. System confirms receipt of the volunteer application.9. System notifies the user about the status of their application via email or dashboard notification.", "pred_act": "navigates browses selects learns reviews clicks fills submits confirms notifies\n", "pred_obj": "user, volunteer opportunities page, volunteer positions, volunteer position, requirements, responsibilities, \"apply now\" button, volunteer application form, system, receipt, status, email, dashboard notification"}
{"index": 3, "ucName": "Committee", "uctext": "Committee", "steps": "1. The Citizen accesses this service in order to take note of the hierarchical composition of the Civil Defense. \n2. The system responds to the Citizen's curiosity with a screen where there is an organizational chart of the components of the Municipal Civil Defense in accordance with the other governmental institutions in the area according to the law of the Municipal Council approved by all.", "dataset": "eANCI", "act": ",  accesses, take note of, ,  responds, there is", "obj": "Citizen, service, hierarchical composition, Civil Defense, system, curiosity, screen, organizational chart, components, Municipal Civil Defense, governmental institutions, area, law, Municipal Council", "pred_steps": "1. Create a new committee2. Add members to the committee3. Assign roles to committee members4. Set meeting schedule for the committee5. Create agenda for committee meetings6. Conduct committee meetings7. Document meeting minutes8. Review and approve meeting minutes9. Archive committee activities and documents", "pred_act": "CreateAddAssignSetCreateConductDocumentReviewapproveArchive\n", "pred_obj": "committee, members, roles, schedule, agenda, meetings, minutes, activities, documents"}
{"index": 4, "ucName": "DownloadIscription", "uctext": "DownloadIscription", "steps": "1. The Citizen accesses this screen because he/she wants to register for Civil Service. \n2. The system responds with a page where the requesting Citizen can download the form to fill out and submit to the Civil Defense office.", "dataset": "eANCI", "act": ",  accesses, wants, register, ,  responds, can download, fill out, submit", "obj": "Citizen, screen, Civil Service, system, page, form, Civil Defense office", "pred_steps": "1. Display a list of available subscriptions for the user to choose from.2. User selects a subscription to download.3. System verifies the user's eligibility for the selected subscription.4. System prompts the user to confirm the download.5. User confirms the download.6. System initiates the download process for the selected subscription.7. System notifies the user upon successful download completion.8. End of use case.", "pred_act": "Display, selects, download, verifies, prompts, confirm, confirms, initiates, notifies\n", "pred_obj": "list of available subscriptions, user, subscription, system, user's eligibility, download process, use case"}
{"index": 5, "ucName": "DownloadModule", "uctext": "DownloadModule", "steps": "1. The Citizen accesses the download of the form as he/she wants to join Volunteer \n3. \n2. The system responds to this need with the ability to view the form The Citizen acknowledges the form, and decides to start downloading the file. \n4. The system responds to the Citizen's need by saving the form to join the Volunteer Action.", "dataset": "eANCI", "act": "accesses, responds, view, acknowledges, decides, start downloading, responds, saving", "obj": "Citizen, download, form, Volunteer, system, ability, need, file, Volunteer Action", "pred_steps": "1. Display the available modules for download.2. Allow the user to select a module from the list.3. Validate the selected module and check for any dependencies.4. Prompt the user to confirm the download.5. Start the download process for the selected module.6. Display the progress of the download.7. Verify the integrity of the downloaded module.8. Install the downloaded module on the system.9. Display a success message to the user.10. End the use case.", "pred_act": "Display, Allow, select, Validate, check, Prompt, confirm, Start, Display, Verify, Install, Display, End\n", "pred_obj": "modules, user, module, dependencies, download process, progress, integrity, system, success message, use case"}
{"index": 6, "ucName": "ManageModifications", "uctext": "ManageModifications", "steps": "1. The employee after authenticating in the system accesses the Civil Defense feature to edit the relevant forms. \n2. The system responds to this need with the ability to display a screen with the use cases UpdateAtmosphericConditions, UpdateEnvironmentalAnalysis, UpdateCompetitionsBands. \n3. The 'employee selects the feature to be modified. \n4. The system responds to the employee's need with the requested change form.", "dataset": "eANCI", "act": "authenticates, accesses, edit, responds, display, selects, responds", "obj": "employee, system, Civil Defense feature, relevant forms, UpdateAtmosphericConditions, UpdateEnvironmentalAnalysis, UpdateCompetitionsBands, feature, change form", "pred_steps": "1. User selects the \"Manage Modifications\" option from the main menu.2. System displays a list of existing modifications.3. User chooses to add, edit, or delete a modification.4. If user selects to add a modification, system prompts user to enter details such as modification name, description, and other relevant information.5. If user selects to edit a modification, system displays the details of the selected modification for the user to modify.6. If user selects to delete a modification, system asks for confirmation before deleting the selected modification.7. System updates the list of modifications based on the user's actions.8. User can choose to go back to the main menu or exit the application.", "pred_act": "selects displays chooses add edit delete selects prompts enter selects edit displays modify selects delete asks deleting updates choose go exit\n", "pred_obj": "user, manage modifications, system, modification name, description, information, main menu, list of existing modifications, details, confirmation, list of modifications, actions, application"}
{"index": 7, "ucName": "Fires", "uctext": "Fires", "steps": "1. The Citizen can access this section if he or she has chosen to view the Risks use case, and decides to learn more about the possible causes that trigger fires. \n2. The system responds to the Citizen's need with a detailed description of how to prevent fires, and who deals with them.", "dataset": "eANCI", "act": ",  access, choose, view, decide, learn, ,  respond, describe, deal", "obj": "Citizen, Risks use case, possible causes, fires, system, detailed description, how to prevent fires, who deals with them", "pred_steps": "1. Identify the trigger conditions for the fire event.2. Notify the appropriate emergency services.3. Record the location of the fire.4. Display the location of the fire on a map for responders.5. Update the status of the fire in the system.6. Generate notifications to stakeholders.7. Provide updates on the status of the fire as new information becomes available.", "pred_act": "Identify, Notify, Record, Display, Update, Generate, Provide, becomes\n", "pred_obj": "trigger conditions, fire event, emergency services, location, fire, map, responders, status, system, notifications, stakeholders, updates, information"}
{"index": 8, "ucName": "MonitoringIdro-pluviometric", "uctext": "MonitoringIdro-pluviometric", "steps": "1. The Citizen accesses this screen as he wants to satisfy his curiosity in knowing the situation monitored by the Civil Defense of municipal water \n2. The system responds with a screen where he can view information about how the municipal water is being monitored, the bacteriological situation, and an update of the latest analysis performed on the samples taken.", "dataset": "eANCI", "act": ",  accesses, wants, satisfy, knowing, ,  responds, view", "obj": "Citizen, screen, curiosity, situation, Civil Defense, municipal water, system, information, municipal water, bacteriological situation, update, analysis, samples", "pred_steps": "1. Retrieve data from idro-pluviometric sensors.2. Process the sensor data to calculate relevant metrics.3. Compare the calculated metrics with predefined thresholds.4. Generate alerts if any metric surpasses the threshold.5. Display the sensor data and generated alerts in the monitoring dashboard.6. Provide the option to export sensor data and alerts for further analysis.7. Allow users to configure threshold values for different metrics.8. Enable users to acknowledge and resolve alerts from the dashboard.", "pred_act": "Retrieve, Process, Calculate, Compare, Generate, Surpasses, Display, Provide, Export, Allow, Configure, Enable, Acknowledge, Resolve\n", "pred_obj": "idro-pluviometric sensors, sensor data, metrics, thresholds, alerts, monitoring dashboard, users"}
{"index": 9, "ucName": "MonitoringVulcanic", "uctext": "MonitoringVulcanic", "steps": "1. The Citizen accesses this screen as he or she wants to know more about how the Civil Defense actually performs monitoring of volcanoes in the municipality and nationwide territory, with a detailed description of the information technologies adopted. \n2. The system responds to the request by displaying an information sheet describing everything the Civil Defense does to keep track of volcanic activity.", "dataset": "eANCI", "act": "accesses, responds, displaying, describing, keeps, track", "obj": "Citizen, screen, Civil Defense, volcanoes, municipality, nationwide territory, information technologies, system, request, information sheet, volcanic activity", "pred_steps": "1. Retrieve data from Vulcanic activity monitoring sensors.2. Analyze the data for any abnormal patterns or anomalies.3. If abnormal patterns are detected, raise an alert for further investigation.4. Notify designated personnel about the alert.5. Record the details of the alert in the system log.6. Continuously monitor the Vulcanic activity data.7. Update the monitoring dashboard in real-time with the latest data.8. Generate reports on Vulcanic activity trends and anomalies for analysis.9. Provide historical data for reference and comparison purposes.", "pred_act": "Retrieve, Analyze, detected, raise, Notify, Record, monitor, Update, Generate, Provide\n", "pred_obj": "vulcanic activity monitoring sensors, data, abnormal patterns, anomalies, alert, personnel, system log, monitoring dashboard, reports, vulcanic activity trends, historical data"}
{"index": 10, "ucName": "UsefulNumbers", "uctext": "UsefulNumbers", "steps": "1. The Citizen accesses this page to take advantage of the telephone contact information to contact in case of danger of any kind. \n2. The system responds by allowing the display of a descriptive card with the telephone numbers of the agencies concerned with the safety of the Citizen himself. \n3. The Citizen by accessing this screen can, in addition, view advice, and standard procedures, divided into categories, about the correct communication between him and the Call Center contact person of a given municipal body. \n4. The system responds with an emergency support screen corresponding to the service the Citizen decides to contact.", "dataset": "eANCI", "act": ",  accesses, take advantage, contact, ,  responds, allows, display, ,  accessing, can view, ,  responds, decides to contact", "obj": "Citizen, page, telephone contact information, system, descriptive card, telephone numbers, agencies, safety, screen, advice, standard procedures, categories, communication, Call Center contact person, municipal body, emergency support screen, service", "pred_steps": "Functional Steps:1. Identify the useful numbers required by the user.2. Create a list of useful numbers based on the user's needs.3. Allow the user to add, edit, or delete useful numbers from the list.4. Provide a search functionality for the user to easily find specific useful numbers.5. Implement a feature to categorize useful numbers for better organization.6. Ensure the list of useful numbers can be easily accessed and viewed by the user.7. Allow the user to set preferences for how the useful numbers are displayed.8. Provide the option for the user to export the list of useful numbers for backup or sharing purposes.", "pred_act": "Identify, required, Create, needs, Allow, add, edit, delete, Provide, find, Implement, categorize, Ensure, accessed, viewed, Allow, set, Provide, export\n", "pred_obj": "useful numbers, user"}
{"index": 11, "ucName": "CivilProtection", "uctext": "CivilProtection", "steps": "1. The citizen accesses the descriptive sheet about general information about the municipal body in question. \n2. The system responds to the information functionality, allowing the display of a description about the active roles played by the Civil Protection.", "dataset": "eANCI", "act": ",  accesses, responds, allows, display, ,  responds, allows, display", "obj": "citizen, descriptive sheet, general information, municipal body, system, information functionality, description, active roles, Civil Protection", "pred_steps": "Functional Steps:1. Receive emergency alert from a user.2. Verify the location and nature of the emergency.3. Dispatch the appropriate emergency response team.4. Notify the user that help is on the way.5. Monitor the progress of the response team.6. Update the user on the status of the emergency response.7. Close the emergency alert once the situation is resolved.", "pred_act": "Receive, Verify, Dispatch, Notify, Monitor, Update, Close\n", "pred_obj": "emergency alert, user, location, nature of the emergency, emergency response team, user, response team, user, emergency response, emergency alert, situation"}
{"index": 12, "ucName": "EditCitizen", "uctext": "EditCitizen", "steps": "1. The employee presses the edit citizen button. \n2. The system displays a form for editing the citizen. \n3. The clerk enters the data. \n4. The system saves the changes made.", "dataset": "eANCI", "act": "presses, displays, enters, saves", "obj": "employee, edit citizen button, system, form, clerk, data, changes", "pred_steps": "1. User accesses the citizen information to be edited.2. System displays the current citizen details for editing.3. User modifies the desired citizen information.4. System validates the edited information.5. If validation is successful, system saves the edited citizen information.6. If validation fails, system prompts user to correct the errors.7. User makes necessary corrections and resubmits the edited information.8. System saves the corrected citizen information.9. System confirms successful editing of citizen information.10. Use case concludes.", "pred_act": "accesses, displays, modifies, validates, saves, prompts, makes, resubmits, saves, confirms, concludes\n", "pred_obj": "user, citizen information, system"}
{"index": 13, "ucName": "Waste", "uctext": "Waste", "steps": "1. The Citizen accesses the fact sheet because he wants to know the actual waste situation in his municipality, and whether of course, the environment is protected by the Civil Defense with the help of municipal agencies. \n2. The system responds to this need with a large and descriptive screen where the goals of the Municipal Council and informative notes on the dangers of waste fires are pointed out, and what kind of waste collection is in your municipality. In addition, you can view the use case ViewResultsToxicologicalAmbiental i.", "dataset": "eANCI", "act": "\"accesses, responds, points out, can view\"", "obj": "Citizen, fact sheet, waste situation, municipality, environment, Civil Defense, municipal agencies, system, large and descriptive screen, goals of the Municipal Council, informative notes, dangers of waste fires, waste collection, ViewResultsToxicologicalAmbiental", "pred_steps": "1. User opens the waste management application.2. User selects the option to add a new waste item.3. User inputs the type of waste (e.g. plastic, paper, glass).4. User inputs the quantity or weight of the waste item.5. User selects the disposal method for the waste item (e.g. recycle, compost, landfill).6. User confirms the inputted information and submits the waste item.7. System stores the waste item information in the database.8. System displays a confirmation message to the user.9. User has the option to add another waste item or to exit the application.", "pred_act": "opens selects inputs inputs selects confirms submits stores displays add exit\n", "pred_obj": "user, waste management application, waste item, type of waste, quantity, weight, disposal method, system, database, confirmation message"}
{"index": 14, "ucName": "Hazards", "uctext": "Hazards", "steps": "1. The Citizen accesses the screen about the meanings of the hazards Civil Defense deals with, with specific images for each category of hazard, and videos of how it operates during rescue operations. \n2. The system responds to the Citizen's request, with a screen where there are causes, meanings, about landslides, floods, and coastal erosion phenomena, and videos of interventions. \n3. The Citizen, after viewing the descriptive sheet may want to know the causes of other hazards that the body deals with, and therefore decides to view them by activating, the use cases Fire, Volcanic, Seismic, SanitaryAntropic,Hydrological monitoring. \n4. The system also makes available additional fact sheets on other hazards that Civil Defense deals with.", "dataset": "eANCI", "act": "accesses, responds, may want, decides to view, activating, makes available", "obj": "Citizen, screen, meanings, hazards, Civil Defense, images, category, videos, rescue operations, system, request, causes, landslides, floods, coastal erosion phenomena, interventions, descriptive sheet, body, Fire, Volcanic, Seismic, SanitaryAntropic, Hydrological monitoring, additional fact sheets, other hazards", "pred_steps": "1. Identify potential hazards based on user input or system monitoring.2. Categorize hazards based on their nature and impact.3. Evaluate the severity and likelihood of each identified hazard.4. Determine the necessary actions to mitigate or eliminate the hazards.5. Implement safety measures or warnings to alert users about the hazards.6. Test the hazard detection and response functionality to ensure effectiveness.7. Continuously monitor and update the hazard database to adapt to evolving risks.", "pred_act": "Identify, Categorize, Evaluate, Determine, Implement, Test, Monitor, Update\n", "pred_obj": "potential hazards, user input, system monitoring, hazards, their nature, impact, severity, likelihood, each identified hazard, necessary actions, hazards, safety measures, warnings, users, hazards, hazard detection, response functionality, effectiveness, hazard database, risks"}
{"index": 15, "ucName": "SanitaryAntropic", "uctext": "SanitaryAntropic", "steps": "1. The Citizen accesses the desired screen from the list of environmental hazards that is next to each description of those hazards. \n2. The system responds to the Citizen's request by providing a detailed explanation of what this use case means in practical terms, and distributing advice and standard procedures in case of hazards.", "dataset": "eANCI", "act": ",  \"accesses, is\", ,  \"responds, providing, distributing\"", "obj": "Citizen, screen, list, environmental hazards, description, hazards, system, request, detailed explanation, use case, practical terms, advice, standard procedures", "pred_steps": "1. User opens the SanitaryAntropic application.2. User selects the option to create a new project.3. User enters the project details such as project name, location, and other relevant information.4. User adds a new task within the project.5. User specifies the task details including task description, priority, and deadline.6. User assigns the task to team members involved in the project.7. User sets reminders or notifications for the task if needed.8. User marks the task as complete once it is finished.9. User can also edit or delete tasks as necessary.10. User saves the project and exits the application.", "pred_act": "opens, selects, enters, adds, specifies, assigns, sets, marks, edit, delete, saves, exits\n", "pred_obj": "sanitaryantropic application, project, new project, project details, project name, location, information, task, project, task details, task description, priority, deadline, task, team members, project, reminders, notifications, task, task, tasks, project, application"}
{"index": 16, "ucName": "Civil Service", "uctext": "Civil Service", "steps": "1. The Citizen accesses this section to get information about his or her usefulness to others. \n2. The system responds with a screen display where it clarifies the goals of civil service, general information, and the ability to call the DownloadIscription use case.", "dataset": "eANCI", "act": ",  accesses, gets, ,  responds, clarifies, call", "obj": "Citizen, section, information, usefulness, system, screen display, goals, civil service, general information, ability, DownloadIscription use case", "pred_steps": "1. Gather requirements and documentation for civil service examination2. Create a registration portal for candidates to sign up for the exam3. Develop a system to verify candidate eligibility based on set criteria4. Implement an exam scheduling feature for candidates to choose their preferred exam date and location5. Design and develop the exam content and format6. Create an online platform for candidates to take the exam7. Develop a grading system to evaluate candidate performance8. Generate and distribute exam results to candidates9. Provide a feedback mechanism for candidates to review their performance10. Maintain the system and update it as necessary to meet changing requirements.", "pred_act": "Gather, documentation, Create, sign, Develop, verify, Implement, choose, Design, develop, Create, take, Develop, evaluate, Generate, distribute, Provide, review, Maintain, update, meet\n", "pred_obj": "requirements, documentation, civil service examination, registration portal, candidates, exam, system, candidate eligibility, criteria, exam scheduling feature, date, location, exam content, format, online platform, grading system, candidate performance, exam results, feedback mechanism, system, changing requirements"}
{"index": 17, "ucName": "Seismic", "uctext": "Seismic", "steps": "1. The Citizen accesses the descriptive screen of how seismic monitoring of the territory takes place and the possibility of acquiring information about the causes of an earthquake, and the measurement and prevention technologies used by the specialists of the operational core. \n2. The system responds by providing the Citizen with the opportunity to view in an always descriptive manner, the characteristics of the instruments, the work done by the specialists, and the national bodies with which they collaborate.", "dataset": "eANCI", "act": ",  accesses, acquiring, view, ,  responds, providing, view, collaborate", "obj": "Citizen, descriptive screen, seismic monitoring, territory, causes of an earthquake, measurement technologies, prevention technologies, specialists, operational core, system, opportunity, characteristics of the instruments, work, national bodies", "pred_steps": "1. Collect seismic data from sensors.2. Preprocess the data to clean and organize it.3. Analyze the data to detect any seismic events or anomalies.4. Identify the location and magnitude of the seismic event.5. Generate a report with the analysis results.6. Notify relevant stakeholders about the detected seismic event.7. Store the data and analysis results for future reference.", "pred_act": "Collect, Preprocess, Analyze, Identify, Generate, Notify, Store\n", "pred_obj": "seismic data, sensors, data, data, seismic events, anomalies, location, magnitude, seismic event, report, analysis results, stakeholders, seismic event, data, analysis results"}
{"index": 18, "ucName": "ViewEnvironmentalToxicologicalResults", "uctext": "ViewEnvironmentalToxicologicalResults", "steps": "1. The Citizen accesses this tab in order to be personally aware of the environmental situation in the municipality in which he or she resides, whether it is being kept under control, and what values are at risk and why this situation exists. \n2. The system responds with a descriptive screen about the toxicological values received from the chemical and toxicological analyses carried out by the Civil Defense on the environment and municipal land.", "dataset": "eANCI", "act": ",  accesses, be aware, ,  responds", "obj": "Citizen, tab, environmental situation, municipality, toxicological values, chemical analyses, toxicological analyses, Civil Defense, environment, municipal land", "pred_steps": "1. User selects the option to view environmental toxicological results.2. System retrieves the relevant data related to environmental toxicological results.3. System displays the environmental toxicological results to the user.4. User reviews the results and may choose to print or save the data if necessary.5. The use case ends.", "pred_act": "selects, retrieves, displays, reviews, choose, print, save ends\n", "pred_obj": "user, system"}
{"index": 19, "ucName": "Volunteerism", "uctext": "Volunteerism", "steps": "1. The Citizen accesses the introductory screen. \n2. The system responds by displaying the descriptive tab about general information about this aspect of Civil Defense, and the possibility of knowing the prerequisites for participation. \n3. The Citizen becomes aware of what is written, and therefore selects the link where the use case ComeBecomeVolunteer is called. \n4. The system responds by allowing him to view this description.", "dataset": "eANCI", "act": "accesses, responds, displays, becomes aware, selects, allows, view", "obj": "Citizen, introductory screen, system, descriptive tab, general information, Civil Defense, prerequisites for participation, link, use case ComeBecomeVolunteer, description", "pred_steps": "1. User logs into the system.2. User navigates to the \"Volunteerism\" section.3. User views available volunteering opportunities.4. User selects a volunteering opportunity.5. User views details of the selected opportunity.6. User signs up for the volunteering opportunity.7. System confirms the user's registration for the opportunity.8. User logs out of the system.", "pred_act": "logs,navigates,views,selects,views,signs,confirms,logs\n", "pred_obj": "user, system"}
{"index": 20, "ucName": "Volcanic", "uctext": "Volcanic", "steps": "1. The Citizen accesses this tab, from the Risks use case if he wants to know more, about the volcanic situation in his municipality, and the possibility of viewing the Civil Defense monitoring methods. \n2. The system responds with the correct display of a descriptive screen about the different types of eruptions of a volcano, making available, the possibility to view the current volcanic situation of the municipality. \n3. The Citizen wants to know how the present volcanoes are being monitored, and therefore, will invoke the MonitoraggioVulcanico use case \n4. The system provides the Citizen with a link to the MonitoraggioVulcanico use case, so that he or she can learn about the actual situation.", "dataset": "eANCI", "act": "\"accesses, responds, wants, will invoke, provides\"", "obj": "Citizen, Risks use case, volcanic situation, municipality, Civil Defense monitoring methods, system, descriptive screen, different types of eruptions, volcano, current volcanic situation, MonitoraggioVulcanico use case, link, actual situation", "pred_steps": "1. Capture user input for volcano name and location.2. Validate the input data to ensure it meets the required format.3. Query a database or external service to retrieve information about the specified volcano.4. Display the relevant information (e.g., location, elevation, recent activity) to the user.5. Allow the user to search for another volcano or exit the application.", "pred_act": "Capture, Validate, Query, retrieve, Display, Allow, search, exit\n", "pred_obj": "volcano name, location, input data, database, external service, information, user, location, elevation, recent activity, user, volcano, application"}
{"index": 21, "ucName": "CalculateAmount", "uctext": "CalculateAmount", "steps": "1. The Citizen presses the button related to the tax calculation function. \n2. The System presents the list of fees and taxes for which the amount can be calculated. \n3. The Citizen selects the tax of interest. \n4. The System shows a form to be filled in for calculation. \n5. The Citizen enters the necessary data. \n6. The System verifies the correctness of the data,computes the amount and shows it to the Citizen.", "dataset": "eANCI", "act": "presses, presents, selects, shows, enters, verifies, computes, shows", "obj": "Citizen, button, tax calculation function, System, list of fees and taxes, tax of interest, form, necessary data, amount", "pred_steps": "1. Receive input values for quantity and price.2. Calculate the total amount by multiplying the quantity with the price.3. Apply any applicable discounts to the total amount.4. Display the final calculated amount to the user.", "pred_act": "Receive, Calculate, multiplying, Apply, Display\n", "pred_obj": "input values, quantity, price, total amount, discounts, final calculated amount, user"}
{"index": 22, "ucName": "CalculateImportUnful", "uctext": "CalculateImportUnful", "steps": "1. The Citizen presses the button related to the tax calculation function. \n2. The System presents the list of taxes and fees for which the amount can be calculated. \n3. The Citizen selects the tax of interest. \n4. The System shows a form to be filled in for calculation. \n5. The Citizen enters the necessary data. \n6. The System verifies the correctness of the data but fails to perform the calculation, notifying the user of the reason for failure.", "dataset": "eANCI", "act": "presses, presents, selects, shows, enters, verifies, notifies, fails", "obj": "Citizen, button, tax calculation function, System, list, taxes, fees, amount, tax of interest, form, data, correctness, reason for failure", "pred_steps": "1. Receive input file containing a list of imported items with their quantities and prices.2. Parse the input file to extract the necessary information for calculation.3. Calculate the total import value for each item by multiplying the quantity with the price.4. Sum up the total import values of all items to get the overall import value.5. Apply any applicable taxes or duties to the total import value.6. Generate a report showing the breakdown of import values, taxes, and the final total amount to be paid.7. Display the report to the user or save it to a specified output file.", "pred_act": "Receive, Parse, extract, Calculate, multiplying, Sum, Apply, Generate, showing, Display, save\n", "pred_obj": "input file, imported items, quantities, prices, total import value, item, quantity, price, total import values, items, overall import value, taxes, duties, report, import values, final total amount, user, output file"}
{"index": 23, "ucName": "EditEMailAdministrator", "uctext": "EditEMailAdministrator", "steps": "1. Administrator accesses the email edit form. \n2. The system shows the form the enter the new e-mail. \n3. The administrator enters the new email and presses the confirmation button. \n4. The system updates the new email.", "dataset": "eANCI", "act": "accesses, shows, enters, presses, updates", "obj": "Administrator, email edit form, system, form, new e-mail, administrator, new email, confirmation button, system, new email", "pred_steps": "1. Display the list of email administrators.2. Select the email administrator to be edited.3. Retrieve the existing details of the selected email administrator.4. Allow the user to make changes to the email administrator's details (e.g., name, email address, permissions).5. Validate the changes made by the user.6. Update the email administrator's details in the system.7. Display a success message indicating that the email administrator has been successfully edited.", "pred_act": "Display Select Retrieve Allow make Validate Update Display indicating edited\n", "pred_obj": "email administrators, email administrator, details, name, email address, permissions, user, system, message"}
{"index": 24, "ucName": "Dispute Fine", "uctext": "Dispute Fine", "steps": "1. The Citizen clicks on the button to access the online fine management feature. \n2. The System redirects the Citizen to the desired section. \n3. The Citizen clicks on the online fine payment button. \n4. The System searches for fines against the Citizen in the database for which payment has not yet been received. \n5. The Citizen selects the fine for which he/she wishes to make a dispute. \n6. The System displays all available information related to the fine, as well as the form to be filled in for the dispute. \n7. The Citizen enters the necessary information. \n8. The System verifies that the information is correct, forwards the dispute request to the appropriate person and notifies the Citizen.", "dataset": "eANCI", "act": "clicks, redirects, clicks, searches, selects, displays, enters, verifies, forwards, notifies", "obj": "Citizen, button, online fine management feature, System, desired section, online fine payment button, fines, database, payment, fine, dispute, information, form, necessary information, appropriate person, notification", "pred_steps": "1. User clicks on \"Dispute Fine\" option in the application.2. System presents a form for the user to fill out with details of the fine to be disputed.3. User enters relevant information such as fine ID, reason for dispute, evidence supporting the dispute.4. User submits the dispute form.5. System validates the information provided in the form.6. If information is valid, system notifies the relevant authorities about the dispute.7. System updates the status of the fine as \"Under Dispute.\"8. System sends a notification to the user confirming the dispute submission.9. If information is invalid, system prompts the user to correct the errors.10. System logs the dispute attempt for auditing purposes.", "pred_act": "clicks presents fill enters submits validates notifies updates sends confirms prompts corrects logs\n", "pred_obj": "user, application, system, user, system, system, system, system, system, user, system"}
{"index": 25, "ucName": "ICI", "uctext": "ICI", "steps": "1. The Citizen clicks on the button to access the Online Tax Payment area. \n2. The System displays the list of taxes that can be paid online. \n3. The Citizen selects the section dedicated to Municipal Property Tax and its payment. \n4. The System redirects the Citizen to the necessary section, showing the form of the relevant tax and the relevant amount to be paid. \n5. The Citizen confirms the correctness of the information and initiates the transaction, selecting the preferred payment method. \n6. The System performs the transaction and displays a successful payment message.", "dataset": "eANCI", "act": "clicks, displays, selects, redirects, shows, confirms, initiates, selects, performs, displays", "obj": "Citizen, button, Online Tax Payment area, System, list of taxes, Municipal Property Tax, payment, necessary section, form, relevant tax, relevant amount, information, transaction, preferred payment method, successful payment message", "pred_steps": "1. Start the application.2. Log in to the system with valid credentials.3. Navigate to the \"ICI\" feature.4. Enter the required information or select options as specified in the use case.5. Click on the submit button.6. Validate the input data for correctness.7. Process the information as per the use case requirements.8. Display results or perform the specified actions.9. End the use case by logging out or returning to the main menu.", "pred_act": "Start, Log, Navigate, Enter, select, Click, Validate, Process, Display, perform, End, logging, returning\n", "pred_obj": "application, system, ici, information, options, use case, submit button, input data, information, use case, results, actions, use case, menu"}
{"index": 26, "ucName": "IPPA", "uctext": "IPPA", "steps": "1. The Citizen clicks on the button to access the Online Tax Payment area. \n2. The System displays the list of fees that can be paid online. \n3. The Citizen selects the section dedicated to 'Advertising and Public Display Tax and its payment and enters the file code. \n4. The System redirects the Citizen to the necessary section, showing the form of the relevant tax and the relevant amount to be paid. \n5. The Citizen confirms that the information is correct, selects the preferred payment method and initiates the transaction. \n6. The System performs the transaction and displays a successful payment message.", "dataset": "eANCI", "act": "clicks, displays, selects, enters, redirects, shows, confirms, initiates, performs, displays", "obj": "Citizen, button, Online Tax Payment area, System, list of fees, Advertising and Public Display Tax, payment, file code, necessary section, form, relevant tax, relevant amount, information, preferred payment method, transaction, successful payment message", "pred_steps": "1. Login to the system.2. Access the IPPA feature.3. Enter the relevant project details.4. Define the project goals and objectives.5. Input the key performance indicators (KPIs) for the project.6. Select the appropriate assessment criteria.7. Analyze the project performance based on the defined KPIs and assessment criteria.8. Generate reports on the project performance.9. Review and validate the reports.10. Make data-driven decisions and take necessary actions based on the analysis of the project performance.11. Log out of the system.", "pred_act": "Login, Access, Enter, Define, Input, Select, Analyze, Generate, Review, Validate, Make, take, Log\n", "pred_obj": "system, ippa feature, project details, project goals and objectives, key performance indicators (kpis), assessment criteria, project performance, reports, decisions, actions"}
{"index": 27, "ucName": "IRPEF", "uctext": "IRPEF", "steps": "1. The Citizen clicks on the button to access the Online Tax Payment area. \n2. The System displays the list of taxes that can be paid online. \n3. The Citizen selects the section dedicated to Personal Income Tax and its payment. \n4. The System redirects the Citizen to the necessary section, showing the form of the relevant tax and the relevant amount to be paid. \n5. The Citizen confirms the correctness of the information, selects the preferred payment method and initiates the transaction. \n6. The System performs the transaction and displays a successful payment message.", "dataset": "eANCI", "act": "clicks, displays, selects, redirects, confirms, initiates, performs, displays", "obj": "Citizen, button, Online Tax Payment area, System, list of taxes, Personal Income Tax, payment, necessary section, form, relevant tax, relevant amount, information, preferred payment method, transaction, successful payment message", "pred_steps": "1. Collect user's personal information.2. Gather user's income details and deductions.3. Calculate taxable income based on the information provided.4. Apply tax rates to taxable income to determine income tax amount.5. Deduct any applicable tax credits.6. Generate the IRPEF tax report for the user.7. Display the total income tax amount to the user.8. Allow the user to save or print the tax report.", "pred_act": "Collect, Gather, Calculate, Apply, Deduct, Generate, Display, Allow, save, print\n", "pred_obj": "user's personal information, user's income details, deductions, taxable income, information, tax rates, income tax amount, tax credits, irpef tax report, user, total income tax amount, user, tax report"}
{"index": 28, "ucName": "Forms", "uctext": "Forms", "steps": "1. The Citizen clicks on the button to access forms section. \n3. \n2. The System redirects the Citizen to the required section and displays the various forms available for download. The Citizen selects the desired form. \n4. The System starts the download.", "dataset": "eANCI", "act": "clicks, redirects, displays, selects, starts", "obj": "Citizen, button, forms section, System, required section, various forms, desired form, download", "pred_steps": "1. Identify the required fields for the form.2. Design the user interface for the form.3. Implement input validation for each field.4. Implement functionality to save the form data.5. Implement functionality to edit/update form data.6. Implement functionality to delete form data.7. Implement functionality to view form data.8. Test the form to ensure all functionalities work as expected.", "pred_act": "Identify, Design, Implement, Implement, Implement, Implement, Implement, Test\n", "pred_obj": "fields, user interface, input validation, form data, form data, form data, form data, form"}
{"index": 29, "ucName": "PaymentFines", "uctext": "PaymentFines", "steps": "1. The Citizen clicks on the button to access the online fine management feature. \n2. The System redirects the Citizen to the desired section. \n3. The Citizen clicks on the button to pay fines online. \n4. The System searches for fines against the Citizen in the database for which payment has not yet been received. \n5. The Citizen selects the fine for which he/she wishes to make payment. \n6. The System displays the fine form and the relevant amount to be paid. \n7. The Citizen verifies that the information is correct and initiates the transaction, selecting the preferred payment method. \n8. The System performs the transaction and displays a successful payment message.", "dataset": "eANCI", "act": "clicks, redirects, clicks, searches, selects, displays, verifies, initiates, selects, performs, displays", "obj": "Citizen, button, online fine management feature, System, desired section, fines, database, fine, fine form, relevant amount, information, transaction, preferred payment method, successful payment message", "pred_steps": "1. User selects the option to pay fines from the main menu.2. System displays a list of fines associated with the user's account.3. User selects the fine they wish to pay.4. System prompts the user to enter their payment details.5. User enters their payment information such as credit card number and expiry date.6. System verifies the payment information for validity.7. If the payment information is invalid, system displays an error message and prompts the user to enter valid payment information.8. If the payment information is valid, system processes the payment.9. System updates the status of the fine to \"paid\".10. System sends a confirmation email to the user with details of the payment.11. System displays a confirmation message to the user that the payment was successful.", "pred_act": "selects, displays, selects, prompts, enters, verifies, displays, prompts, processes, updates, sends, displays\n", "pred_obj": "user, option, main menu, system, list, fines, account, fine, payment details, payment information, credit card number, expiry date, error message, status, confirmation email, confirmation message, payment"}
{"index": 30, "ucName": "PaymentUnsuccessful", "uctext": "PaymentUnsuccessful", "steps": "1. The Citizen clicks on the button to access the Online Payment area of taxes or fines. \n2. The System displays the list of taxes/fines that can be paid online. \n3. The Citizen selects the tax/fine of interest \n5. \n4. The System redirects the Citizen to the necessary section, showing the form to the Citizen. The Citizen initiates the transaction. \n6. The System does not allow the transaction because there were problems with the selected payment method.", "dataset": "eANCI", "act": "clicks, displays, selects, redirects, initiates, does not allow", "obj": "Citizen, button, Online Payment area, taxes, fines, System, list, tax/fine, section, form, transaction, payment method", "pred_steps": "1. Display error message for unsuccessful payment.2. Provide option to retry payment.3. Allow user to update payment information.4. Verify payment details and retry payment.5. If payment is still unsuccessful, prompt user to contact customer support.6. Log unsuccessful payment transaction for reference.", "pred_act": "Display, Provide, Allow, Verify, retry, is, prompt, contact, Log\n", "pred_obj": "error message, unsuccessful payment, option, retry payment, user, payment information, payment details, user, customer support, unsuccessful payment transaction"}
{"index": 31, "ucName": "SearchVerbaliMulte", "uctext": "SearchVerbaliMulte", "steps": "1. The Citizen clicks on the button to access the online fine management feature. \n3. \n2. The System redirects the Citizen to the desired section. The Citizen clicks on the button to search for fines (only charged to him/her). \n4. The System searches for the citizen's charge fines (paid and unpaid) in the database and displays them in a list in which you can browse to show all available information for a given fine.", "dataset": "eANCI", "act": "\"clicks, redirects, clicks, searches, displays, browse, show\"", "obj": "Citizen, button, online fine management feature, System, desired section, fines, charge fines, database, list, information, given fine", "pred_steps": "1. Display search bar for users to enter search query2. Validate the search query to ensure it is not empty3. Submit the search query to the system4. Retrieve VerbaliMulte records matching the search query5. Display the search results to the user6. Allow the user to view or interact with the search results", "pred_act": "DisplayenterValidateensureSubmitRetrieveDisplayAllowviewinteract\n", "pred_obj": "search bar, users, search query, system, verbalimulte records, search results"}
{"index": 32, "ucName": "RequestIPPA", "uctext": "RequestIPPA", "steps": "1. The Citizen clicks on the button to access the municipality's service request area. \n2. The System redirects the Citizen to the necessary section. \n3. The Citizen selects the section dedicated to the Advertising and Public Display Tax request. \n4. The System displays the form of the relevant request,automatically obtaining the necessary data. \n5. The Citizen enters additional data necessary for correct completion of the form,confirms the correctness of the information and sends the request. \n6. The System notifies the employee of the request.", "dataset": "eANCI", "act": "clicks, redirects, selects, displays, enters, confirms, sends, notifies", "obj": "Citizen, button, municipality's service request area, System, necessary section, Advertising and Public Display Tax request, form, relevant request, necessary data, additional data, employee, request", "pred_steps": "1. User selects the \"Request IPPA\" option in the software interface.2. User enters the required information for the IPPA request, including project details and contact information.3. System validates the entered information for completeness and correctness.4. System generates an IPPA request document based on the entered information.5. User reviews the generated IPPA request document and confirms submission.6. System saves the IPPA request document in the database.7. System notifies the relevant stakeholders about the new IPPA request.8. Use case \"RequestIPPA\" is successfully completed.", "pred_act": "selects, enters, validates, generates, reviews, confirms, saves, notifies, completed\n", "pred_obj": "user, system, ippa request"}
{"index": 33, "ucName": "RequestIPPAAccepted", "uctext": "RequestIPPAAccepted", "steps": "1. \n3. The Clerk displays the notification received. \n2. The System shows the Clerk the request made by the citizen. The Clerk certifies the validity of the request by checking the accuracy of the data and enables the bureaucratic procedure for requesting the service. \n4. The System sends a confirmation e-mail to the citizen who requested the service.", "dataset": "eANCI", "act": "displays, shows, certifies, checking, enables, sends", "obj": "Clerk, notification, System, request, citizen, data, bureaucratic procedure, service, confirmation e-mail", "pred_steps": "1. User submits a request for IPPA acceptance.2. System verifies the user's credentials and permissions.3. System checks if the request meets the IPPA acceptance criteria.4. If the request meets the criteria, system accepts the IPPA.5. System sends a notification to the user confirming the acceptance.6. If the request does not meet the criteria, system rejects the request.7. System logs the request outcome for audit purposes.", "pred_act": "submits verifies checks meets accepts sends meets rejects logs\n", "pred_obj": "user, ippa, system"}
{"index": 34, "ucName": "EditEMailCitizen", "uctext": "EditEMailCitizen", "steps": "1. Citizen accesses the edit e- mail form. \n3. \n2. The system shows the form the enter the new e-mail. The citizen enters the new email and presses the confirmation button. \n4. The system updates the new e-mail.", "dataset": "eANCI", "act": "accesses, shows, enters, presses, updates", "obj": "Citizen, edit e-mail form, system, form, new e-mail, confirmation button", "pred_steps": "1. Display the current email address of the citizen.2. Provide an option to edit the email address.3. Allow the user to modify the email address.4. Validate the new email address format.5. Save the updated email address in the system.6. Display a success message indicating that the email address has been updated.", "pred_act": "Display, Provide, Allow, modify, Validate, Save, Display, indicating\n", "pred_obj": "current email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address,email address"}
{"index": 35, "ucName": "RequestIPPARified", "uctext": "RequestIPPARified", "steps": "1. \n3. The Clerk displays the received notification. \n2. The System shows the Clerk the request made by the citizen. The Clerk reveals an error in the request and rejects the procedure the request. \n4. The System sends a notification to the citizen who requested the service.", "dataset": "eANCI", "act": "\"displays, shows, reveals, rejects, sends\"", "obj": "Clerk, notification, System, request, citizen, error, procedure, service", "pred_steps": "1. User submits a request for an IPPARified document.2. System validates the request and checks for any required permissions.3. System identifies the specific criteria for IPPARification based on the request.4. System retrieves the document referred to in the request.5. System processes the document to apply IPPARification based on the identified criteria.6. System stores the IPPARified document in the appropriate location.7. System sends a notification to the user confirming the IPPARification process is completed.8. Use case ends.", "pred_act": "submits validates checks identifies retrieves processes stores sends ends\n", "pred_obj": "user, system, ipparified document, request, permissions, criteria, document, ipparification, location, notification, use case"}
{"index": 36, "ucName": "RequestTOSAP", "uctext": "RequestTOSAP", "steps": "1. The Citizen clicks on the button to access the municipality's service request area. \n2. The System redirects the Citizen to the necessary section. \n3. The Citizen selects the section dedicated to the request for Tax for the Occupation of Public Land and Areas. \n4. The System displays the relevant request form,automatically obtaining the necessary data. \n5. The Citizen enters additional data necessary for the correct completion of the form,confirms the correctness of the information and sends the request. \n6. The System notifies the employee of the request.", "dataset": "eANCI", "act": "clicks, redirects, selects, displays, enters, confirms, sends, notifies", "obj": "Citizen, button, municipality's service request area, System, necessary section, section, request, Tax for the Occupation of Public Land and Areas, relevant request form, necessary data, additional data, form, information, request, employee", "pred_steps": "1. User selects the \"Request TOSAP\" option.2. System prompts the user to input necessary information.3. User provides the required information.4. System validates the information provided by the user.5. System generates a TOSAP request based on the validated information.6. System sends the TOSAP request to the appropriate destination.7. System notifies the user that the TOSAP request has been successfully sent.", "pred_act": "selects prompts input provides validates generates sends notifies\n", "pred_obj": "user, system, tosap, information, destination"}
{"index": 37, "ucName": "RequestTOSAPAccepted", "uctext": "RequestTOSAPAccepted", "steps": "1. \n3. The Clerk displays the notification received. \n2. The System shows the Clerk the request made by the citizen. The Clerk certifies the validity of the request by checking the accuracy of the data and enables the bureaucratic procedure for requesting the service. \n4. The System sends a confirmation e-mail to the citizen who requested the service.", "dataset": "eANCI", "act": "displays, shows, certifies, checks, enables, sends", "obj": "Clerk, notification, System, request, citizen, validity, data, bureaucratic procedure, service, confirmation e-mail", "pred_steps": "1. Display terms of service agreement in the application.2. Provide a button or option for the user to accept the terms of service.3. User clicks on the \"Accept\" button.4. Validate if all required fields are filled in the terms of service agreement.5. If validation passes, mark the terms of service agreement as accepted by the user.6. Notify the system that the terms of service have been accepted by the user.7. Update the user profile or settings to reflect that the terms of service have been accepted.", "pred_act": "Display, Provide, accept, clicks, Validate, filled, passes, mark, Notify, accepted, Update, accepted\n", "pred_obj": "terms of service agreement, application, button, option, user, \"accept\" button, user, fields, terms of service agreement, validation, terms of service agreement, user, system, terms of service, user, user profile, settings, terms of service"}
{"index": 38, "ucName": "RequestTOSAPRifted", "uctext": "RequestTOSAPRifted", "steps": "1. \n3. The Clerk displays the received notification. \n2. The System shows the Clerk the request made by the citizen. The Clerk reveals an error in the request and rejects the procedure the request. \n4. The System sends a notification to the citizen who requested the service.", "dataset": "eANCI", "act": "displays, shows, reveals, rejects, sends", "obj": "Clerk, notification, System, request, citizen, error, procedure, service", "pred_steps": "1. User selects the option to request a Rifted TOSA from the system.2. System prompts the user to enter the necessary information for the TOSA request.3. User inputs the required data such as name, department, contact information, and reason for the request.4. System validates the input data to ensure it meets the required format and criteria.5. System generates a unique TOSA request ID for tracking purposes.6. System sends a notification to the designated approver for the TOSA request.7. Approver reviews the request and either approves or rejects it.8. If approved, system notifies the user that the TOSA has been successfully requested.9. If rejected, system notifies the user of the rejection and prompts for further actions.10. End of the use case.", "pred_act": "selects prompts enter inputs validates meets generates sends reviews approves rejects notifies requested notifies prompts\n", "pred_obj": "user, system, tosa, approver"}
{"index": 39, "ucName": "TIA", "uctext": "TIA", "steps": "1. The Citizen clicks on the button to access the Online Tax Payment area. \n2. The System displays the list of taxes that can be paid online. \n3. The Citizen selects the section dedicated to the Environmental Hygiene Fee and its payment. \n4. The System redirects the Citizen to the necessary section, showing the form of the relevant fee and the relevant amount to be paid. \n5. The Citizen confirms the correctness of the information,selects the preferred payment method and initiates the transaction. \n6. The System performs the transaction and displays a successful payment message.", "dataset": "eANCI", "act": "clicks, displays, selects, redirects, confirms, selects, initiates, performs, displays", "obj": "Citizen, button, Online Tax Payment area, System, list of taxes, Environmental Hygiene Fee, payment, section, form, relevant fee, relevant amount, information, preferred payment method, transaction, successful payment message", "pred_steps": "1. User opens the application.2. User logs in using their credentials.3. User navigates to the TIA feature.4. User inputs the necessary information into the TIA form.5. User submits the form.6. System validates the input data.7. System processes the TIA request.8. System notifies the user about the status of their TIA request.9. User logs out of the application.", "pred_act": "opens, logs, navigates, inputs, submits, validates, processes, notifies, logs\n", "pred_obj": "application, credentials, tia feature, information, tia form, form, input data, tia request, status, tia request"}
{"index": 40, "ucName": "TOSAP", "uctext": "TOSAP", "steps": "1. The Citizen clicks on the button to access the Online Tax Payment area. \n2. The System displays the list of taxes that can be paid online. \n3. The Citizen selects the section dedicated to the Tax for the Occupation of Public Land and Areas and its payment and enters the file code. \n4. The System redirects the Citizen to the necessary section, showing the form of the relevant fee and the relevant amount to be paid. \n5. The Citizen confirms that the information is correct, selects the preferred payment method and initiates the transaction. \n6. The System performs the transaction and displays a successful payment message.", "dataset": "eANCI", "act": "clicks, displays, selects, enters, redirects, confirms, selects, initiates, performs, displays", "obj": "Citizen, button, Online Tax Payment area, System, list of taxes, Tax for the Occupation of Public Land and Areas, payment, file code, necessary section, form, relevant fee, relevant amount, information, preferred payment method, transaction, successful payment message", "pred_steps": "1. Display terms of service agreement on the screen.2. Allow user to scroll through the agreement text.3. Provide an option for the user to accept the terms.4. If the user accepts the terms, proceed to the next step.5. If the user rejects the terms, do not allow access to the system.6. Log the user's response to the terms of service agreement.", "pred_act": "Display Allow scroll Provide accept accepts proceed rejects allow access Log\n", "pred_obj": "terms of service agreement, screen, user, agreement text, option, terms, step, system, user's response"}
{"index": 41, "ucName": "Forms", "uctext": "Forms", "steps": "1. The Citizen clicks on the button to access forms section. \n3. \n2. The System redirects the Citizen to the required section and displays the various forms available for download. The Citizen selects the desired form. \n4. The System starts the download.", "dataset": "eANCI", "act": "clicks, redirects, displays, selects, starts", "obj": "Citizen, button, forms section, System, required section, forms, desired form, download", "pred_steps": "1. Display a list of available forms to the user.2. Allow the user to select a form from the list.3. Display the selected form to the user.4. Allow the user to fill out the form with relevant information.5. Validate the input data according to form requirements.6. Provide feedback to the user on any validation errors.7. Allow the user to submit the completed form.8. Process the submitted form data.9. Save the form data to a database or other storage system.10. Display a confirmation message to the user upon successful form submission.", "pred_act": "Display, Allow, Display, Allow, Validate, Provide, Allow, Process, Save, Display\n", "pred_obj": "list of available forms, user, form, input data, validation errors, processed form data, database or other storage system, confirmation message"}
{"index": 42, "ucName": "ConsultationHelpOn-Line", "uctext": "ConsultationHelpOn-Line", "steps": "1. The Citizen enters the dedicated online help section. \n2. The system presents a screen containing the list of features. \n3. The Citizen accesses the help information by clicking on the link related to the functionality he/she wants to receive. \n4. The system presents the help information, explaining the methods and actions to be performed for the specific functionality.", "dataset": "eANCI", "act": "enters, presents, accesses, clicks, presents, explaining", "obj": "Citizen, dedicated online help section, system, screen, list of features, help information, link, functionality, methods, actions", "pred_steps": "1. User selects the \"Consultation Help\" option on the application interface.2. System displays a list of available consultation topics.3. User selects a specific consultation topic from the list.4. System retrieves relevant information and displays it to the user.5. User reads the consultation information provided.6. User has the option to request further assistance.7. If assistance is requested, system connects the user to a support representative.8. Support representative provides real-time assistance to the user.9. User interacts with the support representative to resolve the issue.10. Once the issue is resolved, the support session ends.", "pred_act": "selects, displays, selects, retrieves, displays, reads, has, request, is, connects, provides, interacts, resolve, is, ends\n", "pred_obj": "user, system, assistance, consultation, application interface, consultation topics, consultation topic, information, support representative, support session, issue"}
{"index": 43, "ucName": "DataErrati", "uctext": "DataErrati", "steps": "1. System displays a message to the terminal screen indicating that the request entered was incorrect. \n2. Citizen reads the notification message. \n3. The system resubmits the input form.", "dataset": "eANCI", "act": "\"displays, reads, resubmits\"", "obj": "System, message, terminal screen, request, Citizen, notification message, input form", "pred_steps": "1. Determine the specific requirements for handling incorrect data.2. Define the types of incorrect data that need to be addressed.3. Develop a strategy for identifying incorrect data within the system.4. Design a method for flagging or marking incorrect data.5. Implement validation checks to prevent incorrect data entry.6. Create error handling mechanisms to prompt users to correct incorrect data.7. Generate reports or logs of incorrect data for further analysis and resolution.8. Test the functionality of handling incorrect data to ensure it works as intended.9. Deploy the updated system with the capability to manage incorrect data effectively.", "pred_act": "Determine, Define, Develop, Design, Implement, Create, Generate, Test, Deploy\n", "pred_obj": "incorrect data"}
{"index": 44, "ucName": "ServiceNotAvailable", "uctext": "ServiceNotAvailable", "steps": "1. System displays a message on the terminal screen indicating that the request cannot be made. \n2. Citizen reads the notification message. \n3. The system resubmits the input form.", "dataset": "eANCI", "act": "\"displays, reads, resubmits\"", "obj": ", System, terminal screen, message, request, input form, , Citizen, notification message, , System, input form", "pred_steps": "1. Display an error message stating \"Service is not available at the moment\"2. Provide a button or link to retry the service3. If the retry attempt fails, notify the user to try again later or contact support", "pred_act": "Display stating Provide retry fails notify try contact\n", "pred_obj": "error message,button,link,service,service,retry attempt,user,support"}
{"index": 45, "ucName": "EditEMailEmployee", "uctext": "EditEMailEmployee", "steps": "1. The 'employee accesses the edit e- mail form. \n2. The system shows the form the entry of the new e-mail. \n3. The employee enters the new email and presses the confirmation button. \n4. The system updates the new email.", "dataset": "eANCI", "act": "accesses, shows, enters, presses, updates", "obj": "employee, edit e-mail form, system, form, entry, new e-mail, confirmation button, email", "pred_steps": "1. Retrieve employee information based on the employee ID provided.2. Display the current email address of the employee.3. Allow the user to edit the email address.4. Validate the new email address format.5. Update the employee's email address with the new value.6. Display a confirmation message that the email address has been updated successfully.", "pred_act": "Retrieve, Display, Allow, edit, Validate, Update, Display\n", "pred_obj": "employee, email address"}
{"index": 46, "ucName": "EditEmployee", "uctext": "EditEmployee", "steps": "1. The administrator presses the EditEmployee button. \n2. The system displays a form for editing the employee. \n3. The administrator enters the data. \n4. The system saves the changes made.", "dataset": "eANCI", "act": "presses, displays, enters, saves", "obj": "administrator, EditEmployee button, system, form, employee, data, changes", "pred_steps": "1. Select the employee to be edited2. Display the employee details for editing3. Allow the user to modify the employee information4. Validate the modified information5. Save the changes made to the employee details6. Display a confirmation message of successful edit", "pred_act": "SelectDisplayAllowmodifyValidateSaveDisplay\n", "pred_obj": "employee,employee,employee,information,information,changes,employee,confirmation message"}
{"index": 47, "ucName": "ChangePasswordAdministrator", "uctext": "ChangePasswordAdministrator", "steps": "1. The administrator wants to change the password and presses the change password button. \n2. The system displays the form for entering the old password. \n3. The administrator enters the old password, the new password and presses the confirm button. \n4. The system notifies that the password has been changed.", "dataset": "eANCI", "act": "\"wants, presses, displays, enters, presses, notifies\"", "obj": "administrator, password, change password button, form, old password, new password, confirm button, system", "pred_steps": "1. The administrator selects the \"Change Password\" option from the system's main menu.2. The system displays a form that prompts the administrator to enter their current password.3. The administrator enters their current password into the form and submits the form.4. The system validates the entered password and verifies that it matches the administrator's current password.5. If the password is valid, the system displays a new form that prompts the administrator to enter their new password.6. The administrator enters their new password into the form and submits the form.7. The system validates the entered password and verifies that it meets the system's password policy requirements.8. If the new password meets the requirements, the system updates the administrator's password in the system's database.9. The system displays a success message indicating that the password has been successfully changed.10. The use case ends.", "pred_act": "selects, displays, prompts, enter, enters, submits, validates, verifies, matches, displays, prompts, enters, submits, validates, verifies, meets, updates, displays, indicating, ends\n", "pred_obj": "administrator, system, system's main menu, form, password, password, password policy requirements, system's database, success message, use case"}
{"index": 48, "ucName": "ChangePasswordCitizen", "uctext": "ChangePasswordCitizen", "steps": "1. The citizen wants to change the password and presses the change password button. \n2. The system displays the form for entering the old password and the new one. \n3. The citizen enters the old password, the new password and presses the confirm button. \n4. The system notifies that the password has been changed.", "dataset": "eANCI", "act": "\"wants, presses, displays, enters, presses, notifies\"", "obj": "citizen, password, change password button, system, form, old password, new password, confirm button, notification", "pred_steps": "1. User enters current password.2. System validates the current password.3. User enters a new password.4. User confirms the new password.5. System validates that the new password meets complexity requirements.6. System updates the password in the database.7. System notifies the user that the password has been successfully changed.", "pred_act": "enters, validates, enters, confirms, validates, meets, updates, notifies, changed\n", "pred_obj": "user, system, password, new password, database"}
{"index": 49, "ucName": "ChangePasswordEmployee", "uctext": "ChangePasswordEmployee", "steps": "1. The employee wants to change the password and presses the change password button. \n2. The system displays the form for entering the old password and the new one. \n3. The employee enters the old password, the new password and presses the confirm button. \n4. The system notifies that the password has been changed.", "dataset": "eANCI", "act": "\"wants, presses, displays, enters, presses, notifies\"", "obj": "employee, password, change password button, form, old password, new password, confirm button, system", "pred_steps": "1. User selects the \"Change Password\" option in the employee portal.2. System prompts user to enter current password, new password, and confirm new password.3. User enters current password, new password, and confirms new password.4. System verifies that the current password entered matches the user's current password.5. System validates that the new password meets the specified requirements (e.g., minimum length, special characters).6. System updates the employee's password to the new password in the database.7. System displays a confirmation message that the password has been changed successfully.", "pred_act": "selects, prompts, enter, enters, confirms, verifies, validates, updates, displays\n", "pred_obj": "user, \"change password\" option, employee portal, system, current password, new password, confirm new password, employee's password, database, confirmation message"}
{"index": 50, "ucName": "RecoverPasswordCitizen", "uctext": "RecoverPasswordCitizen", "steps": "1. Citizen has forgotten his password and presses on the Recover Password button. \n2. The system displays the password recovery screen that requires entering the user name and ID card code. \n3. The citizen enters his/her data and presses the confirmation button. \n4. The system verifies the correctness of the data and sends the password to the citizen's email address.", "dataset": "eANCI", "act": "forgets, presses, displays, requires, enters, presses, verifies, sends", "obj": "Citizen, password, Recover Password button, system, password recovery screen, user name, ID card code, data, confirmation button, email address", "pred_steps": "1. User clicks on the \"Forgot Password\" link on the login page.2. System prompts the user to enter their email address.3. User enters their email address and submits the form.4. System validates the email address format.5. System checks if the email address exists in the database.6. If the email address is found, system generates a temporary password and sends a password reset link to the user's email address.7. User receives the email with the password reset link.8. User clicks on the password reset link.9. System validates the link and prompts the user to enter a new password.10. User enters a new password and submits the form.11. System validates the new password format.12. System updates the password for the user in the database.13. User receives a notification that the password has been successfully reset.14. Use case ends.", "pred_act": "clicks prompts enter enters submits validates checks exists is found generates sends receives clicks validates prompts enter enters submits validates updates receives ends\n", "pred_obj": "user, system, user, system, system, system, user, user, system, user, system, system, user"}
{"index": 51, "ucName": "AuthenticationCitizen", "uctext": "AuthenticationCitizen", "steps": "1. Citizen logs in to authentication session. \n2. The system displays the login form for entering data (username and password). \n3. The citizen enters the data and submits the authentication request. \n4. The system verifies the accuracy of the data and grants access to the citizen.", "dataset": "eANCI", "act": "logs in, displays, enters, submits, verifies, grants", "obj": "Citizen, authentication session, system, login form, data, username, password, authentication request, accuracy of the data, access", "pred_steps": "1. User enters their username and password.2. System verifies if the username and password are valid.3. If the username and password are valid, the user is authenticated as a citizen.4. If the username and password are invalid, the user is notified and prompted to re-enter their credentials.", "pred_act": "enters verifies authenticated notified prompted re-enter\n", "pred_obj": "username, password, user, system"}
{"index": 52, "ucName": "RecoverPasswordAdministrator", "uctext": "RecoverPasswordAdministrator", "steps": "1. The administrator has forgotten the password and presses the password recovery button. \n2. The system shows the form for entering the freshman. \n3. The administrator enters his/her matriculation number and presses the confirmation button. \n4. The system verifies the data and sends the password to the administrator's email address.", "dataset": "eANCI", "act": "forgotten presses shows enters presses verifies sends", "obj": "Please refer to relevant websites for more information, and feel free to ask me any other questions.", "pred_steps": "1. User navigates to the \"Forgot Password\" page on the application.2. User enters the administrator's email address.3. System validates the email address entered.4. System sends a password recovery link to the administrator's email address.5. Administrator clicks on the password recovery link received in the email.6. System prompts the administrator to enter a new password.7. Administrator enters a new password and confirms it.8. System validates the new password.9. System updates the administrator's password in the database.10. System displays a confirmation message that the password has been successfully updated.", "pred_act": "navigates enters validates sends clicks prompts enter enters confirms validates updates displays\n", "pred_obj": "user, forgot password, application, administrator, email address, system, password recovery link, email, administrator, password, administrator, password, administrator, database, system, confirmation message, password"}
{"index": 53, "ucName": "PasswordRecoveryEmployee", "uctext": "PasswordRecoveryEmployee", "steps": "1. The employee has forgotten his password and presses the password recovery button. \n2. The system shows the form for entering the matriculation number. \n3. The employee enters his/her matriculation number and presses the confirmation button. \n4. The system verifies the data and sends the password to the employee's email address.", "dataset": "eANCI", "act": ",  forgotten, presses, ,  shows, ,  enters, presses, ,  verifies, sends", "obj": "employee, password, password recovery button, form, matriculation number, confirmation button, data, email address", "pred_steps": "1. Employee selects the \"Forgot Password\" option on the login page.2. System prompts the employee to enter their email address.3. Employee enters their email address and submits the form.4. System validates the email address for correctness and existence in the database.5. System generates a unique password reset link and sends it to the employee's email address.6. Employee receives the password reset link in their email and clicks on it.7. System verifies the validity of the password reset link.8. Employee is prompted to enter a new password.9. Employee enters a new password and confirms it.10. System validates the new password for complexity and matches with the confirmation.11. System updates the employee's password in the database.12. Employee receives a confirmation message that their password has been successfully reset.13. Use case ends.", "pred_act": "selects prompts enters submits validates generates sends receives clicks verifies prompted enter enters confirms validates matches updates receives ends\n", "pred_obj": "employee, system"}
{"index": 54, "ucName": "RegistrationCitizen", "uctext": "RegistrationCitizen", "steps": "1. Citizen accesses the registration form. \n2. The system displays the registration form. \n3. The citizen enters his/her data and presses the confirmation button. \n4. The system checks the data for correctness, saves it and sends an e-mail of successful registration to the citizen.", "dataset": "eANCI", "act": "accesses, displays, enters, presses, checks, saves, sends", "obj": "Citizen, registration form, system, data, confirmation button, e-mail", "pred_steps": "1. Display registration form to capture citizen information.2. Validate and store the submitted information.3. Generate a unique citizen ID for the newly registered citizen.4. Send a confirmation message to the registered citizen.5. Notify the admin about the new citizen registration.6. End of use case.", "pred_act": "Display, capture, Validate, store, Generate, Send, Notify\n", "pred_obj": "registration form, citizen information, confirmation message, citizen id, admin, citizen"}
{"index": 55, "ucName": "RegistrationCitizen", "uctext": "RegistrationCitizen", "steps": "1. Citizen accesses the registration form. \n2. The system displays the registration form. \n3. The citizen enters his/her data and presses the confirmation button. \n4. The system checks the data for correctness, saves it and sends an e-mail of successful registration to the citizen.", "dataset": "eANCI", "act": "accesses, displays, enters, presses, checks, saves, sends", "obj": "Citizen, registration form, system, data, confirmation button, e-mail", "pred_steps": "1. Display the registration form to the citizen.2. Prompt the citizen to enter their personal information, such as name, address, and contact details.3. Validate the entered information to ensure all required fields are filled and in the correct format.4. Check if the citizen is eligible for registration based on predefined criteria.5. If the citizen is eligible, generate a unique registration ID for them.6. Store the citizen's information and registration ID in the database.7. Send a confirmation email or SMS to the citizen, containing their registration details and ID.8. Display a success message to the citizen, confirming their registration.9. End the registration process.", "pred_act": "Display, Prompt, enter, Validate, ensure, Check, generate, Store, Send, Display, confirming, End\n", "pred_obj": "registration form, citizen, personal information, name, address, contact details, required fields, predefined criteria, unique registration id, database, confirmation email, sms, success message, registration process"}
{"index": 56, "ucName": "Employee Search", "uctext": "Employee Search", "steps": "1. The administrator presses on the Employee Search button. \n3. \n2. The system displays the form to search for an employee. The administrator performs a search using the employee's data. \n4. The system returns the data of the searched employee.", "dataset": "eANCI", "act": "presses, displays, performs, returns", "obj": "administrator, Employee Search button, system, form, employee, employee's data, searched employee", "pred_steps": "1. User enters search criteria for employee (e.g., name, ID, department).2. System validates and processes the search criteria.3. System retrieves employee data based on the search criteria.4. System displays a list of employees that match the search criteria.5. User selects an employee from the list to view detailed information.6. System displays detailed information of the selected employee.7. End of use case.", "pred_act": "enters validates processes retrieves displays selects view displays\n", "pred_obj": "user, search criteria, employee, name, id, department, system, employee data, list, detailed information, use case"}
{"index": 57, "ucName": "ChangeOfResidence", "uctext": "ChangeOfResidence", "steps": "1. \n3. \n5. \n6. \n7. The Citizen presses on the Change of Residence button. \n2. The system shows the citizen the form to fill out. The citizen enters the data of his new residence. \n4. The system notifies the citizen that the request has been successfully submitted and is stored in the system. The clerk logs into the system and views the request received. The clerk verifies the data, fills in the document with the rest of the data to be entered, and confirms the operation. The system saves the form and updates the data.", "dataset": "eANCI", "act": "presses, shows, enters, notifies, logs, views, verifies, fills, confirms, saves, updates", "obj": "Citizen, Change of Residence button, system, form, data, new residence, request, clerk, document, rest of the data, operation", "pred_steps": "1. User selects the \"Change of Residence\" option from the main menu.2. System displays a form for the user to enter the new address details.3. User enters the new address details in the form.4. System validates the entered address details.5. System saves the new address details in the user's profile.6. System sends a confirmation message to the user that the address has been successfully changed.7. Use case ends.", "pred_act": "selects displays enter enters validates saves sends ends\n", "pred_obj": "user, main menu, system, form, address details, user's profile, confirmation message, use case"}
{"index": 58, "ucName": "ChangeOfResidenceOtherCommunity", "uctext": "ChangeOfResidenceOtherCommunity", "steps": "1. \n3. \n5. \n6. \n7. \n8. \n9. The Citizen presses on the Change of Residence button. \n2. The system shows the citizen the form to fill out. The citizen enters the data of his new residence. \n4. The system notifies the citizen that the request has been successfully submitted and the request is stored. The clerk logs into the system and views the request received. The clerk verifies the data, fills in the document with the rest of the data to be entered, and confirms the operation. The system saves the form and updates the data. The clerk sends a document with the request made by the citizen to the clerk of the other municipality. The clerk of the other municipality verifies the document and sends a positive notification to the other clerk and a notification to the citizen.", "dataset": "eANCI", "act": "presses, shows, enters, notifies, logs, views, verifies, fills, confirms, saves, updates, sends, verifies, sends", "obj": "Citizen, Change of Residence button, system, form, data, new residence, request, clerk, document, municipality, notification", "pred_steps": "1. User selects the \"Change of Residence\" option on the main menu.2. User selects the \"Other Community\" option within the Change of Residence menu.3. User enters the new address details including street, city, state, and zip code.4. User confirms the address details entered.5. System validates the new address information.6. System updates the user's residency status to the new address in the database.7. System displays a confirmation message to the user that the change of residence to another community was successful.", "pred_act": "selects, selects, enters, confirms, validates, updates, displays\n", "pred_obj": "change of residence\" option, \"other community\" option, street, city, state, zip code, new address details, user's residency status, database, confirmation message, user, system, new address information, change of residence"}
{"index": 59, "ucName": "ChangeFamilyState", "uctext": "ChangeFamilyState", "steps": "1. \n3. The Citizen presses on the Change Family Status button. \n2. The system shows the citizen the form to fill out. The citizen enters the data of the new household and submits the request. \n4. The system sends the request to the appropriate clerk.", "dataset": "eANCI", "act": "presses, shows, enters, submits, sends", "obj": "Citizen, Change Family Status button, system, form, data, new household, request, appropriate clerk", "pred_steps": "1. User selects the \"Change Family State\" option from the application menu.2. System displays a list of available families.3. User selects the desired family to change its state.4. System retrieves the current state of the selected family.5. System prompts the user to select the new state for the family.6. User selects the new state from the given options.7. System verifies if the selected new state is valid for the current family state.8. If the selected new state is invalid, display an error message and return to step 5.9. If the selected new state is valid, system updates the state of the selected family.10. System notifies the user that the family state has been successfully changed.11. System returns to the main menu.", "pred_act": "selects, displays, selects, retrieves, prompts, selects, verifies, display, return, is, updates, notifies, returns\n", "pred_obj": "user, system, family, family state, application menu, list of available families, current state, new state, error message, main menu"}
{"index": 60, "ucName": "DeletePractice", "uctext": "DeletePractice", "steps": "1. \n3. The citizen presses the delete practice button (ID Card, Change of Residence) if the practice has not been initialized . \n2. The system asks the citizen for confirmation. The citizen confirms the operation. \n4. The system deletes the practice.", "dataset": "eANCI", "act": "presses, asks, confirms, deletes", "obj": "citizen, delete practice button, ID Card, Change of Residence, system, confirmation, operation, practice", "pred_steps": "1. Display a list of practice items to the user.2. Allow the user to select a practice item to delete.3. Confirm with the user if they want to delete the selected practice item.4. If confirmed, remove the selected practice item from the list.5. Display a success message indicating that the practice item was deleted.6. End the use case.", "pred_act": "Display, Allow, select, delete, Confirm, want, delete, confirmed, remove, Display, indicating, was, deleted, End\n", "pred_obj": "list of practice items, user, practice item, practice item, practice item, use case"}
{"index": 61, "ucName": "EditPractice", "uctext": "EditPractice", "steps": "1. The citizen presses the practice edit button (ID Card, Change of Residence) if the practice has not been initialized. \n3. \n2. The system displays a form for editing the practice. The citizen enters the data. \n4. The system saves the changes made.", "dataset": "eANCI", "act": "presses, displays, enters, saves", "obj": "citizen, practice edit button, ID Card, Change of Residence, system, form, practice, data, changes", "pred_steps": "1. Display the list of practice records.2. Select the practice record to be edited.3. Retrieve the selected practice record details from the database.4. Display the practice record details for editing.5. Allow the user to make changes to the practice record details.6. Validate the edited practice record details.7. If the validation fails, display an error message and allow the user to make corrections.8. If the validation succeeds, update the practice record details in the database.9. Display a success message confirming the practice record has been updated.10. Return to the list of practice records.", "pred_act": "Display, Select, Retrieve, Display, Allow, make, Validate, fails, display, allow, succeeds, update, Display, Return\n", "pred_obj": "practice record, database, user, error message, success message"}
{"index": 62, "ucName": "AuthenticationEmployee", "uctext": "AuthenticationEmployee", "steps": "1. Employee logs in to authentication session. \n2. The system displays the login form for entering data (username and password). \n3. The employee enters data and submits the authentication request. \n4. The system verifies the accuracy of the data and allows the employee to log in.", "dataset": "eANCI", "act": "logs, displays, enters, submits, verifies, allows", "obj": "Employee, authentication session, system, login form, data, username, password, authentication request, accuracy", "pred_steps": "1. User enters username and password.2. System verifies the credentials.3. If the credentials are valid, authenticate the employee and grant access.4. If the credentials are invalid, deny access and display an error message.", "pred_act": "entersverifiesauthenticategrantdenydisplay\n", "pred_obj": "user, username, password, system, credentials, employee, access, credentials, error message"}
{"index": 63, "ucName": "RequestCartaDiDentity", "uctext": "RequestCartaDiDentity", "steps": "1. The Citizen displays the family status and selects a family member. \n2. The system displays a form for entering personal data(Height, special marks, etc.) \n3. The Citizen enters the data, selects the payment method and presses the confirm button. \n4. The system shows the screen with documentation to be shown at the counter on the days and hours the office is open. \n5. The citizen confirms the transaction. \n6. The system notifies the clerk of the request.", "dataset": "eANCI", "act": "displays, selects, displays, enters, selects, presses, shows, confirms, notifies", "obj": "Citizen, family status, family member, system, form, personal data, Height, special marks, data, payment method, confirm button, screen, documentation, transaction, clerk, request", "pred_steps": "1. User accesses the \"RequestCartaDiDentity\" feature in the application.2. User provides personal information such as name, address, contact details, and identification proof details.3. System validates the provided information for accuracy and completeness.4. User reviews the information and confirms the request.5. System generates a unique request ID for tracking purposes.6. System sends a confirmation message to the user acknowledging the request.7. Admin reviews the request and verifies the provided information.8. Admin approves or rejects the request based on the verification results.9. If approved, system generates and issues the Carta di identity.10. User receives a notification about the approval and availability of the Carta di identity.11. User collects the physical Carta di identity from the designated location.", "pred_act": "accesses, provides, validates, reviews, confirms, generates, sends, reviews, verifies, approves, rejects, generates, issues, receives, collects\n", "pred_obj": "user, requestcartadidentity, application, personal information, name, address, contact details, identification proof details, system, request, unique request id, tracking purposes, confirmation message, admin, verification, carta di identity, notification, availability, location"}
{"index": 64, "ucName": "RequestAcceptedIdentityCard", "uctext": "RequestAcceptedIdentityCard", "steps": "1. \n3. \n5. The clerk displays the notification received. \n2. The system shows the clerk the citizen's request for the creation of the identity card. The clerk certifies the validity of the request by checking the accuracy of the data and enables the ID card creation procedure. \n4. The system sends a confirmation e-mail to the citizen who requested the creation of the ID card. The citizen goes to the counter.", "dataset": "eANCI", "act": "\"displays, shows, certifies, checks, enables, sends, goes\"", "obj": "clerk, notification, system, citizen, request, identity card, validity, data, ID card creation procedure, confirmation e-mail, counter", "pred_steps": "1. User submits a request to access their identity card.2. System verifies the user's request by checking the provided details.3. System generates a unique request ID for the user's request.4. System stores the request ID along with the user's details for further processing.5. System sends a confirmation message to the user, acknowledging receipt of the request.6. System initiates the process of checking the validity of the user's identity card.7. System retrieves the user's identity card details from the database.8. System validates the user's identity card by comparing the details with the provided information.9. If the identity card is valid, system generates a confirmation message informing the user that the request has been accepted.10. System updates the status of the request as \"Accepted\" in the database.11. If the identity card is invalid, system generates a rejection message informing the user that the request has been rejected.12. System updates the status of the request as \"Rejected\" in the database.13. System sends the confirmation or rejection message to the user.14. System logs the request and its status in the system logs for future reference.15. Use case ends.", "pred_act": "submits, verifies, checking, generates, stores, sends, acknowledging, initiates, checking, retrieves, validates, comparing, generates, informing, updates, generates, informing, updates, sends, logs, ends\n", "pred_obj": "user, system, user, system, system, system, system, system, system, system, system, system, system, user, system, system, user, system"}
{"index": 65, "ucName": "RequestRejectedIdentityCard", "uctext": "RequestRejectedIdentityCard", "steps": "1. \n3. The clerk displays the notification received. \n2. The system shows the clerk the citizen's request to create an identity card. The clerk detects an error in the data and rejects the ID card creation procedure. \n4. The system sends an e-mail notification to the citizen who requested the ID card creation.", "dataset": "eANCI", "act": "displays, shows, detects, rejects, sends", "obj": "clerk, notification, system, citizen, request, identity card, data, ID card creation procedure, e-mail notification", "pred_steps": "1. Prompt user to enter their identity card information2. Validate the entered identity card information3. Notify the user that their identity card request has been rejected4. Provide a reason for the rejection5. Allow user to make corrections and resubmit the identity card request if desired", "pred_act": "PromptenterValidateNotifyProvideAllowmakecorrectionsresubmit\n", "pred_obj": "identity card information, identity card request"}
{"index": 66, "ucName": "RequestCertificates", "uctext": "RequestCertificates", "steps": "1. The citizen selects a specific certificate(birth certificates, marital status certificates). \n2. The system displays the form for entering the data of the person concerned. \n3. The citizen enters the data of the person concerned. \n4. The system displays a screen with the requested certificate. \n5. The citizen selects the payment and shipping method. \n6. The system sends the certificate.", "dataset": "eANCI", "act": "selects, displays, enters, displays, selects, sends", "obj": "citizen, specific certificate, birth certificates, marital status certificates, system, form, data, person concerned, screen, requested certificate, payment, shipping method", "pred_steps": "1. User enters the necessary credentials to log into the system.2. System validates the user's credentials and grants access.3. User selects the option to request certificates.4. System prompts the user to provide the required information for the certificate request, such as the type of certificate and any specific details.5. User enters the requested information.6. System validates the provided information for accuracy and completeness.7. System generates a unique certificate request ID.8. System logs the certificate request with the provided information and the generated request ID.9. System sends a confirmation message to the user, acknowledging the successful submission of the certificate request.10. User can view the status of their certificate request through the system.11. System tracks and updates the status of the certificate request.12. System notifies the user when the certificate request is processed and ready for download.13. User can download the completed certificate from the system.14. System marks the certificate request as completed.15. System archives the certificate request for record-keeping purposes.16. User can provide feedback or review the certificate request process.", "pred_act": "enters validate grant selects prompts provide enters validate generates logs sends acknowledges view tracks updates notifies download marks archives provide review\n", "pred_obj": "user, system, certificate request, confirmation message, request id, feedback"}
{"index": 67, "ucName": "RequestCertificatesThirds", "uctext": "RequestCertificatesThirds", "steps": "1. The citizen selects a specific certificate(birth certificates, marital status certificates). \n2. The system displays the form for entering the data of the person concerned. \n3. The citizen enters the data of the person concerned (see note). \n4. The system stores the data of the citizen and interested person in a special form \n5. The system shows a screen with the requested certificate. \n6. The citizen selects the mode of payment and shipping. \n7. The system sends the certificate.", "dataset": "eANCI", "act": "selects, displays, enters, stores, shows, selects, sends", "obj": "citizen, specific certificate, birth certificates, marital status certificates, system, form, data, person concerned, interested person, screen, requested certificate, mode of payment, shipping, certificate", "pred_steps": "1. User selects the \"Request Certificates\" option from the application menu.2. System prompts the user to enter the required information for certificate issuance.3. User provides the necessary details such as name, address, contact information, and certificate type.4. System validates the input data for accuracy and completeness.5. System generates a unique request ID for tracking purposes.6. System sends the certificate request to the third-party certificate authority.7. System waits for the response from the third-party certificate authority.8. System receives the certificate from the third-party certificate authority.9. System associates the received certificate with the original request using the request ID.10. System notifies the user that the certificate is ready for download.11. User downloads the certificate from the system.12. Use case is completed.", "pred_act": "selects, prompts, enter, provides, validates, generates, sends, waits, receives, associates, notifies, downloads, is\n", "pred_obj": "user, request certificates, system, request id, third-party certificate authority, certificate"}
{"index": 68, "ucName": "RequestToMarry", "uctext": "RequestToMarry", "steps": "1. The Citizen presses on the RequestToMarry button. \n2. The system shows the citizen the form to fill out. \n3. The citizen enters all his/her data, the partner's data and presses the confirmation button. \n4. The system automatically creates the form to be submitted with self-certification and family status of the applicant citizen and sends the form to the clerk. \n5. The clerk receives the notification and publishes the marriage application.", "dataset": "eANCI", "act": "presses, shows, enters, presses, creates, sends, receives, publishes", "obj": "Citizen, RequestToMarry button, system, form, citizen's data, partner's data, confirmation button, self-certification, family status, applicant citizen, clerk, notification, marriage application", "pred_steps": "1. User selects the profile of the person they want to marry.2. User clicks on the \"Request to Marry\" button.3. System sends a notification to the selected person about the marriage request.4. The selected person can accept or reject the marriage request.5. If accepted, the system sends a notification to both parties confirming the acceptance.6. If rejected, the system sends a notification to both parties informing about the rejection.", "pred_act": "selects, clicks, sends, accept, reject, sends, sends, informing\n", "pred_obj": "user, profile, person, \"request to marry\" button, system, notification, marriage request, selected person, parties"}
{"index": 69, "ucName": "RequestStateOfFamily", "uctext": "RequestStateOfFamily", "steps": "1. The Citizen presses on the Family Status button. \n3. \n2. The system displays the Family Status to the citizen. The citizen chooses whether to print or send the family status to his/her e-mail. \n4. The system executes the choice made by the citizen.", "dataset": "eANCI", "act": "\"presses, displays, chooses, executes\"", "obj": "Citizen, Family Status button, system, Family Status, citizen, e-mail, choice", "pred_steps": "1. User selects the \"Request State of Family\" option from the menu.2. System prompts the user to enter the family name or unique identifier.3. User enters the family name or unique identifier.4. System validates the input family name or unique identifier.5. System retrieves the current state of the family from the database.6. System displays the current state of the family to the user.7. System prompts the user if they want to request the state of another family.8. If the user chooses to request the state of another family, repeat steps 2-7.9. If the user chooses to exit, end the process.", "pred_act": "selects prompts enter enters validates retrieves displays prompts want chooses request chooses exit end\n", "pred_obj": "user, system"}
{"index": 70, "ucName": "IdentityCardRenewal", "uctext": "IdentityCardRenewal", "steps": "1. The Citizen presses on the Identity Card Renewal button. \n2. The system directly sends a renewal request from the citizen to the appropriate clerk. \n3. The citizen goes to the counter to renew the ID card.", "dataset": "eANCI", "act": "presses, sends, goes, renew", "obj": "Citizen, Identity Card Renewal button, system, renewal request, citizen, clerk, counter, ID card", "pred_steps": "1. User initiates the identity card renewal process.2. System prompts the user to input their personal information, such as name, address, and contact details.3. User enters their personal information.4. System validates the entered personal information.5. System prompts the user to upload necessary documents, such as proof of address or identification.6. User selects and uploads the required documents.7. System verifies the uploaded documents for completeness and authenticity.8. User confirms the correctness of the uploaded documents.9. System generates a unique renewal application number.10. System displays the renewal application number to the user for reference.11. System prompts the user to make the necessary payment for the renewal process.12. User selects the preferred payment method.13. User completes the payment process.14. System confirms the successful payment transaction.15. System updates the user's identity card renewal status to \"In progress\".16. System notifies the user of the estimated processing time for their renewal application.17. User acknowledges the estimated processing time.18. System saves the renewal application and associated payment details in the database.19. System sends an email confirmation to the user with the renewal application details.20. System generates and prints a renewal acknowledgment receipt.21. User receives the renewal acknowledgment receipt.22. System updates the user's identity card renewal status to \"Submitted\".23. System forwards the renewal application and associated documents to the appropriate authorities for review.24. Authorities review the renewal application and documents.25. Authorities update the renewal application status as \"Under review\".26. Authorities may request additional documents if required.27. User receives a notification to upload additional documents if requested by the authorities.28. User uploads the requested additional documents.29. System verifies the uploaded additional documents for completeness and authenticity.30. Authorities review the additional documents.31. Authorities update the renewal application status as \"Under review\" or \"Complete\".32. System notifies the user of the renewal application status update.33. User acknowledges the renewal application status update.34. System updates the renewal application status in the database.35. If approved, system generates a new identity card.36. User receives a notification to collect the new identity card.37. User collects the new identity card.38. System updates the renewal application status as \"Completed\".39. If rejected, system notifies the user of the rejection reason.40. User acknowledges the rejection reason.41. System updates the renewal application status as \"Rejected\".42. System provides an option for the user to initiate a new renewal application.", "pred_act": "initiates, prompts, input, enters, validates, prompts, upload, selects, uploads, verifies, confirms, generates, displays, prompts, make, selects, completes, confirms, updates, notifies, acknowledges, saves, sends, generates, prints, receives, updates, forwards, review, update, request, receives, upload, uploads, verifies, review, update, notifies, acknowledges, updates, generates, receives, collects, updates, notifies, acknowledges, updates, provides, initiate\n", "pred_obj": "user, system, authorities, renewal application number, renewal process, payment method, database, email confirmation, renewal acknowledgment receipt, identity card, rejection reason"}
{"index": 71, "ucName": "LoseIdentityCard", "uctext": "LoseIdentityCard", "steps": "1. The Citizen presses on the LoseIdentityCard button. \n2. The system directly sends a lost card notification to the appropriate clerk. \n3. The Citizen goes to the clerk's office with a copy of the loss report.", "dataset": "eANCI", "act": "presses, sends, goes", "obj": "Citizen, LoseIdentityCard button, system, lost card notification, clerk, clerk's office, copy of the loss report", "pred_steps": "1. User reports loss of identity card through the application.2. System captures user's personal information and identity card details.3. System generates a unique reference number for the user's lost identity card report.4. User is provided with the reference number for future inquiries.5. System flags the lost identity card in the database to prevent unauthorized use.6. System sends a notification to the admin for further action.7. Admin verifies the report and updates the status of the lost identity card in the system.8. User can follow up on the status of their lost identity card using the reference number provided.", "pred_act": "reports, captures, generates, is, flags, sends, verifies, updates, can, follow\n", "pred_obj": "user, system, identity card, application, personal information, reference number, database, admin, report, status, notification"}
{"index": 72, "ucName": "LostElectoralCard", "uctext": "LostElectoralCard", "steps": "1. The Citizen presses on the Lost Electoral Card button. \n2. The system directly sends a lost card notification to the appropriate clerk. \n3. The Citizen goes to the clerk's office with a copy of the lost card report.", "dataset": "eANCI", "act": "presses, sends, goes", "obj": "Citizen, Lost Electoral Card button, system, lost card notification, clerk, clerk's office, copy of the lost card report", "pred_steps": "Functional Steps:1. User clicks on the \"Report Lost Electoral Card\" option on the main screen.2. System prompts the user to enter their personal information (name, address, contact number).3. User enters their personal information and clicks on the \"Next\" button.4. System displays a confirmation message asking the user to confirm the report of the lost electoral card.5. User confirms the report by clicking on the \"Confirm\" button.6. System generates a unique reference number for the lost electoral card report.7. System notifies the user that the report has been successfully submitted and provides the reference number for future inquiries.8. Use case ends.", "pred_act": "clicks prompts enter enters clicks displays confirm confirms clicking generates notifies provides ends\n", "pred_obj": "functional steps, user, system, report lost electoral card, main screen, personal information, name, address, contact number, next button, confirmation message, lost electoral card, confirm button, unique reference number, report, reference number, inquiries, use case"}
{"index": 73, "ucName": "CancellationCitizen", "uctext": "CancellationCitizen", "steps": "1. \n3. The clerk presses the delete-citizen button. \n2. The system asks the clerk for confirmation. The clerk confirms the operation. \n4. The system deletes the citizen.", "dataset": "eANCI", "act": "presses, asks, confirms, deletes", "obj": "clerk, delete-citizen button, system, confirmation, operation, citizen", "pred_steps": "1. User selects the option to cancel their citizenship.2. System prompts user to confirm cancellation.3. User confirms cancellation.4. System verifies the user's identity.5. System processes the cancellation request.6. System updates the citizen database to reflect the cancellation.7. System notifies relevant authorities about the cancellation.8. System displays a confirmation message to the user.9. Use case ends.", "pred_act": "selects, prompts, confirm, confirms, verifies, processes, updates, notifies, displays, ends\n", "pred_obj": "user, option, citizenship, system, user, cancellation, user, system, user's identity, system, cancellation request, system, citizen database, cancellation, system, authorities, cancellation, system, confirmation message, user, use case"}
{"index": 74, "ucName": "ElectoralCardRequest", "uctext": "ElectoralCardRequest", "steps": "1. The Citizen presses on the Electoral Card button. \n2. The system displays the card request form. \n3. Citizen confirms the operation \n4. The system sends a notification to the clerk. \n5. The citizen will receive the voter card, which will be delivered to his/her home.", "dataset": "eANCI", "act": "presses, displays, confirms, sends, receive, will be delivered", "obj": "Citizen, Electoral Card button, system, card request form, operation, notification, clerk, voter card, home", "pred_steps": "Functional Steps:1. User logs into the system.2. User navigates to the Electoral Card Request section.3. User enters their personal information (name, address, date of birth, etc.).4. User uploads necessary identification documents (ID card, passport, etc.).5. User reviews the information provided.6. User submits the request.7. System verifies the information and documents.8. System generates a unique request ID.9. System sends a confirmation message to the user.10. The request is forwarded to the relevant authority for further processing.", "pred_act": "logs navigates enters uploads reviews submits verifies generates sends forwarded\n", "pred_obj": "user, system, electoral card request, personal information, documents, request, relevant authority"}
{"index": 75, "ucName": "ViewPractice", "uctext": "ViewPractice", "steps": "1. Citizen clicks on the button view practices(ID Card, Change of Residence). \n2. The system displays a screen with the practices that concern the citizen.", "dataset": "eANCI", "act": "clicks, displays", "obj": "Citizen, button, view practices, ID Card, Change of Residence, system, screen, practices", "pred_steps": "1. User navigates to the \"Practice\" section of the application.2. System retrieves and displays the list of available practice items.3. User selects a practice item from the list.4. System retrieves the details of the selected practice item.5. System displays the details of the selected practice item to the user.", "pred_act": "navigates retrieves displays selects retrieves displays\n", "pred_obj": "user, system, practice item"}
{"index": 76, "ucName": "Practice Accepted", "uctext": "Practice Accepted", "steps": "1. The Clerk accepts the file. \n2. The system sets the practice as accepted. It then sends a notification to the Citizen.", "dataset": "eANCI", "act": "accepts, sets, sends", "obj": "Clerk, file, system, practice, notification, Citizen", "pred_steps": "1. User selects the \"Practice\" option from the main menu.2. User enters the details for the practice session (e.g., date, time, duration).3. User confirms the details entered.4. System saves the practice session information.5. System displays a confirmation message that the practice session has been successfully scheduled.", "pred_act": "selects enters confirms saves displays\n", "pred_obj": "user, system"}
{"index": 77, "ucName": "PracticeRejected", "uctext": "PracticeRejected", "steps": "1. The Clerk rejects the file. \n2. The system sets the practice as rejected. It then sends a notification to the Citizen.", "dataset": "eANCI", "act": "rejects, sets, sends", "obj": "Clerk, file, system, practice, notification, Citizen", "pred_steps": "1. Retrieve the practice rejection notification.2. Identify the reason for rejection.3. Determine the appropriate action to be taken based on the rejection reason.4. Notify the user about the rejection and the next steps to be followed.5. Log the practice rejection event for record-keeping purposes.", "pred_act": "Retrieve, Identify, Determine, Notify, Log\n", "pred_obj": "practice rejection notification, rejection reason, rejection, user, practice rejection event"}
{"index": 78, "ucName": "ViewPracticesAwaitingEmployee", "uctext": "ViewPracticesAwaitingEmployee", "steps": "1. Employee selects 'View Requests on Hold'. \n2. The System shows the list of pending practices.", "dataset": "eANCI", "act": "selects, shows, output", "obj": "Entities/Objects: Employee, View Requests on Hold, System, list of pending practices", "pred_steps": "1. Authenticate the employee's credentials.2. Retrieve a list of practices awaiting the employee's review.3. Display the list of practices to the employee.4. Allow the employee to view details of each practice.5. Provide options for the employee to approve, reject, or request more information on each practice.", "pred_act": "Authenticate Retrieve Display Allow view Provide approve reject request\n", "pred_obj": "employee, practices"}
{"index": 79, "ucName": "Night Reception", "uctext": "Night Reception", "steps": "1. The user selects the Social Assistance feature by selecting 'Night Reception Request'. \n2. The system displays the form for entering the applicant and recipient data. \n3. The user enters his/her own data and if necessary enters the data of a third person specifying the relationship with that person. He also specifies an alternative home or address and a possible date of appointment with social workers. He then submits the form. \n4. The system picks up the master data of the requesting citizen and the receiving citizen (if different from the requestor), and data regarding the receiving Citizen's household. The request is sent to the Social Services office and the user is notified of the submission.", "dataset": "eANCI", "act": "selects, displays, enters, specifies, submits, picks up, sends, notifies", "obj": "user, Social Assistance feature, Night Reception Request, system, form, applicant, recipient, data, his/her own data, third person, relationship, alternative home, address, possible date of appointment, social workers, master data, requesting citizen, receiving citizen, receiving Citizen's household, Social Services office, submission", "pred_steps": "1. Receive notification of night reception requirement.2. Prepare reception area for night operations.3. Ensure availability of necessary resources and information.4. Greet visitors or guests entering the premises at night.5. Verify identity and purpose of visit.6. Provide assistance or information as required.7. Ensure security protocols are followed.8. Monitor and manage visitor access.9. Handle any emergencies or incidents that may arise.10. Update records or logs as necessary.11. Close reception area at the end of the night shift.", "pred_act": "Receive, Prepare, Ensure, Greet, Verify, Provide, Ensure, Monitor, manage, Handle, arise, Update, Close\n", "pred_obj": "notification, reception requirement, reception area, operations, availability, resources, information, visitors, guests, premises, identity, purpose, visit, assistance, security protocols, access, emergencies, incidents, records, logs, night shift"}
{"index": 80, "ucName": "Sickness Allowance", "uctext": "Sickness Allowance", "steps": "1. User selects 'Request Sickness Allowance'. \n2. The system displays the page with the information for requesting the INPS office for the sickness allowance, also allowing the user to print it out.", "dataset": "eANCI", "act": "\"selects, displays, allowing, print, is\"", "obj": "User, Request Sickness Allowance, system, page, information, INPS office, sickness allowance, print", "pred_steps": "1. Collect employee's sickness report and medical certificate.2. Verify the authenticity of the sickness report and medical certificate.3. Calculate the number of sick leave days eligible for sickness allowance.4. Determine the amount of sickness allowance to be paid based on company policy and regulations.5. Generate a payment voucher for the sickness allowance.6. Update employee's record with the sickness allowance payment details.7. Notify the employee about the approved sickness allowance payment.8. Provide necessary documentation to the payroll department for processing the sickness allowance payment.", "pred_act": "Collect,Verify,Calculate,Determine,Generate,Update,Notify,Provide\n", "pred_obj": "employee's sickness report, medical certificate, sickness allowance, company policy, regulations, payment voucher, employee's record, payroll department"}
{"index": 81, "ucName": "Housing Assistance", "uctext": "Housing Assistance", "steps": "1. The user selects the Social Assistance feature by selecting 'Housing Assistance Request (Evictions)'. \n2. The system displays the form for entering the applicant's and recipient's data (if different). \n3. The user enters his/her own data and those of the recipient (if the recipient is a third person)if necessary specifying the relationship with that person, also specifies the new domicile. The user selects the attached documentation (minutes of enforceable eviction, the new registered lease and the ISEE model). He/she then submits the form. \n4. The system retrieves the master data of the recipient citizen, and data regarding the recipient Citizen's household. The request is sent to the Social Services office and the user is notified of the submission.", "dataset": "eANCI", "act": "selects, displays, enters, specifies, selects, submits, retrieves, sends, notifies", "obj": "user, Social Assistance feature, Housing Assistance Request (Evictions), system, form, applicant's data, recipient's data, own data, recipient, relationship, new domicile, attached documentation, minutes of enforceable eviction, new registered lease, ISEE model, master data, recipient citizen, recipient Citizen's household, Social Services office, submission", "pred_steps": "1. User logs into the Housing Assistance system.2. User navigates to the \"Apply for Housing Assistance\" section.3. User fills out the required application form with personal and housing information.4. User submits the application form.5. The system verifies the information provided by the user.6. System checks for eligibility criteria for housing assistance.7. If the user meets the eligibility criteria, the system generates a unique application ID.8. User receives a confirmation message with the application ID.9. The application is forwarded to the relevant housing authority for further processing.10. User can track the application status using the provided application ID.", "pred_act": "logs navigates fills submits verifies checks meets generates receives forwarded track\n", "pred_obj": "user, housing assistance system, application form, system, application id, housing authority"}
{"index": 82, "ucName": "Home careDomestic assistance", "uctext": "Home careDomestic assistance", "steps": "1. User selects 'Request home care elderly, minors, disabled.' \n2. The system displays the form for entering the applicant and recipient data. \n3. The user enters the master data of the applicant and if necessary enters the data of a third person specifying the relationship with that person. \n4. The system retrieves the data of the applicant citizen , the master data of the recipient citizen (in case the applicant and the recipient were not the same person), and the data concerning the household of the recipient Citizen. \n5. The user specifies the psycho-physical conditions of the recipient specifying the attached documents (disability certificate issued by the ASL commission and/or health card of the attending physician and/or certificate of the pension provider,ISEE model) finally specifying a possible date of appointment with social workers. Then submit the form. \n6. The system picks up data regarding any social welfare services the recipient already uses. It then forwards the request to the Social Services office and notifies the Citizen that the request has been made.", "dataset": "eANCI", "act": "selects, displays, enters, retrieves, specifies, submit, picks up, forwards, notifies", "obj": "User, Request home care elderly, minors, disabled, system, form, applicant, recipient, master data, third person, relationship, citizen, household, psycho-physical conditions, attached documents, disability certificate, ASL commission, health card, attending physician, certificate, pension provider, ISEE model, date of appointment, social workers, social welfare services, Social Services office, Citizen, request", "pred_steps": "1. Login to the home care software system.2. Access the domestic assistance module.3. Create a new domestic assistance record for the client.4. Enter the details of the domestic assistance required by the client (e.g., cleaning, cooking, laundry).5. Assign a caregiver to the domestic assistance task.6. Set the date and time for the domestic assistance visit.7. Save the domestic assistance record and notify the caregiver.8. Monitor the status of the domestic assistance task.9. Mark the domestic assistance task as completed once finished.10. Generate a report on the domestic assistance provided for the client's records.", "pred_act": "Login, Access, Create, Enter, Assign, Set, Save, notify, Monitor, Mark, Generate\n", "pred_obj": "home care software system, domestic assistance module, domestic assistance record, client, details, caregiver, date, time, status, report, records"}
{"index": 83, "ucName": "Economic Assistance", "uctext": "Economic Assistance", "steps": "1. User selects 'Request economic assistance elderly, minor orphans, AIDS patients, prisoners, adults in need.' \n2. The system displays the form for entering the data of the applicant and the recipient. \n3. The user enters his/her own data and if necessary enters the data of a third person specifying the relationship with that person. \n4. The system retrieves the data of the applicant citizen , the master data of the recipient citizen (in case the applicant and the recipient were not the same person), and the data regarding the household of the recipient Citizen. \n5. The user specifies the psycho-physical conditions of the recipient specifying the attached documents (disability certificate issued by the ASL commission and/or health card of the attending physician and/or certificate of the pension provider,ISEE model) finally specifying a possible date of appointment with social workers. Then submit the form. \n6. The system picks up data regarding any social welfare services the recipient already uses. It then forwards the request to the Social Services office and notifies the user that the request has been made.", "dataset": "eANCI", "act": "\"selects, displays, enters, retrieves, specifies, submit, picks up, forwards, notifies\"", "obj": "User, Request economic assistance, elderly, minor orphans, AIDS patients, prisoners, adults in need, system, form, data, applicant, recipient, third person, relationship, master data, household, psycho-physical conditions, attached documents, disability certificate, ASL commission, health card, attending physician, certificate, pension provider, ISEE model, date of appointment, social workers, social welfare services, Social Services office", "pred_steps": "1. Gather information about the individual or organization requesting economic assistance.2. Verify the eligibility criteria for receiving economic assistance.3. Collect necessary documentation to support the request for economic assistance.4. Evaluate the request based on the provided information and documentation.5. Determine the amount of economic assistance to be provided.6. Notify the individual or organization about the decision on the request for economic assistance.7. Disburse the approved economic assistance amount to the recipient.8. Monitor and track the usage of the economic assistance provided.9. Follow up with the recipient to assess the impact of the economic assistance.", "pred_act": "Gather, Verify, Collect, Evaluate, Determine, Notify, Disburse, Monitor, Follow\n", "pred_obj": "individual, organization, economic assistance, eligibility criteria, documentation, information, decision, recipient, usage, impact"}
{"index": 84, "ucName": "DeleteEmployee", "uctext": "DeleteEmployee", "steps": "1. The administrator presses the delete employee button. \n2. The system asks the administrator for confirmation. \n3. The administrator confirms the operation. \n4. The system deletes the 'employee.", "dataset": "eANCI", "act": "presses, asks, confirms, deletes", "obj": "administrator, delete employee button, system, confirmation, operation, employee", "pred_steps": "Steps:1. User selects the option to delete an employee from the system.2. System prompts the user to enter the employee ID or selects an employee from a list.3. User provides the ID of the employee or selects the employee from the list.4. System validates the employee ID and confirms if the selected employee is correct.5. System displays a confirmation message asking the user to confirm the deletion.6. User confirms the deletion.7. System deletes the employee record from the database and associated data.8. System displays a success message indicating that the employee has been successfully deleted.9. System returns to the main menu or previous page.", "pred_act": "selects prompts enter selects provides selects validates confirms displays confirm confirms deletes displays indicating deleted returns\n", "pred_obj": "user, system, employee, option, employee id, list, record, database, data, message, main menu, page"}
{"index": 85, "ucName": "AssistanceGirlsMothersMinors", "uctext": "AssistanceGirlsMothersMinors", "steps": "1. The user selects the Social Assistance feature by selecting 'Request for Assistance to GirlsMothers and Minors in Difficulty'. \n2. The system displays the form for entering the applicant's and recipient's data. \n3. The user enters his/her own data and those of the recipient of the request (himself/herself, other person) if necessary specifying the relationship with that person. He/she also specifies a possible appointment date with Social Workers. He/she then submits the form. \n4. The system retrieves from the system the master data of the recipient citizen, and data regarding the household of the recipient Citizen. The request is sent to the Social Services office and the user is notified of the submission.", "dataset": "eANCI", "act": "\"selects, displays, enters, specifies, submits, retrieves, sends, notifies\"", "obj": "user, Social Assistance feature, Request for Assistance to GirlsMothers and Minors in Difficulty, system, form, applicant's data, recipient's data, user's data, recipient of the request, relationship, appointment date, Social Workers, master data of the recipient citizen, data regarding the household of the recipient Citizen, request, Social Services office, submission", "pred_steps": "1. Display list of assistance services for girls, mothers, and minors.2. Allow user to select a specific assistance service category.3. Show detailed information about the selected assistance service.4. Provide contact information or a contact form for the user to request assistance.5. Log the user's request for assistance in the system.6. Notify the appropriate personnel or organization about the user's request for assistance.", "pred_act": "Display, Allow, Show, Provide, Log, Notify\n", "pred_obj": "list of assistance services, girls, mothers, minors, user, specific assistance service category, detailed information, selected assistance service, contact information, contact form, contact form for the user, assistance, user's request for assistance, system, user's request for assistance, appropriate personnel, organization, user's request for assistance"}
{"index": 86, "ucName": "ResidentialResidential care", "uctext": "ResidentialResidential care", "steps": "1. User selects 'Request residential and semi-residential care.' \n2. The system displays the form for entering the applicant's and recipient's data. \n3. The user enters his/her own data and if necessary enters the data of a third person specifying the relationship with that person. \n4. The system retrieves the master data of the applicant, the recipient citizen (if the recipient is a third person), and data regarding the household of the recipient Citizen. \n5. The user specifies the recipient's psycho-physical condition, the reason for the request, the type of service requested, and the hours required. He/she then submits the form. \n6. The system forwards the request to the appropriate ASL and notifies the user that the request has been made.", "dataset": "eANCI", "act": "selects, displays, enters, retrieves, specifies, submits, forwards, notifies", "obj": "User, Request residential and semi-residential care, system, form, applicant's data, recipient's data, user's data, third person, relationship, master data, applicant, recipient citizen, household, recipient Citizen, psycho-physical condition, reason for the request, type of service, hours, ASL, request", "pred_steps": "1. Verify the availability of residential care services.2. Collect necessary information about the resident requiring care.3. Create a profile for the resident in the system.4. Assign a care provider or facility based on the resident's needs and location.5. Schedule an initial assessment meeting with the caregiver or facility staff.6. Review and confirm the care plan with the caregiver or facility staff.7. Monitor the care progress and update the care plan as needed.8. Generate reports on the resident's status and care provided.9. End the residential care service when it is no longer needed.10. Archive the resident's profile for future reference.", "pred_act": "Verify, Collect, Create, Assign, Schedule, Review, confirm, Monitor, update, Generate, End, Archive\n", "pred_obj": "availability, residential care services, necessary information, resident, care, profile, system, care provider, facility, resident's needs, location, initial assessment meeting, caregiver, facility staff, care plan, care progress, reports, resident's status, care, residential care service, resident's profile, future reference"}
{"index": 87, "ucName": "Usury Victims Funds", "uctext": "Usury Victims Funds", "steps": "1. The user selects the feature 'Application for Solidarity Fund Allocation for Victims of Usury and Extortion.' \n2. The system displays the information and related forms to be downloaded and sent to the Prefecture, offering in addition the possibility to print it out.", "dataset": "eANCI", "act": ",  selects, displays, download, send, offer, print, ,  displays, download, send, offer, print", "obj": "user, feature 'Application for Solidarity Fund Allocation for Victims of Usury and Extortion', system, information, related forms, Prefecture, possibility", "pred_steps": "1. Create a new fund for usury victims.2. Define the fund details such as fund name, fund description, fund goal, and fund status.3. Add usury victims to the fund by providing victim details like name, contact information, and loan amount.4. Record the funds contributed by donors to support usury victims.5. Track the total amount of funds collected for usury victims.6. Allow donors to make contributions to the fund electronically or through other payment methods.7. Notify donors about the progress of the fund and how their contributions are making a difference.8. Provide regular reports on the fund's financial status and how the funds are being used to support usury victims.9. Allow administrators to manage the fund, add or remove victims, update fund details, and generate reports.10. Ensure that only authorized users have access to sensitive fund and victim information.", "pred_act": "Create, Define, Add, Record, Track, Allow, make, Notify, Provide, Allow, manage, add, remove, update, generate, Ensure, have\n", "pred_obj": "fund name, fund description, fund goal, fund status, name, contact information, loan amount"}
{"index": 88, "ucName": "IndemnityAccompaniment", "uctext": "IndemnityAccompaniment", "steps": "1. User selects 'Request Accompaniment Allowance'. \n2. The system displays the information about the disability pension and shows the link to download the relevant form to send to INPS, providing the option to print it out. It also shows direct links to the request for family status and marital status.", "dataset": "eANCI", "act": ",  selects, displays, shows, provides, shows, ,  (No action in this part of the sentence, the predicate is \"is\")", "obj": "User, Request Accompaniment Allowance, system, information, disability pension, link, form, INPS, option, family status, marital status", "pred_steps": "1. User initiates the indemnity accompaniment process.2. System displays a form to collect relevant information from the user.3. User enters the necessary details such as name, contact information, and reason for indemnity request.4. System validates the entered information for accuracy and completeness.5. System generates a unique indemnity identification number and associates it with the request.6. User attaches any supporting documents or evidence to the request, if applicable.7. System verifies the attached documents for validity and relevance.8. System calculates the estimated indemnity amount based on the provided information and predefined rules.9. System displays the calculated indemnity amount to the user.10. User confirms the indemnity amount displayed.11. System sends an acknowledgement email to the user with the indemnity request details.12. System logs the indemnity request in the system's database.13. System forwards the indemnity request to the appropriate department or personnel for further processing.14. The responsible department reviews the indemnity request and associated documents.15. The responsible department may request additional information or clarification from the user, if needed.16. User provides any requested additional information or clarification.17. The responsible department verifies the provided additional information for accuracy and completeness.18. The responsible department approves or rejects the indemnity request based on predefined criteria.19. System updates the status of the indemnity request to approved or rejected.20. If the indemnity request is approved, system generates the necessary indemnity documents and sends them to the user via email or postal mail.21. If the indemnity request is rejected, system sends a rejection notification to the user explaining the reason.22. User receives the indemnity documents and verifies their accuracy.23. User acknowledges the receipt of indemnity documents to the system, if required.24. System updates the status of the indemnity request to completed.25. Indemnity accompaniment process ends.", "pred_act": "initiates displays enters validates generates associates attaches verifies calculates displays confirms sends logs forwards reviews request provides verifies approves rejects updates generates sends receives verifies acknowledges updates ends\n", "pred_obj": "user, system, form, name, contact information, reason for indemnity request, indemnity identification number, request, supporting documents, evidence, indemnity amount, acknowledgement email, indemnity request details, system's database, department, personnel, additional information, clarification, criteria, indemnity documents, rejection notification, mail, indemnity accompaniment process"}
{"index": 89, "ucName": "ShowPracticeAttendedEmployee", "uctext": "ShowPracticeAttendedEmployee", "steps": "1. The system displays information regarding the selected practice with its practice acceptance or practice rejection options. \n2. The Clerk can Accept or Reject the practice if it is already complete with all the documentation, necessary signatures and after verifying it. He/she can also print the practice data if necessary.", "dataset": "eANCI", "act": ",  displays, acceptance, rejection, can Accept, can Reject, can print, ,  can Accept, can Reject, can print", "obj": "Entities/Objects: system, information, practice, practice acceptance, practice rejection options, Clerk, documentation, necessary signatures, practice data", "pred_steps": "1. Retrieve the list of employees who have attended practice sessions.2. Display the list of employees along with the details of the practice sessions they have attended.3. Provide options for filtering and sorting the list based on parameters such as employee name, practice session date, etc.4. Allow the user to select a specific employee to view detailed information about the practice sessions they have attended.5. Display the detailed information for the selected employee including the date and time of each practice session, duration, location, etc.6. Offer the option to print or export the information for further analysis or documentation purposes.", "pred_act": "Retrieve,attended,Display,attended,Provide,filtering,sorting,Allow,select,view,attended,Display,including,Offer,print,export\n", "pred_obj": "employees, practice sessions, employee name, practice session date, employee, date, time, duration, location"}
{"index": 90, "ucName": "PlanZoneAssistance", "uctext": "PlanZoneAssistance", "steps": "1. The user remotely selects the Social Assistance feature by selecting 'Zone Plan: assistance services'. \n2. The system displays the zone plan regarding assistance services.", "dataset": "eANCI", "act": "\"selects, displays\"", "obj": "user, Social Assistance feature, Zone Plan: assistance services, system, zone plan, assistance services", "pred_steps": "1. User launches the PlanZoneAssistance feature.2. User selects the project for which they need assistance.3. System displays the project plan with options for assistance.4. User selects the specific aspect of the project they need help with.5. System provides relevant information or guidance to assist the user.6. User reviews the provided assistance and takes necessary actions.7. User exits the PlanZoneAssistance feature.", "pred_act": "launches selects displays selects provides reviews takes exits\n", "pred_obj": "user, planzoneassistance feature, project, system, project plan, options for assistance, specific aspect of the project, information or guidance, actions"}
{"index": 91, "ucName": "War veteran qualification", "uctext": "War veteran qualification", "steps": "1. The user selects the 'Request for Recognition of Qualification as a veteran or orphan of labor' feature. \n2. The system shows the information and related forms to be downloaded and sent to the Prefecture,offering the option to print it out. It also shows a direct link to the page for requesting the Birth Certificate, Residence Certificate and Death Certificate.", "dataset": "eANCI", "act": "Action/Predicate: selects, shows, offers, link to", "obj": "user, 'Request for Recognition of Qualification as a veteran or orphan of labor' feature, system, information, related forms, Prefecture, option, Birth Certificate, Residence Certificate, Death Certificate", "pred_steps": "1. Gather information on the war veteran's military service history.2. Verify the authenticity of the provided military service documents.3. Review the criteria and requirements for war veteran qualification.4. Determine if the war veteran meets the eligibility criteria based on the service history.5. Issue a war veteran qualification certificate if the criteria are met.6. Notify the war veteran of the qualification status.7. Update the database with the war veteran's qualification status.", "pred_act": "Gather, Verify, Review, Determine, Issue, Notify, Update\n", "pred_obj": "war veteran, military service history, military service documents, criteria, requirements, war veteran qualification, eligibility criteria, war veteran, war veteran qualification certificate, war veteran, qualification status, database, war veteran's qualification status"}
{"index": 92, "ucName": "DisabledParkingRelease", "uctext": "DisabledParkingRelease", "steps": "1. The user selects the Social Assistance feature by selecting 'Disabled Parking Release.' \n2. The system displays the form for entering applicant and recipient data (if different). \n3. The user enters the master data of the applicant and those of the recipient (if different) if necessary specifying the relationship to that person. Also specified is the type of documentation attached to the traffic police command (medical-legal certificate issued by the ASL commission). It then submits the form. \n4. The system picks up the master data of the recipient citizen. The request is sent to the traffic police command and the user is notified of the submission.", "dataset": "eANCI", "act": "selects, displays, enters, specifies, submits, picks up, sends, notifies", "obj": "user, Social Assistance feature, Disabled Parking Release, system, form, applicant, recipient, master data, relationship, type of documentation, traffic police command, medical-legal certificate, ASL commission, recipient citizen, request, submission", "pred_steps": "1. Identify the user requesting the disabled parking release.2. Verify the user's authorization to request the disabled parking release.3. Validate the reason for the disabled parking release request.4. Check the availability of alternative parking spaces for the user.5. Generate a disabled parking release permit if the request is approved.6. Notify the user about the status of their request (approved or denied).7. Update the system database with the disabled parking release information.", "pred_act": "Identify, Verify, Validate, Check, Generate, Notify, Update\n", "pred_obj": "user, disabled parking release, user's authorization, reason, availability, alternative parking spaces, permit, request, status, system database, information"}
{"index": 93, "ucName": "DisabledMobilityService", "uctext": "DisabledMobilityService", "steps": "1. User selects 'Disabled Mobility and Transportation Service.' \n2. The system displays the form for entering applicant and recipient data. \n3. The user enters his/her own data and if necessary enters the data of a third person specifying the relationship with that person. \n4. The system picks up the data of the applicant citizen , the master data of the recipient citizen (in case the applicant and recipient were not the same person), and the data regarding the household of the recipient Citizen. \n5. The user specifies the psycho-physical conditions of the recipient specifying the attached documents (disability certificate issued by the ASL commission and/or health card of the attending physician and/or certificate of the pension provider,ISEE model) finally specifying a possible date of appointment with the social workers. Then submit the form. \n6. The system picks up data regarding any social welfare services the recipient already uses. It then forwards the request to the Social Services office and notifies the user that the request has been made.", "dataset": "eANCI", "act": "selects, displays, enters, picks up, specifies, submit, picks up, forwards, notifies", "obj": "User, Disabled Mobility and Transportation Service, system, form, applicant, recipient, data, third person, relationship, applicant citizen, master data, recipient citizen, household, psycho-physical conditions, attached documents, disability certificate, ASL commission, health card, attending physician, certificate, pension provider, ISEE model, date of appointment, social workers, social welfare services, Social Services office, request", "pred_steps": "1. Identify user's location.2. Determine user's mobility assistance needs.3. Search for available mobility assistance service providers in the vicinity.4. Display a list of service providers with their availability status and ratings.5. Enable user to select preferred service provider.6. Confirm availability with the selected service provider.7. Notify user of the estimated time of arrival of the service provider.8. Track the service provider's location in real-time.9. Update user on the service provider's arrival.10. Complete the service once the user is assisted.", "pred_act": "Identify, Determine, Search, Display, Enable, Confirm, Notify, Track, Update, Complete\n", "pred_obj": "user, location, mobility assistance needs, mobility assistance service providers, vicinity, service providers, availability status, ratings, preferred service provider, availability, estimated time of arrival, service provider, service provider's location, service provider's arrival, service, user"}
{"index": 94, "ucName": "UnsubscribeNewsInformagiovani", "uctext": "UnsubscribeNewsInformagiovani", "steps": "1. Citizen requests unsubscription from advertisement service related to informagiovani news. \n2. The system displays a form to confirm the request. \n3. The citizen confirms the unsubscribe operation. \n4. The system deletes the citizen from the advertisement service.", "dataset": "eANCI", "act": "requests, displays, confirms, deletes", "obj": "Citizen, advertisement service, informagiovani news, system, form, request, unsubscribe operation", "pred_steps": "1. User selects the \"Unsubscribe\" option on the Informagiovani website.2. System displays a confirmation message asking the user to confirm their decision to unsubscribe from the newsletter.3. User confirms the decision to unsubscribe.4. System updates the user's subscription status in the database, marking them as unsubscribed.5. System sends a confirmation email to the user, informing them that they have successfully unsubscribed from the newsletter.6. System displays a success message on the website, confirming the user's successful unsubscribing from the newsletter.7. Use case ends.", "pred_act": "selects\n", "pred_obj": "user, informagiovani website, system, database, confirmation email, newsletter, website"}
{"index": 95, "ucName": "EnterCitizen", "uctext": "EnterCitizen", "steps": "1. The clerk logs into the system, and activates the citizen registration procedure. \n2. The system displays the form for entering a new citizen. \n3. The clerk enters the citizen's data and submits the registration request. \n4. The system receives the form, checks that the citizen entered by the clerk is not already in the system.", "dataset": "eANCI", "act": "logs, activates, displays, enters, submits, receives, checks", "obj": "clerk, system, citizen registration procedure, form, new citizen, citizen's data, registration request", "pred_steps": "Functional steps:1. Display a form with fields for entering citizen information.2. Prompt the user to enter the citizen's name, date of birth, gender, address, and any other required information.3. Validate the entered information to ensure it is in the correct format and within acceptable ranges.4. Save the citizen information in the database.5. Display a confirmation message to the user indicating that the citizen information has been successfully entered.", "pred_act": "Display, entering, Prompt, enter, Validate, ensure, Save, Display, indicating\n", "pred_obj": "citizen information, citizen's name, date of birth, gender, address, user"}
{"index": 96, "ucName": "CancellationCardGiovani", "uctext": "CancellationCardGiovani", "steps": "1. Citizen requests cancellation of CardGiovani. \n2. The system displays a form for entering the Card number. \n3. The citizen enters the number. \n4. The system verifies the existence of the card and the citizen's membership. \n5. The system displays a form for confirming the request. \n6. The citizen confirms the deletion of the card. \n7. The system deletes the youth card from the repository.", "dataset": "eANCI", "act": "requests, displays, enters, verifies, displays, confirms, deletes", "obj": "Citizen, CardGiovani, system, form, Card number, card, citizen's membership, youth card, repository", "pred_steps": "1. Verify if the user has permission to cancel the Giovani card.2. Retrieve the Giovani card associated with the user.3. Confirm with the user if they want to proceed with the cancellation.4. Update the status of the Giovani card to \"cancelled.\"5. Notify the user that the Giovani card has been successfully cancelled.", "pred_act": "VerifyhascancelRetrieveConfirmwantproceedUpdateNotify\n", "pred_obj": "user, giovani card, giovani card, user, giovani card, user, giovani card, user"}
{"index": 97, "ucName": "CardCanceled", "uctext": "CardCanceled", "steps": "1. Citizen decides he wants to cancel the youth card and then enters in the form that he wants to cancel it. \n2. The system receives the form notifies that the card has been cancelled and resubmits the form.", "dataset": "eANCI", "act": "decides, wants, enters, receives, notifies, resubmits", "obj": "Citizen, youth card, form, system, card", "pred_steps": "1. Verify that the user has requested to cancel a card.2. Retrieve the details of the card to be canceled.3. Check if there are any pending transactions on the card.4. If there are pending transactions, prompt the user to confirm the cancellation.5. If confirmed, update the status of the card to \"canceled\" in the system.6. Notify the user that the card has been successfully canceled.7. If there are no pending transactions, proceed to step 5 directly.8. End the process.", "pred_act": "Verify, requested, cancel, Retrieve, Check, pending, prompt, confirm, update, Notify, canceled, proceed, End\n", "pred_obj": "user, card, system"}
{"index": 98, "ucName": "EliminationConsultationReservation", "uctext": "EliminationConsultationReservation", "steps": "1. Citizen requests cancellation of interview reservation in the counseling center. \n2. The system displays a form to confirm the request. \n3. The citizen confirms the deletion of the reservation. \n4. Thesystemeliminatesreservation.", "dataset": "eANCI", "act": "requests, displays, confirms, eliminates", "obj": "Citizen, interview reservation, counseling center, system, form, request, deletion, reservation", "pred_steps": "1. User selects the \"Consultation Reservation\" option from the application menu.2. System displays a list of available elimination consultation dates and times.3. User selects a date and time from the list.4. System verifies if the selected date and time are still available for reservation.5. If the selected date and time are not available, system displays an error message and returns to the list of available dates and times.6. If the selected date and time are available, system prompts the user to enter their personal details, such as name and contact information.7. User enters their personal details.8. System validates the entered details for completeness and correctness.9. If the entered details are incomplete or incorrect, system displays an error message and prompts the user to enter their details again.10. If the entered details are valid, system confirms the reservation and updates the availability status for the selected date and time.11. System displays a confirmation message with the reservation details, including the selected date and time and the user's personal details.12. User can choose to print or email the confirmation details, or continue using the application.13. If the user chooses to print or email the confirmation details, system generates the appropriate output and provides the necessary options to accomplish the selected action.14. User completes the desired action (printing or emailing) for the confirmation details.15. System returns to the main menu or remains on the current screen, depending on the user's choice.", "pred_act": "selects, displays, selects, verifies, are, displays, returns, are, prompts, enter, enters, validates, are, displays, prompts, are, confirms, updates, displays, can, choose, continue, chooses, generates, provides, accomplish, completes, printing, emailing, returns, remains, are\n", "pred_obj": "user, system, consultation reservation, date, time, selection, error message, personal details, name, contact information, reservation, availability status, confirmation message, confirmation details, printing, emailing, application, necessary options, main menu, current screen"}
{"index": 99, "ucName": "InformationConsultingYouth", "uctext": "InformationConsultingYouth", "steps": "1. The Citizen requests to view the list of consulting rooms. \n3. \n2. The system allows to view the list of counseling centers. Citizen chooses the counseling center. \n4. The system returns information regarding the chosen consultatory displaying such data as: - its location; - its opening dates and times. - the list of booked interviews (if any)(invoking the use case VisualizationReservationConsu ltory).", "dataset": "eANCI", "act": "\"requests, allows, view, chooses, returns, displaying, invoking\"", "obj": "Citizen, list of consulting rooms, system, list of counseling centers, counseling center, chosen consultatory, location, opening dates and times, list of booked interviews, VisualizationReservationConsultory", "pred_steps": "1. User logs into the software system.2. User navigates to the \"Information Consulting\" section.3. User selects the \"Youth\" category.4. User inputs the specific information or question regarding youth-related topics.5. System retrieves relevant information or resources related to youth topics.6. System displays the information to the user.7. User can further interact with the information (e.g., save, share, print).8. User logs out of the system.", "pred_act": "logs, navigates, selects, inputs, retrieves, displays, interact, save, share, print, logs\n", "pred_obj": "user, software system, information consulting section, youth category, specific information, question, system, information, resources, topics"}
{"index": 100, "ucName": "Information", "uctext": "Information", "steps": "1. The Citizen requests to view the list of informagiovani news. \n3. \n2. The system allows to view the list of information regarding: - special employment official gazette; - local competition notices information; - study trips. The citizen selects the desired information. \n4. The system returns the information regarding the news specifying: - date of publication of the notice; - expiration date of the notice; - description", "dataset": "eANCI", "act": "\"requests, allows, view, selects, returns\"", "obj": "Citizen, list, informagiovani news, system, information, special employment official gazette, local competition notices information, study trips, date of publication of the notice, expiration date of the notice, description", "pred_steps": "1. Gather requirements for the information to be displayed.2. Determine the user interface design for displaying the information.3. Design the database schema to store the information.4. Implement the front-end to display the information according to the design.5. Implement the back-end to fetch and provide the information to the front-end.6. Test the functionality to ensure the information is displayed accurately.7. Deploy the software for users to access and view the information.8. Monitor and maintain the system to ensure ongoing availability and accuracy of the information.", "pred_act": "Gather, Determine, Design, Implement, Implement, Test, Deploy, Monitor, Maintain\n", "pred_obj": "requirements, information, user interface design, database schema, front-end, back-end, functionality, software, users, system"}
{"index": 101, "ucName": "EnrollmentCardYouth", "uctext": "EnrollmentCardYouth", "steps": "1. Citizen applies for youth card. \n2. The system displays a form for submitting the request. \n3. The citizen enters the card application data into a form. \n4. The system receives the form, verifies the data, and submits the request. \n5. The system notifies that the card has been entered and displays the card number and a summary of the data entered in a form.", "dataset": "eANCI", "act": "applies, displays, enters, receives, verifies, submits, notifies, displays", "obj": "Citizen, youth card, system, form, request, card application data, card, card number, summary of the data entered", "pred_steps": "1. Display a list of available youth programs.2. Allow the user to select a youth program for enrollment.3. Verify the user's eligibility for the selected program.4. Display the program details and required documentation for enrollment.5. Prompt the user to upload necessary documents.6. Validate the uploaded documents.7. Confirm the enrollment request.8. Notify the user of the enrollment status.", "pred_act": "Display, Allow, select, Verify, Display, Prompt, upload, Validate, Confirm, Notify\n", "pred_obj": "list, youth programs, user, youth program, user, user, program, documentation, user, documents, enrollment request, user"}
{"index": 102, "ucName": "SubscribeNewsInformagiovani", "uctext": "SubscribeNewsInformagiovani", "steps": "1. Citizen requests subscription to informagiovani news to receive service-related advertisements. \n2. The system displays a form for submitting the request. \n3. The citizen enters the news request data into a form. \n4. The system receives the form, verifies the data and submits the request.", "dataset": "eANCI", "act": "\"requests, displays, enters, receives, verifies, submits\"", "obj": "Citizen, subscription, informagiovani news, service-related advertisements, system, form, request, news request data", "pred_steps": "Functional Steps:1. User selects the \"Subscribe\" option on the News Informagiovani platform.2. User enters their email address to subscribe to the newsletter.3. System validates the email address format.4. System checks if the email address is already subscribed.5. If the email address is not already subscribed, system adds the email address to the subscriber list.6. System sends a confirmation email to the user's email address.7. Use case ends.", "pred_act": "selects, enters, validates, checks, adds, sends, ends\n", "pred_obj": "functional steps, user, \"subscribe\", news informagiovani platform, email address, newsletter, email address format, email address, email address, email address, subscriber list, confirmation email, email address, use case"}
{"index": 103, "ucName": "ChangePreservationInterview", "uctext": "ChangePreservationInterview", "steps": "1. Citizen requests a change of interview reservation in the counseling center. \n2. The system displays a form for editing the reservation fields. \n3. The citizen makes the changes in the form confirms the reservation. \n4. Ilsistemodificalapreservation.", "dataset": "eANCI", "act": "requests, displays, makes, confirms, modifica", "obj": "Citizen, interview reservation, counseling center, system, form, reservation fields, changes, Ilsistemodificalapreservation", "pred_steps": "1. Validate user's permission to change preservation interview.2. Display the list of available preservation interviews.3. Allow the user to select the preservation interview to be modified.4. Present the current details of the selected preservation interview.5. Provide options to edit the preservation interview details as required.6. Validate and save the changes made to the preservation interview.7. Display a confirmation message to the user indicating successful modification of the preservation interview.", "pred_act": "Validate, Display, Allow, Present, Provide, Validate, save, Display\n", "pred_obj": "user, permission, preservation interview"}
{"index": 104, "ucName": "NewsCanceled", "uctext": "NewsCanceled", "steps": "1. Citizen decides she wants to cancel informagiovani news and then enters in the form that she wants to cancel it. \n2. The system receives the form notifies that the news has been cancelled and resubmits the form.", "dataset": "eANCI", "act": ",  decides, enters, wants, receives, notifies, resubmits, ,  receives, notifies, resubmits", "obj": "Citizen, form, informagiovani news, system", "pred_steps": "1. Retrieve the news article that is being canceled.2. Notify the users subscribed to updates on this news article that it has been canceled.3. Remove the news article from the database.4. Update any relevant statistics or metrics related to the news article.5. Log the cancellation event for auditing purposes.", "pred_act": "RetrieveNotifysubscribedhas been canceledRemoveUpdateLog\n", "pred_obj": "news article, users, database, statistics, metrics, event"}
{"index": 105, "ucName": "ReservationInterview", "uctext": "ReservationInterview", "steps": "1. The citizen requests an interview in the preselected counseling center. \n2. The system displays a form for submitting the request. \n3. The citizen enters the interview request data into a form. \n4. The system receives the form, verifies the reservation data, and submits the request. \n5. Citizen requests prints out receipt of interview booking. \n6. Thesystemprintsthebooking.", "dataset": "eANCI", "act": "requests, displays, enters, receives, verifies, submits, requests, prints, prints", "obj": "citizen, interview, preselected counseling center, system, form, request, interview request data, reservation data, receipt of interview booking, booking", "pred_steps": "1. Display available interview time slots.2. Select a preferred interview time slot.3. Enter candidate details.4. Validate candidate information.5. Confirm the reservation.6. Send confirmation email to the candidate.7. Update the interview schedule with the reservation.", "pred_act": "Display, Select, Enter, Validate, Confirm, Send, Update\n", "pred_obj": "interview time slots, candidate details, candidate information, reservation, confirmation email, interview schedule"}
{"index": 106, "ucName": "EntryEmployee", "uctext": "EntryEmployee", "steps": "1. The administrator logs into the system, via administrative terminal, and activates the Employee Registration procedure. \n2. The system displays the form for entering a new employee. \n3. The Administrator enters the Employee's data and submits the registration request. \n4. The system receives the form, verifies that the matriculation entered by the Administrator is not already in the system and generates a password, saves the entered data and displays a notification of successful registration with the password assigned to the employee.", "dataset": "eANCI", "act": "logs, activates, displays, enters, submits, receives, verifies, generates, saves, displays", "obj": "administrator, system, administrative terminal, Employee Registration procedure, form, new employee, Employee's data, registration request, matriculation, password, notification of successful registration", "pred_steps": "1. Display the employee entry form.2. Prompt the user to enter employee details such as name, contact information, and position.3. Validate the entered employee details.4. Save the employee details to the database.5. Display a success message indicating that the employee entry was successful.", "pred_act": "Display, Prompt, enter, Validate, Save, Display, indicating\n", "pred_obj": "employee entry form, user, employee details, name, contact information, position, database, success message, employee entry"}
{"index": 107, "ucName": "ReservationInterviewCanceled", "uctext": "ReservationInterviewCanceled", "steps": "1. Citizen decides he wants to cancel the interview reservation and then enters in the form that he wants to cancel it. \n2. The system receives the form notifies that the interview booking has been cancelled and resubmits the form.", "dataset": "eANCI", "act": "decides, enters, receives, notifies, resubmits", "obj": "Citizen, interview reservation, form, system, interview booking", "pred_steps": "1. Verify the reservation interview cancellation request.2. Check if the reservation interview is within the cancellation timeframe.3. Update the reservation interview status to \"canceled\".4. Notify both the interviewer and interviewee about the cancellation.5. Update the calendar availability for both parties.6. Record the cancellation reason in the system.7. Send confirmation of the cancellation to both parties.8. End the process.", "pred_act": "Verify Check Update Notify Update Record Send End\n", "pred_obj": "reservation interview, cancellation request, reservation interview, cancellation timeframe, reservation interview status, interviewer, interviewee, calendar availability, cancellation reason, system, confirmation, process"}
{"index": 108, "ucName": "ViewReservationConsulting", "uctext": "ViewReservationConsulting", "steps": "1. Citizen requests viewing of reservation made in a consulting room. \n2. The system returns information regarding the chosen reservation displaying such data as: - Date and time; - Consultatory.", "dataset": "eANCI", "act": ",  requests, viewing, ,  returns, displaying", "obj": "Citizen, viewing, reservation, consulting room, system, information, chosen reservation, Date, time, Consultatory", "pred_steps": "1. Log in to the system.2. Access the reservation dashboard.3. Search for the consulting reservation.4. Select the specific consulting reservation from the list.5. View the details of the selected consulting reservation.6. Optionally, print or save the details for reference.", "pred_act": "Log in, Access, Search, Select, View, print, save\n", "pred_obj": "system, reservation dashboard, consulting reservation, consulting reservation, consulting reservation"}
{"index": 109, "ucName": "DeleteInformation", "uctext": "DeleteInformation", "steps": "1. Employee requests news deletion. \n2. The system displays the list of existing news items \n3. The employee chooses a news item. \n4. The system displays a form the confirmation of the operation. \n5. The employee confirms the operation through the form. \n6. The system receives the form, and clears the news data from the system.", "dataset": "eANCI", "act": "requests, displays, chooses, displays, confirms, receives, clears", "obj": "Employee, news, system, news items, news item, form, operation, form", "pred_steps": "1. User selects the information to be deleted.2. System prompts the user to confirm the deletion.3. User confirms the deletion.4. System deletes the selected information.5. System displays a confirmation message that the information has been successfully deleted.", "pred_act": "selects prompts confirm confirms deletes displays\n", "pred_obj": "user, system"}
{"index": 110, "ucName": "InformationLibaries", "uctext": "InformationLibaries", "steps": "1. The Citizen requests to view the list of libraries. \n3. \n2. The system allows viewing the list of libraries. Citizen chooses the library. \n4. The system returns information regarding the chosen library displaying such data as: - - - - location; opening dates and times; link to the library's website.", "dataset": "eANCI", "act": "\"requests, allows, view, chooses, returns, displaying\"", "obj": "Citizen, list of libraries, system, chosen library, location, opening dates and times, link to the library's website", "pred_steps": "1. User logs into the InformationLibaries system.2. User navigates to the search page.3. User enters search keywords.4. System retrieves relevant information from the databases.5. System displays search results to the user.6. User selects a specific piece of information for details.7. System displays detailed information to the user.8. User can download or save the information if desired.9. User logs out of the system when done.", "pred_act": "logs navigates enters retrieves displays selects displays can download save logs\n", "pred_obj": "user, informationlibaries system"}
{"index": 111, "ucName": "InformationEventsInTheTerritory", "uctext": "InformationEventsInTheTerritory", "steps": "1. The Citizen requests to view the list of events. \n3. \n2. The system allows viewing the list of events. The Citizen chooses the event. \n4. The system returns information regarding the chosen event displaying such data as: - - - - the location; the date and time of the event; site managing the event (Pro-loco).", "dataset": "eANCI", "act": "\"requests, allows, view, chooses, returns, displaying\"", "obj": "Citizen, list of events, system, event, location, date, time, site, Pro-loco", "pred_steps": "1. Gather information about events happening in the specified territory.2. Display a list of events in the territory with details such as event name, date, time, location, and description.3. Allow users to select an event for more information.4. Provide the option to filter events based on specific criteria (e.g., date, type of event).5. Allow users to search for events using keywords.6. Enable users to add selected events to their calendar or set reminders.7. Allow users to share event information through email or social media platforms.", "pred_act": "Gather, Display, Allow, Provide, Allow, Enable, Allow, share\n", "pred_obj": "information, events, territory, event name, date, time, location, description, users, criteria, type of event, keywords, calendar, reminders, email, social media platforms"}
{"index": 112, "ucName": "InformationMuseums", "uctext": "InformationMuseums", "steps": "1. The Citizen requests to view the list of museums. \n3. \n2. The system allows the list of museums to be displayed. Citizen chooses the museum. \n4. The system returns information regarding the chosen museum displaying such data as: - - - - location; opening dates and times; link to the museum's website.", "dataset": "eANCI", "act": "\"requests, allows, displayed, chooses, returns, displaying\"", "obj": "Citizen, list of museums, system, museum, location, opening dates and times, link to the museum's website", "pred_steps": "1. Display a list of available museums.2. Allow the user to select a specific museum for more information.3. Show the details of the selected museum, including its name, address, contact information, operating hours, and any additional information.4. Provide an option for the user to get directions to the selected museum.5. Allow the user to save a museum as a favorite for future reference.", "pred_act": "Display, Allow, select, Show, Provide, get, Allow, save\n", "pred_obj": "list of available museums, user, specific museum, details, name, address, contact information, operating hours, additional information, option, directions, favorite"}
{"index": 113, "ucName": "InformationPromotionTerritory", "uctext": "InformationPromotionTerritory", "steps": "1. The Citizen requests to view the list of territorial promotions. \n3. \n2. The system allows the list of promotions to be displayed. Citizen chooses the promotion. \n4. The system returns information regarding the chosen promotion.", "dataset": "eANCI", "act": "\"requests, allows, be displayed, chooses, returns\"", "obj": "Citizen, list of territorial promotions, system, list of promotions, promotion, information regarding the chosen promotion", "pred_steps": "1. User selects the \"Information Promotion Territory\" option.2. System displays a list of territories available for promotion.3. User selects a specific territory for promotion.4. System retrieves information related to the selected territory.5. System displays the relevant information for the selected territory.6. User can choose to promote the information for the selected territory.7. System processes the promotion request for the selected territory.", "pred_act": "selects, displays, selects, retrieves, displays, choose, promote, processes\n", "pred_obj": "user, system, \"information promotion territory\", territories, information, promotion request"}
{"index": 114, "ucName": "EntryInformation", "uctext": "EntryInformation", "steps": "1. The employee requests a new news entry. \n2. The system displays a form for submitting the request. \n3. The employee enters data about the new news item in a form. \n4. The system receives the form, and enters the news into the system.", "dataset": "eANCI", "act": "requests, displays, enters, receives, enters", "obj": "employee, new news entry, system, form, request, data, new news item, news", "pred_steps": "1. Display a form to enter the required information.2. Prompt the user to input the necessary data.3. Validate the input to ensure it meets the required format and constraints.4. Save the entered information in the system.5. Display a success message to indicate that the information has been saved.", "pred_act": "Display, Prompt, input, Validate, meets, Save, Display, indicate, has been saved\n", "pred_obj": "form, user, input, information, input, information, message, information"}
{"index": 115, "ucName": "EditInformation", "uctext": "EditInformation", "steps": "1. Employee requests a news change. \n2. The system displays the list of existing news items \n3. The employee chooses a news item. \n4. The system displays a form for editing the news. \n5. The employee enters data about the news into a form. \n6. The system receives the form, and updates the news data in the system.", "dataset": "eANCI", "act": "requests, displays, chooses, displays, enters, receives, updates", "obj": "Employee, news change, system, list of existing news items, news item, form, news, data, news data", "pred_steps": "1. User selects the option to edit information.2. System displays the existing information to be edited.3. User makes the necessary changes to the information.4. User saves the edited information.5. System validates the edited information.6. System updates the database with the edited information.7. System displays a success message indicating that the information has been successfully updated.", "pred_act": "selects, displays, makes, saves, validates, updates, displays\n", "pred_obj": "option, information, information, information, information, information, database, information, message, information"}
{"index": 116, "ucName": "ViewInformation", "uctext": "ViewInformation", "steps": "1. The Citizen requests to view the information in the territory. \n2. The system returns information regarding the territory by displaying such data as: - libraries; - events; - museums; - promotions present in the territory.", "dataset": "eANCI", "act": ",  requests, views, ,  returns, displaying", "obj": "Citizen, territory, system, information, libraries, events, museums, promotions", "pred_steps": "Steps:1. User requests to view information.2. System checks if the user is authorized to access the information.3. System retrieves the requested information from the database.4. System displays the information to the user.5. User reviews the information.6. User may choose to view additional information or exit.7. If user chooses to view additional information, go to step 1.8. If user chooses to exit, end the use case.", "pred_act": "requests, checks, retrieves, displays, reviews, choose, exit, chooses, view, exit\n", "pred_obj": "user, information, system, database"}
{"index": 117, "ucName": "LogoutAdministrator", "uctext": "LogoutAdministrator", "steps": "1. The administrator wants to end the work session and clicks on the Logout button. \n2. The system disconnects the administrator from the system and returns to the main screen.", "dataset": "eANCI", "act": "\"wants, clicks, disconnects, returns\"", "obj": "\"administrator, work session, Logout button, system, main screen\"", "pred_steps": "1. Click on the user profile icon.2. Select \"Logout\" option from the dropdown menu.3. Confirm the logout action if prompted.4. Redirect to the login page.", "pred_act": "Click, Select, Confirm, Redirect\n", "pred_obj": "user profile icon,\"logout\",dropdown menu,login page"}
{"index": 118, "ucName": "Communications", "uctext": "Communications", "steps": "1. The citizen accesses the communications area using the appropriate link \n2. The system displays the form for entering the data required for the communication (e.g. communication of the start of works,D.I.A., communication of the end of works...) \n3. The citizen enters the required data \n4. The system verifies correctness and completeness of the data then displays a summary screen or activates the use case DatiErrati. \n5. The citizen confirms the operation \n6. The system displays the form for printing \n7. The system sends a message notifying the appropriate employee of the request \n8. The citizen makes the printout to be delivered to the municipal office with a revenue stamp.", "dataset": "eANCI", "act": "accesses, displays, enters, verifies, displays, confirms, displays, sends, makes", "obj": "citizen, communications area, link, system, form, data, communication, start of works, D.I.A., end of works, summary screen, use case DatiErrati, operation, printout, employee, request, municipal office, revenue stamp", "pred_steps": "Functional Steps:1. Identify the communication needs and objectives.2. Determine the target audience for the communication.3. Choose the appropriate communication channels (e.g., email, messaging, video conferencing).4. Create the communication content.5. Review and approve the communication content.6. Distribute the communication to the target audience.7. Monitor and track the effectiveness of the communication.8. Collect feedback from the recipients.9. Analyze the feedback and make any necessary adjustments to improve future communications.", "pred_act": "Identify, Determine, Choose, Create, Review, approve, Distribute, Monitor, track, Collect, Analyze, make, improve\n", "pred_obj": "communication needs and objectives, target audience, communication channels, communication content, effectiveness, feedback"}
{"index": 119, "ucName": "DefinitionBuilding Offenses", "uctext": "DefinitionBuilding Offenses", "steps": "1. The citizen accesses the request area definition building offenses using the appropriate link \n2. The system displays the form for entering the data required for the request \n3. The citizen enters the required data \n4. The system verifies the correctness and completeness of the data then displays a summary screen or activates the use case DatiErrati \n5. The citizen confirms the operation \n6. The system displays a message notifying the request \n7. The system sends a request notification message to the appropriate employee.", "dataset": "eANCI", "act": "\"accesses, displays, enters, verifies, displays or activates, confirms, displays, sends\"", "obj": "citizen, request area definition building offenses, appropriate link, system, form, data, request, correctness, completeness, summary screen, use case DatiErrati, operation, message, employee", "pred_steps": "1. Gather requirements for offenses to be defined2. Access the system's \"Manage Offenses\" functionality3. Select the option to \"Create New Offense\"4. Enter the name of the offense5. Enter a description of the offense6. Assign a category or type to the offense7. Define any additional attributes or details required for the offense8. Save the newly defined offense in the system9. Verify that the offense has been successfully created10. Repeat the process for defining additional offenses as needed", "pred_act": "Gather, Access, Select, Enter, Enter, Assign, Define, Save, Verify, Repeat\n", "pred_obj": "requirements, system, offenses, option, name, description, category, type, attributes, details, offense, process"}
{"index": 120, "ucName": "Declaration in lieu of Notarization", "uctext": "Declaration in lieu of Notarization", "steps": "1. The citizen accesses the area Dichiarazione sostitutiva dell'atto di notorietà using the appropriate link \n2. The system displays the form for entering the data required for the request \n3. The citizen enters the required data \n4. The system verifies the correctness and completeness of the data then displays a summary screen or activates the DatiErrati use case \n5. The citizen confirms the operation \n6. The system displays a notification message \n7. The system sends a message notifying the appropriate employee of the request.", "dataset": "eANCI", "act": "accesses, displays, enters, verifies, displays/activates, confirms, displays, sends", "obj": "citizen, area Dichiarazione sostitutiva dell'atto di notorietà, link, system, form, data, request, summary screen, DatiErrati use case, operation, notification message, employee", "pred_steps": "1. User selects the option for \"Declaration in lieu of Notarization.\"2. User fills out the required information in the declaration form.3. System validates the entered information for completeness and correctness.4. User reviews the filled declaration form for accuracy.5. User submits the declaration form.6. System stores the submitted declaration information securely.7. System generates a unique reference number for the submitted declaration.8. System provides a confirmation message to the user regarding the successful submission of the declaration.", "pred_act": "selects, fills, validates, reviews, submits, stores, generates, provides\n", "pred_obj": "user, option for \"declaration in lieu of notarization\", declaration form, information, system, reference number, confirmation message"}
{"index": 121, "ucName": "VisionPlanRegulator", "uctext": "VisionPlanRegulator", "steps": "1. citizen accesses the Regulatory Plan area via the appropriate link \n2. the system displays the document", "dataset": "eANCI", "act": ",  accesses, displays", "obj": "citizen, Regulatory Plan area, link, system, document", "pred_steps": "1. Capture user's vision plan information2. Validate the vision plan details3. Determine if the user meets the criteria for the vision plan4. If user meets criteria, approve the vision plan5. If user does not meet criteria, reject the vision plan6. Notify user of approval or rejection of vision plan7. End of use case", "pred_act": "Capture Validate Determine meets approve meet reject Notify\n", "pred_obj": "user, vision plan, vision plan, user, user, vision plan, user, vision plan, user, vision plan"}
{"index": 122, "ucName": "SubmitBuildingProject", "uctext": "SubmitBuildingProject", "steps": "1. The citizen accesses the submit building project area via the appropriate link \n2. The system displays the form for entering the required data \n3. The citizen enters the required data \n4. The system verifies correctness and completeness of the data then displays a summary screen or activates the use case DatiErrati \n5. The citizen confirms the operation \n6. The system displays the form for printing \n7. The system sends a message notifying the appropriate employee of the request \n8. The citizen makes the printout to be delivered to the municipal office with the required documents and a revenue stamp attached.", "dataset": "eANCI", "act": "accesses, displays, enters, verifies, displays/activates, confirms, displays, sends, makes", "obj": "citizen, submit building project area, link, system, form, required data, summary screen, use case DatiErrati, operation, printout, message, employee, request, municipal office, required documents, revenue stamp", "pred_steps": "1. User logs into the system.2. User selects the option to submit a new building project.3. User fills out the required project details (e.g., project name, description, location, budget).4. User uploads any necessary documents (e.g., architectural plans, permits).5. User confirms the submission of the building project.6. System validates the information provided by the user.7. System saves the project details in the database.8. System notifies the user that the project has been successfully submitted.9. Use case ends.", "pred_act": "logs, selects, fills, uploads, confirms, validates, saves, notifies, ends\n", "pred_obj": "user, system, user, user, user, user, system, system, user, project"}
{"index": 123, "ucName": "SearchBuildingFile", "uctext": "SearchBuildingFile", "steps": "1. \n3. \n5. The citizen accesses the search area \n2. The system displays the form for entering the search key The citizen enters the search key \n4. Thesystemshowstheresultsof the search The citizen selects the file \n6. Thesystemdisplaysthefile.", "dataset": "eANCI", "act": "Verbs/Predicates: accesses, displays, enters, shows, selects, displaysthefile", "obj": "citizen, search area, system, form, search key, results, file", "pred_steps": "1. Display a search bar on the user interface.2. Provide options for the user to enter search keywords or criteria.3. Retrieve building files data from the database based on the search criteria entered by the user.4. Display the search results to the user.5. Allow the user to select a specific building file from the search results.6. Display detailed information of the selected building file to the user.", "pred_act": "Display, Provide, enter, Retrieve, entered, Display, Allow, select, Display\n", "pred_obj": "search bar, user interface, options, user, search keywords, criteria, building files data, database, search criteria, user, search results, user, user, building file, search results, detailed information, building file, user"}
{"index": 124, "ucName": "RequestAuthorization", "uctext": "RequestAuthorization", "steps": "1. The citizen accesses the certificate and authorization issuance area using the appropriate link \n2. The system displays the form for entering the data necessary to request the authorization (e.g. authorization connection to the water network, authorization connection to the sewer network ...) \n3. The citizen enters the required data \n4. The system verifies correctness and completeness of the data then displays a summary screen or activates the use case DatiErrati \n5. The citizen confirms the operation \n6. The system displays the form for printing \n7. The system sends a message notifying the appropriate employee of the request \n8. The citizen makes the printout to be delivered to the municipal office with the stamp and attachments.", "dataset": "eANCI", "act": "accesses, displays, enters, verifies, displays, confirms, displays, sends, makes", "obj": "citizen, certificate, authorization issuance area, link, system, form, data, authorization, authorization connection to the water network, authorization connection to the sewer network, correctness, completeness, summary screen, use case DatiErrati, operation, printout, message, employee, municipal office, stamp, attachments", "pred_steps": "1. User initiates the request for authorization.2. System validates the user's credentials.3. System checks user permissions and roles.4. System generates an authorization token.5. System associates the token with the user session.6. System logs the request for authorization.7. System notifies the user of the authorization status.8. Use case ends.", "pred_act": "initiates validates checks generates associates logs notifies ends\n", "pred_obj": "user, authorization, system, credentials, permissions, roles, token, session, request, status, use case"}
{"index": 125, "ucName": "RequestCopyFileEdilizio", "uctext": "RequestCopyFileEdilizio", "steps": "1. The citizen requests a copy of the file using the appropriate button \n2. The system sends the request to the clerk \n3. The system notifies the citizen that the request has been submitted and the copy will be sent to him/her shortly.", "dataset": "eANCI", "act": ",  requests, sends, notifies, ,  sends, ,  notifies", "obj": "citizen, file, appropriate button, system, request, clerk", "pred_steps": "1. User provides the file name and location to copy.2. System verifies if the file exists at the specified location.3. System creates a new copy of the file.4. System displays a success message indicating that the file copy was created.5. System updates the necessary logs or tracking information for the copied file.6. System ends the use case.", "pred_act": "provides, verifies, exists, creates, displays, indicating, updates, ends\n", "pred_obj": "user, system"}
{"index": 126, "ucName": "Request for Condonation Definition", "uctext": "Request for Condonation Definition", "steps": "1. Citizen accesses the request area definition condono using the appropriate link \n2. The system displays the form for entering the data required for the \n3. \n5. request The citizen enters the required data \n4. The system verifies the correctness and completeness of the data then displays a summary screen or activates the use case DatiErrati The citizen confirms the operation \n6. The system displays a message notifying the request \n7. The system sends a request notification message to the appropriate employee.", "dataset": "eANCI", "act": "accesses, displays, enters, verifies, displays/activates, confirms, displays, sends", "obj": "Citizen, request area definition condono, link, system, form, data, summary screen, use case DatiErrati, operation, message, request notification message, employee", "pred_steps": "1. User navigates to the Condonation Definition Request section.2. User fills out the required information form.3. System validates the information provided by the user.4. System generates a unique request ID for the condonation definition request.5. System sends a confirmation email to the user with the request ID.6. Request is stored in the system database.7. Request is forwarded to the relevant department for review.8. Department reviews the request and provides the condonation definition.9. System notifies the user about the condonation definition provided.10. User can view and download the condonation definition from their account.", "pred_act": "navigates, fills, validates, generates, sends, is, stored, is, forwarded, reviews, provides, notifies, can, view, download\n", "pred_obj": "user, system, request, request id, email, database, department, account"}
{"index": 127, "ucName": "RequestNumberCivic", "uctext": "RequestNumberCivic", "steps": "1. The citizen accesses the request area house number using the appropriate link \n3. \n5. \n2. The system displays the form for entering the data required for the request The citizen enters the required data \n4. The system verifies the correctness and completeness of the data then displays a summary screen or activates the use case DatiErrati The citizen confirms the operation \n6. The system displays a message notifying the request \n7. The system sends a request notification message to the appropriate employee.", "dataset": "eANCI", "act": "accesses, displays, enters, verifies, displays, activates, confirms, displays, sends", "obj": "citizen, request area house number, link, system, form, data, request, summary screen, use case DatiErrati, operation, message, employee", "pred_steps": "1. User selects \"Request Number Civic\" option.2. System displays a form for the user to enter the required information.3. User enters the details such as name, address, contact number, and civic number.4. System validates the input data for accuracy and completeness.5. System generates a unique request number for the civic request.6. System stores the request details along with the generated request number.7. System confirms successful submission of the civic request to the user.", "pred_act": "selects,displays,enter,enters,validates,generates,stores,confirms\n", "pred_obj": "user, system, request number civic, form, name, address, contact number, civic number, input data, accuracy, completeness, unique request number, request details, generated request number, successful submission, civic request"}
{"index": 128, "ucName": "LogoutCitizen", "uctext": "LogoutCitizen", "steps": "1. The citizen wants to end the work session and clicks on the Logout button. \n2. The system disconnects the citizen from the system and returns to the main screen.", "dataset": "eANCI", "act": ",  wants, clicks, disconnects, returns, ,  (No explicit action in the second part of the second sentence beyond what is captured in the first part; the predicate would be \"disconnects\" and \"returns\", but these are actions captured already in the first output string)", "obj": "citizen, work session, Logout button, system, main screen", "pred_steps": "1. Verify if the citizen is currently logged in.2. If the citizen is logged in, clear the current session and log the citizen out.3. Display a confirmation message that the logout was successful.4. End the session and redirect the citizen to the login page.5. If the citizen is not logged in, display an error message indicating that there is no active session to log out from.", "pred_act": "Verify, is, logged, clear, log, Display, was, End, redirect, is, logged, display, is\n", "pred_obj": "citizen, session, session, session"}
{"index": 129, "ucName": "RequestCadastralService", "uctext": "RequestCadastralService", "steps": "1. The citizen accesses the municipal cadastral service area using the appropriate link \n2. The system displays the form for entering the data required for the request \n3. The citizen enters the required data \n4. The system verifies correctness and completeness of the data then displays a summary screen or activates the use case DatiErrati \n5. The citizen confirms the transaction \n6. The system displays the payment method \n7. The citizen makes the choice \n8. The system sends a message notifying the appropriate employee of the request \n9. The system notifies the citizen that the request has been submitted and the copy will be sent to him/her shortly.", "dataset": "eANCI", "act": "accesses, displays, enters, verifies, displays/activates, confirms, displays, makes, sends, notifies", "obj": "citizen, municipal cadastral service area, link, system, form, data, request, summary screen, use case DatiErrati, transaction, payment method, choice, message, employee, copy", "pred_steps": "1. User selects the option to request cadastral service.2. System prompts the user to input the necessary information (e.g., property details, contact information).3. User enters the required details.4. System validates the information provided by the user.5. System generates a unique request ID for the cadastral service request.6. System assigns the request to the appropriate department or personnel for processing.7. System notifies the user that the request has been successfully submitted.8. The use case ends.", "pred_act": "selects prompts input enters validates generates assigns notifies ends\n", "pred_obj": "user, system, user, system, system, system, system, user, use case"}
{"index": 130, "ucName": "IssuingCertificates", "uctext": "IssuingCertificates", "steps": "1. The citizen accesses the certificate and permit issuance area using the appropriate link \n2. The system displays the form for entering the data required for the issuance of the certificate (e.g. certificate of fitness, certificate of habitability, ...) \n3. The citizen enters the required data \n4. The system verifies correctness and completeness of the data then displays a summary screen or activates the use case DatiErrati \n5. The citizen confirms the operation \n6. The system displays the form for printing \n7. The system sends a message notifying the appropriate employee of the request \n8. The citizen makes the printout to be delivered to the municipal office with the revenue stamp.", "dataset": "eANCI", "act": "accesses, displays, enters, verifies, displays, confirms, displays, sends, makes", "obj": "citizen, certificate, permit issuance area, link, system, form, data, certificate of fitness, certificate of habitability, summary screen, use case DatiErrati, operation, message, employee, request, printout, municipal office, revenue stamp", "pred_steps": "1. Verify the eligibility criteria for issuing certificates.2. Collect necessary information and documents from the applicant.3. Validate the submitted information and documents.4. Generate the certificate based on the validated information.5. Review the generated certificate for accuracy.6. Approve the certificate issuance.7. Notify the applicant about the issued certificate.8. Store a copy of the certificate in the system for record-keeping.", "pred_act": "Verify, Collect, Validate, Generate, Review, Approve, Notify, Store\n", "pred_obj": "the eligibility criteria, certificates, information, documents, the applicant, the submitted information, documents, the certificate, the validated information, the generated certificate, accuracy, the certificate issuance, the applicant, the issued certificate, a copy, the certificate, the system, record-keeping"}
{"index": 131, "ucName": "VisionCirculars", "uctext": "VisionCirculars", "steps": "1. \n3. The citizen accesses the circulars area through the appropriate link \n2. The system displays the numbered list of circulars The citizen chooses the circular via link \n4. Thesystemdisplaysthechosencircular", "dataset": "eANCI", "act": "accesses, displays, chooses, displaysthechosencircular", "obj": "citizen, circulars area, link, system, numbered list of circulars, circular, chosen circular", "pred_steps": "1. Login to the software system.2. Navigate to the \"VisionCirculars\" section.3. Search for the desired circular by entering keywords or filters.4. Select the specific circular from the search results.5. View the details of the selected circular.6. Optionally download or print the circular for reference.7. Mark the circular as read or unread.8. Comment or provide feedback on the circular if applicable.9. Logout of the software system.", "pred_act": "Login, Navigate, Search, entering, Select, View, download, print, Mark, provide, Logout\n", "pred_obj": "visioncirculars, circular"}
{"index": 132, "ucName": "UpdateEnvironmentalAnalysis", "uctext": "UpdateEnvironmentalAnalysis", "steps": "1. The municipal clerk after authenticating in the system updates the form that simply provides for the copy of the report of the analysis carried out on the environment by the Civil Defense \n2. The system responds by providing the clerk with a form in which to report the information prepared by the chemical experts. \n3. The employee completes the form field presented by the system and submits it. \n4. The system updates the form and allows it to be viewed by the Citizen.", "dataset": "eANCI", "act": "authenticates, updates, provides, responds, report, completes, submits, updates, allows, viewed", "obj": "municipal clerk, system, form, copy, report, analysis, environment, Civil Defense, chemical experts, employee, form field, Citizen", "pred_steps": "1. User opens the environmental analysis tool.2. User selects the project for which to update the environmental analysis.3. System retrieves the existing environmental analysis data for the selected project.4. User makes necessary updates to the environmental analysis data.5. User saves the changes to the environmental analysis.6. System validates the updated environmental analysis data.7. System updates the project with the new environmental analysis data.8. System notifies the user that the environmental analysis update is successful.9. Use case ends.", "pred_act": "opens, selects, retrieves, makes, saves, validates, updates, notifies, ends\n", "pred_obj": "environmental analysis tool, user, project, environmental analysis, system, environmental analysis data, use case"}
{"index": 133, "ucName": "UpdateBandsECompetitions", "uctext": "UpdateBandsECompetitions", "steps": "1. \n3. The municipal clerk after authenticating in the system updates the list of associations that have published a new notice of competition. \n2. The system responds by providing the clerk with a form to complete to update the fields: association_logo, description, association_name, notice. The clerk completes the fields of the form presented by the system and submits it. \n4. The system updates the form and allows it to be viewed by the Citizen.", "dataset": "eANCI", "act": "authenticates, updates, responds, provides, completes, submits, updates, allows, views", "obj": "municipal clerk, system, associations, new notice of competition, form, fields, association_logo, description, association_name, notice, Citizen", "pred_steps": "1. Retrieve a list of all bands and competitions from the database.2. Display the list of bands and competitions to the user for selection.3. Allow the user to choose a band and a competition to update.4. Retrieve the details of the selected band and competition from the database.5. Display the current details of the band and competition to the user.6. Allow the user to update the details of the band and competition.7. Validate the updated details to ensure they meet the required criteria.8. Update the details of the band and competition in the database.9. Display a confirmation message to the user that the update was successful.", "pred_act": "Retrieve, Display, Allow, Retrieve, Display, Allow, Validate, Update, Display\n", "pred_obj": "bands, competitions, database, list, user, details, criteria, confirmation message"}
{"index": 134, "ucName": "UpdateWeatherConditions", "uctext": "UpdateWeatherConditions", "steps": "1. \n3. The municipal employee after authenticating in the system updates the weather conditions of the municipality and regional provinces. \n2. The system responds by providing the clerk with a form to complete in order to update the fields: tempMin, tempMax, stateAtmospheric, nameCity, date. The employee completes the fields of the form presented by the system and submits it \n4. The system updates the form and allows it to be viewed by the Citizen.", "dataset": "eANCI", "act": "authenticating, updates, responds, providing, complete, submits, updates, allows, viewed", "obj": "municipal employee, system, weather conditions, municipality, regional provinces, clerk, form, fields, tempMin, tempMax, stateAtmospheric, nameCity, date, Citizen", "pred_steps": "Functional Steps:1. Retrieve the current weather conditions from the external weather API.2. Display the current weather conditions to the user for verification.3. Allow the user to update the weather conditions if necessary.4. Verify and save the updated weather conditions.5. Display a confirmation message to the user.6. End the use case.", "pred_act": "Retrieve, Display, Allow, update, Verify, save, Display, End\n", "pred_obj": "weather conditions, external weather api, user, user, confirmation message, user, use case"}
{"index": 135, "ucName": "ActivitiesUseful", "uctext": "ActivitiesUseful", "steps": "1. By selecting this use case, the Citizen accesses a screen for choosing two use cases: Woods, Waste \n2. The system provides a simple and intuitive screen that allows the user to choose which of the two services to visit, to indirectly help maintain acceptable, municipal environmental conditions. \n3. The Citizen chooses one of the two use cases Woods, or Waste. \n4. The system responds to the Citizen's need by displaying the desired page they had requested.", "dataset": "eANCI", "act": "\"selecting, accesses, provides, allows, choose, visit, maintain, chooses, responds, displaying, requested\"", "obj": "Citizen, screen, use cases, Woods, Waste, system, services, municipal environmental conditions, desired page", "pred_steps": "1. Gather requirements for the activities to be included in the software.2. Analyze the collected requirements and prioritize them based on their importance and feasibility.3. Design the user interface to allow users to interact with the activities.4. Develop the backend functionality to support the activities.5. Implement the activities based on the specified requirements.6. Test the activities to ensure they work as expected.7. Deploy the software with the new activities implemented.8. Monitor the activities for any issues or feedback from users.9. Maintain and update the activities based on user feedback and changing requirements.", "pred_act": "Gather, Analyze, prioritize, Design, allow, Develop, support, Implement, Test, ensure, Deploy, implemented, Monitor, Maintain, update\n", "pred_obj": "requirements, activities, software, requirements, activities, user interface, users, activities, backend functionality, activities, activities, requirements, activities, activities, software, activities, users, activities, user feedback, requirements"}
{"index": 136, "ucName": "Announcements And Contests", "uctext": "Announcements And Contests", "steps": "1. The Citizen accesses the home screen to be able to view the opportunity to view the associations that support Civil Defense. \n2. The system responds to the need by allowing the Citizen to view all the associations that are part of the Civil Defense and that hire staff, with a small image of the association, with next to it the possibility of receiving the download of the notice made available by the association in question. \n3. The Citizen takes note of what the form provides, and chooses from which, among the associations made available, to receive news for a possible recruitment or participation in the competition, about the modalities of the same. \n4. The system responds to this by allowing him or her to view the corresponding competition notice.", "dataset": "eANCI", "act": "\"accesses, views, responds, allows, view, hire, receives, takes note, chooses, allows, view\"", "obj": "Citizen, home screen, opportunity, associations, Civil Defense, system, need, staff, image, association, download, notice, form, recruitment, competition, modalities, corresponding competition notice", "pred_steps": "1. Display list of current announcements and contests.2. Allow user to view details of a specific announcement or contest.3. Enable user to search for a specific announcement or contest.4. Provide functionality to create a new announcement or contest.5. Allow authorized users to edit or delete announcements and contests.6. Implement a notification system to alert users about new announcements or contests.7. Enable users to subscribe to announcements and contests for updates.8. Implement moderation functionality to approve or reject newly created announcements and contests.9. Provide reporting capabilities for administrators to track engagement with announcements and contests.", "pred_act": "Display, Allow, view, Enable, search, Provide, create, Allow, edit, delete, Implement, alert, Enable, subscribe, Implement, approve, reject, Provide, track\n", "pred_obj": "current announcements and contests, details of a specific announcement or contest, specific announcement or contest, new announcement or contest, announcements and contests, notification system, users, announcements and contests, moderation functionality, newly created announcements and contests, administrators, announcements and contests"}
{"index": 137, "ucName": "Woods", "uctext": "Woods", "steps": "1. The Citizen accesses this screen to be able to learn about the advice that Civil Defense makes available to anyone in order to avoid and have people avoid forest fires. \n2. The system provides a screen with a set of rules that the Citizen should follow and have others follow if they are with third parties, to prevent the occurrence of arson, and in case of this, which authority to call.", "dataset": "eANCI", "act": ",  accesses, learn, makes, avoid, have, ,  provides, should follow, have, prevent, call", "obj": "Citizen, screen, advice, Civil Defense, forest fires, system, set of rules, third parties, arson, authority", "pred_steps": "1. Identify the main functionality required for the \"Woods\" use case.2. Determine the specific actions and interactions needed within the \"Woods\" scenario.3. Design a user interface to facilitate navigation and interaction within the \"Woods\" feature.4. Implement a system to display relevant information and options related to the \"Woods\" functionality.5. Develop backend functionalities to support data processing and storage for the \"Woods\" use case.6. Test the \"Woods\" feature for usability, functionality, and performance.7. Deploy the updated software with the \"Woods\" use case to the production environment.", "pred_act": "Identify, Determine, Design, Implement, display, Develop, support, Test, Deploy\n", "pred_obj": "woods\" use case,\"woods\" scenario,\"woods\" feature,\"woods\" functionality,\"woods\" use case,\"woods\" feature,\"woods\" use case"}
{"index": 138, "ucName": "Weather", "uctext": "Weather", "steps": "1. The Citizen accesses this screen to view the weather situation in the municipality where he or she resides. \n2. The system responds to the Citizen's need by allowing him to view, in addition to the weather situation, of his municipality,also that of the provinces of the region to which he belongs, with update date, minimum and maximum temperatures, and of course, weather conditions expressed with a small descriptive image.", "dataset": "eANCI", "act": "\"accesses, views, responds, allowing to view\"", "obj": "Citizen, screen, weather situation, municipality, system, region, provinces, update date, minimum temperatures, maximum temperatures, weather conditions, descriptive image", "pred_steps": "1. Gather user location information.2. Retrieve weather data based on user location.3. Display current weather conditions (temperature, wind, humidity, etc.).4. Allow user to view weather forecast for the next 24 hours.5. Provide option for user to view extended weather forecast (next 5, 7, or 10 days).6. Allow user to set up notifications for severe weather alerts.7. Allow user to customize units of measurement (Celsius/Fahrenheit, km/h or mph, etc.).8. Allow user to refresh weather data manually.9. Provide option for user to share weather information through various channels (social media, messaging, etc.).", "pred_act": "Gather Retrieve Display Allow Provide Allow Allow Allow Provide\n", "pred_obj": "user location information, weather data, current weather conditions, temperature, wind, humidity, weather forecast, notifications, severe weather alerts, units of measurement, celsius, fahrenheit, km/h, mph, weather information, social media, messaging"}
{"index": 0, "ucName": " Register Customer\n \n", "uctext": "  \nRegister a new customer account with the system.  \n \n", "steps": " \n1. Customer first clicks on the button or link to initiate registration process.  \n2. System prompts the customer to fill out his/her first name, last name, billing address, shipping address, email address, and their password.\n3. Customer enters fields. \n4. System validates the customer's information.  \n5. System creates a new account for the Customer.  \n6. System creates a session cookie.  \n7. System displays an account home page to Customer.   \n \n", "dataset": "gamma j", "act": "clicks, prompts, enters, validates, creates, creates, displays", "obj": "Customer, button, link, registration process, System, first name, last name, billing address, shipping address, email address, password, fields, information, new account, session cookie, account home page", "pred_steps": "1. User clicks on the \"Register\" button on the login page.2. User fills out the required fields in the registration form (e.g., name, email, password).3. User submits the registration form.4. System validates the form data (e.g., checks for email format, password strength).5. System checks if the email is already associated with an existing account.6. System creates a new customer account with the provided information.7. System sends a verification email to the user for account activation.8. User receives the verification email and clicks on the activation link.9. System activates the user account.10. User receives a confirmation message that the account was successfully registered.", "pred_act": "clicks, fills, submits, validates, checks, checks, creates, sends, receives, clicks, activates, receives\n", "pred_obj": "user, register button, login page, registration form, name, email, password, system, form data, email format, password strength, customer account, verification email, account activation, activation link, confirmation message"}
{"index": 1, "ucName": " Login Customer\n \n", "uctext": " \nLogin to a customer account with the system.  \n \n", "steps": "\n \n1. Customer clicks on the button or link to initiate the login process.  \n2. System prompts the customer for his/her email and password.  \n3. System verifies the information.  \n4. System creates session cookie.  \n5. System displays account home page to the Customer \n \n", "dataset": "gamma j", "act": "clicks, prompts, verifies, creates, displays", "obj": "Customer, button, link, login process, System, email, password, information, session cookie, account home page", "pred_steps": "1. Enter the customer account username.2. Enter the customer account password.3. Click on the \"Login\" button.4. Validate the username and password.5. If the credentials are valid, log the user into the system.6. If the credentials are invalid, display an error message.7. End of the use case.", "pred_act": "EnterEnterClickValidatevalidlogdisplayEnd\n", "pred_obj": "customer account username,customer account password,login button,user,system,error message"}
{"index": 2, "ucName": " Edit Customer Details\n \n", "uctext": " \nEdit the customer account details.  \n \n", "steps": " \n1. Customer clicks the button or link to initiate the process to edit the account.  \n2. System displays the account home page to the Customer. \n3. Customer clicks the button or link in order to edit the account details.  \n4. System verifies the changes.  \n5. System stores new account information. \n \n", "dataset": "gamma j", "act": "clicks, displays, clicks, verifies, stores", "obj": "Customer, button, link, process, account, System, account home page, account details, changes, new account information", "pred_steps": "Functional Steps:1. Click on the \"Customer Accounts\" tab.2. Search for the customer account by entering the customer ID or name.3. Select the customer account from the search results.4. Click on the \"Edit\" button to make changes to the customer account details.5. Update the necessary account information such as name, address, contact details, etc.6. Save the changes made to the customer account details.7. Display a confirmation message to indicate that the changes have been successfully saved.", "pred_act": "Click, Search, entering, Select, Click, make, Update, Save, Display, indicate\n", "pred_obj": "customer accounts tab, customer id, name, customer account, edit button, account information, name, address, contact details, confirmation message"}
{"index": 3, "ucName": " Logout Customer\n \n", "uctext": " \nLogout the customer account on the system.  \n \n", "steps": " \n1. Customer clicks the button or link in order to initiate logout process. \n2. System terminates the session cookie. \n3. System displays the home page.  \n \n", "dataset": "gamma j", "act": "clicks, terminates, displays", "obj": "Customer, button, link, logout process, System, session cookie, home page", "pred_steps": "1. Click on the \"Logout\" button or link.2. Confirm the action if prompted.3. Redirect the user to the login page.4. End the session and invalidate the user's authentication token.", "pred_act": "Click, Confirm, Redirect, End, Invalidate\n", "pred_obj": "logout\" button, link, action, user, login page, session, authentication token"}
{"index": 4, "ucName": " Add Item To Cart\n \n", "uctext": " \nCustomer adds item(s) in the cart \n \n", "steps": " \n1. Customer clicks the button or link in order to add to the cart with specified quantity. \n2. System adds the item(s) to the cart.  \n3. System prompts the Customer to edit the quantity or remove the item from cart.  \n4. Customer confirms the items in the cart.  \n5. System stores cookie with cart details. \n6. Customer returns to product listings.  \n \n", "dataset": "gamma j", "act": "clicks, adds, prompts, confirms, stores, returns", "obj": "Customer, button, link, cart, specified quantity, item(s), quantity, System, product listings, cookie, cart details", "pred_steps": "1. Customer selects an item to add to the cart.2. System verifies the availability of the selected item.3. System adds the item to the cart.4. System updates the total cost in the cart.5. System displays the updated cart to the customer.6. Customer continues shopping or proceeds to checkout.", "pred_act": "selects add verifies adds updates displays continues proceeds\n", "pred_obj": "customer, item, cart, system, cost"}
{"index": 5, "ucName": " Checkout An Order\n \n", "uctext": " \nCustomer places and confirms an order for the checkout process.  \n \n", "steps": " \n1. Customer clicks the button or link to initiate the checkout process. \n2. System calculates order of items in the shopping cart.  \n3. System appends cookie with flag for checkout process.  \n4. System presents the customer with the account details and payment methods. \n5. Customer confirms account details and payment methods.  \n6. Customer confirms order.  \n7. System stores order confirmation and order details.  \n8. System sends email confirmation to the Customer.  \n9. System appends cookie with flag for completed checkout process.  \n \n", "dataset": "gamma j", "act": "clicks, calculates, appends, presents, confirms, stores, sends, appends", "obj": "Customer, button, link, checkout process, System, order, items, shopping cart, cookie, flag, account details, payment methods, order confirmation, order details, email confirmation, completed checkout process", "pred_steps": "1. Customer selects items for purchase.2. Customer adds selected items to the shopping cart.3. Customer proceeds to the checkout process.4. Customer enters shipping and billing information.5. Customer selects a payment method.6. Customer reviews the order.7. Customer confirms the order.8. System processes the order and sends a confirmation to the customer.", "pred_act": "selects, adds, proceeds, enters, selects, reviews, confirms, processes, sends\n", "pred_obj": "customer, system"}
{"index": 6, "ucName": " Login Administrator\n \n", "uctext": " \nLogin to an Administrator account with the system.  \n \n", "steps": "\n1. Administrator clicks button or link to initiate login process.  \n2. System prompts the Administrator for email and password.  \n3. System verifies information.  \n4. System creates session cookie.  \n5. System displays account home page to Administrator \n \n", "dataset": "gamma j", "act": "clicks, prompts, verifies, creates, displays", "obj": "Administrator, button, link, login process, System, email, password, information, session cookie, account home page", "pred_steps": "1. Enter the username for the Administrator account.2. Enter the password for the Administrator account.3. Click on the \"Login\" button.4. Validate the entered credentials.5. If the credentials are valid, display a success message and grant access to the Administrator account.6. If the credentials are invalid, display an error message and do not grant access to the Administrator account.", "pred_act": "Enter, Enter, Click, Validate, display, grant, display, do, grant\n", "pred_obj": "administrator account, administrator account, login button, credentials, credentials, access, administrator account, credentials, administrator account"}
{"index": 7, "ucName": " Logout Administrator\n \n", "uctext": " \nLogout the Administrator account on the system.  \n \n", "steps": " \n1. Administrator clicks button or link to initiate logout process. \n2. System terminates the session cookie. \n3. System displays home page.  \n \n", "dataset": "gamma j", "act": "clicks, initiates, terminates, displays", "obj": "Administrator, button, link, logout process, System, session cookie, home page", "pred_steps": "1. Click on the \"Logout\" button or link.2. System prompts for confirmation to logout.3. Click on \"Yes\" to confirm logout or click on \"No\" to cancel logout.4. System logs out the Administrator account and redirects to the login page.", "pred_act": "Click prompts click confirm click cancel logs redirects\n", "pred_obj": "logout\" button, link, system, confirmation, logout, \"yes\", \"no\", administrator account, login page"}
{"index": 8, "ucName": " Add User\n \n", "uctext": "  \nRegister a new customer, sales person, or administrator account with the system.  \n \n", "steps": " \n1. Administrator clicks the button or link to initiate Add user process.  \n2. System prompts the Administrator to fill out first name, last name, username, email address, password, and privileges of the user.\n3. System validates new user information.  \n4. System creates a new account for the new user with desired privileges.  \n5. System displays account home page to Administrator.   \n \n", "dataset": "gamma j", "act": "clicks, prompts, validates, creates, displays", "obj": "Administrator, button, link, Add user process, System, first name, last name, username, email address, password, privileges, user, new user information, new account, account home page", "pred_steps": "1. Gather necessary information for the new account (e.g., username, password, email address).2. Validate the input data to ensure it meets required criteria.3. Check if the username or email address is already registered in the system.4. Generate a unique identifier for the new account.5. Create a new account with the provided information and assigned identifier.6. Assign the appropriate role (customer, sales person, or administrator) to the account.7. Save the account details in the system database.8. Display a success message indicating that the account has been successfully registered.9. End of the use case.", "pred_act": "Gather, Validate, Check, Generate, Create, Assign, Save, Display\n", "pred_obj": "username, password, email address, username, email address, unique identifier, account, identifier, role, customer, sales person, administrator, account, account details, system database, success message, account, use case"}
{"index": 9, "ucName": " Remove User\n \n", "uctext": "  \nRemove a user from the system. \n \n", "steps": " \n1. Administrator clicks button or link to initiate the remove user process.  \n2. System prompts the Administrator to select a user by searching or viewing a list of users.  \n3. System displays user information.  \n4. System confirms deletion of selected user.  \n5. System displays account home page to Administrator.   \n \n", "dataset": "gamma j", "act": "clicks, prompts, displays, confirms, displays", "obj": "Administrator, button, link, remove user process, System, user, list of users, user information, selected user, account home page", "pred_steps": "1. Select the option to manage users in the system.2. Search for the user to be removed.3. Select the user from the search results.4. Choose the option to remove the selected user.5. Confirm the removal action.6. Verify that the user has been successfully removed from the system.7. End the process.", "pred_act": "Select, manage, Search, be, removed, Select, Choose, remove, Confirm, Verify, be, removed, End\n", "pred_obj": "users, user, user, user, user"}
{"index": 10, "ucName": " Change User Properties\n \n", "uctext": "  \nAlter properties such as passwords and privileges of the user. \n \n", "steps": " \n1. Administrator clicks the button or link to initiate change user properties process.  \n2. System prompts the Administrator to select a user by searching or viewing a list of users.  \n3. System displays the user information.  \n4. System alters the user properties.  \n5. System displays the account home page to Administrator.   \n \n", "dataset": "gamma j", "act": "clicks, prompts, displays, alters, displays", "obj": "Administrator, button, link, change user properties process, System, user, list of users, user information, user properties, account home page", "pred_steps": "1. Authenticate user's identity.2. Display user's current properties (passwords and privileges).3. Allow user to modify passwords and privileges.4. Validate and update the changes.5. Display a success message indicating that the properties have been altered.", "pred_act": "Authenticate Display modify Validate update Display indicating altered\n", "pred_obj": "authenticate user's identity, display user's current properties (passwords and privileges), allow user to modify passwords and privileges, validate and update the changes, display a success message indicating that the properties have been altered"}
{"index": 11, "ucName": " Install Plug-ins\n \n", "uctext": "  \nInstall a new plug-in to the application.  \n \n", "steps": " \n1. Administrator clicks the button or link to initiate Plug-in installation process.  \n2. System prompts the Administrator to upload the Plug-in module.  \n3. System installs plug-in and validates changes.  \n4. System displays plug-in options to the Administrator.  \n   \n", "dataset": "gamma j", "act": "clicks, prompts, uploads, installs, validates, displays", "obj": "Administrator, button, link, Plug-in, installation process, System, Plug-in module, plug-in, changes, plug-in options", "pred_steps": "1. Access the application's settings or preferences menu.2. Look for the \"Plug-ins\" or \"Extensions\" section.3. Click on the \"Add New Plug-in\" or \"Install Plug-in\" button.4. Browse to select the plug-in file from your computer.5. Click on the \"Open\" or \"Install\" button to upload the plug-in file.6. Follow any additional prompts or instructions to complete the installation process.7. Once the installation is successful, restart the application to activate the new plug-in.8. Verify that the new plug-in is installed and functioning correctly within the application.", "pred_act": "Access, Look, Click, Browse, select, Click, upload, Follow, restart, Verify\n", "pred_obj": "application's settings, preferences menu, plug-ins section, extensions section, add new plug-in button, install plug-in button, plug-in file, open button, install button, prompts, installation process, application, plug-in"}
{"index": 12, "ucName": " Remove Plug-ins\n \n", "uctext": "  \nRemove a plug-in from the application.  \n \n", "steps": " \n1. Administrator clicks the button or link to initiate Plug-in deletion process.  \n2. System prompts the Administrator to select the desired Plug-in module.  \n3. System removes the plug-in and validates changes.  \n   \n", "dataset": "gamma j", "act": "clicks, prompts, selects(implied), removes, validates", "obj": "Administrator, button, link, Plug-in deletion process, System, desired Plug-in module, plug-in, changes", "pred_steps": "1. User opens the application.2. User navigates to the settings or plugins section of the application.3. User selects the option to manage plugins.4. User locates the plugin to be removed from the list of installed plugins.5. User selects the option to remove or uninstall the plugin.6. User confirms the action to remove the plugin.7. The application removes the selected plugin from the system.8. The application confirms the successful removal of the plugin to the user.9. User exits the plugin management section or settings.10. The application saves the changes and updates the plugin configuration.", "pred_act": "opens, navigates, selects, locates, selects, confirms, removes, confirms, exits, saves, updates\n", "pred_obj": "user, application, settings, plugins section, option, plugin, list of installed plugins, system, plugin management section, changes, plugin configuration"}
{"index": 13, "ucName": " Manage Plug-in Options\n \n", "uctext": "  \nMake changes to an installed plug-in. \n  \n", "steps": " \n1. Administrator clicks the button or link to initiate Plug-in Options process.  \n2. System prompts the Administrator to select the desired Plug-in module.  \n3. System displays all plug-in options to the Administrator.  \n4. System confirms changes with the Administrator. \n   \n", "dataset": "gamma j", "act": "clicks, prompts, displays, confirms", "obj": "Administrator, button, link, Plug-in Options process, System, desired Plug-in module, plug-in options, changes", "pred_steps": "Functional Steps:1. Identify the installed plug-in that needs to be modified.2. Access the plug-in management interface within the software.3. Locate the specific plug-in in the list of installed plug-ins.4. Select the option to make changes or modify the plug-in.5. Modify the desired settings, configurations, or code within the plug-in.6. Save the changes made to the plug-in.7. Test the functionality of the modified plug-in to ensure it works as intended.8. If needed, roll back the changes or make additional modifications as required.9. Verify that the modifications to the plug-in are successfully implemented and functional.", "pred_act": "Identify, be, modified, Access, Locate, Select, make, modify, Modify, Save, Test, ensure, works, roll back, make, required, Verify, are, implemented, functional\n", "pred_obj": "plug-in, software, settings, configurations, code"}
{"index": 14, "ucName": " Install patch process\n \n", "uctext": "  \nInstall patches or software updates to the web store. \n  \n", "steps": " \n1. Administrator clicks the button or link to initiate Patching process.  \n2. System prompts the Administrator to upload the patch.  \n3. System automatically installs patches and reinitializes software.  \n4. System confirms that patch has been successfully installed. \n   \n", "dataset": "gamma j", "act": "clicks, prompts, uploads, installs, reinitializes, confirms", "obj": "Administrator, button, link, Patching process, System, patch, software", "pred_steps": "1. Connect to the web store server.2. Log in to the server using administrative credentials.3. Access the patch management system or software update tool.4. Check for available patches or software updates for the web store.5. Select the relevant patches or updates to install.6. Initiate the installation process.7. Monitor the installation progress for each patch or update.8. Verify successful installation of all patches or updates.9. Test the web store to ensure proper functionality post-installation.10. Update the patch management system or software update tool with installation status.11. Log out from the server.", "pred_act": "Connect, Log, Access, Check, Select, install, Initiate, Monitor, Verify, Test, ensure, Update, Log\n", "pred_obj": "web store server, server, administrative credentials, patch management system, software update tool, patches, software updates, web store, installation process, installation progress, patches, updates, web store, patch management system, software update tool, installation status, server"}
{"index": 15, "ucName": " Login Sales Person\n \n", "uctext": " \nLogin to an account with the system.  \n \n", "steps": " \n1. Sales Person clicks the button or link to initiate login process.  \n2. System prompts the Sales Person for email and password.  \n3. System verifies the information.  \n4. System creates session cookie.  \n5. System displays the account home page to Sales Person \n \n", "dataset": "gamma j", "act": "clicks, prompts, verifies, creates, displays", "obj": "Sales Person, button, link, login process, System, email, password, information, session cookie, account home page", "pred_steps": "1. Provide username and password2. Submit credentials3. Validate username and password4. If valid, log in to the account5. If invalid, display error message and prompt for credentials again", "pred_act": "Provide, Submit, Validate, log, display, prompt\n", "pred_obj": "username, password, credentials, username, password, account, error message, credentials"}
{"index": 16, "ucName": " Logout Sales Person\n GAMMA-J Web Store  \n35\n \n", "uctext": " \nLogout the Sales Person account on the system.  \n \n", "steps": " \n1. Sales Person clicks the button or link to initiate logout process. \n2. System terminates the session cookie. \n3. System displays home page.  \n \n", "dataset": "gamma j", "act": "clicks, terminates, displays", "obj": "Sales Person, button, link, logout process, System, session cookie, home page", "pred_steps": "1. Open the Sales Person account on the system.2. Locate the \"Logout\" button or link.3. Click on the \"Logout\" button or link.4. Confirm the logout action if prompted.5. Verify that the Sales Person account is successfully logged out by checking for any visible account-related information or options.6. End the use case.", "pred_act": "Open, Locate, Click, Confirm, Verify, checking, End\n", "pred_obj": "sales person account, system, \"logout\" button or link, \"logout\" button or link, logout action, sales person account, account-related information or options, use case"}
{"index": 17, "ucName": " Add Product\n \n", "uctext": "  \nAdd a product to the system. \n \n", "steps": " \n1. Sales Person clicks the button or link to initiate Add Product process.  \n2. System prompts the Sales Person to fill out product name, product id, product description, product price, upload a product image, number of items in inventory, and availability of product.\n3. System validates the new product information.  \n4. System creates a new product page for the new product.  \n5. System displays the newly created product page.   \n \n", "dataset": "gamma j", "act": "clicks, prompts, validates, creates, displays", "obj": "Sales Person, button, link, Add Product process, System, product name, product id, product description, product price, product image, number of items in inventory, availability of product, new product information, new product page, newly created product page", "pred_steps": "1. Open the system's product management module.2. Click on the \"Add Product\" button.3. Enter the details of the new product such as name, description, price, and quantity.4. Upload any relevant images or files associated with the product.5. Click on the \"Save\" or \"Add\" button to add the product to the system.6. The system should display a success message confirming that the product has been added.7. Optionally, the user can continue adding more products by repeating the process or choose to exit the module.", "pred_act": "Open, Click, Enter, Upload, Click, add, display, confirming, added, continue, adding, repeating, choose, exit\n", "pred_obj": "system's product management module, \"add product\" button, details of the new product, relevant images or files, \"save\" or \"add\" button, success message, user"}
{"index": 18, "ucName": " Remove Product\n \n \n", "uctext": "  \nRemove a product from the system. \n \n", "steps": " \n1. Sales Person clicks the button or link to initiate Remove Product process.  \n2. System prompts the Sales Person to select a product by searching or viewing a list of products.\n3. System validates the product information.  \n4. System removes the product page and product information from the system.  \n5. System displays the newly created product page.   \n \n", "dataset": "gamma j", "act": "clicks, prompts, selects, validates, removes, displays", "obj": "Sales Person, button, link, Remove Product process, System, product, list of products, product information, product page, newly created product page", "pred_steps": "Functional Steps:1. Log in to the system.2. Navigate to the product management section.3. Search for the product to be removed.4. Select the product from the search results.5. Click on the \"Remove\" or \"Delete\" button.6. Confirm the removal action.7. Verify that the product has been successfully removed from the system.8. Log out of the system.", "pred_act": "Log in, Navigate, Search, Select, Click, Confirm, Verify, removed, Log out\n", "pred_obj": "log in, system, product management section, product, search results, \"remove\" or \"delete\" button, removal action, product, system, log out"}
{"index": 19, "ucName": " Update Product Attributes\n \n", "uctext": "  \nUpdate Product attributes within the system. \n \n", "steps": " \n1. Sales Person clicks the button or link to initiate Update Product Attributes process.  \n2. System prompts the Sales Person to select a product by searching or viewing a list of products.\n3. System displays all of the product attributes and allows Sales Person to update the product name, product id, product description, product price, update the product image, product availability, and/or the number of items in the inventory.\n4. System validates the product information.  \n5. System updates the product page and product information within the system.  \n6. System displays the newly updated product page.   \n\n", "dataset": "gamma j", "act": "clicks, prompts, displays, allows, update, validates, updates, displays", "obj": "Sales Person, button, link, Update Product Attributes process, System, product, list of products, product attributes, product name, product id, product description, product price, product image, product availability, number of items in the inventory, product information, product page, newly updated product page", "pred_steps": "1. Access the system with valid credentials.2. Navigate to the Product Management section.3. Search for the product to be updated.4. Select the product from the search results.5. Choose the option to edit the product details.6. Update the necessary attributes such as name, description, price, etc.7. Save the changes.8. Verify that the product attributes have been successfully updated.9. Log out of the system.", "pred_act": "Access, Navigate, Search, Select, Choose, Update, Save, Verify, Log\n", "pred_obj": "system, credentials, product management section, product, search results, option, product details, attributes, name, description, price, changes"}
{"index": 20, "ucName": " Register Customer\n \n", "uctext": "  \nRegister a new customer account with the system.  \n \n", "steps": " \n1. Customer clicks the button or link to initiate registration process.  \n2. System prompts the customer to fill out first name, last name, billing address, shipping address, email address, and password.\n3. Customer enters fields. \n4. System validates customer's information.  \n5. System creates a new account for the Customer.  \n6. System creates session cookie.  \n7. System displays account home page to Customer.   \n \n", "dataset": "gamma j", "act": "clicks, prompts, enters, validates, creates, creates, displays", "obj": "Customer, button, link, registration process, System, first name, last name, billing address, shipping address, email address, password, fields, information, new account, session cookie, account home page", "pred_steps": "Functional Steps:1. Collect user input for customer information (e.g., name, email, password).2. Validate the input data format (e.g., email format, password strength).3. Check if the email provided is unique and not already registered in the system.4. Generate a unique customer ID for the new account.5. Create a new customer account with the provided information and the generated customer ID.6. Store the customer account details in the system database.7. Send a confirmation email to the user to verify the email address.8. Display a success message to the user indicating the successful registration.9. End of use case.", "pred_act": "Collect, Validate, Check, Generate, Create, Store, Send, Display\n", "pred_obj": "user input, customer information, name, email, password, input data format, email format, password strength, email, system, customer id, account, information, customer account, details, system database, confirmation email, user, email address, success message, user, registration, use case"}
{"index": 21, "ucName": " Login Customer\n \n", "uctext": " \nLogin to a customer account with the system.  \n \n", "steps": " \n1. Customer clicks the button or link to initiate login process.\n2. System prompts the customer for email and password.  \n3. System verifies the information.  \n4. System creates session cookie.  \n5. System displays account home page to Customer \n \n", "dataset": "gamma j", "act": "clicks, prompts, verifies, creates, displays", "obj": "Customer, button, link, login process, System, email, password, information, session cookie, account home page", "pred_steps": "Functional Steps:1. Enter the website URL in a web browser.2. Click on the \"Login\" button.3. Enter the customer account username.4. Enter the customer account password.5. Click on the \"Login\" button.6. Verify the credentials.7. Redirect to the customer account dashboard upon successful login.", "pred_act": "Enter Click Enter Enter Click Verify Redirect\n", "pred_obj": "website url, web browser, \"login\" button, customer account username, customer account password, customer account dashboard"}
{"index": 22, "ucName": " Edit Customer Details\n \n", "uctext": " \nEdit the customer account details.  \n \n", "steps": " \n1. Customer clicks button or link to initiate the process to edit the account.  \n2. System displays account home page to Customer. \n3. Customer clicks button or link to edit the account details.  \n4. System verifies the changes.  \n5. System stores new account information. \n \n", "dataset": "gamma j", "act": "clicks, displays, clicks, verifies, stores", "obj": "Customer, button, link, process, account, System, account home page, account details, changes, new account information", "pred_steps": "Functional steps to implement the \"Edit the customer account details\" use case:1. Retrieve the customer account details based on the customer ID.2. Display the existing customer account details for editing.3. Allow the user to modify the customer account information (e.g., name, address, contact details).4. Validate the edited customer account details.5. Update the customer account details in the database.6. Display a success message if the customer account details are successfully updated.7. Display an error message if there are any issues with updating the customer account details.", "pred_act": "Retrieve,Display,Allow,modify,Validate,Update,Display,Display\n", "pred_obj": "customer account details, customer id, customer account details, user, customer account information, name, address, contact details, customer account details, customer account details, database, success message, customer account details, error message, customer account details"}
{"index": 23, "ucName": " Logout Customer\n \n", "uctext": " \nLogout the customer account on the system.  \n \n", "steps": " \n1. Customer clicks button or link to initiate logout process. \n2. System terminates the session cookie. \n3. System displays home page.  \n \n", "dataset": "gamma j", "act": "clicks, initiates, terminates, displays", "obj": "Customer, button, link, logout process, System, session cookie, home page", "pred_steps": "Functional Steps:1. Click on the user profile icon on the top right corner of the screen.2. Select the \"Logout\" option from the dropdown menu.3. Confirm the logout action if prompted.4. Redirect the user to the login page.5. End the session and invalidate the user's authentication token.", "pred_act": "Click, Select, Confirm, Redirect, End, invalidate\n", "pred_obj": "user profile icon, top right corner, screen, \"logout\" option, dropdown menu, login page, session, user's authentication token"}
{"index": 24, "ucName": " Add Item To Cart\n \n", "uctext": " \nCustomer adds item(s) in the cart \n \n", "steps": " \n1. Customer clicks the button or link to add  to the cart with specified quantity. \n2. System adds the item(s) to the cart.  \n3. System prompt Customer to edit quantity or remove item from cart.  \n4. Customer confirms items in cart.  \n5. System stores cookie with cart details. \n6. Customer returns to product listings.  \n \n", "dataset": "gamma j", "act": "clicks, adds, prompt, confirms, stores, returns", "obj": "Customer, button, link, cart, specified quantity, item(s), System, quantity, product listings, cookie, cart details", "pred_steps": "1. Display available items for selection.2. Allow customer to select desired items.3. Add selected items to the cart.4. Display updated cart with selected items.5. Allow customer to continue shopping or proceed to checkout.", "pred_act": "DisplayAllowselectAddDisplayAllowcontinueproceed\n", "pred_obj": "available items, customer, selected items, cart, customer"}
{"index": 25, "ucName": " Checkout An Order\n \n \n", "uctext": " \nCustomer places and confirms an order for the checkout process.  \n \n", "steps": " \n1. Customer clicks the button or link to initiate the checkout process. \n2. System calculates order of items in the shopping cart.  \n3. System appends cookie with flag for checkout process.  \n4. System presents customer with account details and payment methods. \n5. Customer confirms account details and payment methods.  \n6. Customer confirms order.  \n7. System stores order confirmation and order details.  \n8. System sends email confirmation to the Customer.  \n9. System appends cookie with flag for completed checkout process.  \n \n", "dataset": "gamma j", "act": "clicks, calculates, appends, presents, confirms, stores, sends, appends", "obj": "Customer, button, link, checkout process, System, order, items, shopping cart, cookie, flag, account details, payment methods, order confirmation, order details, email confirmation, completed checkout process", "pred_steps": "1. Customer selects items to add to the order.2. Customer adds selected items to the cart.3. Customer views the cart to verify the selected items.4. Customer proceeds to the checkout process.5. Customer enters shipping information.6. Customer selects a preferred shipping method.7. Customer verifies the shipping information and selected shipping method.8. System calculates the total order amount including taxes and shipping charges.9. Customer selects a payment method.10. Customer enters payment details.11. System verifies the payment details.12. System validates the order and generates an order confirmation number.13. System displays the order confirmation page with the order details and confirmation number.14. Customer receives an email confirmation with the order details and confirmation number.", "pred_act": "selects, adds, views, verify, proceeds, enters, selects, verifies, verifies, calculates, selects, enters, verifies, validates, generates, displays, receives\n", "pred_obj": "customer, system"}
{"index": 0, "ucName": " Modify Use Case  \n", "uctext": "  \nThe use case describes the modification  that the Inventory Admin  can do.  \n", "steps": "   \n1. Use case begins when Inventory Admin start searching for an asset  \n2. Inventory Admin Edit the asset  \n3. Inventory Admin modify asset properties  \n \n", "dataset": "0000 - inventory", "act": "start searching, Edit, modify", "obj": "Inventory Admin, asset, Inventory Admin, asset, Inventory Admin, asset properties", "pred_steps": "1. Log in to the system as an Inventory Admin.2. Access the inventory management section.3. Select the item to be modified.4. Update the item details as required (e.g., name, description, quantity, price).5. Save the changes.6. Verify that the modification has been successfully applied.7. Log out of the system.", "pred_act": "Log in, Access, Select, Update, Save, Verify, Log out\n", "pred_obj": "inventory admin, system, inventory management section, item, item details"}
{"index": 1, "ucName": " Edit Use Case  \n", "uctext": "  \nThe use case describes the edit operation  that the Inventory Admin  can do.  \n", "steps": "   \n1. Use case begins when Inventory Admin start searching for an asset  \n2. Inventory Admin Edit the asset  \n \n", "dataset": "0000 - inventory", "act": "\"start searching, Edit\"", "obj": ",  Use case, Inventory Admin, asset, searching, ,  Inventory Admin, asset, Edit", "pred_steps": "1.  The Inventory Admin selects the inventory item to be edited.2.  The system retrieves and displays the current details of the selected inventory item.3.  The Inventory Admin modifies the necessary details of the inventory item.4.  The Inventory Admin saves the changes made to the inventory item.5.  The system updates the inventory database with the edited details.6.  The system displays a confirmation message indicating the successful editing of the inventory item.7.  The use case ends.", "pred_act": "selects retrieves displays modifies saves updates displays indicating ends\n", "pred_obj": "inventory admin, inventory item, system, inventory database, confirmation message, use case"}
{"index": 2, "ucName": " Add New Asset  Use Case  \n", "uctext": "  \nThe use case describes the operation of adding a new asset to the inventory .  \n", "steps": "   \n1. Use case begins when Administrator start a new asset  \n2. Administrator  select asset type \n3. Administrator  select asset location  \n4. Administrator  select owner \n5. Administrator  fill all asset properties  \n \n", "dataset": "0000 - inventory", "act": "start, select, select, select, fill", "obj": "Administrator, start, new asset, asset type, asset location, owner, asset properties", "pred_steps": "1. Collect asset information from the user.2. Validate the asset information provided.3. Add the new asset to the inventory database.4. Update the inventory list with the new asset.5. Display a confirmation message to the user that the asset has been successfully added.", "pred_act": "Collect Validate Add Update Display\n", "pred_obj": "asset information, user, asset, inventory database, inventory list, confirmation message"}
{"index": 3, "ucName": " Create request  Use Case  \n", "uctext": "  \nThe use case describes the activity of creating a new request that the User  can do.  \n", "steps": "   \n1. User select basic request form  \n2. User type a small request text specifying asset(s) location,..  \n3. User click on submit  \n \n", "dataset": "0000 - inventory", "act": "select, type, click", "obj": "User, basic request form, request text, asset(s) location, submit", "pred_steps": "1. User selects the option to create a new request.2. User enters the necessary details for the request (e.g., title, description, priority).3. User attaches any relevant documents or files to the request.4. User submits the request.5. System validates the request details.6. System assigns a unique identifier to the request.7. System saves the request in the database.8. System sends a confirmation message to the User indicating successful request creation.", "pred_act": "selects enters attaches submits validates assigns saves sends indicating\n", "pred_obj": "user, option, request, details, title, description, priority, documents, files, system, identifier, database, message, creation"}
{"index": 4, "ucName": " Returning Asset  \n", "uctext": "  \nThe use case describes the returning asset update  that the Inventory Admin  can do.  \n", "steps": "   \n1. Use case begins when Inventory Admin start returning  \n2. Inventory Admin select asset state to available  \n \n", "dataset": "0000 - inventory", "act": "\"begins, start returning, select\"", "obj": "Inventory Admin, use case, Inventory Admin, asset state, available", "pred_steps": "1. Inventory Admin logs into the system.2. Inventory Admin selects the option to update asset returns.3. System displays the list of assets available for return.4. Inventory Admin selects the asset to be updated for return.5. System prompts the Inventory Admin to enter the return details (e.g., return date, condition).6. Inventory Admin enters the return details.7. System validates the return details provided by the Inventory Admin.8. System updates the asset return information in the system.9. System notifies relevant stakeholders (e.g., asset manager) about the updated asset return.10. Inventory Admin logs out of the system.", "pred_act": "logs, selects, displays, selects, prompts, enters, validates, updates, notifies, logs\n", "pred_obj": "inventory admin, system, assets, return details, stakeholders, asset manager"}
{"index": 5, "ucName": " Approving Request  \n", "uctext": "  \nThe use case describes the approving of requests that an  Inventory Admin  can do.  \n", "steps": "   \n1. Use case begins when Inventory Admin display pending request list  \n2. System display only requests that he has privileges to approve  \n3. Inventory Admin select request that he want to approve  \n4. Approve is confirmed  \n5. System send notes to users  \n \n", "dataset": "0000 - inventory", "act": "\"display, display, select, confirm, send\"", "obj": "Inventory Admin, pending request list, requests, privileges, approve, System, notes, users", "pred_steps": "1. Login to the system as an Inventory Admin.2. Access the requests list.3. Review the details of the request.4. Approve the request if it meets the necessary criteria.5. Enter any comments or additional information if required.6. Submit the approval.7. Notify the requester about the approval status.8. Log out of the system.", "pred_act": "Login, Access, Review, Approve, Enter, Submit, Notify, Log\n", "pred_obj": "inventory admin, requests list, details of the request, necessary criteria, comments, additional information, approval, requester, approval status"}
{"index": 6, "ucName": " change permissions  Use Case\n", "uctext": "  \nThe use case describes the modification  that Department, Facutly or University Administrator can do to a user permissions .  \n", "steps": "   \n1. Use case begins when Administrator  press change permission  \n2. Administrator select user  \n3. Administrator modify permissions  \n \n", "dataset": "0000 - inventory", "act": "press, select, modify", "obj": "Administrator, change permission, select user, modify permissions", "pred_steps": "1. Administrator selects the \"Modify User Permissions\" option from the system menu.2. System displays a list of all available users.3. Administrator selects the user for whom permissions need to be modified.4. System displays the current permissions of the selected user.5. Administrator selects the permission that needs to be modified.6. System provides options to add or remove the selected permission.7. Administrator selects the desired option (add or remove).8. Administrator saves the changes to update the user's permissions.9. System confirms the successful modification of user permissions.10. Use case ends.", "pred_act": "selects, displays, selects, displays, selects, provides, add, remove, selects, saves, confirms, ends\n", "pred_obj": "administrator, system, options, user, permission, use case"}
{"index": 7, "ucName": " Authentication Use Case   \n", "uctext": "  \nThe use case describes the authentication .  \n", "steps": "   \n1. Use case begins user starts the application  \n2. User write user name and pas sword  \n3. User press login  \n4. User is authenticated  \n5. User log on to application main page  \n \n", "dataset": "0000 - inventory", "act": "\"starts, write, press, is authenticated, log on\"", "obj": "use case, user, application, user name, pas sword, login, authentication, application main page", "pred_steps": "1. User provides username and password.2. System validates the provided username and password.3. If validation fails, system prompts user with error message and returns to step 1.4. If validation succeeds, system grants access to the user.", "pred_act": "providesvalidatesfailsreturnsvalidationpromptssucceedsgrants\n", "pred_obj": "user, username, password, system, username, password, system, user, access, user"}
{"index": 8, "ucName": " Search\n", "uctext": "  \nThe use case describes the search operation  that only authorised users can do.  \n", "steps": "   \n1. Use case begins when User  start fill searching field \n2. Press submit  \n3. Search results are displayed  \n \n", "dataset": "0000 - inventory", "act": "start, fill, press, display", "obj": "User, searching field, submit, search results", "pred_steps": "1. Verify the user is authorized to perform a search operation.2. Display the search interface to the authorized user.3. Prompt the user to input search criteria.4. Retrieve relevant data based on the search criteria.5. Display the search results to the user.6. Allow the user to view the details of the search results.7. End the search operation.", "pred_act": "Verify, is, authorized, perform, Display, Prompt, input, Retrieve, Display, Allow, view, End\n", "pred_obj": "user, search operation, search interface, search criteria, data, search results, details"}
{"index": 9, "ucName": " Create Reports  Use Case\n", "uctext": "  \nThe use case describes the creation of reports  that the User  can do.  \n", "steps": "   \n1. Use case begins when User  click on a report type  \n2. General report is displayed  \n3. Report can be filtered  \n4. Fields can be sorted  \n \n", "dataset": "0000 - inventory", "act": "click, displayed, can be filtered, can be sorted", "obj": "User, report type, General report, Report, Fields", "pred_steps": "1. User logs into the system.2. User navigates to the \"Reports\" section.3. User selects the option to create a new report.4. User inputs the necessary criteria and parameters for the report.5. User generates the report.6. The system processes the request and generates the report based on the provided criteria.7. The system presents the generated report to the User.8. User has the option to save, print, or download the report.9. User can also choose to edit or delete the report if needed.10. User logs out of the system.", "pred_act": "logs navigates selects inputs generates processes generates presents has save print download choose edit delete logs\n", "pred_obj": "user, system, reports, criteria, report"}
{"index": 0, "ucName": " Parse\n\n", "uctext": " The user requests the parsing of a transformation language program or a target file. The file to be parsed and the parser file are inputs to HATS-SML. HATS-SML generates an SDT. The output is saved in the application.\n\n", "steps": "\n1. User selects the option to parse a transformation language program from currently open application \n(ALT 1). \n2. User selects a transformation language program file (.tlp) to parse (Refer to Use Case 4) (ALT 2). \n3. The HATS-GUI compares the time stamps on the lexical specification and grammar files to the time stamp on the application’s parser file. The parser file is the youngest of the three files (ALT 3, ALT 6).\n4. The HATS-GUI sends a message to the Host OS to start either the ParseTarget or the ParseProgram program and sends the names of the target file or program file, the output file, and the parser file to the Host OS.\n5. HATS-SML parses the input file (ALT 7) and writes the output to the output file. \n6. End of use case. \n\n", "dataset": "hats", "act": "\"selects, selects, compares, sends, parses, writes\"", "obj": "User, option, transformation language program, currently open application, transformation language program file (.tlp), Use Case 4, HATS-GUI, lexical specification, grammar files, application’s parser file, parser file, Host OS, ParseTarget, ParseProgram, target file, program file, output file, HATS-SML, input file", "pred_steps": "1. User requests the parsing of a transformation language program or target file.2. Input the file to be parsed and the parser file into HATS-SML.3. HATS-SML processes the inputs and generates an SDT.4. Save the output SDT in the application.", "pred_act": "requests, Input, processes, generates, Save\n", "pred_obj": "user, transformation language program, target file, file, parser file, hats-sml, inputs, sdt, application"}
{"index": 1, "ucName": " Execute Transformation Program\n\n", "uctext": "  The user requests the application of a transformation language program to a target file. HATS-SML applies the transformation language program to the target.  Actors:  User, HATS-SML, Host OS\n\n", "steps": "\n1. User selects the option to execute a transformation language program from the currently selected application.\n2. User selects a transformation language program file (Refer to Use Case 4) (ALT 1). \n3. The HATS-GUI compares the time stamp on the lexical specification and grammar files to the time stamp on the parser file. The parser file is younger (ALT 2, ALT 3).\n4. The HATS-GUI compares the time stamp of the parsed program file and the parser, the transformation language program, and the user-defined library files. The parsed program file is younger than any of these files (ALT 4, ALT 5).\n5. The HATS-GUI clears the displays for the standard error and standard output. \n6. The HATS-GUI sends a message to the Host OS to start the ApplyTransformations  program and sends the names of the parsed program file and the user-defined library file to the Host OS. The HATS-GUI redirects the standard error and standard output streams of the ApplyTransformation  process and collects data written to these streams for later display.\n7. The HATS-SML ApplyTransformation  program writes output SDTs to files named in the transformation language program. (The transformation language program contains all references to input and output files. The HATS-GUI does not handle file input and file output for ApplyTransformaion .)\n8. End of use case. \n\n", "dataset": "hats", "act": "\"selects, selects, compares, compares, clears, sends, starts, sends, redirects, collects, writes\"", "obj": "User, option, transformation language program, currently selected application, transformation language program file, Use Case 4, HATS-GUI, time stamp, lexical specification, grammar files, parser file, parsed program file, user-defined library files, standard error, standard output, Host OS, ApplyTransformations program, ApplyTransformation process, output SDTs, input files, output files", "pred_steps": "1. User selects the transformation language program to be applied to the target file.2. User provides the target file to HATS-SML.3. HATS-SML receives the selected transformation language program and the target file from the user.4. HATS-SML validates the transformation language program.5. HATS-SML validates the target file.6. HATS-SML applies the transformation language program on the target file.7. HATS-SML generates the output file after applying the transformation language program.8. HATS-SML notifies the user about the completion of the transformation process.9. HATS-SML provides the user with the option to download the output file.", "pred_act": "selects, provides, receives, validates, validates, applies, generates, notifies, provides, download\n", "pred_obj": "user, transformation language program, target file, hats-sml, output file"}
{"index": 2, "ucName": " Select Application\n\n", "uctext": "  The user selects an application.\n\n", "steps": "\n1. System requests from Host OS a list of existing applications within current directory. \n2. Host OS returns list of files within current directory.\n3. System displays list of existing applications within current directory (ALT 1, ALT 2).\n4. User selects an application within the list (ALT 2).\n5. System sets selected application as the current application.   \n6. End of use case.\n\n", "dataset": "hats", "act": "\"requests, returns, displays, selects, sets\"", "obj": "System, Host OS, list of existing applications, current directory, list of files, displays, User, application, selected application, current application, use case", "pred_steps": "1. Display a list of available applications to the user.2. Allow the user to select an application from the list.3. Retrieve the selected application.4. Display the selected application to the user.", "pred_act": "Display, Allow, select, Retrieve, Display\n", "pred_obj": "applications, user, application, application"}
{"index": 3, "ucName": " Select File\n\n", "uctext": "  The user wants to perform some operation, and the system requests a filename.  A list of file names in the currently selected application is presented.  The user selects one file name in the application. Actors: User, Host OS\n\n", "steps": "\n1. System requests from Host OS a list of files in the current directory. \n2. Host OS only returns list of files in the current directory. \n3. System displays this list of files (ALT 1, ALT 2).\n4. User selects a file within the list (ALT 2, ALT 3).\n5. System sets selected file as the current file.\n6. End of use case.\n\n", "dataset": "hats", "act": "\"requests, returns, displays, selects, sets\"", "obj": "System, Host OS, list of files, current directory, ALT 1, ALT 2, User, file, ALT 3, selected file, current file", "pred_steps": "1. User initiates the operation.2. System requests a filename from the user.3. System retrieves a list of file names from the currently selected application.4. System presents the list of file names to the user.5. User selects one file name from the list.6. System acknowledges the user's selection.", "pred_act": "initiates requests retrieves presents selects acknowledges\n", "pred_obj": "user, system, filename, user, application, file names, user, file name, user"}
{"index": 4, "ucName": " Close Application\n\n", "uctext": "  The user wants to perform some operation on a selected application.  These operations include open, close, save, save as, create new, edit files within application, and configure the application.\n\n", "steps": "\n1. User selects option to close the currently selected application\n2. System asks for confirmation from user to close application.\n3. User confirms to close application (ALT 1).\n4. System checks that the changes to currently selected application’s configuration have been saved (ALT 2).\n5. System sets currently selected application to ‘none’.\n6. End of use case.\n\n", "dataset": "hats", "act": "selects, asks, confirms, checks, sets", "obj": "User, option, currently selected application, System, confirmation, application, changes, currently selected application’s configuration, System, currently selected application, use case", "pred_steps": "1. User selects an application from the list of available applications.2. User chooses the desired operation from a set of available options (open, close, save, save as, create new, edit files, configure).3. System checks if the selected operation is valid for the chosen application.4. If the operation is valid, the system executes the corresponding functionality based on the selected operation.5. If the operation is not valid, the system displays an error message to the user.6. After executing the operation, the system updates the application state accordingly.7. If the operation is save or save as, the system prompts the user to provide a location to save the file.8. User provides the desired location to save the file.9. System saves the file to the specified location.10. If the operation is open, the system prompts the user to provide the location of the file to open.11. User provides the location of the file to open.12. System opens the file and allows the user to edit it within the application.13. If the operation is create new, the system prompts the user to provide the necessary details for creating a new file.14. User provides the necessary details for the new file.15. System creates a new file based on the provided details and allows the user to edit it within the application.16. If the operation is edit files, the system allows the user to select a file from the application and perform editing actions on it.17. If the operation is configure, the system displays the configuration settings/options for the chosen application.18. User selects the desired configuration settings/options.19. System applies the selected configuration settings/options to the application.20. The use case ends.", "pred_act": "selects chooses open close save save create edit configure checks executes displays updates prompts provides saves prompts provides opens allows prompts provides creates allows allows displays selects applies ends\n", "pred_obj": "user, application, list, operation, options, system, functionality, error message, state, location, file, details, settings, use case"}
{"index": 5, "ucName": " Save Application\n\n", "uctext": " None\n\n", "steps": "\n1. User selects option to save currently selected application.\n2. System requests Host OS to save configuration file for the selected application. \n3. Host OS saves the configuration file for the selected application into a non-volatile storage (ALT 1).\n4. System informs user that application has been saved.\n5. End of use case. Software Requirements Specification\n \n", "dataset": "hats", "act": "selects, requests, saves, informs", "obj": "User, option, currently selected application, System, Host OS, configuration file, selected application, non-volatile storage, Software Requirements Specification", "pred_steps": "Apologies, but since there is no specific use case provided, I am unable to generate the functional steps for implementation. If you have a use case that you would like me to assist you with, please provide the details, and I will be happy to generate the steps for implementation based on that.", "pred_act": "Apologies, is, generate, is, have, like, provide, assist, provide, will, be, generate, based\n", "pred_obj": "use case, functional steps, implementation, details, steps, implementation"}
{"index": 6, "ucName": " Save Application As\n", "uctext": " None\n\n", "steps": "\n1. User selects to save a currently open application using a different directory name. 2. System requests user for a name to save the open application.\n3. User enters or selects a name for the application to be saved (ALT 1). \n4. System confirms that application name is unique (ALT 2).\n5. System requests Host OS to create new directory with the given name.\n6. Host OS creates new application with the entered name (ALT 3).\n7. System requests Host OS to copy core files, configuration files, and .tlp files to the new directory.\n8. Host OS copies all files from selected application to created application (ALT 3).\n9. System informs user that application has been saved with entered name. \n10. End of use case.\n\n", "dataset": "hats", "act": "\"selects, requests, enters, selects, confirms, requests, creates, requests, copies, informs\"", "obj": "User, application, directory name, System, name, open application, Host OS, new directory, core files, configuration files, .tlp files, new application, all files, selected application, created application", "pred_steps": "I'm unable to provide functional steps without a specific use case. Please provide a detailed use case for me to generate the functional steps.", "pred_act": "provide, provide, generate\n", "pred_obj": "functional steps, specific use case, detailed use case, functional steps"}
{"index": 7, "ucName": " Edit Files in an Application\n\n", "uctext": " None\n\n", "steps": "\n1. User selects option to edit a file within the currently selected application.\n2. User selects file to edit (Use Case 4).\n3. System checks application to determine if editor is associated with this file. An editor is associated with the file if the configuration explicitly associates this file with an editor or an editor is associated with files of this type. An editor is associated with this file (ALT 1).\n4. The HATS-GUI sends message to Host OS to start the preferred editor in new process and passes file name to editor.\n5. Host OS initiates process, puts editor in process, sends the filename as argument.\n6. End of use case.\n\n", "dataset": "hats", "act": "selects, selects, checks, determines, associates, sends, initiates, puts, sends", "obj": "User, option, file, currently selected application, Use Case 4, System, application, editor, configuration, HATS-GUI, Host OS, preferred editor, new process, file name, process, filename, argument, use case", "pred_steps": "I'm sorry, but as there is no provided use case, I am unable to provide the functional steps for implementation. If you have a specific use case in mind that you would like assistance with, please provide it, and I would be happy to help with the steps for its implementation.", "pred_act": "provide, provide, like, provide, help\n", "pred_obj": "use case"}
{"index": 8, "ucName": " Create New Application\n\n", "uctext": " None\n\n", "steps": "\n1. User selects option to create a new application.\n2. Close existing application if one is selected  (Refer to Use Case 5 – Scenario 1).\n3. System asks user to enter a name and location for new application.\n4. User enters name and location for new application (ALT 1).\n5. System requests Host OS to create new application. \n6. Host OS creates new application  (ALT 2).\n7. System informs user that new application has been created.\n8. End of use case.\n\n", "dataset": "hats", "act": "\"selects, close, asks, enters, requests, creates, informs\"", "obj": "User, option, new application, existing application, Use Case 5 – Scenario 1, System, name, location, Host OS", "pred_steps": "I'm sorry, as there is no use case provided, I am unable to provide any functional steps for implementation. If you provide a specific use case, I would be happy to help you with the functional steps.", "pred_act": "am, is, provide, am, provide, be, help\n", "pred_obj": "use case, functional steps, implementation, use case, functional steps"}
{"index": 9, "ucName": "  Configure Editor List.\n\n", "uctext": "  The user selects an application.  The user configures the settings of the selected application.  The settings of an application include, available editors, SDT display colors, SDT display shapes, default number of levels to expand, file associations between files and editors, and file associations between target files and transformation language program.\n\n", "steps": "\n1. User selects option to configure editors.\n2. The system prompts for editor name and configuration information. Editor configuration information must be sufficient to start the editor on the Host OS.\n3. User enters editor name and parameters (ALT 1). \n4. System saves editor configuration in application configuration. \n5. End of use case. \n\n", "dataset": "hats", "act": "\"selects, prompts, enters, saves\"", "obj": "User, option, editors, system, editor name, configuration information, Editor configuration information, Host OS, parameters (ALT 1), application configuration", "pred_steps": "1. User selects an application.2. User accesses the settings menu of the selected application.3. User configures the available editors for the application.4. User configures the SDT display colors for the application.5. User configures the SDT display shapes for the application.6. User sets the default number of levels to expand within the application.7. User specifies the file associations between files and editors for the application.8. User establishes file associations between target files and transformation language programs for the application.", "pred_act": "selects accesses configures configures configures sets specifies establishes\n", "pred_obj": "user, application, settings menu, editors, sdt display colors, sdt display shapes, default number of levels, file associations, files, editors, target files, transformation language programs"}
{"index": 10, "ucName": " Configure SDT display.\n\n", "uctext": " None\n\n", "steps": "\n1. User selects option to configure the colors and shapes of the graphical representation of an SDT. \n2. System displays a list containing types of displayed nodes and their corresponding current configured colors. The types of displayed nodes are given in Table 4.\n3. User selects a type of node from list. (ALT 1). \n4. System displays a list of supported colors and shapes. \n5. User selects a color and a shape from the list for the selected type of displayed node (ALT 2).\n6. System sets the selected values as the color and shape for the type of displayed node selected.\n7. End of use case.\n\n", "dataset": "hats", "act": "\"selects, displays, selects, displays, selects, sets, End\"", "obj": "User, option, colors, shapes, graphical representation, SDT, System, list, types, displayed nodes, current configured colors, Table 4, type of node, supported colors, supported shapes, selected type of displayed node, selected values", "pred_steps": "I'm sorry, but I cannot generate steps without a specific use case to work on. If you provide me with a use case or a requirement, I will be able to generate the steps needed to implement it.", "pred_act": "generate, provide, generate, implement\n", "pred_obj": "use case, requirement"}
{"index": 11, "ucName": "  Configure Expand Levels.\n\n", "uctext": " None\n\n", "steps": "\n1. User selects option to configure the default number of levels to expand in response to a single mouse click.\n2. System asks user to select or enter a number of levels to expand.\n3. User enters or selects a number of levels to expand.   Number entered is a natural number.\n4. System sets the entered or selected number of levels as the default number of levels to expand.\n5. End of use case.\n\n", "dataset": "hats", "act": "\"selects, asks, enters, selects, sets\"", "obj": "User, option, default number of levels, single mouse click, System, number of levels to expand, natural number", "pred_steps": "I'm sorry, but without a specific use case provided, I cannot generate functional steps for implementation. If you have a use case in mind, please provide it, and I would be happy to assist with creating the corresponding functional steps.", "pred_act": "generate, have, provide, assist, creating\n", "pred_obj": "functional steps, implementation, use case, functional steps"}
{"index": 12, "ucName": "  File Associations:  Editors.\n\n", "uctext": " None\n\n", "steps": "\n1. User selects option to associate file types with editors (ALT 1). \n2. System displays a list of configured editors. (Refer to Use Case 6.)\n3. System displays a list of file types.\n4. User selects a file type from list  (ALT 2). \n5. User selects an editor from list (ALT 2).\n6. System associates the selected file type with the selected editor.  When the user tries to edit a file of the type selected, the system will request the Host OS to initiate a process with the associated editor.  (Refer to Use Case 5.)\n7. End of use case. \n\n", "dataset": "hats", "act": "\"selects, displays, displays, selects, selects, associates, requests, initiate, end\"", "obj": "User, option, file types, editors, System, list, configured editors, Use Case 6, file type, Use Case 5, end of use case", "pred_steps": "I'm unable to provide the functional steps without a specific use case to base them on. If you provide me with a particular use case, I can certainly help you with the steps to implement it.", "pred_act": "provide, base, provide, help, implement\n", "pred_obj": "the functional steps, a specific use case, a particular use case, the steps"}
{"index": 13, "ucName": " Save Configuration\n\n", "uctext": " None\n\n", "steps": "\n1. User selects option to save configuration. \n2. System saves configuration with the application.\n3. End of use case.\n\n", "dataset": "hats", "act": "\"selects, saves\"", "obj": "User, option, save, configuration, System, application, End, use case", "pred_steps": "I'm sorry, but I cannot provide functional steps without a specific use case. If you provide a specific use case, I will be able to assist you in designing the functional steps.", "pred_act": "provide, provide, assist, designing\n", "pred_obj": "functional steps, specific use case, functional steps"}
{"index": 14, "ucName": "  SDT Display.\n\n", "uctext": " The user wants to display and manipulate a graphical representation of an SDT. Manipulation of a graphical representation of an SDT includes selecting and unselecting displayed nodes, navigation through the display using a navigation window and scrolling, expanding and collapsing displayed nodes, hiding displayed nodes, searching for SDT sub-trees, and finding smallest well-formed trees.\n\n", "steps": "\n1. User selects option to view and manipulate a graphical representation of an SDT. \n2. User selects SDT to view and manipulate (Refer to Use Case 4).  \n3. System displays a graphical representation of the selected SDT in an on-screen work area. The work area of the SDT display contains the following elements:\na) A window that displays the displayed graph representation of the SDT.  b) A text window that displays the labels of the leaf nodes in the currently displayed graph.   c) If either window is too small to contain all the information to be presented, the windows will have scroll bars to facilitate scrolling. The system will respond to dragging of scroll buttons\n(or pressing arrow keys) by shifting the display in the appropriate direction.\nd) If the SDT is too large for the window, a separate, small window with a compressed view of the SDT will be displayed. In this window, a displayed graph of the entire SDT will be drawn. The nodes of this displayed graph will be smaller than the displayed nodes in the SDT display work area. It is not necessary that the user be able to read node labels. It is only necessary that the user be able to see the high-level structure of the SDT. A small box named the locator box  will be displayed showing the part of the SDT currently displayed in the main SDT display window.\n4. User is able to manipulate the displayed graph representation of the SDT. (See the remaining scenarios.)\n\n", "dataset": "hats", "act": "selects, selects, displays, contains, displays, displays, will have, respond, dragging, pressing, shifting, is, will be displayed, will be drawn, be, be, be able to read, be able to see, will be displayed", "obj": "User, option, graphical representation, SDT, on-screen work area, window, graph representation of the SDT, text window, labels, leaf nodes, scroll bars, display, scroll buttons, arrow keys, compressed view of the SDT, graph of the entire SDT, nodes, high-level structure of the SDT, locator box, main SDT display window", "pred_steps": "1. Display the graphical representation of the SDT.2. Allow the user to select and unselect displayed nodes.3. Provide a navigation window for the user to navigate through the display.4. Enable scrolling functionality for navigating through the display.5. Implement the ability to expand and collapse displayed nodes.6. Allow for hiding displayed nodes as needed.7. Include a search function for finding SDT sub-trees.8. Implement a function to find the smallest well-formed trees in the display.", "pred_act": "Display, Allow, select, unselect, Provide, navigate, Enable, Implement, expand, collapse, Allow, hiding, Include, finding, Implement, find\n", "pred_obj": "graphical representation, sdt, nodes, navigation window, scrolling functionality, search function, sdt sub-trees, well-formed trees"}
{"index": 15, "ucName": "  Select nodes.\n\n", "uctext": " None\n\n", "steps": "\n1. User selects one or more displayed nodes. Displayed node selection methods are described here. \n• A single node can be selected by a right mouse click on the node. \n• A single node can be selected via the keyboard by moving the keyboard cursor to a node and pressing the enter  key. The keyboard cursor is moved between nodes using the tab key.\n• Several nodes can be selected by drawing a mouse box around the desired nodes. \n• Several nodes can be selected by holding the shift key down and selecting individual displayed nodes. When a user selects a set of nodes using these operations (and the shift key is not held down), the previously selected set of nodes (if any) is unselected.\n2. System highlights the smallest well-formed tree of the selected nodes in the displayed graph.\n3. System finds corresponding portion of leaf text of the selected nodes in the displayed graph.\n4. System highlights the corresponding portion of leaf text. \n5. If both SDT and Pretty-printed text are displayed, the system will find the corresponding pretty-printed text and highlight that text in the Pretty-print text window.\n6. End of use case.\n\n", "dataset": "hats", "act": "\"selects, described, can be selected, can be moved, can be drawing, can be held, selects, is unselected, highlights, finds, highlights, will find, highlight\"", "obj": "User, nodes, displayed nodes, selection methods, single node, right mouse click, keyboard, keyboard cursor, enter key, tab key, mouse box, shift key, set of nodes, smallest well-formed tree, displayed graph, corresponding portion, leaf text, SDT, Pretty-printed text, Pretty-print text window", "pred_steps": "I'm sorry, but without a specific use case provided, I cannot create functional steps for implementation. If you provide a use case, I will be happy to assist you with providing the functional steps to implement it.", "pred_act": "create, provide, will, assist, providing, implement\n", "pred_obj": "use case"}
{"index": 16, "ucName": "  Navigation window navigation.\n\n", "uctext": " None\n\n", "steps": "\n1. The user clicks the mouse in the navigation window SDT display. \n2. The system determines the node in the displayed graph closest to the mouse cursor and redraws the displayed graph with this node in the center of the main display.\n3. The system updates the locator box in the navigation window display.\n4. End of use case.\n\n", "dataset": "hats", "act": "clicks, determines, redraws, updates", "obj": "user, mouse, navigation window, SDT display, system, node, displayed graph, mouse cursor, main display, locator box", "pred_steps": "I'm sorry, without a specific use case provided, I'm unable to generate the required functional steps. If you provide a use case or a specific scenario, I would be happy to assist in designing the functional steps for its implementation.", "pred_act": "generate, provide, assist, designing\n", "pred_obj": "a specific use case, use case, a specific scenario, the functional steps"}
{"index": 17, "ucName": "  Expand\n\n", "uctext": " None\n\n", "steps": "\n1. User points the mouse cursor at a node and clicks the left mouse button (ALT 1).\n2. System displays the tree by expanding descendants of the node in the displayed graph. The number of levels to expand is given by the application configuration. If fewer than this number of levels exist, then all descendants of the chosen node are displayed\n3. System changes the shape and color of selected node as specified in the application configuration to indicate that it has become an expanded node.\n4. End of use case.\n\n", "dataset": "hats", "act": "points, clicks, displays, changes", "obj": "User, mouse cursor, node, left mouse button, System, tree, descendants, node, displayed graph, number of levels, application configuration, chosen node, shape, color, selected node, expanded node, use case", "pred_steps": "I'm sorry, but I need a specific use case or software requirement specification to provide you with the functional steps for implementation. Please specify a particular use case or requirement so I can assist you accordingly.", "pred_act": "extract, provide, specify, assist\n", "pred_obj": "use case, software requirement specification, functional steps, implementation, use case, requirement"}
{"index": 18, "ucName": "  Collapse\n\n", "uctext": " None\n\n", "steps": "\n1. User points the mouse cursor at a node and clicks the left mouse button. \n2. System removes all descendants of the selected node from the displayed graph.\n3. System changes the shape and color of selected node as specified in the application configuration to indicate that it has become a collapsed node.\n4. End of use case.\n\n", "dataset": "hats", "act": "\"points, clicks, removes, changes\"", "obj": "User, mouse cursor, node, left mouse button, System, descendants, selected node, displayed graph, shape, color, application configuration, collapsed node, use case", "pred_steps": "I'm sorry, but without a specific use case provided, I am unable to design the functional steps. If you have a particular use case in mind that you would like me to work on, please provide it.", "pred_act": " provided am unable design have like provide\n", "pred_obj": "use case"}
{"index": 19, "ucName": "  Hide nodes\n\n", "uctext": " None\n\n", "steps": "\n1. User selects one or more displayed nodes. (Refer to Use Case 7.) \n2. User selects option to hide selected displayed nodes. \n3. System removes the selected nodes from the displayed graph. \n4. System changes the types of the displayed nodes remaining on the screen to indicate that there are hidden nodes in the displayed graph.\n5. End of use case.\n\n", "dataset": "hats", "act": "\"selects, selects, removes, changes\"", "obj": "User, nodes, Use Case 7, option, displayed graph, types, screen, hidden nodes", "pred_steps": "1. Identify the actors involved.2. Define the main goal or objective of the use case.3. List all the steps required to achieve the main goal.4. Include any alternative or exceptional flows that need to be considered.5. Validate the steps with stakeholders to ensure they accurately reflect the requirements.6. Implement the steps in the software system.", "pred_act": "Identify, Define, List, Include, Validate, Implement\n", "pred_obj": "actors, main goal or objective, steps, alternative or exceptional flows, steps, steps"}
{"index": 20, "ucName": " Search\n\n", "uctext": " None\n\n", "steps": "\n1. User selects option to search SDT for a desired sub-tree. \n2. System asks user for the criteria to search nodes. Search criteria for SDTs are presented in Appendix E.\n3. User enters search criteria.\n4. System finds the first matching sub-tree in the SDT starting at the current keyboard cursor location (ALT 1).\n5. System creates a displayed graph for the sub-tree matching the search criteria. The displayed nodes of the matching sub-tree are highlighted. If no nodes match the search criteria, none are highlighted.\n6. If both SDT and Pretty-printed text are displayed, the pretty-printed text corresponding to the highlighted nodes of the SDT is highlighted.\n7. End of use case.\n\n", "dataset": "hats", "act": "\"selects, asks, enters, finds, creates, displays, are highlighted, is highlighted\"", "obj": "User, option, SDT, sub-tree, system, criteria, nodes, Search criteria for SDTs, Appendix E, first matching sub-tree, current keyboard cursor location, displayed graph, highlighted nodes, pretty-printed text, highlighted text", "pred_steps": "I'm sorry, but without a specific use case provided, I cannot generate the functional steps to implement it. If you have a specific use case in mind, please provide it, and I will be happy to help you with the functional steps for its implementation.", "pred_act": "generate, implement, have, provide, help, provide\n", "pred_obj": "use case, functional steps, implementation"}
{"index": 21, "ucName": "  Repeat Search\n\n", "uctext": " None\n\n", "steps": "\n1. User selects option to repeat a search SDT for a desired sub-tree. \n2. System finds the next matching sub-tree in the SDT starting at the current keyboard cursor location. Software Requirements Specification   \n3. System creates a displayed graph for the sub-tree matching the search criteria. The displayed nodes of the matching sub-tree are highlighted. If no nodes match the search criteria, none are highlighted.\n4. If both SDT and Pretty-printed text are displayed, the pretty-printed text corresponding to the highlighted nodes of the SDT is highlighted.\n5. End of use case.\n\n", "dataset": "hats", "act": "\"selects, finds, creates, displayed, are highlighted, match, is highlighted\"", "obj": "User, option, search, SDT, desired sub-tree, System, next matching sub-tree, current keyboard cursor location, displayed graph, nodes, search criteria, Pretty-printed text, highlighted nodes", "pred_steps": "I'm sorry, but I cannot provide the functional steps without a specific use case. Please provide me with a use case so I can assist you in creating the functional steps.", "pred_act": "provide, cannot provide, assist, creating\n", "pred_obj": "specific use case, use case"}
{"index": 22, "ucName": "  Copy Text From Text Window.\n\n", "uctext": " None\n\n", "steps": "\n1. System displays text of leaf nodes in currently displayed graph in a text window.    \n2. User selects a portion of displayed text. \n3. System highlights selected portion of text in the text window. \n4. User selects option to copy selected text. Minimally, the system will copy selected text in response to the Ctrl-Insert  key combination.\n5. System puts the selected and copied text in the Host OS copy/paste buffer.\n6. End of use case.\n\n", "dataset": "hats", "act": "\"displays, selects, highlights, selects, copy, puts\"", "obj": "System, text, leaf nodes, graph, text window, User, portion of displayed text, selected portion of text, option, selected text, Ctrl-Insert key combination, Host OS copy/paste buffer", "pred_steps": "Since no use case was provided, I cannot give any steps. If you provide a specific use case, I will be able to design the functional steps for implementing that use case.", "pred_act": "provide give provide be able design implement\n", "pred_obj": "no use case, steps, specific use case, functional steps, use case"}
{"index": 23, "ucName": "  Refresh Display.\n\n", "uctext": " None\n\n", "steps": "\n1. The user selects the option to refresh the display of the SDT.\n2. The system disposes of the currently displayed SDT.\n3. The system reads the SDT file and displays the newly generated SDT. The display of the SDT contains approximately the same number of nodes as the previously displayed SDT.\n4. End of use case.\n\n", "dataset": "hats", "act": "selects, disposes, reads, displays, contains", "obj": "user, option, display, SDT, system, currently displayed SDT, SDT file, newly generated SDT, number of nodes, previously displayed SDT", "pred_steps": "I'm sorry, but I cannot provide the steps for implementing a use case without knowing what the use case is. Please provide the details of the use case so that I can assist you further.", "pred_act": "provideknowingprovideassist\n", "pred_obj": "the steps for implementing a use case, the details of the use case"}
{"index": 24, "ucName": "  Display Pretty-Printed Text\n\n", "uctext": " The user wants to display and manipulate a text representation of the result of applying a transformation language program to a target file.  Manipulation of text includes selecting text and searching for sub-strings.\n\n", "steps": "\n1. User selects option to view and manipulate a pretty-printed text from a particular successful \ntransformation. \n2. User selects pretty-printed text to view and manipulate. (Refer to Use Case 4.)\n3. System displays the pretty-printed text in a work window.\na) The work area of the display of pretty-printed text contains a text window that displays the text.\nb) If the window is too small to contain all the information to be presented, the windows will have scroll bars to facilitate scrolling. The system will respond to dragging of scroll buttons (or pressing arrow keys) by shifting the display in the appropriate direction.\n4. User is able to manipulate the pretty-printed text. (See the remainder of the scenarios.)\n5. End of use case.\n\n", "dataset": "hats", "act": "\"selects, view, manipulate, displays, contains, will have, respond, dragging, shifting, is able to manipulate\"", "obj": "User, option, pretty-printed text, transformation, work window, work area, display, text window, text, information, scroll bars, scroll buttons, arrow keys, system", "pred_steps": "1. Load the target file into the software.2. Load the transformation language program into the software.3. Apply the transformation language program to the target file to generate the transformed text representation.4. Display the transformed text representation to the user.5. Implement text manipulation functions such as selecting text and searching for sub-strings.6. Allow the user to interact with the text representation by selecting text and searching for sub-strings.", "pred_act": "Load, Load, Apply, generate, Display, Implement, Allow, interact, selecting, searching\n", "pred_obj": "target file, software, transformation language program, transformed text representation, user, text manipulation functions"}
{"index": 25, "ucName": "  Select text.\n\n", "uctext": " None\n\n", "steps": "\n1. User selects a portion of the displayed pretty-printed text. Text selection methods are described here. \n• Text can be selected by clicking and dragging the mouse across an area of text. \n• Text can be selected by holding the shift key and moving the keyboard cursor using the arrow keys.\nWhen a user selects text using these operations, the previously selected text (if any) is unselected. \n2. System highlights selected portion of the displayed pretty-printed text.\n3. If both pretty-printed text and graphical representation of SDT are displayed, the system finds the corresponding displayed nodes of the SDT of the selected portion of pretty-printed text and highlights the corresponding displayed nodes of the SDT.\n4. End of use case.\n\n", "dataset": "hats", "act": "\"selects, described, can be selected, clicking, dragging, can be selected, holding, moving, unselected, highlights, finds, highlights\"", "obj": "User, portion, displayed pretty-printed text, Text selection methods, Text, mouse, shift key, keyboard cursor, arrow keys, previously selected text, System, highlighted portion, graphical representation of SDT, displayed nodes of the SDT, corresponding displayed nodes, use case", "pred_steps": "I'm sorry, but I cannot provide the functional steps without a specific use case. Please provide the details of the use case for which you would like the steps to be designed.", "pred_act": "provide\n", "pred_obj": "functional steps, specific use case, details, use case, steps"}
{"index": 26, "ucName": "  Search\n", "uctext": " None\n\n", "steps": "\n1. User selects option to search pretty-printed text for desired text. \n2. System asks user for the criteria to search text. Text search criteria are given in Appendix F. 3. User enters or selects criteria to search text. \n4. System finds those portions of pretty-printed text that match the search criteria and highlights those portions of the text that match (ALT 1).\n5. If both the pretty-printed text and the graphical representation of an SDT are displayed, the system finds the corresponding nodes of the SDT of the selected portion of pretty-printed text and highlights the corresponding nodes of the SDT.\n6. End of use case.\n\n", "dataset": "hats", "act": "\"selects, asks, gives, enters, selects, finds, highlights, displays, finds, highlights\"", "obj": "User, option, pretty-printed text, desired text, System, criteria, Text search criteria, Appendix F, portions, search criteria, SDT, nodes, use case", "pred_steps": "Since there is no use case provided, I am unable to provide any functional steps. Please provide a use case for me to design the steps.", "pred_act": "provide, design\n", "pred_obj": "use case, functional steps, use case, steps"}
{"index": 27, "ucName": " Generate Pretty-printed Output\n\n", "uctext": " The user requests the application of a pretty-print style file to a target SDT. The necessary file names are passed to HATS-SML, HATS-SML applies the pretty-print style to the SDT, and a formatted text file is generated.\n\n", "steps": "\n1. User selects the option to pretty-print a target from the currently selected application. \n2. User selects a target SDT (Refer to Use Case 4) (ALT 1). 3. No pretty-print style file is associated with the target file. The HATS-GUI prompts the user to select a pretty-print style file.\n4. User selects a pretty-print style file (Refer to Use Case 4) (ALT 2). \n5. HATS-GUI generates a file name by appending “.txt” to the target SDT root name. \n6. The HATS-GUI verifies that no file with this name exists in the current directory. This file becomes the output file name (ALT 3).\n7. The HATS-GUI sends a message to the Host OS to start the Pretty-print program and sends the target SDT file name, the pretty-print style file name, and the output file name to Pretty-print as command line arguments.\n8. HATS-SML applies the style file to the target SDT and writes the output to the output file specified on the command line (ALT 6).\n9. HATS-SML terminates.\n10. End of use case.\n\n", "dataset": "hats", "act": "\"selects, selects, prompts, selects, generates, verifies, becomes, sends, applies, writes, terminates\"", "obj": "User, option, pretty-print, target, application, SDT, HATS-GUI, pretty-print style file, file name, target SDT root name, current directory, output file name, Host OS, Pretty-print program, command line arguments, HATS-SML, style file", "pred_steps": "1. Receive request from user to apply pretty-print style file to target SDT.2. Receive necessary file names from user.3. Pass necessary file names to HATS-SML.4. HATS-SML applies the pretty-print style to the target SDT.5. Generate a formatted text file.", "pred_act": "Receive, receive, pass, applies, generate\n", "pred_obj": "user, pretty-print style file, target sdt, file names, hats-sml, formatted text file"}
{"index": 0, "ucName": " Start and Stop Diagnostics Use Case", "uctext": "  \nThis use case provides the actor the means to start and stop diagnostic processing.  The actor in this case is the administrator user (see 2.5.1 ).\n", "steps": "\n1. The user launches the tool by double -clicking the icon associate d with the tool or typing the application’s name.\n2. The tool momentarily displays a splash screen identifying the tool, identifying developing and sponsoring organizations as appropriate, and listing copyright information.\n3. The tool displays the main window o f the tool.  \n4. The user starts the diagnostic processing by selecting a menu item named “Start Diagnostics” from a drop down menu named “Status”.\n5. Include (Authenticate User).  If the user has the appropriate privilege (i.e., the user is the administrator user) the tool requests a confirmatory response from the user to start the diagnostic processing.\n6. If the user confirms the desire to start diagnostic processing, the tool starts the processing and displays an animated indication that diagnostic processing is active.\n7. If the user responds negatively to the confirmation, the tool does not start the diagnostic processing but the user remains authenticated.\n8. If the user does not have the appropriate privilege, the tool does not start the diagnostic processing.\n9. The u ser secures the tool by selecting a menu item named “Logout” from the drop down menu named “File”.\n10. The tool returns the current user’s privileges to those of the general user.\n11. If a period of 15 minutes elapses whereby the user does not secure the tool, the  users privileges will automatically revert to those of a general user.\n", "dataset": "pnnl", "act": "launches, displays, identifying, listing, displays, starts, includes, Authenticate, requests, confirms, starts, displays, responds, does not start, secures, returns, elapses, revert", "obj": "user, tool, icon, application’s name, splash screen, tool, developing organizations, sponsoring organizations, copyright information, main window, menu item, “Start Diagnostics”, drop down menu, “Status”, Authenticate User, privilege, administrator user, confirmatory response, diagnostic processing, animated indication, “Logout”, “File”, current user’s privileges, general user, 15 minutes", "pred_steps": "1. The administrator user logs into the system.2. The user navigates to the diagnostic processing section.3. The user selects the option to start diagnostic processing.4. The system initiates diagnostic processing activities.5. The user monitors the progress of the diagnostic processing.6. The user selects the option to stop diagnostic processing.7. The system terminates the diagnostic processing activities.8. The user logs out of the system.", "pred_act": "logs navigates selects starts initiates monitors selects stops terminates logs\n", "pred_obj": "administrator user, system, user, diagnostic processing section, option, diagnostic processing activities, progress"}
{"index": 1, "ucName": " Browse Current Diagnostics  Use Case", "uctext": "  \nThis use case provides the actor the means to view current diagnostic results.  The actor in this case is the user (see 2.5.1 ).\n", "steps": "\n1. The tool displays the main (initial) window, listing buildings under diagnosis.\n2. The user selects a building of interest.  \n3. The tool displays the su bsystems window, tiled on top the main (initial) window.\n4. The user selects a subsystem of interest.  \n5. The tool displays the condition window, tiled on top the subsystems window.\n6. The user selects a diagnostic of interest.  \n7. The tool displays the diagnostic infor mation window for that diagnostic.\n", "dataset": "pnnl", "act": "\"displays, selects, displays, selects, displays, selects, displays\"", "obj": "tool, main (initial) window, buildings under diagnosis, user, building of interest, subsystems window, subsystem of interest, condition window, diagnostic of interest, diagnostic information window", "pred_steps": "1. User selects the option to view diagnostic results.2. System retrieves the current diagnostic results from the database.3. System displays the current diagnostic results to the user.", "pred_act": "selects retrieves displays\n", "pred_obj": "user, option, diagnostic results, system, database"}
{"index": 2, "ucName": " Browse Historical Diagnostics Use Case", "uctext": "  \nThis use case provides the actor the means to view historical  diagnostic results.  The actor in this case is the user (see 2.5.1 ).\n", "steps": "\n1. The user clicks the “History” button.  \n2. The tool displays the diagnostic history window depicting the historical results of the selected condition of interest over the default viewing period in the form  of a color map.  The window provides a scroll bar for scrolling through historical results if data are available prior to the default viewing period.  The default viewing period extends backward one week prior to the current date.  Sliding the scroll bar does not change the viewing period displayed.  The default time resolution for the window is one hour.\n3. The user slides the scroll bar backward or forward to view previous results up to the current time.\n4. The tool displays the results within a viewing period  of one week, adding results to the beginning or ending of the period while dropping results of the opposite end.  The tool does not change the viewing period.\n5. The user may close the diagnostic history window by clicking the “Close” button.\n6. The tool dismis ses the diagnostic history window and the diagnostic information window and makes the condition window the current window.\n", "dataset": "pnnl", "act": "clicks, displays, provides, extends, slides, does not change, views, adds, dropping, may close, dismisses, makes", "obj": "user, \"History\" button, tool, diagnostic history window, historical results, selected condition of interest, default viewing period, color map, scroll bar, viewing period, current date, time resolution, previous results, current time, one week, \"Close\" button, diagnostic information window, condition window", "pred_steps": "1. Actor selects the option to view historical diagnostic results.2. System retrieves the historical diagnostic results from the database.3. System displays the historical diagnostic results to the actor.4. Actor reviews the historical diagnostic results.5. Actor selects an individual diagnostic result for more details.6. System retrieves the detailed information for the selected diagnostic result from the database.7. System displays the detailed information to the actor.8. Actor reviews the detailed information for the selected diagnostic result.9. Actor selects to go back to the list of historical diagnostic results.10. System navigates back to the list of historical diagnostic results.11. Actor selects to go back to the previous page or exits the use case.", "pred_act": "selects retrieves displays reviews selects retrieves displays reviews selects navigates selects\n", "pred_obj": "actor, system, diagnostic results, database, detailed information, previous page, use case"}
{"index": 3, "ucName": " Configure Diagnostics Use Case", "uctext": "  \nThis use case provides the actor the means to configure the diagnostic tool.  This includes defining the buildings containing systems to be diagnosed, defining the systems themselves, specifying equipment setpoints, selecting diagnostic sensitivity, and modif ying fixed data.  The actor in this case is the administrator user (see 2.5.1 ).\n", "steps": "\n1. When presented with the main window, the user may select the “Configure Diagnostics” menu item from the menu entitled “File”.\n2. If the user has not already been authenticated as the administrator user, include (Authenticate User).\n3. If the user has the appropriate privilege, the tool displays the configuration window.\n4. The user may click the “Recall” button to read previously saved changes from a disk file or database.\n5. The tool populates the window with the data from t he disk file.\n6. The user makes the desired changes to the configuration and can click the button labeled “Save” to save the changes.  Otherwise, the user can click the button labeled “Close”.\n7. If the user clicks the button labeled “Save”, the tool will request confirmation to save the changes.\n8. If the user confirms, the tool will request a name for the disk file in which to save the modified data to permanent storage.\n9. The user will enter a name for the file or cancel the operation.\n10. If the user enters a name for  the file, the tool will save the changes.  If the user cancels the operation, the tool will perform no function.\n11. If the tool completes the save operation, the tool will ask the user if the changes are to be relayed to the diagnostic processing for immediate use.\n12. If the user confirms the changes are to be relayed to the diagnostic processing, the tool relays the changes if the processing is currently active.  Otherwise, the tool does not relay the changes.\n13. If the user clicks the button labeled “Close”, the tool will request confirmation for the close and the potential loss of any changes.\n14. If the user confirms, the tool will dismiss the configuration window, ignoring any changes and returns the user to the main window.  If the user rejects the initial desire to close, the tool will perform no function.\n", "dataset": "pnnl", "act": "\"select, include(Authenticate User), displays, click, populates, makes, click, request, confirm, request, enter, cancel, save, perform, ask, confirm, relay, does not relay, click, request, confirm, dismiss, ignore, return, reject, perform\"", "obj": "main window, “Configure Diagnostics” menu item, menu, “File”, user, administrator user, tool, configuration window, “Recall” button, disk file, database, window, data, “Save” button, changes, “Close” button, confirmation, name, modified data, permanent storage, diagnostic processing, potential loss of any changes", "pred_steps": "Functional Steps:1. Log in to the diagnostic tool as an administrator user.2. Navigate to the configuration settings section.3. Define the buildings containing systems to be diagnosed.4. Define the systems within each building.5. Specify equipment setpoints for each system.6. Select the diagnostic sensitivity level.7. Modify any fixed data as needed.8. Save the configuration changes.9. Verify that the configuration settings have been applied successfully.", "pred_act": "Log in, Navigate, Define, Define, Specify, Select, Modify, Save, Verify\n", "pred_obj": "diagnostic tool, administrator user, configuration settings section, buildings, systems, equipment setpoints, diagnostic sensitivity level, fixed data, configuration changes, configuration settings"}
{"index": 4, "ucName": " Authenticate User", "uctext": "  \nThis use case establishes the privileges of the user for certain functions of the tool.    \n", "steps": "  \n1. The tool displays a windo w for entry of authenticating information, i.e., user name and password, to validate and establish the privileges of the user.\n2. The user enters their user name and password.  \n3. The tool attempts to authenticate the user and indicates whether authentication has  succeeded or not.\n4. If authentication is unsuccessful, the user is returned to the authentication window to reenter the information.\n5. The tool permits three attempts at authentication before dismissing the authentication window and returning the user to the previous window.\n6. The user may cancel the authentication process at any time and return to the previous window.\n", "dataset": "pnnl", "act": "\"displays, enters, attempts, indicates, returns, permits, dismisses, may cancel, returning\"", "obj": "tool, window, authenticating information, user name, password, privileges, user, authentication, attempts, previous window, authentication process", "pred_steps": "Functional Steps:1. Identify the user roles and their corresponding privileges.2. Define the functions of the tool that require privileges to be accessed.3. Map each user role to the specific privileges required for each function.4. Implement a user authentication mechanism to verify the user's role.5. Verify the user's role against the required privileges before allowing access to the function.6. Restrict access to functions that the user does not have the necessary privileges for.", "pred_act": "Identify,Define,require,Map,Implement,verify,Verify,allowing,Restrict\n", "pred_obj": "user roles, privileges, functions, tool, user authentication mechanism"}
{"index": 0, "ucName": "\nManage  Requests \n", "uctext": " The main requests management page that coordinator will manage all  request from customer or to suppliers\n", "steps": "\n 1 The coordinator press “Manage  Requests”\n 2 The coordinator use any function.\n 3 The coordinator will manage all requests function. \n", "dataset": "viper", "act": "press, use, will manage", "obj": "coordinator, Manage Requests, function, requests function", "pred_steps": "1. Log in to the software system as a coordinator.2. Navigate to the main requests management page.3. View the list of requests from customers and suppliers.4. Filter or search for specific requests if needed.5. Select a request to view more details.6. Update the status of the request (e.g., in progress, completed, pending).7. Assign the request to a specific team member if necessary.8. Add comments or notes related to the request.9. Communicate with customers or suppliers regarding the request if required.10. Save any changes made to the request.11. Close the request once it is completed or resolved.12. Log out of the software system.", "pred_act": "Log in, Navigate, View, Filter, search, Select, view, Update, Assign, Add, Communicate, Save, made, Close, Log out\n", "pred_obj": "software system, coordinator, requests management page, requests, customers, suppliers, status, team member, comments, notes"}
{"index": 1, "ucName": "\nAdd Request\n", "uctext": " Coordinator can add new request  and send it to his supplier\n", "steps": "\n 1 The coordinator press “Add Request”\n 2 The coordinator fills the request form.\n 3 The coordinator will send the request to supplier \n", "dataset": "viper", "act": "pressAddRequest, fills, willsend", "obj": "coordinator, Add Request, request form, request, supplier", "pred_steps": "Functional Steps:1. The coordinator logs into the system.2. The coordinator selects the option to add a new request.3. The coordinator fills out the necessary details for the request (e.g., item description, quantity, delivery date).4. The coordinator selects the supplier to whom the request will be sent.5. The system validates the entered information.6. The system sends the request to the selected supplier.7. The system notifies the coordinator that the request has been successfully sent.", "pred_act": "logs selects fills selects validates sends notifies\n", "pred_obj": "coordinator, system, coordinator, coordinator, coordinator, system, system, coordinator, system, supplier, system, supplier, system, coordinator"}
{"index": 2, "ucName": "\nView Requests\n", "uctext": " Coordinator issues requests , coordinator can show all  requests that sent his supplier or that came from his customer\n", "steps": "\n 1 The coordinator press “View Requests”\n 2 The coordinator view list of requests.\n", "dataset": "viper", "act": "\"press, view\"", "obj": "coordinator, View Requests, list of requests", "pred_steps": "1. Log in to the system as a coordinator.2. Access the \"Requests\" section of the system.3. Select the option to view requests sent by suppliers.4. View the list of requests sent by suppliers.5. Select the option to view requests received from customers.6. View the list of requests received from customers.", "pred_act": "Log in, Access, Select, View, Select, View\n", "pred_obj": "coordinator, system, \"requests\" section, requests sent by suppliers, requests sent by suppliers, requests received from customers, requests received from customers"}
{"index": 3, "ucName": "\nView Request Details\n", "uctext": " Coordinator can show the details of any request that he chose.\n", "steps": "\n 1 The coordinator press “View Request Details”\n 2 The coordinator views the details of a request.\n", "dataset": "viper", "act": "\"press, views\"", "obj": "coordinator, View Request Details, details, request", "pred_steps": "1. Coordinator selects a request to view details.2. System retrieves the details of the selected request.3. System displays the details of the request to the Coordinator.", "pred_act": "selects retrieves displays\n", "pred_obj": "coordinator, request, system"}
{"index": 4, "ucName": "\nEdit Request\n", "uctext": " The Coordinator can edit  request and notify his supplier\n", "steps": "\n 1 The coordinator press “Edit Request”\n 2 The coordinator modifies the request information.\n 3 The coordinator will send a notification to supplier \n", "dataset": "viper", "act": "press, modifies, will send", "obj": "coordinator, Edit Request, request information, notification, supplier", "pred_steps": "Functional Steps:1. Coordinator logs into the system.2. Coordinator navigates to the request that needs to be edited.3. Coordinator selects the request to edit.4. Coordinator makes the necessary changes to the request.5. Coordinator saves the edited request.6. Coordinator selects the option to notify the supplier.7. System sends a notification to the supplier regarding the edited request.", "pred_act": "logs, navigates, selects, edit, makes, saves, selects, notify, sends\n", "pred_obj": "coordinator, system, request, supplier"}
{"index": 5, "ucName": "\nDelete Request\n", "uctext": " The Coordinator can delete  request and notify his supplier\n", "steps": "\n 1 The coordinator press “Delete Request”\n 2 The information about the request will show.\n 3 Press “Delete” to processing the deleting\n 4 The coordinator will send a notification to supplier\n", "dataset": "viper", "act": "press, show, press, send", "obj": "coordinator, Delete Request, information, request, Delete, notification, supplier", "pred_steps": "1. Coordinator selects the request to be deleted.2. Coordinator confirms the deletion action.3. System deletes the request.4. System notifies the supplier about the deletion.", "pred_act": "selects confirms deletes notifies\n", "pred_obj": "coordinator, coordinator, system, system, request, deletion action, supplier"}
{"index": 6, "ucName": "\nManage Items \n", "uctext": " The main items management page that coordinator will manage the items that he have and may supply to customer\n", "steps": "\n 1 The coordinator press “Manage Items”\n 2 The coordinator use any function.\n 3 The coordinator will manage all items function. \n", "dataset": "viper", "act": "press, use, will manage", "obj": "coordinator, Manage Items, function, items function", "pred_steps": "1. Open the items management page.2. Login as coordinator.3. View the list of items available.4. Add a new item.5. Edit an existing item's details.6. Remove an item from the list.7. Search for a specific item.8. Sort the items by name or category.9. Filter the items by category or availability.10. Select an item to supply to a customer.11. Specify the quantity to supply.12. Confirm the supply transaction.13. Update the item's availability after supply.14. Generate a report of all supplied items.15. Logout from the system.16. Close the items management page.", "pred_act": "Open, Login, View, Add, Edit, Remove, Search, Sort, Filter, Select, Specify, Confirm, Update, Generate, Logout, Close\n", "pred_obj": "items management page, coordinator, list of items, new item, existing item's details, specific item, items by name or category, items by category or availability, item to supply to a customer, quantity to supply, supply transaction, item's availability, report of all supplied items, system"}
{"index": 7, "ucName": "\nAdd Item\n", "uctext": " Coordinator can add new items  and may supply it to our customer \n", "steps": "\n 1 The coordinator press “Add Item”\n 2 The coordinator fills the item form.\n 3 The coordinator will save the item.\n", "dataset": "viper", "act": "press, fills, will save", "obj": "coordinator, Add Item, item form, item", "pred_steps": "Functional Steps:1. Login to the system as a coordinator.2. Navigate to the \"Add New Item\" section.3. Enter the details of the new item (e.g., name, description, price, quantity).4. Click on the \"Submit\" or \"Add Item\" button.5. Verify that the item has been successfully added to the system.6. Navigate to the \"Supply Item to Customer\" section.7. Select the customer to whom the item will be supplied.8. Select the newly added item from the list of available items.9. Enter the quantity of the item to be supplied.10. Click on the \"Supply to Customer\" or \"Submit\" button.11. Verify that the item has been successfully supplied to the customer.", "pred_act": "Login, Navigate, Enter, Click, Verify, Navigate, Select, Select, Enter, Click, Verify\n", "pred_obj": "functional steps, coordinator, add new item, name, description, price, quantity, submit, add item, supply item to customer, customer, supply to customer"}
{"index": 8, "ucName": "\nView Items\n", "uctext": " The coordinator can view all  items that he have ,that may receive from supplier and may supply it for his customers\n", "steps": "\n 1 The coordinator press “View Items”\n 2 The coordinator view list of Items\n", "dataset": "viper", "act": "\"press, view\"", "obj": "coordinator, View Items, list of Items", "pred_steps": "1. Log in to the system as a coordinator.2. Navigate to the inventory management section.3. Select the option to view items received from suppliers.4. View the list of items received, including details such as item name, quantity, and supplier information.5. Navigate back to the inventory management section.6. Select the option to view items available for supply to customers.7. View the list of items available for supply, including details such as item name, quantity, and customer demand information.", "pred_act": "Log in, Navigate, Select, View, Navigate, Select, View\n", "pred_obj": "coordinator,system,inventory management section,option,items received from suppliers,list,items received,item name,quantity,supplier information,inventory management section,option,items available for supply to customers,list,items available for supply,item name,quantity,customer demand information"}
{"index": 9, "ucName": "\nView Item Details\n", "uctext": " Coordinator can show the details of any items that he chooses.\n", "steps": "\n 1 The coordinator press “View Item Details”\n 2 The coordinator views the details of an item.\n", "dataset": "viper", "act": "\"press, views\"", "obj": "\"coordinator, View Item Details, details, item\"", "pred_steps": "1. Coordinator selects the item for which details need to be shown.2. System retrieves and displays the details of the selected item.3. Coordinator reviews the displayed details.4. End of the use case.", "pred_act": "selects need retrieves displays reviews\n", "pred_obj": "coordinator, system, coordinator"}
{"index": 10, "ucName": "\nEdit Item.\n", "uctext": " The Coordinator can edit item that he want.\n", "steps": "\n 1 The coordinator press “Edit Item”\n 2 The coordinator modifies the item information.\n 3 The coordinator will send a notification to supplier or customer if need. \n", "dataset": "viper", "act": "press, modifies, will send", "obj": "coordinator, Edit Item, item information, notification, supplier, customer", "pred_steps": "1. The Coordinator logs into the system.2. The Coordinator navigates to the item that he wants to edit.3. The Coordinator selects the edit option for the item.4. The system displays the editable fields for the item.5. The Coordinator makes the necessary changes to the item.6. The Coordinator saves the changes.7. The system updates the item with the edited information.8. The Coordinator verifies that the changes are successfully applied. 9. The process is completed.", "pred_act": "logs navigates wants edit displays makes saves updates verifies is\n", "pred_obj": "the coordinator, the system, the item"}
{"index": 11, "ucName": "\nDelete Item\n", "uctext": " The Coordinator can delete any item from his list and his supply.\n", "steps": "\n 1 The coordinator press “Delete Item”\n 2 The information about the item will show.\n 3 Press “Delete” to processing the deleting\n", "dataset": "viper", "act": "press, show, press", "obj": "coordinator, Delete Item, information, item, Delete", "pred_steps": "Functional steps:1. Identify the item to be deleted from the Coordinator's list.2. Verify the Coordinator's access rights and permissions to delete the item.3. Confirm the deletion action with the Coordinator.4. Remove the item from the Coordinator's list.5. Update the supply inventory to reflect the deletion of the item.", "pred_act": "Identify, Verify, delete, Confirm, Remove, Update, reflect\n", "pred_obj": "item, coordinator, coordinator, coordinator, coordinator, supply inventory, item"}
{"index": 12, "ucName": "\nManage Resources Locations\n", "uctext": " The main resources locations management page that coordinator will manage the resources locations that he have and may use it to store or supplying.\n", "steps": "\n 1 The coordinator press “Manage Resources Locations”\n 2 The coordinator use any function.\n 3 The coordinator will manage all resources locations function. \n", "dataset": "viper", "act": "press, use, manage", "obj": "coordinator, Manage Resources Locations, function, resources locations function", "pred_steps": "1. Log in to the system as a coordinator.2. Navigate to the resources locations management page.3. View the list of current resources locations.4. Add a new resources location.5. Input the necessary details for the new resources location (e.g., name, address, capacity).6. Save the new resources location.7. Edit an existing resources location.8. Update the details of the resources location as needed.9. Save the changes made to the resources location.10. Delete an existing resources location if no longer needed.11. Confirm the deletion of the resources location.12. View the list of updated resources locations.13. Log out of the system.", "pred_act": "Log in, Navigate, View, Add, Input, Save, Edit, Update, Save, Delete, Confirm, View, Log out\n", "pred_obj": "coordinator,resources locations management page,resources locations,resources location,resources location,resources location,resources locations"}
{"index": 13, "ucName": "\nAdd Location\n", "uctext": " Coordinator can add new resources locations and may start to use it in our supply and storing.\n", "steps": "\n 1 The coordinator press “Add Location”\n 2 The coordinator fills the location form.\n 3 The coordinator will save the location.\n", "dataset": "viper", "act": "press, fills, will save", "obj": "coordinator, Add Location, location form, location", "pred_steps": "1. Log in to the system as a coordinator.2. Navigate to the \"Resources\" section.3. Select the option to add a new resource location.4. Enter the details of the new resource location (e.g., name, address, contact information).5. Save the new resource location.6. Navigate to the supply and storing section.7. Start using the newly added resource location for storing and supplying resources.", "pred_act": "Log in, Navigate, Select, Enter, Save, Navigate, Start, add, storing, supplying\n", "pred_obj": "coordinator, resources, resource location, supply, storing, resource location, resources"}
{"index": 14, "ucName": "\nView Locations\n", "uctext": " The coordinator can view all resources locations that he have, that use to supplying our customer and store our items.\n", "steps": "\n 1 The coordinator press “View Locations”.\n 2 The coordinator view list of Locations.\n", "dataset": "viper", "act": "\"press, view, view\"", "obj": "coordinator, View Locations, list of Locations", "pred_steps": "1. Log in to the system as a coordinator.2. Navigate to the \"Resources\" or \"Locations\" section of the system.3. View the list of all resources or locations available.4. Filter or search for resources or locations that are used for supplying customers and storing items.5. Review the details of each resource or location, such as address, contact information, and capacity.6. Optionally, edit or update the information of any resource or location if needed.7. Optionally, add new resources or locations to the list.8. Log out of the system when done.", "pred_act": "Log in, Navigate, View, Filter, search, Review, edit, update, add, Log out\n", "pred_obj": "coordinator, system, resources, locations, list, resources, locations, customers, items, details, resource, location, address, contact information, capacity, information, resource, location, resources, locations, list, system"}
{"index": 15, "ucName": "\nView Location Details\n", "uctext": " Coordinator can show the details of resource location that he chooses.\n", "steps": "\n 1 The coordinator press “View Location Details”\n 2 The coordinator views the details of a location.\n", "dataset": "viper", "act": "\"press, views\"", "obj": "coordinator, View Location Details, details of a location", "pred_steps": "1. Coordinator selects the option to view resource details.2. System prompts Coordinator to choose a resource location.3. Coordinator selects a resource location from the available options.4. System retrieves and displays the details of the selected resource location.5. Coordinator can view the details of the resource location.", "pred_act": "selects, prompts, choose, selects, retrieves, displays, view\n", "pred_obj": "coordinator, system, resource location, resource location, resource location, resource location"}
{"index": 16, "ucName": "\nEdit Location.\n", "uctext": " The Coordinator can edit a location that he wants.\n", "steps": "\n 1 The coordinator press “Edit Location”\n 2 The coordinator modifies the location information.\n", "dataset": "viper", "act": "press, modifies", "obj": "coordinator, Edit Location, location information", "pred_steps": "1. The Coordinator selects the location to be edited.2. The system displays the current details of the selected location.3. The Coordinator modifies the details of the location as needed.4. The system validates the new details entered by the Coordinator.5. The Coordinator confirms the changes.6. The system updates the location with the new details.7. The system notifies the Coordinator that the location has been successfully edited.", "pred_act": "selects, displays, modifies, validates, confirms, updates, notifies\n", "pred_obj": "coordinator, system, location"}
{"index": 17, "ucName": "\nDelete Location\n", "uctext": " The Coordinator can delete any location from his list.\n", "steps": "\n 1 The coordinator press “Delete Location”\n 2 The information about the location will show.\n 3 Press “Delete” to processing the deleting\n", "dataset": "viper", "act": "press, show, press", "obj": "coordinator, Delete Location, information, location, Delete", "pred_steps": "1. The Coordinator accesses the list of locations.2. The Coordinator selects the location to be deleted.3. The system prompts for confirmation to delete the selected location.4. The Coordinator confirms the deletion.5. The system deletes the selected location from the list.6. The system updates the list of locations to reflect the deletion.", "pred_act": "accesses selects prompts delete confirms deletes updates\n", "pred_obj": "the coordinator, list of locations, location, system"}
{"index": 18, "ucName": "\nEdit Profile\n", "uctext": " The supplier can edit his profile. The profile contains the name of the supplier, the address, contact person and e-mail… etc.\n", "steps": "\n 1 He clicks on the proper link to edit his profile.\n 2 Whether he make changes or not, when he clicks on the proper link to submit the profile values, the current values of the profile is saved and he is returned to the main menu.\n", "dataset": "viper", "act": ",  clicks, ,  make, clicks, is saved, is returned", "obj": ",  He, link, profile, ,  he, changes, link, profile values, current values of the profile, main menu", "pred_steps": "1. Display the supplier's profile information on the screen.2. Provide an option to edit the profile.3. Allow the supplier to make changes to the profile information.4. Validate the edited information for any errors or discrepancies.5. Save the changes made to the profile.6. Display a confirmation message to the supplier indicating that the profile has been successfully updated.", "pred_act": "Display, Provide, Allow, make, Validate, Save, Display, indicating\n", "pred_obj": "supplier"}
{"index": 19, "ucName": "\nView Supply Requests\n", "uctext": " To show a list of pending requests. \n", "steps": "\n  \n 1 He clicks on the proper link to view supply requests.\n 2 A list of pending requests is listed.\n", "dataset": "viper", "act": ",  clicks, views, ,  is listed", "obj": "\"He, link, supply requests, list, pending requests\"", "pred_steps": "1. Retrieve all pending requests from the database.2. Display the list of pending requests to the user interface.3. Allow the user to view details of each pending request.4. Provide options for the user to take actions on each pending request (e.g., approve, reject).5. Update the status of the request based on the user's action.6. Save the changes to the database.7. Refresh the list of pending requests to reflect the updated status.", "pred_act": "Retrieve, Display, Allow, view, Provide, take, approve, reject, Update, Save, Refresh\n", "pred_obj": "pending requests, database, user interface, user, status"}
{"index": 20, "ucName": "\nView Request Details\n", "uctext": " To view extended details of the chosen request.\n", "steps": "\n  \n 1 He clicks on the proper link to view supply requests.\n 2 A list of pending requests is listed.\n 3 He clicks on the proper link on a request to display its details.\n", "dataset": "viper", "act": "clicks,is listed,clicks", "obj": "\"He, link, supply requests, list, pending requests, request, details\"", "pred_steps": "1. User selects the desired request from a list.2. System retrieves the extended details of the chosen request from the database.3. System displays the extended details to the user.4. User reviews the extended details.5. User has the option to go back to the list of requests or perform any other action.", "pred_act": "selects, retrieves, displays, reviews, go, perform\n", "pred_obj": "user, system, request, list, extended details, database"}
{"index": 21, "ucName": "\nSend Feedback on Request\n", "uctext": " The supplier states whether he can supply all the requested items or part of them and the time frame to deliver them. \n", "steps": "\n  \n 1 He input his feedback and submits.\n 2 A success (or error) message is displayed.\n", "dataset": "viper", "act": ",  input, submits, ,  is displayed", "obj": "\"He, feedback, submits, success message, error message\"", "pred_steps": "1. Receive the request for items from the buyer.2. Check the availability of all requested items in inventory.3. Determine if all requested items are available.4. If all items are available, proceed to step 6.5. If some items are not available, determine which items can be supplied.6. Determine the time frame required to deliver the items.7. Notify the buyer whether all items can be supplied or only part of them.8. If all items can be supplied, provide the estimated time of delivery.9. If only part of the items can be supplied, provide the list of available items and the estimated time of delivery for those items.10. Update the inventory system to reflect the items that will be supplied.11. Update the delivery schedule based on the estimated time of delivery.12. End.", "pred_act": "Receive, Check, Determine, Determine, proceed, determine, Notify, provide, provide, Update, Update, End\n", "pred_obj": "request for items, buyer, availability, items, inventory, time frame, notify, estimated time of delivery, list of available items, inventory system, delivery schedule"}
{"index": 22, "ucName": "\nEdit Profile\n", "uctext": " The customer can edit his profile. The profile contains the name of the customer, his address, contact person and e-mail… etc.\n", "steps": "\n  \n 1 He clicks on the proper link to edit his profile.\n 2 Whether he makes changes or not, when he clicks on the proper link to submit the profile values, the current values of the profile is saved and he is returned to the main menu.\n", "dataset": "viper", "act": ",  clicks, edit, ,  makes, clicks, submit, is saved, is returned", "obj": ",  He, link, profile  , ,  he, link, profile values, current values of the profile, main menu", "pred_steps": "1. User opens the customer profile editing page.2. User locates the relevant fields for name, address, contact person, and email.3. User updates the desired information in the respective fields.4. User saves the changes made to the profile.5. System validates the updated information for any errors or missing required fields.6. If there are validation errors, system displays error messages and prompts the user to correct them.7. If there are no errors, system updates the customer profile with the new information.8. System displays a success message indicating that the profile update was successful.", "pred_act": "opens, locates, updates, saves, validates, displays, prompts, updates, displays\n", "pred_obj": "user, customer profile editing page, fields, name, address, contact person, email, information, profile, changes, system, validation errors, error messages, profile update, success message"}
{"index": 23, "ucName": "\nAdd Request\n", "uctext": " Customer can add new request.\n", "steps": "\n 1 The Customer press “Add Request”\n 2 The Customer fills the request form.\n 3 The Customer will send the request to the Coordinator.\n", "dataset": "viper", "act": "press, fills, will send", "obj": "Customer, Add Request, request form, request, Coordinator", "pred_steps": "1. Customer opens the software application.2. Customer navigates to the \"New Request\" section.3. Customer fills in the necessary details for the new request.4. Customer submits the request.5. System validates the request information.6. System saves the new request in the database.7. System displays a confirmation message to the customer.", "pred_act": "opens, navigates, fills, submits, validates, saves, displays\n", "pred_obj": "customer, customer, customer, customer, system, system, system"}
{"index": 24, "ucName": "\nView Requests\n", "uctext": " Customer can view all his pending requests that were sent to the Coordinator.\n", "steps": "\n 1 The Customer press “View Requests”\n 2 The Customer view list of requests.\n", "dataset": "viper", "act": "\"press, view\"", "obj": "Customer, View Requests, list of requests", "pred_steps": "1. Customer accesses the system.2. Customer logs into his account.3. Customer navigates to the \"Pending Requests\" section.4. System retrieves and displays all pending requests sent to the Coordinator by the Customer.5. Customer views the list of pending requests.6. Customer selects a specific request to view more details if needed.7. Customer logs out of the system.", "pred_act": "accesses, logs, navigates, retrieves, displays, views, selects, view, logs\n", "pred_obj": "customer, system, coordinator"}
{"index": 25, "ucName": "\nEdit Request\n", "uctext": " The Customer can edit  request and notify the Coordinator.\n", "steps": "\n 1 The Customer press “Edit Request”\n 2 The Customer modifies the request information.\n 3 A notification will be sent to the Coordinator. \n", "dataset": "viper", "act": "press, modifies, will be sent", "obj": "Customer, Edit Request, request information, notification, Coordinator", "pred_steps": "1. Customer accesses the request editing feature.2. Customer makes the necessary changes to the request.3. Customer saves the updated request.4. System notifies the Coordinator about the request edit.5. Coordinator reviews the updated request.", "pred_act": "accesses makes saves notifies reviews\n", "pred_obj": "customer,request,coordinator,request"}
{"index": 26, "ucName": "\nDelete Request\n", "uctext": " The Coordinator can delete  request and notify his supplier\n", "steps": "\n 1 The Customer press “Delete Request”\n 2 The information about the request will show.\n 3 Press “Delete” to processing the deleting\n 4 The Customer will send a notification to supplier\n", "dataset": "viper", "act": "press, show, press, send", "obj": "Customer, Delete Request, information, request, Delete, notification, supplier", "pred_steps": "1. Coordinator selects the request to be deleted.2. Coordinator confirms the deletion action.3. System deletes the request from the database.4. System notifies the supplier about the deletion of the request.", "pred_act": "selects confirms deletes notifies\n", "pred_obj": "coordinator,coordinator,system,system,database,supplier,request,request,request"}
{"index": 27, "ucName": "\nManage Customers \n", "uctext": " The main customers management page that coordinator will manage all customers information\n", "steps": "\n 1 The coordinator press “Manage  Customers”\n 2 The coordinator use any function.\n 3 The coordinator will manage all customers function. \n", "dataset": "viper", "act": "press,use,will manage", "obj": "coordinator, Manage Customers, function, customers function", "pred_steps": "Functional steps:1. Log in to the software system with valid credentials.2. Navigate to the main customers management page.3. View a list of all customers and their information.4. Select a specific customer to view/edit their details.5. Edit/update customer information if needed.6. Save the changes made to the customer information.7. Add a new customer to the system.8. Enter the new customer's information.9. Save the new customer details to the system.10. Delete a customer from the system if required.11. Confirm the deletion action.12. Verify that the customer is no longer visible in the list of customers.13. Logout from the software system to end the session.", "pred_act": "Log in, Navigate, View, Select, view, edit, Edit, update, Save, Add, Enter, Save, Delete, Confirm, Verify, Logout\n", "pred_obj": "software system, customers management page, customers, customer, customer information, changes, customer, customer details, customer"}
{"index": 28, "ucName": "\nAdd Customer\n", "uctext": " Coordinator can add new Customer.\n", "steps": "\n 1 The coordinator press “Add Customer”\n 2 The coordinator fills the new customer form.\n 3 The coordinator will send the customer to supplier \n", "dataset": "viper", "act": "press, fills, send", "obj": "coordinator, Add Customer, new customer form, customer, supplier", "pred_steps": "1. The coordinator accesses the system.2. The coordinator selects the option to add a new customer.3. The system displays a form for entering the customer details.4. The coordinator enters the required customer details (such as name, contact information, etc.) into the form.5. The coordinator submits the form.6. The system validates the entered information.7. If the information is valid, the system adds the new customer to the database.8. The system displays a success message indicating that the customer has been added successfully.9. The use case is now complete.", "pred_act": "accesses, selects, displays, entering, enters, submits, validates, adds, displays, indicating, complete\n", "pred_obj": "coordinator,system,form,information,database,success message,customer"}
{"index": 29, "ucName": "\nView Customers\n", "uctext": " coordinator can view a list of all customers.\n", "steps": "\n 1 The coordinator press “View Customers”\n 2 The coordinator view list of customers.\n", "dataset": "viper", "act": "\"press view view\"", "obj": "coordinator, View Customers, list of customers", "pred_steps": "1. Log in to the system as a coordinator.2. Navigate to the customers section.3. Retrieve and display the list of all customers stored in the system.", "pred_act": "Log in, Navigate, Retrieve, display, stored\n", "pred_obj": "coordinator,customers,customers"}
{"index": 30, "ucName": "\nView Customer Details\n", "uctext": " Coordinator can show the details of any customer that he chose.\n", "steps": "\n 1 The coordinator press “View Customer Details”\n 2 The coordinator views the details of a customer.\n", "dataset": "viper", "act": "\"press views views\"", "obj": "coordinator, View Customer Details, customer, details of a customer", "pred_steps": "1. Authenticate the coordinator's login credentials.2. Display a list of customers for the coordinator to choose from.3. Allow the coordinator to select a customer from the list.4. Retrieve the selected customer's details from the database.5. Display the details of the selected customer to the coordinator.", "pred_act": "Authenticate, Display, Allow, select, Retrieve, Display\n", "pred_obj": "coordinator,login credentials,customers,customer,database,details"}
{"index": 31, "ucName": "\nEdit Customer\n", "uctext": " The Coordinator can edit  customer him.\n", "steps": "\n 1 The coordinator press “Edit Customer”\n 2 The coordinator modifies the request information.\n 3 The coordinator will send a notification to the customer.\n", "dataset": "viper", "act": "press, modifies, will send", "obj": "coordinator, Edit Customer, request information, notification, customer", "pred_steps": "1. The Coordinator selects the customer to edit.2. The system displays the customer details for editing.3. The Coordinator makes the necessary changes to the customer information.4. The Coordinator saves the changes.5. The system updates the customer information with the edited details.6. The system notifies the Coordinator that the changes have been saved successfully.", "pred_act": "selects displays makes saves updates notifies\n", "pred_obj": "the coordinator, the system, the customer, the customer details, the customer information, the changes"}
{"index": 32, "ucName": "\nDelete Customer\n", "uctext": " The coordinator can delete a certain customer\n", "steps": "\n 1 The coordinator press “Delete Customer”\n 2 The information about the customer will show.\n 3 Press “Delete” to processing the deleting\n 4 The coordinator will send a notification to the customer on option.\n", "dataset": "viper", "act": "press, show, press, send", "obj": "coordinator, Delete Customer, information, customer, Delete, notification, customer, option", "pred_steps": "1. Authenticate the coordinator's credentials.2. Display a list of customers to the coordinator.3. Allow the coordinator to select a customer to delete.4. Confirm the deletion with a prompt.5. Delete the selected customer from the system.6. Display a confirmation message to the coordinator indicating successful deletion.", "pred_act": "Authenticate, Display, Allow, select, delete, Confirm, Delete, Display, indicating\n", "pred_obj": "coordinator,coordinator,coordinator,coordinator"}
{"index": 33, "ucName": "\nManage Suppliers\n", "uctext": " The main suppliers management page that coordinator will manage all suppliers information\n", "steps": "\n 1 The coordinator press “Manage  Suppliers”\n 2 The coordinator use any function.\n 3 The coordinator will manage all suppliers function. \n", "dataset": "viper", "act": "\"press, use, will manage\"", "obj": "coordinator, Manage Suppliers, function, suppliers function", "pred_steps": "1. Log in to the system as a coordinator.2. Navigate to the main suppliers management page.3. View list of all suppliers with their relevant information.4. Add a new supplier by providing necessary details.5. Edit existing supplier information if needed.6. Delete a supplier from the list if required.7. Search for specific suppliers using a search functionality.8. View detailed information of a specific supplier by clicking on their profile.9. Update supplier information such as contact details, products supplied, etc.10. Save any changes made to supplier information.11. Log out from the system once the suppliers' management tasks are completed.", "pred_act": "Log in, Navigate, View, Add, Edit, Delete, Search, View, clicking, Update, Save, Log out\n", "pred_obj": "coordinator,system,main suppliers management page,suppliers,information,details,supplier,profile,contact details,products"}
{"index": 34, "ucName": "\nAdd Supplier\n", "uctext": " Coordinator can add new Supplier\n", "steps": "\n 1 The coordinator press “Add Supplier”\n 2 The coordinator fills the new Supplier form.\n 3 The coordinator will send the Supplier to supplier \n", "dataset": "viper", "act": "press, fills, will send", "obj": "coordinator, Add Supplier, new Supplier form, Supplier, supplier", "pred_steps": "1. Open the software application.2.3.4.5.6.7.8.9.", "pred_act": "Open\n", "pred_obj": "software application"}
{"index": 35, "ucName": "\nView Suppliers\n", "uctext": " coordinator can view a list of all Suppliers.\n", "steps": "\n 1 The coordinator press “View Suppliers”\n 2 The coordinator view list of Suppliers.\n", "dataset": "viper", "act": "\"press, view\"", "obj": "coordinator, View Suppliers, list of Suppliers", "pred_steps": "Functional Steps:1. Log in to the system as a coordinator.2. Navigate to the Suppliers section of the system.3. Click on the option to view all suppliers.4. Retrieve and display the list of all suppliers in the system.5. Allow the coordinator to scroll, search, and filter the list if needed.6. Ensure that the list includes relevant information about each supplier, such as name, contact information, and products/services provided.7. Provide an option to view more details or perform actions related to each supplier if necessary.8. Ensure that the list is updated in real-time to reflect any changes made to the suppliers' information.", "pred_act": "Log in, Navigate, Click, Retrieve, display, Allow, scroll, search, filter, Ensure, includes, Provide, view, perform, Ensure, is updated, reflect, made\n", "pred_obj": "coordinator, system, suppliers section, option, list, coordinator, list, list, supplier, name, contact information, products/services, option, actions, list, suppliers' information"}
{"index": 36, "ucName": "\nView Supplier Details\n", "uctext": " Coordinator can show the details of any Supplier that he chose.\n", "steps": "\n 1 The coordinator press “View Supplier Details”\n 2 The coordinator views the details of a Supplier.\n", "dataset": "viper", "act": "\"press, views\"", "obj": "coordinator, View Supplier Details, Supplier, details", "pred_steps": "1. User selects the \"Show Supplier Details\" option from the application menu.2. System presents the list of available suppliers to the user.3. User selects the desired supplier from the list.4. System retrieves and displays the detailed information of the selected supplier, including name, contact information, address, and any additional relevant details.5. User reviews the supplier details.6. User can choose to navigate back to the supplier list or exit the application.", "pred_act": "selects presents selects retrieves displays reviews choose navigate exit\n", "pred_obj": "user, system, \"show supplier details\", application menu, suppliers, supplier, information, name, contact information, address, details, supplier list, application"}
{"index": 37, "ucName": "\nEdit Supplier\n", "uctext": " The Coordinator can edit  Supplier and notify him (on option.)\n", "steps": "\n 1 The coordinator press “Edit Supplier”\n 2 The coordinator modifies the Supplier information.\n 3 The coordinator will send a notification to the Supplier.\n", "dataset": "viper", "act": "press, modifies, will send", "obj": "coordinator, Edit Supplier, Supplier information, notification, Supplier", "pred_steps": "1. The Coordinator selects the option to edit a Supplier.2. The system displays a list of Suppliers for the Coordinator to choose from.3. The Coordinator selects the Supplier to be edited from the list.4. The system presents a form with the Supplier details for editing.5. The Coordinator updates the necessary fields for the Supplier.6. The Coordinator selects the option to notify the Supplier.7. The system displays a notification template for the Coordinator to customize.8. The Coordinator customizes the notification message as desired.9. The Coordinator confirms the changes and submits the form.10. The system saves the updated Supplier information.11. The system sends the customized notification message to the Supplier.", "pred_act": "selects, displays, choose, selects, presents, updates, selects, notify, displays, customize, customizes, confirms, submits, saves, sends\n", "pred_obj": "coordinator, supplier, coordinator, supplier, coordinator, supplier, coordinator, coordinator, supplier, supplier"}
{"index": 38, "ucName": "\nDelete Supplier\n", "uctext": " The coordinator can delete a certain Supplier\n", "steps": "\n 1 The coordinator press “Delete Supplier”\n 2 The information about the customer will show.\n 3 Press “Delete” to processing the deleting\n 4 The coordinator will send a notification to the Supplier on option.\n", "dataset": "viper", "act": "press, show, press, send", "obj": "coordinator, Delete Supplier, information, customer, Delete, coordinator, notification, Supplier, option", "pred_steps": "Functional Steps:1. Log in to the system as a coordinator.2. Navigate to the Suppliers management section.3. Locate the Supplier that needs to be deleted.4. Select the option to delete the Supplier.5. Confirm the deletion action.6. Verify that the Supplier has been successfully deleted from the system.7. Log out of the system.", "pred_act": "Log in, Navigate, Locate, Select, Confirm, Verify, Log out\n", "pred_obj": "coordinator, suppliers, supplier, supplier"}
{"index": 0, "ucName": " View Inventory\n", "uctext": " The system should provide a categorized view of the entire inventory to the Cons truction Junction s taff.\nStarting at the department level, users can navigate  into the inventory item categories and subcategories, all the way down to an individual inventory item.  ", "steps": "\n1. User accesses the main inventory screen\n2. The screen displays a ll inventory departments  \n3. User clicks a department  cell \n4. The screen displays all inventory categories for the selected department\n5. User clicks a category cell  that contains sub -categories  \n6. The screen displays all inventory sub -categories for the selected category\n7. User clicks a sub-category cell (leaf category)\n7.1. For a Unique Item category:  The screen displays a lis t of all inventory items for that selected category. User clicks a n item in the items list. The screen displays the details for the item\n7.2. For a Stock Item category:  The screen displays the details for th at Stock Item  category\n7.3. For a Under $5 category:  Nothing happens – The category cell is not clickable.\n", "dataset": "2009 - inventory 2.0", "act": "\"accesses, displays, clicks, displays, clicks, displays, clicks, displays, clicks, displays, displays, displays, is not clickable\"", "obj": "User, main inventory screen, screen, inventory departments, department cell, inventory categories, category cell, sub-categories, inventory sub-categories, sub-category cell (leaf category), Unique Item category, inventory items, item, Stock Item category, Under $5 category, category cell", "pred_steps": "1. Display department-level categories to the user.2. Allow the user to select a department category.3. Display the inventory item categories under the selected department category.4. Allow the user to select an inventory item category.5. Display the subcategories under the selected inventory item category.6. Allow the user to select a subcategory.7. Display the individual inventory items under the selected subcategory.8. Allow the user to select an individual inventory item to view details.", "pred_act": "Display, Allow, Display, Allow, Display, Allow, Display, Allow\n", "pred_obj": "department-level categories, department category, inventory item categories, inventory item category, subcategories, subcategory, individual inventory items, individual inventory item"}
{"index": 1, "ucName": " Manage Departments and Add Department\n", "uctext": " The system should allow inventory administrators to customize the inventory structure by defining the invent ory departments (not to be con fused actual retail floor departments known later in this document as stocking locations).  ", "steps": "\n1.1. User accesses the main inventory screen  \n1.2. System displays the Add Department button\n1.3. User clicks the Add Department button\n1.4. User enters the Department data \n1.5. System validates the Department data  \n1.6. System adds the new Department to t he inventory  \n1.7. User is taken back to the main inventory screen  \n", "dataset": "2009 - inventory 2.0", "act": "accesses, displays, clicks, enters, validates, adds, is taken", "obj": "User, main inventory screen, System, Add Department button, Department data, inventory", "pred_steps": "1. Log in to the system as an inventory administrator.2. Access the inventory customization section.3. Choose the option to define inventory departments.4. Create new inventory departments as needed.5. Ensure each inventory department is distinct and not confused with retail floor departments.6. Save the changes to update the inventory structure.7. Verify that the new inventory departments are correctly defined and visible in the system.8. Exit the inventory customization section.", "pred_act": "Log, Access, Choose, Create, Ensure, Save, Verify, Exit\n", "pred_obj": "inventory administrator, inventory customization section, inventory departments, inventory structure, retail floor departments, system"}
{"index": 2, "ucName": " Manage Departments and Edit Department\n", "uctext": " The system should allow inventory administrators to customize the inventory structure by defining the invent ory departments (not to be con fused actual retail floor departments known later in this document as stocking locations).  ", "steps": "\n2.1. User navigates to a Department  (see View Inventory ) \n2.2. System displays the Edit Department button  \n2.3. User clicks the Edit Department button  \n2.4. System displays the Department data  \n2.5. User edits Department data  \n2.6. System validates the Department data  \n2.7. System updates the Department  information  \n2.8. User is taken b ack to the Department screen  \n", "dataset": "2009 - inventory 2.0", "act": "navigates, displays, clicks, displays, edits, validates, updates, is taken", "obj": "User, Department, Edit Department button, Department data, Department information, Department screen", "pred_steps": "Functional Steps:1. Log in to the system as an inventory administrator.2. Navigate to the inventory customization section.3. Select the option to define inventory departments.4. Add a new inventory department by providing a name and description.5. Save the new inventory department.6. Repeat the process to add any additional inventory departments as needed.7. Ensure that each inventory department is clearly defined and distinct from retail floor departments.8. Verify that the inventory structure customization is successfully completed.9. Log out of the system.", "pred_act": "Log in, Navigate, Select, Add, provide, Save, Repeat, Ensure, Verify, is, completed, Log out\n", "pred_obj": "inventory administrator, system, inventory customization section, inventory departments, name, description, retail floor departments, inventory structure customization"}
{"index": 3, "ucName": " Manage Departments and Delete Department\n", "uctext": " The system should allow inventory administrators to customize the inventory structure by defining the invent ory departments (not to be con fused actual retail floor departments known later in this document as stocking locations).  ", "steps": "\n3.1. User navigates to a Department (see View Inventory ) \n3.2. System displays the Edit Department button  \n3.3. User clicks the Edit Department button  \n3.4. System displays the Department data  \n3.5. User clicks the Delete Department button  \n3.6. System validates the Department deletion  \n3.7. System removes  the Depart ment  from the inventory  \n3.8. User is taken b ack to the main inventory screen\n", "dataset": "2009 - inventory 2.0", "act": "navigates, displays, clicks, displays, clicks, validates, removes, is taken", "obj": "User, Department, View Inventory, Edit Department button, Department data, Delete Department button, inventory, main inventory screen", "pred_steps": "1. Log in to the system with inventory administrator credentials.2. Navigate to the inventory management section.3. Find the option to customize inventory structure.4. Select the option to define inventory departments.5. Create new inventory departments or modify existing ones.6. Ensure that the inventory departments are clearly distinguished from actual retail floor departments (stocking locations).7. Save the changes made to the inventory structure.8. Log out of the system once customization is complete.", "pred_act": "Log in, Navigate, Find, Select, Create, modify, Ensure, Save, Log out\n", "pred_obj": "system, inventory administrator credentials, inventory management section, option to customize inventory structure, option to define inventory departments, inventory departments, actual retail floor departments (stocking locations), changes, inventory structure"}
{"index": 4, "ucName": " Manage Categories and Add Category\n", "uctext": " The system should allow inventory administrators to customize the inventory structure by defining the inventory departments and categories.  ", "steps": "\n1.1. User navigates to a Department or Category (see View Inventory ) \n1.2. System displays the Add Category buttons: Unique Item; Stock Item.\n1.3. User clicks the desired Add Category button  \n1.4. System displays the appropriate screen for the Category type: Unique Item; Stock Item.\n1.5. User enters Catego ry data  \n1.6. System validates the Category data  \n1.7. System adds the new Category to the inventory  \n1.8. User is taken b ack to the parent Department or Category of the added Category  \n", "dataset": "2009 - inventory 2.0", "act": "navigates, displays, clicks, displays, enters, validates, adds, is taken", "obj": "User, Department, Category, View Inventory, System, Add Category buttons, Unique Item, Stock Item, Category type, Category data, inventory, parent Department", "pred_steps": "1. Display the inventory administration page2. Provide an option to add or remove inventory departments3. If \"add\" is selected, prompt the user to enter the name of the new department4. Add the new department to the inventory structure5. Provide an option to add or remove categories within a department6. If \"add\" is selected, prompt the user to enter the name of the new category7. Add the new category to the selected department8. Provide an option to remove an existing department or category9. If \"remove\" is selected, prompt the user to select the department or category to be removed10. Remove the selected department or category from the inventory structure11. Display a confirmation message indicating the successful customization of the inventory structure12. End the use case.", "pred_act": "Display, Provide, add, remove, is, prompt, enter, Add, Provide, add, remove, is, prompt, enter, Add, Provide, remove, is, prompt, select, Remove, Display, indicating, End\n", "pred_obj": "inventory administration page, inventory departments, department, category, inventory structure, department, category, department, category, inventory structure, message"}
{"index": 5, "ucName": " Manage Categories and Edit Category\n", "uctext": " The system should allow inventory administrators to customize the inventory structure by defining the inventory departments and categories.  ", "steps": "\n2.1. User navigates to a Category (see View  Inventory ) \n2.2. System displays the Edit Category button  \n2.3. User clicks the Edit Category button  \n2.4. System displays the appropriate screen for the Category type: Unique Item; Stock Item\n2.5. User edits Category data  \n2.6. System validates the Category data  \n2.7. System updates the Category  information  \n2.8. User is taken b ack to the Category screen  \n", "dataset": "2009 - inventory 2.0", "act": "navigates, displays, clicks, displays, edits, validates, updates, is taken", "obj": "User, Category, View Inventory, System, Edit Category button, appropriate screen, Category type, Unique Item, Stock Item, Category data, Category information, Category screen", "pred_steps": "1. Log in to the system as an inventory administrator.2. Navigate to the inventory customization section.3. Select the option to define a new department.4. Enter the department name and any additional details.5. Save the department information.6. Select the option to define a new category within the created department.7. Enter the category name and any additional details.8. Save the category information.9. Repeat steps 3-8 for defining additional departments and categories as needed.10. Review and finalize the customized inventory structure.11. Save the changes.12. Log out of the system.", "pred_act": "Log in, Navigate, Select, Enter, Save, Select, Enter, Save, Repeat, Review, finalize, Save, Log out\n", "pred_obj": "log in, system, inventory administrator, inventory customization section, department, department name, category, category name, inventory structure"}
{"index": 6, "ucName": " Manage Categories and Delete Category\n", "uctext": " The system should allow inventory administrators to customize the inventory structure by defining the inventory departments and categories.  ", "steps": "\n3.1. User navigates to a Category (see View Inventory ) \n3.2. System displays the Edit Category button  \n3.3. User clicks the Edit Category button  \n3.4. System displays the appropriate screen for the Category type: Unique Item; Stock Item\n3.5. User clicks the Delete Category button  \n3.6. System validates the Category deletion  \n3.7. System removes the Category from the inventory  \n3.8. User is taken back to the parent Department or Category of  the deleted Category  \n", "dataset": "2009 - inventory 2.0", "act": "navigates, displays, clicks, displays, clicks, validates, removes, is taken", "obj": "User, Category, View Inventory, System, Edit Category button, appropriate screen, Category type, Unique Item, Stock Item, Delete Category button, Category deletion, inventory, parent Department, Category of the deleted Category", "pred_steps": "1. Log in to the system as an inventory administrator.2. Navigate to the inventory customization section.3. Select the option to define new department.4. Enter the department name and any other relevant details.5. Save the new department.6. Select the option to define new category.7. Link the category to the relevant department.8. Enter the category name and any other relevant details.9. Save the new category.10. Repeat the process to define additional departments and categories as needed.11. Review and confirm the changes made to the inventory structure.", "pred_act": "Log in, Navigate, Select, Enter, Save, Select, Link, Enter, Save, Repeat, Review, confirm\n", "pred_obj": "inventory administrator, inventory customization section, department, department name, category, category name, inventory structure"}
{"index": 7, "ucName": " Manage Categories and Move Categories\n", "uctext": " The system should allow inventory administrators to customize the inventory structure by defining the inventory departments and categories.  ", "steps": "\n4.1. User navigates to a Department or Category (see View Inventory ) \n4.2. System displays the Move Categories button  \n4.3. User clicks the Move Categories button  \n4.4. System displays the Move Categories screen\n4.5. User selects Categories to move  \n4.6. User selects target location on categorized inventory for the moved Categories  \n4.6.1.  User may select an existing Department or Category  \n4.6.2.  User may choose to create a new Category to hold the moved Categories.\nIn this case, u ser selects the parent Department or Category of the  new Category to be created\nUser enters the new Category data\n4.7. User selects the type of move to be performed  \n4.7.1.  Move selected categories as -is and make them children of the target Department or Category\n4.7.2.  Merge  the contents (items) of the selected categories and add them to the target Department or Category\n4.8. System validates the entered data  \n4.9. System moves the selected Categories  \n4.10.  User is taken b ack to the parent Department or Category of the moved Categories  \n", "dataset": "2009 - inventory 2.0", "act": "navigates, displays, clicks, displays, selects, selects, may select, may choose, enters, selects, validates, moves, is taken", "obj": "User, Department, Category, View Inventory, Move Categories button, Move Categories screen, Categories, target location, categorized inventory, existing Department, existing Category, new Category, parent Department, new Category data, type of move, selected categories, target Department, items, entered data, moved Categories", "pred_steps": "1. Log in to the system as an inventory administrator.2. Navigate to the inventory customization section.3. Select the option to define new inventory departments.4. Enter the department name and any other relevant details.5. Save the new department entry.6. Select the option to define new inventory categories.7. Enter the category name, choose the department it belongs to, and provide any other necessary information.8. Save the new category entry.9. Repeat steps 3-8 as needed to create all desired departments and categories.10. Verify the changes are reflected in the inventory structure.11. Log out of the system once customization is complete.", "pred_act": "Log in, Navigate, Select, Enter, Save, Select, Enter, choose, provide, Save, Repeat, Verify, Log out\n", "pred_obj": "inventory administrator, inventory customization section, new inventory departments, department name, new department entry, new inventory categories, category name, department, new category entry, inventory structure"}
{"index": 8, "ucName": " Manage Attributes and Details and View Item Attributes\n", "uctext": " The system should allow inventory administrators to customize the attributes and det ails available for each inventory item. Attributes can be defined for each department, and details can be defined for each department and/or category. ", "steps": "\n1.1. User accesses the main inventory screen  \n1.2. System displays the Edit Attributes button  \n1.3. User clicks the Edit Attributes button  \n1.4. System displays the Edit Attributes screen which displays all existing item attributes and their attribute x department assignments\n1.5. Optionally, user filters view by attribute status (active, inactive, all)  \n1.6. User clicks the Done button  \n1.7. User is taken back to the main inventory screen  \n", "dataset": "2009 - inventory 2.0", "act": "accesses, displays, clicks, displays, filters, clicks, is taken back", "obj": "User, main inventory screen, System, Edit Attributes button, Edit Attributes screen, item attributes, attribute x department assignments, attribute status, active, inactive, all, Done button", "pred_steps": "1. Log in to the system as an inventory administrator.2. Navigate to the inventory customization section.3. Select the department for which attributes will be customized.4. Add new attributes or edit existing attributes specific to the selected department.5. Save the changes made to the attributes.6. Select the department or category for which details will be customized.7. Add new details or edit existing details specific to the selected department or category.8. Save the changes made to the details.9. Review the customized attributes and details for accuracy.10. Confirm and finalize the customization settings.11. Log out of the system.", "pred_act": "Log in, Navigate, Select, will be, customized, Add, edit, Save, made, Select, will be, customized, Add, edit, Save, made, Review, Confirm, finalize, Log out\n", "pred_obj": "log in, system, inventory administrator, inventory customization section, department, attributes, details, category"}
{"index": 9, "ucName": " Manage Attributes and Details and View Item Details\n", "uctext": " The system should allow inventory administrators to customize the attributes and det ails available for each inventory item. Attributes can be defined for each department, and details can be defined for each department and/or category. ", "steps": "\n2.1. User accesses the main inventory screen  \n2.2. System displays the Edit Details button  \n2.3. User clicks the Edit Details button\n2.4. System displays the Edit Details screen which displays all existing item details and their detail x department and category assignments\n2.5. Optionally, user filters view by detail status (active, inactive, all)  \n2.6. User clicks the Done button  \n2.7. User is taken back to the main inventory screen  \n", "dataset": "2009 - inventory 2.0", "act": "\"accesses, displays, clicks, displays, filters, clicks, is taken back\"", "obj": "User, main inventory screen, System, Edit Details button, Edit Details screen, item details, detail x department, category assignments, detail status, Done button", "pred_steps": "1. Login to the system as an inventory administrator.2. Navigate to the inventory management section.3. Select the \"Customize Attributes\" option.4. Choose the department for which attributes need to be customized.5. Add new attributes or modify existing ones as required.6. Save the customized attributes for the selected department.7. Select the \"Customize Details\" option.8. Choose the department and/or category for which details need to be customized.9. Add new details or modify existing ones as required.10. Save the customized details for the selected department and/or category.11. Logout from the system.", "pred_act": "Login, Navigate, Select, Choose, Add, modify, Save, Select, Choose, Add, modify, Save, Logout\n", "pred_obj": "inventory administrator, inventory management section, customize attributes, department, attributes, customize details, category, details"}
{"index": 10, "ucName": " Manage Attributes and Details and Edit Item Attributes\n", "uctext": " The system should allow inventory administrators to customize the attributes and det ails available for each inventory item. Attributes can be defined for each department, and details can be defined for each department and/or category. ", "steps": "\n3.1. User accesses the main inventory screen  \n3.2. System displays the Edit Attributes button  \n3.3. User clicks the Edit Attributes button  \n3.4. System displays the Edit Attributes screen which displays all existing item attributes and their attribute x department assignments\n3.5. Optionally, user filters view by attribute status (active, inactive, all)  \n3.6. User edits attributes  \n3.6.1.  User changes attribute x department assignments  \n3.6.2.  User changes attribute data  \n3.6.3.  User changes attribute active x inactive status  \n3.6.4.  User creates new attribute  \n3.6.5.  System validates the attribute data  \n3.6.6.  System updates the Item Attribute information  \n3.7. User clicks the Done button  \n3.8. User is taken back to the main inventory screen\n", "dataset": "2009 - inventory 2.0", "act": "accesses, displays, clicks, displays, filters, edits, changes, changes, changes, creates, validates, updates, clicks, is taken", "obj": "User, main inventory screen, System, Edit Attributes button, Edit Attributes screen, item attributes, attribute x department assignments, attribute status, active, inactive, all, attributes, attribute x department, attribute data, attribute active x inactive status, new attribute, Item Attribute information, Done button", "pred_steps": "1. Log in to the system as an inventory administrator.2. Access the inventory customization feature.3. Select the option to customize attributes.4. Choose the department for which the attributes will be defined.5. Add or modify attributes as needed.6. Save the changes.7. Select the option to customize details.8. Choose the department or category for which details will be defined.9. Add or modify details as needed.10. Save the changes.11. Confirm that the attributes and details have been successfully customized for the inventory item in the specified department or category.", "pred_act": "Log in, Access, Select, Choose, Add, modify, Save, Select, Choose, Add, modify, Save, Confirm\n", "pred_obj": "system, inventory administrator, inventory customization feature, attributes, department, details, inventory item, category"}
{"index": 11, "ucName": " Manage Attributes and Details and Edit Item Details\n", "uctext": " The system should allow inventory administrators to customize the attributes and det ails available for each inventory item. Attributes can be defined for each department, and details can be defined for each department and/or category. ", "steps": "\n4.1. User accesses the main inventory screen  \n4.2. System displays the Edit Details button  \n4.3. User clicks the Edit Details button  \n4.4. System displays the Edit Details screen which displays al l existing item details and their detail x department and category assignments\n4.5. Optionally, user filters view by detail status (active, inactive, all)  \n4.6. User edits details  \n4.6.1.  User changes detail x department or category assignments  \n4.6.2.  User changes detail data  \n4.6.3.  User changes detail active x inactive status  \n4.6.4.  User creates new detail  \n4.6.5.  System validates the detail data  \n4.6.6.  System updates the Item detail information  \n4.7. User clicks the Done button  \n4.8. User is taken back to the main inventory screen\n", "dataset": "2009 - inventory 2.0", "act": "accesses, displays, clicks, displays, filters, edits, changes, changes, changes, creates, validates, updates, clicks, is taken back", "obj": "User, main inventory screen, System, Edit Details button, Edit Details screen, existing item details, detail x department, category assignments, detail status, active, inactive, all, detail data, detail active x inactive status, new detail, Item detail information, Done button", "pred_steps": "1. Log in to the system as an inventory administrator.2. Access the inventory customization section.3. Select the department for which attributes will be defined.4. Define attributes specific to the selected department.5. Select the department or category for which details will be defined.6. Define details specific to the selected department or category.7. Save the customized attributes and details.8. Verify that the changes are reflected in the inventory item listings.", "pred_act": "Log in, Access, Select, will be defined, Define, Select, will be defined, Define, Save, Verify, are reflected\n", "pred_obj": "inventory administrator, inventory customization section, department, attributes, details, department, category, customized attributes and details, inventory item listings"}
{"index": 12, "ucName": " Add Item  to Inventory\n", "uctext": " Items are typically added to the inventory as part of the donation processes. This is called adding an item in donation processing. Alternatively, items can be added during routine inventory maintena nce. This is called adding an item in inventory management mode.  ", "steps": "  \n1. User accesses the main inventory screen  \n5. The screen displays all inventory departments in matrix format  (see View Inventory ) \n2. User drills down to the appropriate category for the i tem \n2.1. If in donation processing mode, the item entry screen is presented automatically  \n2.2. If in inventory management mode, the list of existing inventory items in that category is displayed  \n2.2.1.  User clicks the Add Item button  \n3. The appropriate item entry  screen is presented\n4. User fills in item information  \n5. User confirms the addition of the new item  \n6. Inventory is updated  \n7. System gives the option of printing an item tag  \n8. User prints  item tag (s)s for unique or stock item(s)  \n9. User attaches tag (s) to the item (s)\n", "dataset": "2009 - inventory 2.0", "act": "accesses, displays, drills down, is presented, is displayed, clicks, is presented, fills, confirms, is updated, gives, prints, attaches", "obj": "User, main inventory screen, screen, inventory departments, matrix format, category, donation processing mode, item entry screen, inventory management mode, list of existing inventory items, Add Item button, appropriate item entry screen, item information, new item, Inventory, option, item tag, tag(s), item(s)", "pred_steps": "Functional Steps:1. User selects the \"Add Item\" option from the donation processing menu.2. System prompts the user to enter the details of the item to be added (e.g., name, description, quantity).3. User enters the details of the item.4. System validates the entered data (e.g., checks for missing or invalid fields).5. System adds the item to the inventory.6. System displays a success message indicating that the item has been added to the inventory.7. User selects the \"Add Item\" option from the inventory management menu.8. System prompts the user to enter the details of the item to be added (e.g., name, description, quantity).9. User enters the details of the item.10. System validates the entered data (e.g., checks for missing or invalid fields).11. System adds the item to the inventory.12. System displays a success message indicating that the item has been added to the inventory.", "pred_act": "selects prompts enter enters validates checks adds displays selects prompts enter enters validates checks adds displays\n", "pred_obj": "user, system, item, donation processing menu, inventory management menu, inventory, data, fields, name, description, quantity, success message"}
{"index": 13, "ucName": " Manage Inventory Items and Modify Inventory Item\n", "uctext": " The system should allow various management actions to be performed on items existing in the inventory. These include modifying, deleting and splitting an item, and viewing the item‟s details and item history. These actions are only available for Unique and Stock items.  ", "steps": "\n1.1. User accesses the main inventory  screen\n1.2. The screen displays all inventory departments in matrix format  with option to select and/or edit items to move them to a new department/category\n1.3. User drills down to the desired existing inventory item (see View Inventory )\n1.4. The item detail screen is presented  \n1.5. User modifies item information  \n1.6. The system validates item information  \n1.7. Item information is updated in the inventory  \n1.8. System gives the option of re -printing then item tag  \n1.9. User optionally re -prints the item tag and  attaches it to the item\n", "dataset": "2009 - inventory 2.0", "act": "accesses, displays, drills down, is presented, modifies, validates, is updated, gives, re-prints, attaches", "obj": "User, main inventory screen, screen, inventory departments, matrix format, items, new department/category, desired existing inventory item, item detail screen, item information, system, inventory, item tag", "pred_steps": "1. Select the item from the inventory that needs to be managed.2. Verify if the selected item is either Unique or Stock type.3. If the item is Unique or Stock, proceed with the management actions. If not, notify the user that the selected item is not eligible for management actions.4. Provide options to modify, delete, or split the item as per user selection.5. For modifying an item, allow the user to update the details of the item such as name, quantity, price, etc.6. For deleting an item, prompt the user for confirmation before removing the item from the inventory.7. For splitting an item, ask the user to specify the quantity to split and create a new entry for the split items.8. Allow the user to view the details and history of the selected item.9. End the management actions upon user's request or completion of the desired action.", "pred_act": "Select, Verify, proceed, notify, Provide, modify, delete, split, allow, update, prompt, removing, ask, specify, create, Allow, view, End\n", "pred_obj": "item, inventory, user, management actions, name, quantity, price, entry, details, history"}
{"index": 14, "ucName": " Manage Inventory Items and Adjust Item Quantity\n", "uctext": " The system should allow various management actions to be performed on items existing in the inventory. These include modifying, deleting and splitting an item, and viewing the item‟s details and item history. These actions are only available for Unique and Stock items.  ", "steps": "\n2.1. User accesses the main inventory screen  \n2.2. The screen displays all inventory departments in matrix format  \n2.3. User drills down to the desired existing inventory item (see View Inve ntory ) \n2.4. The item detail screen is presented  \n2.5. User c hanges the item quantity  \n2.6. The system displays a confirmation screen where a  reason for the adjustment must  be specified by the user\n2.7. The sy stem validates the item change  \n2.8. Item information is updated in the inv entory  \n", "dataset": "2009 - inventory 2.0", "act": "accesses, displays, drills down, is presented, changes, displays, validates, is updated", "obj": "User, main inventory screen, screen, inventory departments, matrix format, desired existing inventory item, item detail screen, item quantity, system, confirmation screen, reason for the adjustment, item change, Item information, inventory", "pred_steps": "1. Select the item to perform management actions on.2. Verify if the selected item is a Unique or Stock item.3. If the item is Unique or Stock, display options for modifying, deleting, splitting, viewing details, and viewing item history.4. Implement functionality for modifying the item.5. Implement functionality for deleting the item.6. Implement functionality for splitting the item.7. Implement functionality for viewing the item's details.8. Implement functionality for viewing the item's history.", "pred_act": "Select, Verify, display, modifying, deleting, splitting, viewing, viewing, Implement, Implement, Implement, Implement, Implement\n", "pred_obj": "item, unique, stock, modifying, deleting, splitting, viewing details, viewing item history"}
{"index": 15, "ucName": " Manage Inventory Items and Split Inventory Item\n", "uctext": " The system should allow various management actions to be performed on items existing in the inventory. These include modifying, deleting and splitting an item, and viewing the item‟s details and item history. These actions are only available for Unique and Stock items.  ", "steps": "\n3.1. User accesses the main inventory screen  \n3.2. The screen displays all inventory departments in matrix format  \n3.3. User drills down to the desired existing inventory item (see View Inventory ) \n3.4. The item d etail screen is presented  \n3.5. User clicks the Split Item button  \n3.6. The system displays the Item Split screen  \n3.7. User builds  the list of items that the original item will be split into  \n3.7.1.  User can clone the original item to add new item(s) to the list that have similar attributes as the original item\n3.7.2.  User can add new items to the list by selecting Unique and Stock categories in the same way as adding a new item to the inventory (see Add Item to Inventory )\n3.8. Once the list is complete, user  confirms the split  \n3.9. The system validates the split  \n3.10.  Item information is updated in the inventory  \n3.10.1.  The original (split) item is update d in the inventory  \n3.10.2.  Any new i tems that were added to the split list are added to the inventory  maintaining parental history\n", "dataset": "2009 - inventory 2.0", "act": "accesses, displays, drills down, is presented, clicks, displays, builds, can clone, can add, confirms, validates, is updated, is updated, are added", "obj": "User, main inventory screen, screen, inventory departments, matrix format, desired existing inventory item, item detail screen, Split Item button, Item Split screen, list of items, original item, item, Unique category, Stock category, new item, inventory, system, split, Item information, original (split) item, new items, inventory, parental history", "pred_steps": "1. Display the list of items in the inventory.2. Select a specific Unique or Stock item from the list.3. Display the details and history of the selected item.4. Provide options to modify, delete, or split the selected item.5. If the user chooses to modify the item, allow them to update the item's information.6. If the user chooses to delete the item, prompt for confirmation before removing the item.7. If the user chooses to split the item, allow them to specify the quantity to split and create a new item with the specified quantity.8. Save any changes made to the item.9. Provide appropriate feedback to the user after each action.", "pred_act": "Display, Select, Display, Provide, modify, delete, split, chooses, allow, update, chooses, prompt, removing, chooses, allow, specify, create, Save, Provide\n", "pred_obj": "item, item, item, item, item, item, item, item, item"}
{"index": 16, "ucName": " Manage Inventory Items and View Inventory Item History\n", "uctext": " The system should allow various management actions to be performed on items existing in the inventory. These include modifying, deleting and splitting an item, and viewing the item‟s details and item history. These actions are only available for Unique and Stock items.  ", "steps": "\n4.1. User accesses the main inventory screen  \n4.2. The screen displays all inventory departments in matrix format  \n4.3. User drills down to the desired existing inventory item (see View Inventory ) \n4.4. The item det ail screen is presented  \n4.5. User clicks the Item History button  \n4.6. The system displays the Item History screen containing current and historical information about the inventory item\n", "dataset": "2009 - inventory 2.0", "act": "accesses, displays, drills down, is presented, clicks, displays", "obj": "User, main inventory screen, screen, inventory departments, matrix format, desired existing inventory item, item detail screen, Item History button, system, Item History screen, current and historical information about the inventory item", "pred_steps": "1. Select the item from the inventory to manage.2. Check if the selected item is Unique or Stock item.3. If the item is Unique or Stock item, proceed with the following management actions:4. View the item's details.5. View the item's history.6. Modify the item.7. Delete the item.8. Split the item (if applicable).9. End.", "pred_act": "Select, Check, proceed, View, View, Modify, Delete, Split, End\n", "pred_obj": "item, item, item, item, item, item, item, item"}
{"index": 17, "ucName": " Suggest Item Price\n", "uctext": " The system should assist in the task of pricing a new inventory item by making  pricing suggestions to the user when adding to or modifying an  item in the inventory. The suggested price s should be calculated based on the original and sale prices of similar items that currently exist or existed in the inventory in the past. ", "steps": "  \n1. User accesses the inventory entry screen (see Add Item to Inventory , Manage Inventory Items )\n2. System shows  price recommendations based on current item data and de fault price suggestion configuration options\n3. User modifies item data \n4. System makes new price suggestions  based on new item data\n", "dataset": "2009 - inventory 2.0", "act": "accesses, shows, modifies, makes", "obj": "User, inventory entry screen, Add Item to Inventory, Manage Inventory Items, System, price recommendations, current item data, default price suggestion configuration options, item data, new item data, new price suggestions", "pred_steps": "Functional Steps:1. Retrieve the original and sale prices of similar items from the inventory database.2. Calculate the average original and sale prices of the similar items.3. Calculate the suggested price by applying a pricing algorithm to the average prices.4. Display the suggested price to the user when adding or modifying the inventory item.5. Allow the user to either accept the suggested price or manually input a different price.6. Update the inventory item with the chosen price.", "pred_act": "Retrieve, Calculate, Calculate, Display, Allow, Update\n", "pred_obj": "original, sale prices, inventory database, average original price, sale prices, similar items, pricing algorithm, suggested price, user, inventory item"}
{"index": 18, "ucName": " View Acquisi tions\n", "uctext": " Acquisition records for Drop -Off, Pickup and Decon donations are created in the CRM system. Inventory Management u sers should be able to view all past and current acquisitions . Receiving Associates use this function to locate an expected acquisition  when receiving a donation  at the loading dock.  Pickup and Decon crews may also use this function to initiate the process of receiving items while in the truck, on their way to the receiving dock.  Drop Off acquisitions are not typically pre-scheduled as Pi ck Up and Decon acquisitions  except for those submitted through the organizational website . As such, when a donor arrives with an unexpected drop off donation, a new acquisition needs to be able to be created in the CRM system first , at either the customer service desk or at the dock,  before it can be viewed in the acquisitions screen.  ", "steps": "\n1. User accesses the acquisitions  screen  \n2. The screen displays a list of all acquisitions , latest ones at the top of the list  \n3. User may optionally filter the acquisitions displayed on the screen by changing filtering options  \n4. User clicks on an acquisition record  \n5. System display the details for that acquisition, including expected items\n", "dataset": "2009 - inventory 2.0", "act": "accesses, displays, may filter, clicks, display", "obj": "User, acquisitions screen, list of all acquisitions, latest acquisitions, filtering options, acquisition record, details for that acquisition, expected items", "pred_steps": "1. User selects \"Create New Acquisition Record\" option in the CRM system.2. User specifies the type of acquisition (Drop-Off, Pickup, Decon).3. If it is a Drop-Off acquisition, user indicates if it was submitted through the organizational website.4. If Drop-Off was not pre-scheduled, user is prompted to enter donation details.5. User saves the new acquisition record in the CRM system.6. Inventory Management users access the \"View Acquisitions\" screen.7. Receiving Associates search for the expected acquisition related to the donation.8. Pickup and Decon crews can also search for and view the acquisition record while in transit to the receiving dock.9. If a donor arrives with an unexpected drop-off donation, a new acquisition record is created first at the customer service desk or dock.10. Once the new drop-off acquisition is created, it becomes visible in the acquisitions screen for tracking and processing.", "pred_act": "selects, specifies, indicates, was, is, prompted, enter, saves, access, search, search, view, arrives, is, created, is, created, becomes\n", "pred_obj": "user, \"create new acquisition record\", crm system, type of acquisition, drop-off, pickup, decon, organizational website, donation details, inventory management users, \"view acquisitions\" screen, receiving associates, donation, pickup, decon crews, receiving dock, donor, drop-off donation, customer service desk, dock, acquisitions screen, tracking, processing"}
{"index": 19, "ucName": " Receive Acquisition\n", "uctext": " A donor in possession of a valid acquisition number can proceed to the receiving dock where the items to be donated will be received and processed, and a donation receipt will be generated.  Alternatively, a donor may go directly to the receiving dock, in which case a new acquisition is cre ated by the Receiving Associate before items can be received and processed. The screens used for the acquisition process should simplify and expedite the data entry process, allowing the Receiving Associate to enter only the information needed to generate  the donation receipt. Additional attributes needed to complete the item information and effectively add the item to the inventory can be added at a second step , after the receipt has been printed and the donor has been served. The Receiving Associate can print temporary acquisition labels for items that require further processing.  Pick Up and Decon crews may also initiate the receiving process, entering as much detailed information about the donated items as desired, and generating a donation receipt. The y cannot, however, add items to the inventory or complete the acquisition process. A Receiving Associate is required to review all the acquisition information before those actions can take place.  ", "steps": "\n1. Donor or Primary Contact arrives at receiving dock with a valid donation number  \n2. Receiving Associate locates donation reques t in the system  (see View Acquisitions ) \n3. System displays donation request information  \n4. Receiving Associate enters information about each donated item into the donation request  (see Add Item to Inventory )\n4.1. A new item can be added to the list by cloning an existing item  \n4.2. A new item can be added by clicking the Add Item button  \n4.3. An item can be removed by setting the received quantity to zero  \n5. Receiving Associate  prints a donation receipt  \n6. Receiving Associate optionally writes information to the receipt by hand  such as condition  \n7. Donation receipt is given to the Donor  or Primary Contact  \n8. Receiving Associate prints item tags  for unique and stock items  (see Add It em to Inventory ) \n9. Receiving Associate attaches printed tags to corresponding items  \n10. Receiving Associate closes donation request\n", "dataset": "2009 - inventory 2.0", "act": "arrives, locates, displays, enters, can be added, can be cloned, can be removed, prints, writes, is given, prints, attaches, closes", "obj": "Donor, Primary Contact, receiving dock, valid donation number, Receiving Associate, donation request, system, View Acquisitions, donation request information, donated item, Add Item to Inventory, new item, existing item, Add Item button, received quantity, donation receipt, condition, item tags, unique items, stock items, corresponding items", "pred_steps": "1. Donor with a valid acquisition number proceeds to the receiving dock.2. Receiving Associate checks the acquisition number.3. If valid acquisition number is provided, the Receiving Associate receives and processes the donated items.4. Receiving Associate generates a donation receipt.5. If donor does not have a valid acquisition number, the Receiving Associate creates a new acquisition.6. Receiving Associate enters the necessary information to generate the donation receipt.7. Additional attributes for item information can be added at a later step after the receipt is printed and the donor is served.8. Receiving Associate can print temporary acquisition labels for items that need further processing.9. Pick Up and Decon crews can enter detailed information about donated items but cannot add them to inventory or complete the acquisition process.10. Receiving Associate reviews all acquisition information before taking further actions.", "pred_act": "proceeds, checks, receives, processes, generates, creates, enters, can, be, printed, served, can, print, need, processing, can, enter, cannot, add, complete, reviews, taking\n", "pred_obj": "donor, valid acquisition number, receiving dock, receiving associate, acquisition number, donated items, donation receipt, acquisition, necessary information, item information, receipt, donor, temporary acquisition labels, pick up and decon crews, detailed information, inventory, acquisition process, acquisition information"}
{"index": 20, "ucName": " Sell Item\n", "uctext": " Any item in the inventory may be purchased by a Construction Junction customer. The sale of the item is processed by QuickBooks POS and the inventory must be updated accordingly.  ", "steps": "  \n1. Buyer arrives at the cashier or checkout desk with the items to be p urchased  \n2. Sales associate scans the item tags  \n3. Sales associate processes the sale of the items in QuickBooks POS  \n4. The system updates the inventory to reflect the sale\n", "dataset": "2009 - inventory 2.0", "act": "arrives, scans, processes, updates", "obj": "Buyer, cashier, checkout desk, items, Sales associate, item tags, QuickBooks POS, system, inventory", "pred_steps": "1. Customer selects an item to purchase from the inventory.2. Customer proceeds to checkout and indicates the intent to purchase the item.3. System initiates the sale process using QuickBooks POS.4. QuickBooks POS processes the payment and generates a transaction record.5. System updates the inventory to reflect the sale of the item.6. System provides the customer with a receipt or confirmation of the purchase.", "pred_act": "selects, proceeds, indicates, initiates, processes, generates, updates, provides\n", "pred_obj": "customer, item, inventory, checkout, intent, system, sale process, quickbooks pos, payment, transaction record, receipt, confirmation"}
{"index": 0, "ucName": " “WeatherFDDA”:  Setting up a  real time or off-line FDDA job", "uctext": " The objective of this feature is to automate the set up of new real time and off-line FDDA jobs. This use case describes the set up of GMOD jobs, re-runs and case studies. At this point, RTFDDAensemble jobs will be submitted to the MM as 'by hand' jobs or through a job configuration file.The MM will provide a default GMOD job configuration, which can be changed by the user. It is important to note that the model manager will accept andrun “custom” GMOD jobs. These are jobs that are also set up through the Setup-module, but donot use the default GMOD configuration  For a “custom” GMOD job, e.g., the user may choose tosupply his/her own input data, own pre-processors or a customized version of a MM5 executable.MM's Job-Setup module will allow the user to substitute the default configuration, but it is theuser's responsibility to make sure that these scripts, executables, etc.  reside on the cluster orclusters where the job will be running on. Submitting a “custom” GMOD job thought the Job-Setupmodule will allow the user to save the job's configuration with the MM.\n\n     ", "steps": " \n1.User chooses to “Set up  a Weather FDDA Job”.\n2.User may choose a cluster where the job should run on. \n3.User decides what model should be used: MM5 or WRF.\n4.User defines a JOBID.\n5.User determines domains: creates own domains (Note: This may only apply to MM5 jobs. From earlier discussions: creating domain files for WRF takes a long time.) or chooses between a number of pre-defined domains or submits own TERRAIN files\n6.User defines when a job is to be run and/or what cycle to run. If the cycle time is in the past, then the user is prompted to specify whether the job is a “case study” or “re-run”.\n7.User supplies other job specific information, such as, cycle interval, forecast length and other applicable information.\n8.User can specify whether to write restart files and the frequency of how often they are to be written.\n9.User can choose between predefined sigma-level configurations or supply own sigma-level configuration\n10.User has the option to specify the number of nodes to use. \n11.User can choose to receive email notification upon start, end and termination of the job.\n12.User chooses between standard or custom IC/BC data sources:•standard: ETA, AVNFTP (GFS), GFS004\nor •custom: provide data source (e.g., host:Full_Path_to_Dir)\nor •For off-line jobs, the user must specify the data source, i.e., location (MetVault ora directory) and time period. Important note for re-runs, if the input data is to obtain from the MetVault, then MetVault returns the data that was available andused in that cycle.\n11.Depending on the choice above, user can provide custom IC/BC pre-processor or choose the standard:•standard processing\nor •provide own pre-processing script\n12.User is given the option to run additional pre-processors for the IC/BC data, such as, LDAS or supply own custom pre-processor or skip this option.\n13.User chooses between standard and/or custom obs data sources and processing:•Standard: WMO, SAMS, MADIS, GTS, RAWS, okmeso, SatWinds, ACARS, etc.\nand/or •provide custom obs source1 and custom obs processor1\n•provide custom obs source2 and custom obs processor2\n•etc.\nor •For off-line jobs, the user must specify the data source, i.e., location (MetVault or a directory) and time period. Important note for re-runs, if the input data is to obtain from the MetVault, then MetVault returns the data that was available and used in that cycle.\n14.Depending on the choice of the model different options are given to the user:\n•MM5: The domain size and number of nodes for this job was determined earlier.Based on both choices, the user is presented with different MM5-executables to choose from. These executables have been compiled in advanced. The MM will be able to retrieve the compile info about the executables, e.g., domain size,number of nodes, number of sigma levels, etc. These few executables are standard executables. Or, the user can also supply own executable, e.g., its location on the cluster\n•WRF: User defines model options\n15.User chooses whether or not to run Final Analysis. This may only apply to re-runs and case studies.\n16.User chooses whether or not to run Prelim. Analysis. This may only apply to re-runs and case studies.\n17.User chooses whether or not run additional processing on the model output.\n18.User can choose to save the model output in MetVault. If 'yes', user must specify what output file is to be sent to the MetVault.\n19.User is given the option to save and submit the job now. Submitting now, would run IC/BC-data and obs processing and the model, no post-processing.\n20.User chooses whether or not to run post-processing. If ‘yes', then s/he will go through the action sequence in 3.4.\n21.User can save the above job configuration. Job configurations can be saved to a file.\n22.User submits the job.\n", "dataset": "model manager", "act": "\"chooses, may choose, decides, defines, determines, creates, chooses, submits, determines, supplies, can specify, can choose, has, can choose, can provide, is given, chooses, provides, must specify, chooses, is presented with, can also supply, defines, chooses, chooses, chooses, can choose, must specify, is given, chooses, chooses, can save, chooses, can save, submits\"", "obj": "User, Weather FDDA Job, cluster, job, model, MM5, WRF, JOBID, domains, pre-defined domains, TERRAIN files, job, cycle, case study, re-run, cycle interval, forecast length, other applicable information, restart files, frequency, sigma-level configurations, number of nodes, email notification, start, end, termination, job, standard IC/BC data sources, ETA, AVNFTP (GFS), GFS004, custom IC/BC data sources, data source, off-line jobs, MetVault, directory, time period, re-runs, input data, custom IC/BC pre-processor, standard processing, pre-processing script, additional pre-processors, LDAS, custom pre-processor, standard obs data sources, custom obs sources, custom obs processors, WMO, SAMS, MADIS, GTS, RAWS, okmeso, SatWinds, ACARS, MM5, domain size, number of nodes, MM5-executables, compile info, executables, WRF, model options, Final Analysis, re-runs, case studies, Prelim. Analysis, additional processing, model output, MetVault, output file, job configuration, file", "pred_steps": "1. Analyze the requirements for setting up new real-time and off-line FDDA jobs.2. Identify the different types of jobs that can be set up - GMOD jobs, re-runs, and case studies.3. Determine if the job to be set up is a default GMOD job or a custom GMOD job.4. If a default GMOD job:   a. Access the default GMOD job configuration provided by the Model Manager.   b. Review and possibly modify the default GMOD job configuration.   c. Submit the RTFDDAensemble job to the Model Manager either manually or through a job configuration file.5. If a custom GMOD job:   a. Customize the GMOD job according to user requirements.   b. Provide input data, pre-processors, or a customized MM5 executable as specified by the user.   c. Ensure that all necessary scripts, executables, etc., are available on the cluster where the job will run.   d. Submit the custom GMOD job through the Job-Setup module.   e. Save the job's configuration with the Model Manager.6. Verify that the job configuration is correctly saved and stored with the Model Manager.", "pred_act": "Analyze,Identify,Determine,Access,Review,modify,Submit,Customize,Provide,Ensure,run,Submit,Save,Verify\n", "pred_obj": "requirements, real-time fdda jobs, off-line fdda jobs, gmod jobs, re-runs, case studies, default gmod job, custom gmod job, default gmod job configuration, model manager, rtfddaensemble job, custom gmod job, input data, pre-processors, customized mm5 executable, scripts, executables, cluster, job-setup module, job's configuration"}
{"index": 1, "ucName": " “ClimoFDDA”:  Setting up a  ClimoFDDA job\n", "uctext": " The objective of this feature is to integrate the GCAT functionalities within the MM. Suppose the user is logged on to the system and has made the following choices “Submit a newjob” -> “Set up a new model job”. S/he is then presented with two more options: “ Weather FDDA” and “Climo”.\n     ", "steps": " \n1.Chooses to  “Set up a Climo Job”.\n2.User defines a JOBID.\n3.User supplies other job parameters. For details, see GCAT tool\n4.User determines the domain location.\n5.User can specify locations for pseudo-obs and custom cross sections.\n6.User picks a pre-configured MM5 setup\n7.User sets the time line for the job: start time, end time and what years\n8.User sets the ensemble options: •hourly •min, max, mean, standard deviation,.... •diurnal cycle •typical moment\n9.User can request the number of nodes this job should run on.\n10.User chooses whether or not run additional processing on the model output.\n11.User can choose to save the model output in MetVault. If 'yes', user must specify what output, e.g., member and/or ensemble output is to be send to the MetVault.\n12.User is given the option to save and submit the job now. Submitting now, would run the member models, the ensemble, and possible model output processing, no post-processing.\n13.User chooses whether or not to run post-processing on the ensemble output. If “yes',then s/he will be presented with the following options:•Plots (NCL or RIP) •NAPS •MDV •Sites •MEDOC (1 – 4) •Raster •PRF •Wind Roses •...For each output product, the user is prompted to supply a destination host and location,where the output files should be copied.\n14.The user can also specify whether the members' output should be post-processed. S/he can specify which year-output to post-process and what post-processor(s) to use and where the output files should be copied.\n15. The user can specify whether another process (coupled app) should be run on the post-process output products. This needs further clarification.\n16.User can save the above job configuration. Job configurations can be saved to a file.\n17.User submits the job.\n", "dataset": "model manager", "act": "\"Chooses, defines, supplies, determines, can specify, picks, sets, can request, chooses, can choose, is given, chooses, can specify, can specify, can save, submits\"", "obj": "\"Climo Job, JOBID, job parameters, GCAT tool, domain location, pseudo-obs, custom cross sections, pre-configured MM5 setup, time line, start time, end time, years, ensemble options, hourly, min, max, mean, standard deviation, diurnal cycle, typical moment, number of nodes, model output, MetVault, output, member, ensemble output, option, job, member models, ensemble, model output processing, post-processing, ensemble output, Plots, NCL, RIP, NAPS, MDV, Sites, MEDOC, Raster, PRF, Wind Roses, destination host, location, output files, members' output, year-output, post-processor(s), post-process output products, coupled app, job configuration, file\"", "pred_steps": "1. Select \"Submit a new job\"2. Choose \"Set up a new model job\"3. Choose \"Weather FDDA\" or \"Climo\"", "pred_act": "Select,Submit,Choose,Set,Choose\n", "pred_obj": "submit a new job, set up a new model job, weather fdda, climo"}
{"index": 2, "ucName": " Set up and submit a “post-processing” job\n", "uctext": "The objective of this feature is to provide the ability to only run “post-processing” on an existing model output file. It will also provide the post-processing part of the use case “WeatherFDDA” in 3.1. Suppose the user is logged on to the system and has made the following choice, “Submit a new job”.\n     ", "steps": " \n1.User selects “Set up a new 'post-processing' job” .\n2.User is prompted to supply location and name of the model output file:\n•If the model output file will be produced by a running or scheduled FDDA-job,\nthen the user supplies JOBID & cycle time\n•If the model output file already exists, then the user supplies its location.\n3.User chooses the type of post-processing:•Plots (NCL or RIP)•NAPS•MDV•Sites•MEDOC (1 – 4) •Stereo•Verification\n4.For each of the options chosen in 3., the user can supply a custom configuration file (ifthis is applicable) or use the default configuration file.\n5.User must supply destination location for the output products.\n6.User can specify the number of nodes this job should run on\n7.User can save this job's setting. Job configurations can be saved to a file.\n8.User submits job.\n", "dataset": "model manager", "act": "\"selects, is prompted, supplies, chooses, can supply, can use, must supply, can specify, can save, submits\"", "obj": "User, \"Set up a new 'post-processing' job\", location, name, model output file, FDDA-job, JOBID, cycle time, type of post-processing, Plots, NCL, RIP, NAPS, MDV, Sites, MEDOC (1 – 4), Stereo, Verification, custom configuration file, default configuration file, destination location, output products, number of nodes, job's setting, Job configurations, file, job", "pred_steps": "1. User selects the option to \"Submit a new job\".2. User chooses the option for \"post-processing\" on an existing model output file.3. User selects the specific model output file for post-processing.4. System runs the post-processing on the selected model output file.5. Post-processing results are displayed to the user.6. User exits the post-processing feature.", "pred_act": "selects, chooses, selects, runs, are, displayed, exits\n", "pred_obj": "option, option, model output file, model output file, post-processing, model output file, post-processing results, post-processing feature"}
{"index": 3, "ucName": " Submit a 'By-hand' job\n", "uctext": " The objective of this feature is to accommodate the current GMOD-framework. It will also give the user the ability to run customized jobs. In order to submit a custom job to the MM, the user must first identify the cluster(s), where his/her job should run on. Then, log on to this machine, perform operations that are necessary for setting up the job and then register the job with the MM (see Action Sequence below). It is important to note that since a 'by-hand' job wasn't set up through MM's Job-Setup module, the MM doesn't know what the job is actually doing. In order for the MM to accept the job, the user will have to provide certain mandatory information about the job. Suppose the user is logged on to the system and has made the following choice, “Submit a new job”.\n     ", "steps": " \n1.User selects “Submit a 'By Hand' Job”\n2.User supplies:Mandatory:•job id (GMUAE, GWDPG,...)•location of the script (host:/full_path_to_script)•time when to run the script•estimated time of how long the script will run•name(s) of executable(s)•max. runtime for the executable(s)•number of nodes •location of output products (such as: host:/dir_path) Optional:•frequency of how often the script should run•job type•any additional information\n3.User can save the job's settings. Job configurations can be saved to a file.\n4.User submits job.\n5.User can view his/her job in the job queue (see 3.1.).\n6.User can receive an email notification when job is started, finished or killed. \n", "dataset": "model manager", "act": "\"selects, supplies, can save, submits, can view, can receive\"", "obj": "\"User, Submit a 'By Hand' Job, job id, GMUAE, GWDPG, location of the script, host:/full_path_to_script, time when to run the script, estimated time, how long the script will run, name(s) of executable(s), max. runtime for the executable(s), number of nodes, location of output products, host:/dir_path, frequency of how often the script should run, job type, any additional information, job's settings, Job configurations, file, job, job queue, email notification, job is started, job is finished, job is killed\"", "pred_steps": "1. Identify the clusters where the job should run.2. Log on to the machine.3. Setup the necessary operations for the job.4. Register the job with the MM.", "pred_act": "Identify run Log on Setup Register\n", "pred_obj": "clusters, machine, operations, job, mm"}
{"index": 4, "ucName": "Load a job configuration from a file and submit the job\n", "uctext": " The objective of this feature is to provide the ability to load a job configuration into MM from a file. Suppose the user is logged on to the system and has made the following choice, “Submit a new job”.\n     ", "steps": " \n1.User selects ”Submit a job configuration file”.\n2.User supplies file name to load.\n3.User can make changes to the configuration.\n4.User can save the changed configuration.\n5.User submits the job.\n", "dataset": "model manager", "act": "\"selects, supplies, can make, can save, submits\"", "obj": "User, Submit a job configuration file, file name, configuration, changed configuration, job", "pred_steps": "1. User selects the option to \"Submit a new job\".2. User chooses the option to \"Load job configuration from file\".3. System prompts the user to select the file containing the job configuration.4. User selects the file from the file system.5. System validates the file format and content to ensure it meets the required job configuration specifications.6. System loads the job configuration from the file into the system.7. System displays a success message confirming the job configuration has been loaded successfully.", "pred_act": "selects, selects, chooses, prompts, select, selects, validates, ensure, meets, loads, displays, confirming, has been loaded\n", "pred_obj": "user, system"}
{"index": 5, "ucName": "Retrieve and run a previously saved job configuration\n", "uctext": "The objective of this feature is to provide the ability to retrieve a previous job configuration and to re-run this job or change its settings and run it again.\n     ", "steps": " \n1.User logs on with user id/password.\n2.User chooses to look at his/her previously saved job configurations. A table of saved\njobs may include the following attributes: •Job id•Job type•Cycle time that was run last (if applicable)•time this job was run last•...\n3.User selects a job. User can change or delete this job configuration.\n4.User changes the job configuration.\n5.User can save the changed job configuration.\n6.User submits job.\n", "dataset": "model manager", "act": "logs, chooses, looks, selects, can change, can delete, changes, can save, submits", "obj": "User, user id, password, job configurations, table, saved jobs, Job id, Job type, Cycle time, time, job, job configuration, changed job configuration", "pred_steps": "1. User selects the option to retrieve previous job configurations.2. System displays a list of available previous job configurations.3. User selects a specific job configuration from the list.4. System loads the selected job configuration settings.5. User has the option to edit the existing settings or proceed with running the job as it is.6. If user chooses to edit settings, they make the necessary changes.7. User initiates the job execution process with the updated or existing settings.8. System runs the job based on the selected configuration and settings.9. The system provides feedback on the status and outcome of the job execution.", "pred_act": "selects displays selects loads has proceed chooses make initiates runs provides\n", "pred_obj": "user, system"}
{"index": 6, "ucName": " View scheduled, running and old jobs\n", "uctext": " The objective of this feature is to facilitate monitoring of running jobs, viewing the job queue and viewing jobs that ran in the past.\n     ", "steps": " \n1.User logs on with user id/password.\n2.User chooses to look at all running jobs, all scheduled jobs (the job queue), past jobs orall jobs (running, scheduled, old). User selects one of the four options.\n3.User is presented with a job table. Depending on the user's choice in 2, the job tablemay present the following attributes to the user:•user id – the 'owner' of the job •Job id•Job type – such as: GMOD, climoFDDA, FDDA-re-run, case study, custom,....•Job priority •start time•remaining time (estimated) or time it took to run the job•cycle (if applicable)•stage (Pre-processing, F-analysis, Prelim. Analysis,...)•status ( SCHEDULED, RUNNING, status in % - if applicable, DONE)•cluster and nodes (for a running job)•number of processors•and others\n4.User can select a job and receive more detailed information\n5.User can look at a jobs log files. \n6.User can delete his/her jobs from the job queue. A “super user” can delete any job fromthe job queue.\n7.User can stop his/her running job. A “super user” can stop any running job.\n8.User can re-start his/her job. A “super user” can re-start any job.\n9.User can resume his/her stopped job. A “super user” can resume any stopped job. \n", "dataset": "model manager", "act": "logs on, chooses, selects, is presented, can select, can look, can delete, can stop, can re-start, can resume", "obj": "User, user id, password, running jobs, scheduled jobs, job queue, past jobs, all jobs, job table, attributes, user id, Job id, Job type, GMOD, climoFDDA, FDDA-re-run, case study, custom, Job priority, start time, remaining time, time, cycle, stage, Pre-processing, F-analysis, Prelim. Analysis, status, SCHEDULED, RUNNING, DONE, cluster, nodes, number of processors, job, detailed information, jobs log files, job queue, jobs, running job, super user, his/her running job, his/her job, stopped job", "pred_steps": "Functional Steps:1. Display a list of running jobs.2. Provide an option to view the job queue.3. Allow users to access a list of past jobs that have completed.", "pred_act": "Display\n", "pred_obj": "running jobs,job queue,past jobs"}
{"index": 0, "ucName": "DeleteCulturalHeritage", "uctext": "Delete a cultural object in the system.", "steps": "1. View the list of CulturalHeritage as a result of the use case SearchCulturalHeritage, it selects and activates a function of elimination. \n2 Asks confirmation. \n3 Confirm the operation. \n4 Delete the cultural choice.", "dataset": "eTour", "act": "View, selects, activates, asks, confirm, delete", "obj": "CulturalHeritage, SearchCulturalHeritage, function, elimination, confirmation, operation, cultural choice", "pred_steps": "1. User selects the cultural object to be deleted.2. System prompts user to confirm the deletion.3. User confirms the deletion.4. System permanently removes the cultural object from the database.5. System displays a success message indicating the object has been deleted.", "pred_act": "selects prompt confirm removes displays\n", "pred_obj": "user, cultural object, system"}
{"index": 1, "ucName": "ViewRefreshmentPointCard", "uctext": "View the details of a selected point of rest.", "steps": "1. View the list of points of rest as a result of the use case SearchRefreshmentPoint, it selects and activates a function to view the card. \n2 Upload data to a selected restaurant.", "dataset": "eTour", "act": "Verbs/Predicates: View, selects, activates, upload", "obj": "points of rest, SearchRefreshmentPoint, function, card, data, restaurant", "pred_steps": "1. User selects a point of rest on the interface.2. The system retrieves and displays the details of the selected point of rest.3. The system displays the name, address, contact information, and other relevant details of the point of rest.4. The user can interact with the displayed details as needed.5. The user can choose to go back to the previous screen or select another point of rest to view its details.", "pred_act": "selects retrieves displays displays interact choose go select view\n", "pred_obj": "user, point of rest, system, point of rest, point of rest, user, user"}
{"index": 2, "ucName": "ViewConventionHistory", "uctext": "View the history of conventions derived from a selected point of rest.", "steps": "1. Access the features on the display of historical conventions. \n2 Upload data on conventions from the restaurant selected.", "dataset": "eTour", "act": "\"Access, Upload\"", "obj": "features, display, historical conventions, data, conventions, restaurant", "pred_steps": "1. Select a point of rest.2. Retrieve the history of conventions derived from the selected point of rest.3. Display the history of conventions to the user for viewing.", "pred_act": "Select, Retrieve, derived, Display, viewing\n", "pred_obj": "point of rest,history of conventions,user"}
{"index": 3, "ucName": "ViewTouristCard", "uctext": "View the details of a selected account Tourist.", "steps": "1. Tourists from the list obtained by activating the use case SearchTourist will select and activate a function for displaying the card. \n2 Upload data to the selected account.", "dataset": "eTour", "act": "Actions/Predicates: \"select, activate, display, upload\"", "obj": "Tourists, list, use case SearchTourist, function, card, data, account", "pred_steps": "1. User selects the \"View Account Details\" option.2. System displays a list of tourist accounts.3. User selects a specific tourist account to view details.4. System retrieves and displays the details of the selected account, including tourist information such as name, contact details, booking history, and payment information.5. User reviews the account details.6. User exits the account details view.", "pred_act": "selects, displays, selects, retrieves, displays, reviews, exits\n", "pred_obj": "user, view account details, system, list of tourist accounts, tourist account, tourist information, name, contact details, booking history, payment information, account details, account details view"}
{"index": 4, "ucName": "Active / InactiveTouristAccount", "uctext": "Enable or disable the account of a tourist.", "steps": "1. Activate the feature for the activation / deactivation by a given sheet tourist. \n2 Asks for confirmation of activation / deactivation. \n3 Confirm the operation. \n4 Enable / disable the account of the visitor you selected.", "dataset": "eTour", "act": "Activate,Asks,Confirm,Enable,disable", "obj": "feature, activation, deactivation, sheet tourist, confirmation, operation, account, visitor", "pred_steps": "1. Open the user management interface.2. Search for the tourist account by entering the tourist's ID or username.3. Retrieve the tourist account from the database.4. Check if the tourist account is currently enabled or disabled.5. If the account is already enabled, go to step 8.6. If the account is disabled, enable the account.7. Save the updated account information in the database.8. If the account is already disabled, go to step 11.9. If the account is enabled, disable the account.10. Save the updated account information in the database.11. Close the user management interface.", "pred_act": "Open, Search, entering, Retrieve, Check, enabled, disabled, enabled, go, disabled, enable, Save, enabled, go, enabled, disable, Save, Close\n", "pred_obj": "user management interface, tourist account, tourist's id, username, database"}
{"index": 5, "ucName": "SearchTourist", "uctext": "Returns the list of tourist account in the system according to certain parameters.", "steps": "1. Access the search functionality of a tourist. \n2 Show the form. \n3 Fill out the form and submit. \n4 Processing the request.", "dataset": "eTour", "act": "\"Access, Show, Fill, Submit, Processing\"", "obj": "tourist, search functionality, form, request", "pred_steps": "1. Retrieve the list of tourist accounts from the system.2. Apply the specified parameters to filter the accounts.3. Display the filtered list of tourist accounts.4. End.", "pred_act": "Retrieve, Apply, Display, End\n", "pred_obj": "the list of tourist accounts, the system, the specified parameters, the accounts, the filtered list of tourist accounts"}
{"index": 6, "ucName": "ModifyTouristAccountData", "uctext": "Change data of a selected account Tourist.", "steps": "1. Tourists from the list obtained by activating the use case SearchTourist it selects and activates a function to modify data. \n2 Loads the data selected and displays them in a form allowing the change. \n3 Edit the fields in the form and submit. \n4 Verify the information and asks for confirmation of the change. Where the data is invalid or insufficient, the system activates the use case Errored. \n5 Confirm the operation. \n6. Stores the modified data selected account.", "dataset": "eTour", "act": "\"selects, activates, loads, displays, edit, submit, verify, asks, activates, confirm, stores\"", "obj": "Tourists, list, use case SearchTourist, function, data, form, fields, information, use case Errored, operation, modified data, account", "pred_steps": "1. Select the Tourist account to update.2. Input the new data for the selected account.3. Validate the input data.4. Save the updated data for the Tourist account.5. Display a success message confirming the data change.", "pred_act": "Select, update, Input, Validate, Save, Display, confirming\n", "pred_obj": "tourist account, data, input data, success message"}
{"index": 7, "ucName": "DeleteTouristAccount", "uctext": "Delete the account of a tourist from the system.", "steps": "1. Tourists from the list obtained by activating the use case SearchTourist will select and activate a feature for disposal. \n2 Asks for confirmation of the transaction. \n3 Confirm the operation. \n4 Delete the selected data.", "dataset": "eTour", "act": "\"select, activate, ask, confirm, delete\"", "obj": "Tourists, list, use case SearchTourist, feature, transaction, operation, selected data", "pred_steps": "1. Verify user permissions to delete an account.2. Search for the tourist account to be deleted.3. Confirm the selection of the correct tourist account.4. Display a warning message about the irreversible action of deleting the account.5. Prompt the user to confirm the deletion.6. If confirmed, remove all data associated with the tourist account from the system.7. Display a success message confirming the account deletion.8. Log the deletion action in the system for audit purposes.", "pred_act": "Verify, Search, Confirm, Display, Prompt, remove, Display, Log\n", "pred_obj": "user permissions, tourist account, warning message, user, data, success message, system"}
{"index": 8, "ucName": "ModifyBanner", "uctext": "Changing the image of a banner ad.", "steps": "1. Receives a list of turning points of the rest use case SearchRefreshmentPoint and select one from accessing the function of editing a banner. \n2 View the list of banner associated with the point of rest. \n3 Select a banner from the list and enter the editing functionality. \n4 Displays a form for the selection of an image. \n5 Select a picture and send the request to change the system. \n6. Check the characteristics of the inserted and asks for confirmation of the change of the banner. In the event that the inserted image is not valid, enable the use case Errored. \n7 Confirmation of the transaction change. \n8 Bookmark this new image for the selected banner.", "dataset": "eTour", "act": "Receives, selects, view, select, enter, displays, select, send, check, asks, enable, confirmation, bookmark", "obj": "turning points, SearchRefreshmentPoint, function, editing, banner, list, point, image, picture, request, system, characteristics, change, use case Errored, transaction, new image", "pred_steps": "1. Access the banner ad management interface.2. Select the specific banner ad to be modified.3. Choose the option to change the image.4. Upload the new image from a local storage or provide a URL.5. Verify the image dimensions and format compliance.6. Save the changes.7. Preview the banner ad with the new image.8. Confirm the changes.9. Ensure that the new image is displayed correctly on the banner ad placement.10. Update any references to the banner ad with the new image.", "pred_act": "Access, Select, Choose, Upload, provide, Verify, Save, Preview, Confirm, Ensure, Update\n", "pred_obj": "banner ad, banner ad management interface, image, local storage, url, image dimensions, format compliance, banner ad placement"}
{"index": 9, "ucName": "CheckBannerNumber", "uctext": "Check if a point Refreshments included the maximum number of allowed banners to it.", "steps": "1. Load the data of the Convention of refreshment point and verify that the number of banners is less than the specified number of the current banner. If not checked, will end the operation input and displays a notification. \n2 Confirmation of the reading of the notification. \n3 Recovers the previous state.", "dataset": "eTour", "act": "\"Load, verify, end, display, Confirmation, reading, Recover, output\"", "obj": "data, Convention of refreshment point, number of banners, specified number, current banner, operation input, notification, reading, previous state", "pred_steps": "1. Retrieve the point Refreshments from the database.2. Retrieve the maximum number of allowed banners from the configuration settings.3. Count the number of banners associated with the point Refreshments.4. Compare the number of banners with the maximum allowed number.5. If the number of banners is less than or equal to the maximum allowed number, proceed to step 6. Otherwise, proceed to step 7.6. Display a message indicating that the Refreshments point has not reached the maximum number of banners.7. Display a message indicating that the Refreshments point has reached the maximum number of banners.", "pred_act": "Retrieve, Retrieve, Count, Compare, proceed, proceed, Display, Display\n", "pred_obj": "the point refreshments,maximum number of allowed banners,configuration settings,banners,number of banners,the point refreshments,banners,maximum allowed number,banners,the maximum allowed number,refreshments,the maximum number of banners,refreshments,maximum number of banners"}
{"index": 10, "ucName": "DeleteBanner", "uctext": "Delete a banner ad associated with a refreshment bar on the computer.", "steps": "1. Receives a list of turning points of the rest use case SearchRefreshmentPoint and select one from accessing the function of removal of the banner. \n2 View the list of banner associated with the point of rest. \n3 Select a banner from the list and enter the function of elimination. \n4 Displays a message confirming the deletion. \n5 Confirm the operation. \n6. Removes the banner.", "dataset": "eTour", "act": "\"Receives, select, View, Select, enter, Displays, Confirm, Removes\"", "obj": "turning points, SearchRefreshmentPoint, function, removal, banner, list, point of rest, message, deletion, operation", "pred_steps": "1. Select the banner ad associated with the refreshment bar.2. Click on the \"Delete\" option.3. Confirm the deletion when prompted.4. Verify that the banner ad associated with the refreshment bar has been successfully deleted.", "pred_act": "Select, Click, Confirm, Verify\n", "pred_obj": "banner ad, refreshment bar, delete"}
{"index": 11, "ucName": "InsertCulturalHeritage", "uctext": "Inserts a new cultural object in the system.", "steps": "1. Activate the feature for the insertion of a new cultural good. \n2 Displays the corresponding form. \n3 Fill out the form with the data of the cultural and submit. \n4 Verify the data entered and asks for confirmation of the transaction. Where the data is invalid or insufficient, the system activates the use case Errored. \n5 Confirm the operation. \n6. Memorize your new cultural good.", "dataset": "eTour", "act": "Activate, Displays, Fill, Verify, asks, Confirm, Memorize, activates", "obj": "feature, cultural good, form, data, transaction, system, use case Errored, operation, new cultural good", "pred_steps": "1. User selects the option to add a new cultural object.2. User enters the details of the cultural object (e.g., name, description, origin, date of creation, etc.).3. User uploads any relevant media files (e.g., images, videos) associated with the cultural object.4. System validates the input data provided by the user.5. System saves the new cultural object in the database.6. System generates a unique identifier for the new cultural object.7. System displays a success message indicating that the cultural object has been successfully added.", "pred_act": "selects, enters, uploads, validates, saves, generates, displays\n", "pred_obj": "user, cultural object, system"}
{"index": 12, "ucName": "InsertBanner", "uctext": "Inserting a new banner associated with a point of rest.", "steps": "1. Receives a list of turning points of the rest use case SearchRefreshmentPoint and select one from the list and access to the function of inserting banners. \n2 Displays a form for the selection of an image. \n3 Select an image and sends the request for entering the system. \n4 Check the characteristics of the inserted, check that the number of banner did not exceed the maximum point of the restaurant and asks for confirmation of the insertion of the banner. In the event that the inserted image is not valid, enable the use case Errored. \n5 Confirm the operation of insertion. \n6. Remember the banners associated with the selected point of rest.", "dataset": "eTour", "act": "Receives, select, access, displays, select, sends, check, ask, enable, confirm, remember", "obj": "turning points, SearchRefreshmentPoint, list, function, inserting banners, form, selection, image, system, characteristics, number of banner, maximum point, restaurant, confirmation, insertion, use case Errored, operation, banners, selected point of rest", "pred_steps": "1. Select the option to add a new banner.2. Choose the point of interest (POI) or point of rest to associate the banner with.3. Upload the banner image file.4. Enter the title or description for the banner.5. Set the duration or activation period for the banner to be displayed.6. Position the banner on the screen relative to the associated POI.7. Save the new banner and its settings.8. Verify that the banner is successfully added and displayed at the specified location.", "pred_act": "Select, add, Choose, associate, Upload, Enter, Set, be, displayed, Position, Save, Verify, added, displayed\n", "pred_obj": "banner, poi, image file, title, description, duration, activation period, screen, associated poi, settings, location"}
{"index": 13, "ucName": "InsertNews", "uctext": "Inserts a new news in the system.", "steps": "1. Activate the feature to insert a news. \n2 Displays the corresponding form. \n3 Fill out the form and submit. \n4 Verify the data entered and asks for confirmation of the transaction. Where the data is invalid or insufficient, the system activates the use case Errored. \n5 Confirm the operation of insertion. \n6. Stores the data of the new news.", "dataset": "eTour", "act": "Activate, Displays, Fill, submit, Verify, asks, Confirm, Store", "obj": "feature, news, form, data, transaction, system, use case Errored, operation of insertion, new news", "pred_steps": "1. Display the form to input news details.2. Input the news title.3. Input the news content.4. Input the date of the news.5. Input any relevant tags or categories for the news.6. Upload any associated images or files.7. Click on the \"Submit\" button to save the news in the system.8. Validate the inputs to ensure all required fields are filled.9. Display a success message if the news is saved successfully.10. End of the use case.", "pred_act": "Display, Input, Input, Input, Input, Upload, Click, save, Validate, ensure, filled, Display, saved, End\n", "pred_obj": "form, news title, news content, date of the news, tags, categories, images, files, submit button, inputs, fields, success message, news"}
{"index": 14, "ucName": "DeleteNews", "uctext": "Delete a news in the system.", "steps": "1. Activate the function of elimination of a news. \n2 View all news in a form. \n3 Select a news from the list and submit the form. \n4 Asks for confirmation of the transaction. \n5 Confirm the deletion of the news. \n6. Delete the data news.", "dataset": "eTour", "act": "Activate, View, Select, submit, Asks, Confirm, Delete", "obj": "function, elimination, news, form, list, transaction, deletion, data, news", "pred_steps": "1. User selects the news item to be deleted.2. System prompts the user for confirmation.3. User confirms the deletion.4. System deletes the news item from the system.5. System displays a success message indicating the news item has been deleted.", "pred_act": "selects\n", "pred_obj": "user, news item, system, user, system, news item, system, news item"}
{"index": 15, "ucName": "ModifyNews", "uctext": "Change data of a news on the computer.", "steps": "1. Activate the editing functionality of a news. \n2 View all news in a form. \n3 Select a news from the list and submit the form. \n4 Load the data of news and displays them in a form for editing. \n5 Change data in the form and submit. \n6. Check the modified information and asks for confirmation of the transaction. Where the data is invalid or insufficient, the system activates the use case Errored. \n7 Confirm the operation of changing the data news. \n8 Stores data modified news.", "dataset": "eTour", "act": "Activate, View, Select, Submit, Load, Display, Change, Submit, Check, Ask, Activate, Confirm, Store", "obj": "editing functionality, news, form, list, data, modified information, transaction, operation, data news, system, use case Errored", "pred_steps": "1. User logs in to the news editing system.2. User navigates to the news section.3. User selects the news article to be edited.4. System displays the current data of the news article.5. User makes changes to the data of the news article.6. User saves the changes.7. System updates the news article with the new data.8. User logs out of the news editing system.", "pred_act": "logs in, navigates, selects, displays, makes, saves, updates, logs out\n", "pred_obj": "user, news editing system, news section, news article, system"}
{"index": 16, "ucName": "ViewFeedback", "uctext": "View all feedback for a particular site.", "steps": "1. View the list of sites as a result of the use case SearchSite, it selects and activates a function to view the feedback. \n2 Upload Site Feedback selected.", "dataset": "eTour", "act": "Verbs/Predicates: View, selects, activates, Upload", "obj": "sites, SearchSite, function, feedback, Site Feedback", "pred_steps": "1. User selects the option to view feedback for a particular site.2. System retrieves all feedback entries associated with the selected site.3. System displays the feedback entries to the user.", "pred_act": "selects retrieves displays\n", "pred_obj": "user, option, site, system, feedback entries"}
{"index": 17, "ucName": "ViewReportStatistic", "uctext": "View statistical report relating to a selected location.", "steps": "1. Activate the feature on the statistical report. \n2 Upload the list of places in the system and displays them in a form. \n3 Select a location and submit the form. \n4 Upload midsize site feedback obtained by activating the SearchSite use case for the location selected. Prepare the statistical report.", "dataset": "eTour", "act": "Activate, Upload, displays, Select, submit, Upload, Prepare, output", "obj": "feature, statistical report, list of places, system, form, location, SearchSite use case, midsize site feedback, statistical report", "pred_steps": "1. User selects the desired location to view statistical report.2. System retrieves statistical data related to the selected location.3. System generates a report based on the retrieved data.4. System displays the statistical report to the user for viewing.", "pred_act": "selects retrieves generates displays\n", "pred_obj": "user, location, statistical report, system, statistical data, report"}
{"index": 18, "ucName": "ModifyComment", "uctext": "Editing a comment by a feedback selected.", "steps": "1. View the list of sites as a result of the use case SearchSite, it selects and activates a function of change in the selected comment. \n2 Upload feedback issued to that site and displays them in a form. \n3 Select a feedback from the list and submit the form. \n4 Displays a form for editing the comment of feedback selected. \n5 Edit the comment and submit the form. \n6. Verify the data entered and asks for confirmation of the change. Where the data is invalid or insufficient, the system activates the use case Errored. \n7 Confirm the operation. \n8 Remember the comment changed.", "dataset": "eTour", "act": "View, selects, activates, Upload, displays, Select, submit, edit, Verify, asks, activates, Confirm, Remember", "obj": "sites, use case SearchSite, function, comment, feedback, form, data, use case Errored, operation, comment changed", "pred_steps": "1. User selects the feedback comment to edit.2. System displays the selected comment for editing.3. User modifies the comment text.4. User saves the changes made to the comment.5. System updates the comment with the edited text.6. System displays a confirmation message that the comment has been successfully edited.", "pred_act": "selects displays modifiessavupdates displays\n", "pred_obj": "user, system, comment, feedback comment, comment text, changes, confirmation message"}
{"index": 19, "ucName": "SearchSite", "uctext": "Searching for a specific site on the computer.", "steps": "1. Activate the search functionality of a site. \n2 Show the form for research \n3 Fill in the form of research and submit \n4 Processing the request", "dataset": "eTour", "act": "Activate, Show, Fill, submit, Processing", "obj": "search functionality, site, form, research, request", "pred_steps": "1. Display a search bar on the user interface.2. Prompt the user to enter the name or keywords of the site they are looking for.3. Validate the input provided by the user.4. Search for the site matching the input within the computer's directory.5. Display the search results to the user.6. Allow the user to select the desired site from the search results.7. Open the selected site for the user to view.", "pred_act": "Display, Prompt, enter, Validate, Search, Display, Allow, select, Open, view\n", "pred_obj": "search bar, user interface, user, name, keywords, site, input, computer's directory, search results, user, site, user"}
{"index": 20, "ucName": "DeleteTag", "uctext": "Removes one or more search tags in the system.", "steps": "1. Access the functionality to delete a tag. \n2 Research in the existing system, the tags and displays them in a form. \n3 Select one or more tags from the list and sends the request for deletion. \n4 Delete the selected search tag.", "dataset": "eTour", "act": "\"Access, Research, Display, Select, Send, Delete\"", "obj": "functionality, delete, tag, system, tags, form, list, request, deletion, search tag", "pred_steps": "1. User selects the option to remove search tags.2. System displays the list of currently applied search tags.3. User selects one or more search tags to remove.4. System confirms the removal of the selected search tags.5. System removes the selected search tags from the system.6. System updates the search results based on the removed tags.7. Use case is complete.", "pred_act": "selects,displays,selects,confirms,removes,updates,is\n", "pred_obj": "user, system, search tags, list, use case"}
{"index": 21, "ucName": "ExistingErrorTag", "uctext": "He was asked to enter a search tags already in the system.", "steps": "1. Notice the error message and asks for confirmation of its reading. \n2 Confirmation of the reading of the notification. \n3 Recovers the previous state.", "dataset": "eTour", "act": "\"Notice, asks, Confirm, Recovers\"", "obj": "error message, confirmation, reading, notification, previous state", "pred_steps": "1. Display a search box on the user interface.2. Prompt the user to enter search tags.3. Validate the entered search tags against the existing tags in the system.4. If the entered search tags are not found in the system, prompt the user to enter valid search tags.5. If the entered search tags are found in the system, proceed to the next step.6. Retrieve and display the search results related to the entered search tags.", "pred_act": "Display,Prompt,enter,Validate,entered,found,prompt,enter,found,proceed,Retrieve,display,entered\n", "pred_obj": "search box, user interface, user, search tags, system, search tags, search tags, user, search tags, system, search tags, system, search tags, search results, search tags"}
{"index": 22, "ucName": "ModifyCulturalHeritage", "uctext": "Change data of a cultural object in the system.", "steps": "1. View the list of cultural goods as a result of the use case SearchCulturalHeritage, it selects and activates a function of change. \n2 Load the data of the cultural and displays the form for editing. \n3 Change data in the form and submit. \n4 Verify the data entered and asks for confirmation of the transaction. Where the data is invalid or insufficient, the system activates the use case Errored. \n5 Confirm the operation. \n6. Stores the modified data of the cultural.", "dataset": "eTour", "act": "\"View, selects, activates, Load, displays, Change, submit, Verify, asks, activates, Confirm, Stores\"", "obj": "cultural goods, SearchCulturalHeritage, function of change, cultural, data, form, transaction, Errored, operation, modified data of the cultural", "pred_steps": "1. Select the cultural object to be edited.2. Access the editing functionality for the selected object.3. Modify the necessary data fields of the cultural object.4. Validate the updated data to ensure it meets the required criteria.5. Save the changes made to the cultural object.6. Update the system with the new data for the cultural object.7. Verify that the changes have been successfully applied to the cultural object.", "pred_act": "Select, Access, Modify, Validate, Save, Update, Verify\n", "pred_obj": "cultural object"}
{"index": 23, "ucName": "InsertTag", "uctext": "Inserts a new tag search.", "steps": "1. Access the functionality of inserting new tag search. \n2 Show the form for entering a tag. \n3 Fill out the form with the required information and submit. \n4 Verify the data entered and check if the tag is already present in the system. In the latter case the active use case ExistingErrorTag. Instead, if the data is invalid or insufficient, the system activates the use case Errored.", "dataset": "eTour", "act": "\"Access, Show, Fill out, Submit, Verify, Check, Activate\"", "obj": "functionality, inserting new tag search, form, tag, data, system, ExistingErrorTag, case Errored", "pred_steps": "1. User selects the option to add a new tag search.2. System prompts the user to enter the tag name for the search.3. User enters the tag name and submits the input.4. System validates the tag name for uniqueness and format.5. If the tag name is valid, system creates a new tag search with the entered tag name.6. System saves the new tag search in the database.7. System displays a success message confirming the addition of the new tag search.8. Use case completes.", "pred_act": "selects prompts enter enters submits validates creates saves displays completes\n", "pred_obj": "user, system, tag name, tag search, database, success message, use case"}
{"index": 24, "ucName": "ModifyPassword", "uctext": "The Agency Operator chooses to change the password associated with your account", "steps": "5 Choose to change your password by pressing the appropriate \nButton \n6. Upload the form to change the password associated with that work agency \n7 Change your password by entering the new choice and confirming \n8 Save your changes", "dataset": "eTour", "act": "choose, press, upload, change, enter, confirm, save", "obj": "password, Button, form, work agency, new choice, changes", "pred_steps": "1. The Agency Operator navigates to the account settings menu.2. The Agency Operator selects the option to change the password.3. The system prompts the Agency Operator to enter the current password for verification.4. The Agency Operator enters the current password.5. The system verifies the current password and allows the Agency Operator to proceed.6. The system prompts the Agency Operator to enter the new password.7. The Agency Operator enters the new password.8. The system requires the Agency Operator to confirm the new password.9. The Agency Operator confirms the new password by entering it again.10. The system updates the password associated with the account.11. The system displays a confirmation message indicating that the password has been successfully changed.", "pred_act": "navigates selects prompts enter enters verifies allows prompts enter enters requires confirm confirms entering updates displays indicating\n", "pred_obj": "agency operator, account settings menu, option, password, system, current password, verification, new password, account, confirmation message"}
{"index": 25, "ucName": "ModifyPasswordError", "uctext": "He was asked to enter a password but is not confirmed in a correct way.", "steps": "4 Notify an error message. \n5 Confirmation of the reading of the notification. \n6. Back to change your password.", "dataset": "eTour", "act": "Notify, Confirm, Back, change", "obj": "error message, notification, password", "pred_steps": "1. Display a prompt requesting the user to enter a password.2. Retrieve the password input from the user.3. Verify if the entered password meets the required criteria (e.g., minimum length, special characters).4. If the password criteria are not met, display an error message indicating the password requirements.5. If the password criteria are met, proceed to the next step.6. Verify if the entered password is correct by comparing it with the stored password.7. If the entered password matches the stored password, grant access.8. If the entered password does not match the stored password, display an error message indicating an incorrect password.9. Provide an option for the user to retry entering the password.10. Repeat steps 2 to 8 until the user enters the correct password or chooses to exit.11. End the use case.", "pred_act": "Display, requesting, enter, Retrieve, Verify, meets, display, indicating, proceed, Verify, comparing, matches, grant, display, indicating, Provide, retry, entering, Repeat, enters, chooses, exit, End\n", "pred_obj": "prompt, password, error message, stored password, option, user"}
{"index": 26, "ucName": "Registration", "uctext": "Requires the creation of a new system.", "steps": "1. Enable the logging feature. \n2 View the registration form. \n3 Fill out the form and submit. \n4 Verify the data entered and asks for confirmation of the transaction. Where the data is invalid or insufficient, the system activates the use case Errored. \n5 Confirm the operation. \n6. Create a new account with the data entered.", "dataset": "eTour", "act": "Enable, View, Fill, Submit, Verify, Ask, Activate, Confirm, Create", "obj": "logging feature, registration form, form, data, transaction, system, use case Errored, operation, account", "pred_steps": "1. Define the overall system requirements2. Identify and prioritize specific functional requirements3. Create detailed design specifications based on the requirements4. Develop the system architecture5. Implement the necessary software components6. Test the system to ensure it meets the requirements7. Deploy the system for production use", "pred_act": "Define, Identify, prioritize, Create, Develop, Implement, Test, ensure, Deploy\n", "pred_obj": "system requirements, functional requirements, design specifications, system architecture, software components, system"}
{"index": 27, "ucName": "SEARCH", "uctext": "Research and cultural heritage for all.", "steps": "1. Activate the search functionality. \n2 Displays the corresponding form. \n3 Fill out the form and submit. \n4 Gets the position of the Guest citing the case of use location and process research.", "dataset": "eTour", "act": "Activate, Displays, Fill, submit, Gets", "obj": "search functionality, form, Guest, case, use location, process research", "pred_steps": "1. User logs into the system.2. User selects the \"Research and Cultural Heritage\" feature.3. User enters keywords or selects specific criteria for the research.4. System retrieves relevant information from the cultural heritage database.5. System displays the research results to the user.6. User can further filter or refine the results.7. User can select specific items for detailed information.8. User can save or download the selected research materials.9. User can log out of the system.", "pred_act": "logs, selects, enters, selects, retrieves, displays, can filter, refine, can select, can save, download, can log\n", "pred_obj": "user, system, research and cultural heritage, keywords, criteria, information, database, results, items, materials"}
{"index": 28, "ucName": "LOGIN", "uctext": "Ensures a registered user to access the system with the privileges that fall.", "steps": "1. Activate the login feature. \n2 Displays the corresponding form. \n3 Fill out the form with login information and submit. \n4 Check the correctness of the data, if not corrected on the use case LoginError.", "dataset": "eTour", "act": "Activate, Displays, Fill, submit, Check, corrected, output", "obj": "login feature, form, login information, data, LoginError", "pred_steps": "1. Verify the user credentials (username and password) provided during login.2. Check if the user account is registered in the system.3. Authenticate the user based on the provided credentials.4. Retrieve the user's privileges and permissions from the system.5. Grant access to the system based on the user's privileges.6. Redirect the user to the appropriate interface/dashboard based on their privileges.7. Allow the user to perform actions and access features based on their assigned privileges.8. Log out the user after a period of inactivity or when they choose to log out.", "pred_act": "Verify, Check, Authenticate, Retrieve, Grant, Redirect, Allow, Log, choose\n", "pred_obj": "user, credentials, username, password, login, user account, system, user, credentials, user, privileges, permissions, system, access, system, user's privileges, user, interface/dashboard, privileges, user, actions, access, features, privileges, user"}
{"index": 29, "ucName": "LoginError", "uctext": "The data supplied for the login is incorrect.", "steps": "1. Notice that the data entered for the login is not valid and asks for confirmation of the reading. \n2 Confirmation of the reading of the notification. \n3 Recovers the previous state.", "dataset": "eTour", "act": "Verbs/Predicates: Notice, asks, Confirmation, Recovers", "obj": "data, login, confirmation, reading, notification, previous state", "pred_steps": "1. Display an error message indicating that the login data is incorrect.2. Prompt the user to re-enter the login credentials.3. Allow the user to make corrections to the login data.4. Verify the corrected login data.5. Repeat the validation process until the correct login data is provided or the user chooses to exit.", "pred_act": "Display, indicating, Prompt, re-enter, Allow, make, Verify, Repeat, provided, chooses\n", "pred_obj": "error message, login data, user, login credentials, user, login data, user, login data, user"}
{"index": 30, "ucName": "Logout", "uctext": "Ends the current session.", "steps": "1. Access the functionality of disconnection from the system. \n2 Asks for confirmation of the transaction. \n3 Confirm the request for disconnection. \n4 Disconnects the Registered User.", "dataset": "eTour", "act": "\"Access Asks Confirm Confirm Disconnects\"", "obj": "functionality, disconnection, system, confirmation, transaction, request, Registered User", "pred_steps": "1. Receive request to end current session.2. Save any unsaved data or changes.3. Log out the user from the system.4. Clear user session data and variables.5. Display a message confirming the end of the session.6. Close any open files or connections.7. Terminate the session and return to the login screen.", "pred_act": "Receiveend Save Log Clear Display Close Terminate Return\n", "pred_obj": "request, user, system, user session data, variables, message, session, session"}
{"index": 31, "ucName": "InsertBanner", "uctext": "Inserting a new banner associated with the point of rest.", "steps": "1. Select the feature for the insertion of a new banner. \n2 Displays a form for the selection of an image. \n3 Select an image and sends the request for entering the system. \n4 Check the characteristics of the inserted, check that the number of banner did not exceed the maximum point of the restaurant and asks for confirmation of the insertion of the banner. In the event that the inserted image is not valid, enable the use case Errored. \n5 Confirm the operation of insertion. \n6. Remember the banners associated with the point of rest.", "dataset": "eTour", "act": "\"Select, Displays, Select, Sends, Check, Asks, Enable, Confirm, Remember\"", "obj": "feature, new banner, form, selection, image, system, characteristics, banner, maximum point, restaurant, confirmation, insertion, use case Errored, operation, banners, point of rest", "pred_steps": "1. User selects the option to insert a new banner.2. User specifies the point of rest to associate the new banner with.3. System validates the point of rest provided by the user.4. User uploads the banner image file.5. System verifies the file format and size of the uploaded banner image.6. System saves the banner image and associates it with the specified point of rest.7. System displays a success message confirming the insertion of the new banner.", "pred_act": "selects specifies validates uploads verifies saves associates displays confirming\n", "pred_obj": "user, option, banner, point of rest, system, image file, file format, size, success message"}
{"index": 32, "ucName": "ModifyBanner", "uctext": "Changing the image of a banner ad.", "steps": "1. Select the editing functionality of the banner. \n2 View the list of banner associated with the point of rest. \n3 Select a banner from the list and enter the editing functionality. \n4 Displays a form for the selection of an image. \n5 Select a picture and send the request to change the system. \n6. Check the characteristics of the inserted and asks for confirmation of the change of the banner. In the event that the inserted image is not valid, enable the use case Errored. \n7 Confirmation of the transaction change. \n8 Bookmark this new image for the selected banner.", "dataset": "eTour", "act": "\"Select, View, Select, enter, Displays, Select, send, Check, asks, enable, Confirmation, Bookmark\"", "obj": "editing functionality, banner, list, point of rest, banner, form, image, picture, system, characteristics, inserted, change, banner, use case Errored, transaction change, new image, selected banner", "pred_steps": "1. Log in to the system.2. Navigate to the banner ad management section.3. Select the specific banner ad that needs its image changed.4. Choose the option to edit the banner ad.5. Click on the current image of the banner ad to replace it.6. Upload the new image from the local system.7. Adjust the image settings if necessary (e.g., size, position).8. Save the changes.9. Verify that the new image is now displayed on the banner ad.10. Log out of the system.", "pred_act": "Log in, Navigate, Select, needs, Choose, edit, Click, replace, Upload, Adjust, Save, Verify, is, displayed, Log out\n", "pred_obj": "the system, the banner ad management section, the specific banner ad, the option to edit the banner ad, the current image of the banner ad, the local system, the image settings, the new image, the banner ad"}
{"index": 33, "ucName": "SearchCulturalHeritage", "uctext": "Returns the list of cultural objects in the system according to certain parameters.", "steps": "1. Activate the search functionality of a cultural object. \n2 Show the form for research. \n3 Fill in the search form and submit. \n4 Processing the request.", "dataset": "eTour", "act": "Please refer to relevant websites for more information, and feel free to ask me any other questions.", "obj": "search functionality, cultural object, form, research, search form, request", "pred_steps": "1. Capture user input for the parameters.2. Validate the input parameters.3. Query the system database for cultural objects matching the parameters.4. Retrieve the list of cultural objects from the database.5. Filter the list based on any additional criteria specified in the use case.6. Sort the list of cultural objects as required.7. Display the sorted list of cultural objects to the user.", "pred_act": "Capture,Validate,Query,Retrieve,Filter,Sort,Display\n", "pred_obj": "user input, input parameters, system database, cultural objects, parameters, list of cultural objects, database, list, additional criteria, use case, list of cultural objects, user"}
{"index": 34, "ucName": "DeleteBanner", "uctext": "Delete a banner ad associated with the point of rest.", "steps": "1. Select the feature for removal of the banner. \n2 View the list of banner associated with the point of rest. \n3 Select a banner from the list and enter the function of elimination. \n4 Displays a message confirming the deletion. \n5 Confirm the operation. \n6. Removes the banner.", "dataset": "eTour", "act": "\"Select, View, Select, enter, Displays, Confirm, Removes\"", "obj": "feature, banner, list, point of rest, function of elimination, message, operation", "pred_steps": "1. User selects the banner ad to delete.2. System confirms the selection.3. System removes the banner ad from the point of rest.4. System updates the database to reflect the deletion.5. System displays a confirmation message indicating successful deletion.", "pred_act": "selects confirms removes updates displays\n", "pred_obj": "user, banner ad, system, database, confirmation message"}
{"index": 35, "ucName": "ModifyMenu", "uctext": "Change the daily menu of a restaurant.", "steps": "1. Activate the editing functionality of the menu. \n2 Displays a form with seven days of the week. \n3 Select a day of the week and submit the form. \n4 Upload the data menu for the selected day and loads them into a form. \n5 Edit menu of the selected day and submit the form. \n6. Verify the data entered and asks for confirmation of the edit menu. Where the data are insufficient or invalid, the active use case Errored. \n7 Confirm the operation. \n8 Saves changes to the menu selected.", "dataset": "eTour", "act": "Activate, Displays, Select, Submit, Upload, Loads, Edit, Verify, Asks, Error, Confirm, Save", "obj": "editing functionality, menu, form, seven days of the week, day of the week, data menu, selected day, edit menu, data, active use case, operation, changes, menu selected", "pred_steps": "1. Log in to the restaurant's menu management system.2. Access the \"Daily Menu\" section.3. Select the date for which the menu needs to be changed.4. Remove existing items from the menu for the selected date.5. Add new menu items for the selected date.6. Specify the details of the new menu items (name, description, price, etc.).7. Save the changes to update the daily menu.8. Review the updated daily menu to ensure accuracy.9. Publish the updated daily menu for customers to view.10. Log out of the system after completing the menu changes.", "pred_act": "Log, Access, Select, Remove, Add, Specify, Save, Review, Publish, Log\n", "pred_obj": "restaurant's menu management system, daily menu, date, items, menu, details, name, description, price, changes, daily menu, customers, system"}
{"index": 36, "ucName": "DeleteMenu", "uctext": "Delete a daily menu of a restaurant.", "steps": "1. Enable the functionality of deleting a menu. \n2 Displays a form containing the seven days of the week. \n3 Select a day of the week and submit the form. \n4 Calls to confirm the deletion. \n5 Confirm the operation. \n6. Delete the daily menu selection.", "dataset": "eTour", "act": "Enable, display, select, submit, call, confirm, delete", "obj": "functionality, deleting a menu, form, seven days of the week, day of the week, form, deletion, operation, daily menu selection", "pred_steps": "1. Select the \"Menu Management\" option.2. Choose the \"Daily Menu\" tab.3. Locate the daily menu you want to delete.4. Click on the delete icon next to the daily menu entry.5. Confirm the deletion action.6. Verify that the daily menu has been successfully deleted.", "pred_act": "Select, Choose, Locate, Click, Confirm, Verify\n", "pred_obj": "menu management\" option, \"daily menu\" tab, daily menu, delete icon, deletion action"}
{"index": 37, "ucName": "ModifyRefreshmentPoint", "uctext": "Change data point associated refreshment.", "steps": "1. Enable the functionality of the information required by the point of rest. \n2 Upload data point Refreshments and displays them in a form. \n3 Change data in the form and submit. \n4 Verify the data entered and asks for confirmation of the change. Where the data is invalid or insufficient, the system activates the use case Errored. \n5 Confirm the operation. \n6. Stores the modified data of the point of rest.", "dataset": "eTour", "act": "Enable, Upload, Refresh, Display, Change, Submit, Verify, Ask, Activate, Confirm, Store", "obj": "\"functionality, information, point of rest, data point Refreshments, form, data, system, use case Errored, operation, modified data, point of rest\"", "pred_steps": "1. Access the data point settings section in the application.2. Select the specific data point that needs to be associated with a different refreshment time.3. Click on the option to change the refreshment setting for the selected data point.4. Enter the new refreshment time or interval for the data point.5. Save the changes made to the refreshment setting for the data point.6. Verify that the refreshment setting has been successfully updated for the data point.", "pred_act": "Access,Select,needs,be,associated,Click,change,Enter,Save,Verify,updated\n", "pred_obj": "access, data point settings section, application, specific data point, refreshment time, refreshment setting, new refreshment time or interval, changes, data point, refreshment setting, data point"}
{"index": 38, "ucName": "ConventionRequest", "uctext": "Require to conclude a Convention between the points of rest and the agency involved.", "steps": "1. Enable the functionality to request the Convention to the Agency. \n2 Displays a form for entering data of the Convention. \n3 Inserts the data in the form of the agreement and submit. \n4 Verify the data entered and asks for confirmation of the request. Where the data is invalid or insufficient, the system activates the use case Errored. \n5 Confirm the operation. \n6. Send the request to the Convention.", "dataset": "eTour", "act": "\"Enable, Displays, Inserts, Verify, asks, Confirm, Send, output\"", "obj": "Convention, Agency, form, data, agreement, system, use case Errored, operation, request", "pred_steps": "1. Identify the points of contact for the agency and the parties involved in the convention.2. Gather all relevant information and details about the convention requirements.3. Schedule a meeting or communication session between the parties to discuss and negotiate the terms of the convention.4. Define the objectives and goals of the convention to ensure alignment between all parties.5. Draft a formal agreement outlining the terms, conditions, and responsibilities of each party involved.6. Review the draft agreement with all parties to ensure it meets their requirements and expectations.7. Make any necessary revisions or updates to the agreement based on feedback from the parties.8. Obtain approval and signatures from all parties involved in the convention.9. Distribute copies of the signed agreement to all relevant parties for record-keeping.10. Implement the terms of the convention according to the agreed-upon timeline and guidelines.", "pred_act": "Identify, Gather, Schedule, Discuss, Negotiate, Define, Ensure, Draft, Outline, Review, Ensure, Make, Obtain, Distribute, Implement\n", "pred_obj": "agency, parties, convention, requirements, meeting, communication session, terms, objectives, goals, formal agreement, conditions, responsibilities, approval, signatures, timeline, guidelines"}
{"index": 39, "ucName": "ViewPersonalStatistic", "uctext": "Viewing statistics for Point Of Restaurants", "steps": "1. Select the feature to display personal statistics. \n2 Displays a form that shows data for the statistics associated refreshment point.", "dataset": "eTour", "act": "\"Select, display, shows\"", "obj": "feature, personal statistics, form, data, statistics, refreshment point", "pred_steps": "1. Access the \"Statistics\" tab on the Point Of Restaurants software interface.2. Select the desired time period for the statistics (e.g., daily, weekly, monthly).3. Choose the specific type of statistics to view (e.g., sales data, customer data, inventory data).4. Generate the statistics report based on the selected criteria.5. Review the statistics displayed on the screen.6. Optionally, export the statistics report in a preferred format (e.g., PDF, Excel).7. Close the statistics window when done viewing.", "pred_act": "Access, Select, Choose, Generate, Review, export, Close\n", "pred_obj": "statistics\" tab, point of restaurants software interface, time period, statistics, sales data, customer data, inventory data, statistics report, screen, statistics report, pdf, excel, statistics window"}
{"index": 40, "ucName": "ModifySearchPreference", "uctext": "Edit your personal search preferences.", "steps": "1. Access to functionality for the modification of personal search preferences. \n2 Upload your search preferences and displays them in a form. \n3 Edit the fields in the form and submit. \n4 Asks confirmation. \n5 Confirmation for changing search preferences. \n6. Memorize search preferences changed.", "dataset": "eTour", "act": "Access, upload, display, edit, submit, ask, confirm, memorize", "obj": "functionality, personal search preferences, search preferences, form, fields, confirmation, search preferences changed", "pred_steps": "1. User navigates to the \"Personal Search Preferences\" section.2. User selects the option to edit search preferences.3. User can modify preferences such as search filters, sorting criteria, display settings, etc.4. User saves the changes made to their search preferences.5. System updates the user's personal search preferences with the new settings.6. System displays a confirmation message indicating that the preferences have been successfully updated.7. Use case is complete.", "pred_act": "navigates selects modify saves updates displays is\n", "pred_obj": "user, personal search preferences, search preferences, filtering, sorting, display settings, changes, settings, confirmation message, use case"}
{"index": 41, "ucName": "ModifyTouristData", "uctext": "Change data associated with your account.", "steps": "1. Access to functionality for the modification of data. \n2 Loads the data and displays them in a form. \n3 Edit the fields in the form and submit. \n4 Check the modified information and asks for confirmation of the change. Where the data is invalid or insufficient, the system activates the use case Errored. \n5 Confirmation of the transaction change. \n6. Stores the modified data.", "dataset": "eTour", "act": "\"Access, Loads, displays, Edit, submit, Check, asks, activates, Confirmation, Stores\"", "obj": "functionality, data, form, fields, modified information, change, system, use case Errored, transaction change", "pred_steps": "1. User initiates the account data change process.2. System verifies user authorization to make account data changes.3. System displays the current account data.4. User selects the specific data to be changed.5. User provides the new values for the selected data.6. System validates the new data for correctness and completeness.7. System updates the account data with the new values.8. System notifies the user about the successful data change.9. User confirms the successful data change.10. System logs the account data change event for audit purposes.11. Use case ends.", "pred_act": "initiates, verifies, displays, selects, provides, validates, updates, notifies, confirms, logs, ends\n", "pred_obj": "user, account data, system, account data changes, current account data, data, new values, new data, user, audit purposes, use case, account data change event"}
{"index": 42, "ucName": "ModifyGenericPreference", "uctext": "Edit Preferences generic personal.", "steps": "1. Access to functionality for the modification of generic personal preferences. \n2 Upload your preferences and the general view in a form. \n3 Edit the fields in the form and submit. \n4 Asks for confirmation of the change. \n5 Confirm the operation. \n6. Stores preferences changed.", "dataset": "eTour", "act": "\"Access, Upload, Edit, Submit, Asks, Confirm, Stores\"", "obj": "functionality, generic personal preferences, preferences, general view, form, fields, change, operation, preferences changed", "pred_steps": "Functional Steps:1. User accesses the preferences section in the application.2. User selects the option to edit personal preferences.3. User makes changes to the generic personal preferences such as name, contact information, preferred language, etc.4. User saves the changes made.5. System updates the personal preferences with the new information.6. System displays a confirmation message to the user indicating the successful update of preferences.", "pred_act": "accesses selects makes saves updates displays indicating\n", "pred_obj": "user, preferences section, application, personal preferences, name, contact information, preferred language, changes, system, information, confirmation message"}
{"index": 43, "ucName": "ViewPreferredSite", "uctext": "View the list of personal favorites.", "steps": "1. Select the feature to display the list of personal favorites. \n2 Upload the list of bookmarks.", "dataset": "eTour", "act": "\"Select, display, upload\"", "obj": "feature, list, personal favorites, bookmarks", "pred_steps": "1. User navigates to the \"Favorites\" section in the application.2. System retrieves and displays the list of personal favorites stored for the user.3. User can scroll through the list of favorites to view them.4. User can select a specific favorite item to view more details or perform additional actions.5. User can choose to go back to the previous screen or navigate to other sections in the application.", "pred_act": "navigates retrieves displays scroll view select view perform choose go navigate\n", "pred_obj": "user, system"}
{"index": 44, "ucName": "ViewCulturalHeritageCard", "uctext": "View the details of the selected cultural.", "steps": "1. View the list of cultural goods as a result of the use case SearchCulturalHeritage, it selects and activates a function to view the card. \n2 Loads the data for the selected cultural.", "dataset": "eTour", "act": "Verbs/Predicates: \"View\", \"selects\", \"activates\", \"Loads\"", "obj": "cultural goods, SearchCulturalHeritage, function, card, data, cultural", "pred_steps": "1. User selects a cultural item from the list to view details.2. System retrieves and displays the details of the selected cultural item.3. User reviews the details presented on the screen.", "pred_act": "selects retrieves displays reviews\n", "pred_obj": "user, cultural item, system, details, screen"}
{"index": 45, "ucName": "ViewVisitedSites", "uctext": "View the list of sites for which it has issued a feedback.", "steps": "1. Select the feature to display the list of sites visited personal. \n2 Upload the list of sites for which the tourist has issued a Feedback", "dataset": "eTour", "act": "\"Select, display, Upload\"", "obj": "feature, list of sites visited, tourist, Feedback", "pred_steps": "1. User requests to view the list of sites for which feedback has been issued.2. System retrieves the list of sites for which feedback has been issued.3. System displays the list of sites to the user.", "pred_act": "requests retrieves displays\n", "pred_obj": "user, system"}
{"index": 46, "ucName": "InsertPreferenceSite", "uctext": "Inserts a site selected in the list of bookmarks.", "steps": "1. Activate the feature for the insertion of the selected site from the bookmarks. \n2 Prompt the inclusion \n3 Confirm the input. \n4 Inserts the selected site in the list of bookmarks.", "dataset": "eTour", "act": "Activate, Prompt, Confirm, Inserts", "obj": "feature, insertion, site, bookmarks, inclusion, input, list", "pred_steps": "1. User selects the desired site from the list of bookmarks.2. User triggers the \"Insert\" functionality.3. System validates if the selected site is a valid URL.4. System checks if the selected site is already present in the list of bookmarks.5. If the selected site is a valid URL and not already present in the list, system inserts the site into the bookmarks list.6. System provides appropriate feedback to the user indicating that the site has been successfully inserted.7. Use case ends.", "pred_act": "selects triggers validates checks inserts provides ends\n", "pred_obj": "user, site, list, bookmarks, insert functionality, url, feedback, use case"}
{"index": 47, "ucName": "DeleteSiteFromPreferences", "uctext": "Tourism delete a site from the list of bookmarks.", "steps": "1. Choose to remove your site from the list of bookmarks by specific features. \n2 Prompt removal \n3 Confirm the removal. \n4 Removes the selected site from the list of bookmarks.", "dataset": "eTour", "act": "\"Choose, remove, Prompt, Confirm, Removes\"", "obj": "site, list, bookmarks, specific features, removal, selected site", "pred_steps": "1. User selects the bookmarked site to delete.2. System prompts user to confirm deletion.3. User confirms deletion.4. System removes the selected site from the list of bookmarks.5. System displays a confirmation message to the user.6. Use case ends.", "pred_act": "selects, prompts, confirm, confirms, removes, displays, ends\n", "pred_obj": "user, system"}
{"index": 48, "ucName": "InsertFeedback", "uctext": "Inserts a feedback for the selected site.", "steps": "1. Activate the feature on the issue of feedback. \n2 Verify that the visitor has not already issued a feedback for the site and displays a form for entering the feedback for the selected site. In case the visitor has already issued a feedback for the site selected, activates the use case FeedbackAlreadyReleased. \n3 Fill out the form, selecting one vote and inserting a comment, then submit. \n4 Verify the data entered and confirm the cheide. Where the data is invalid or insufficient, the system activates the use case Errored. \n5 Confirming the issue of feedback. \n6. Remember feedback and inserts the selected site in the list of sites visited.", "dataset": "eTour", "act": "Activate, Verify, displays, issue, activates, Fill, selecting, inserting, submit, Verify, confirm, activates, Confirming, Remember, inserts", "obj": "feature, feedback, visitor, site, form, FeedbackAlreadyReleased, vote, comment, data, cheide, system, Errored, list, sites visited", "pred_steps": "1. User selects the site to provide feedback for.2. User enters the feedback message.3. User submits the feedback.4. System saves the feedback for the selected site.5. System sends a confirmation message to the user.", "pred_act": "Activate Verify\n", "pred_obj": "user, site, feedback message, feedback, system, confirmation message"}
{"index": 49, "ucName": "ModifyComment", "uctext": "Edit the comment previously issued.", "steps": "1. Choose to change the comment on the feedback for the site issued by the appropriate functionality. \n2 Verify the data entered and asks for confirmation of the change. Where the data is invalid or insufficient, the system activates the use case Errored. \n3 Confirm the change of the comment. \n4 Edit commentary on selected feedback", "dataset": "eTour", "act": "choose, change, verify, ask, activate, confirm, edit", "obj": "comment, feedback, site, functionality, data, change, use case Errored, confirmation", "pred_steps": "1. User selects the comment to be edited.2. System displays the selected comment in an editable field.3. User makes the necessary changes to the comment.4. User confirms the changes.5. System saves the edited comment.6. System displays a confirmation message that the comment has been successfully edited.", "pred_act": "selects displays makes confirm saves saves displays\n", "pred_obj": "user, system, comment"}
{"index": 50, "ucName": "FeedbackAlreadyReleased", "uctext": "", "steps": "1. Notification that the user has already issued a feedback for the site and cancel the operation to insert a new feedback. \n2 Confirmation of the reading of the notification. \n3 Recovers the previous state.", "dataset": "eTour", "act": ",  issue, cancel, insert, ,  confirm, ,  recover", "obj": "Notification, user, feedback, site, operation, confirmation, reading, previous state", "pred_steps": "Sure, please provide me with the details of the use case, so I can proceed with designing the functional steps for its implementation.", "pred_act": "provide proceed designing\n", "pred_obj": "details, use case, functional steps, implementation"}
{"index": 51, "ucName": "Localization", "uctext": "Returns the current position of the tourist.", "steps": "n \nDescription: Returns the current position of the tourist. \nParticipating Actor: System initialization \nEntry conditions: He began a search or an advanced search. \nFlow of events Gps System: \n1. The system requires the data for the position. \n2 The GPS calculates the position of the tourist. \n3 The system is on hold until the data of the position.", "dataset": "eTour", "act": "requires, calculates, is on hold, output", "obj": "tourist, system initialization, search, advanced search, system, data, position, GPS", "pred_steps": "1. Open the tourist tracking software.2. Retrieve the current location of the tourist.3. Display the current position on the user interface. 4. End the use case.", "pred_act": "Open Retrieve Display End\n", "pred_obj": "tourist tracking software, current location, tourist, current position, user interface, use case"}
{"index": 52, "ucName": "AdvancedSearch", "uctext": "The tourist searching for a site using the potential offered by the Advanced Search.", "steps": "1. Enable the advanced search feature from your personal area. \n2 View the advanced search form. \n3 Fill in the form of advanced search and submit. \n4 Gets the position of relying on the tourist event of the use location and process the request.", "dataset": "eTour", "act": "Enable, View, Fill, Submit, Get, Process", "obj": "advanced search feature, personal area, advanced search form, form, position, tourist event, use location, request", "pred_steps": "1. User selects the \"Advanced Search\" option on the site.2. User enters specific search criteria such as location, category, rating, etc.3. System processes the search criteria and retrieves relevant results from the database.4. System displays the search results to the user.5. User selects a site from the search results for more details.6. System displays detailed information about the selected site to the user.", "pred_act": "selects, enters, processes, retrieves, displays, selects, displays\n", "pred_obj": "user, advanced search, site, search criteria, location, category, rating, system, search results, database, information, selected site"}
{"index": 53, "ucName": "ViewSiteCard", "uctext": "View the details of a particular site.", "steps": "1. Select the function for displaying the card on a site chosen. \n2 Upload data from the database.", "dataset": "eTour", "act": "\"Select, display, upload, output\"", "obj": "function, displaying the card, site, data, database", "pred_steps": "Functional Steps:1. Identify the specific site for which details need to be viewed.2. Access the software application or system that provides site details.3. Log in to the application, if required, using valid credentials.4. Navigate to the \"Site Details\" or similar section of the application.5. Enter the site identification or search criteria to locate the desired site.6. Select the specific site from the search results, if applicable.7. Retrieve and display the relevant details of the selected site, such as location, address, contact information, and any other available information.8. Review the displayed details to ensure accuracy and completeness.9. If necessary, navigate to additional sections or tabs within the application to access more specific details about the selected site.10. Repeat the steps above to view details of other sites, if needed.11. Log out of the application when finished viewing the site details.", "pred_act": "Identify, need, be, viewed, Access, provides, Log, be, using, Navigate, Enter, search, locate, Select, Retrieve, display, Review, ensure, be, navigate, access, Repeat, view, be, Log, be, finished, viewing\n", "pred_obj": "functional steps, site, details, software application, system, site details, application, credentials, site details, section, application, site identification, search criteria, site, search results, site, details, site, location, address, contact information, information, details, sections, tabs, application, details, site, steps, details, sites, application, site details"}
{"index": 54, "ucName": "DeleteRefreshmentPoint", "uctext": "Delete a refreshment from the system.", "steps": "1. View a list of points of rest as a result of the use case SearchCulturalHeritage, it selects and activates a function of elimination. \n2 Asks for confirmation of the transaction. \n3 Confirm the deletion. \n4 Deletes the selected point of rest.", "dataset": "eTour", "act": "\"View, selects, activates, asks, confirm, deletes\"", "obj": "points of rest, SearchCulturalHeritage, function of elimination, transaction, deletion, point of rest", "pred_steps": "1. User selects the \"Delete\" option from the refreshments menu.2. System prompts the user to select the refreshment to be deleted from a list of available refreshments.3. User selects the refreshment to be deleted from the list.4. System prompts the user to confirm the deletion.5. User confirms the deletion.6. System removes the selected refreshment from the system.7. System displays a success message to indicate that the refreshment has been deleted.8. System updates any relevant records or data associated with the deleted refreshment.9. System returns the user to the previous screen or menu.", "pred_act": "selects, prompts, select, selects, prompts, confirms, removes, displays, indicate, updates, associated, returns\n", "pred_obj": "user, delete, refreshments menu, system, refreshment, list, success message, records, data, screen, menu"}
{"index": 55, "ucName": "ActiveConvention", "uctext": "Convention active request by a refreshment point.", "steps": "1. Enable the activation function of the Convention. \n2 Load the data request of the Convention from the point of rest and displays the corresponding form. \n3 Check the data of the agreement and decide for activation. \n4 Asks for confirmation of the activation. \n5 Confirm the operation. \n6. Processing the request.", "dataset": "eTour", "act": "Enable, Load, display, Check, decide, Ask, Confirm, Processing", "obj": "Convention, activation function, data request, agreement, activation, confirmation, operation, request", "pred_steps": "1. Identify the active request for a convention made by a refreshment point.2. Verify if the refreshment point has the necessary resources to cater to the convention.3. Generate a confirmation message to notify the refreshment point about the active request.4. Update the status of the request as \"pending\" in the system.5. Forward the request to the relevant department for further processing.6. Notify the designated staff member about the new convention request.7. Staff member reviews the request details and checks for conflicts in the schedule.8. If there are no scheduling conflicts, assign the request to an available staff member.9. If there are conflicts, ask for alternative date/time preferences from the refreshment point.10. Update the request with alternative preferences, if provided, and repeat steps 6-9.11. Once an available staff member is assigned, update the status of the request as \"assigned.\"12. Notify the refreshment point about the assigned staff member.13. Staff member reviews the request and contacts the refreshment point to gather additional details.14. Collect all necessary information about the convention, including date, time, number of attendees, menu preferences, etc.15. Coordinate with the refreshment point to finalize the menu and other logistics.16. Update the request with the finalized details.17. Generate a confirmation message to notify the refreshment point about the finalized request.18. Update the status of the request as \"confirmed\" in the system.19. Provide the staff member with all necessary details for on-site setup and execution of the convention.20. Execute the convention and make sure all requested services are provided.21. After the convention, update the status of the request as \"completed\" in the system.22. Generate an invoice for the services provided and send it to the refreshment point.23. Follow up with the refreshment point to collect feedback on the convention.24. Update the request with the feedback received.25. Close the request and mark it as \"closed\" in the system.", "pred_act": "Identify, Verify, Generate, Update, Forward, Notify, reviews, checks, assign, ask, Update, provided, repeat, assigned, update, Notify, reviews, contacts, Collect, Coordinate, Update, Generate, Update, Provide, Execute, make, update, Generate, send, Follow, collect, Update, Close, mark\n", "pred_obj": "convention, refreshment point, request, system, department, staff member, schedule, date, time, menu preferences, number of attendees, logistics, invoice, feedback"}
{"index": 56, "ucName": "ModifyDataRefreshmentPointAgency", "uctext": "Edit the data pertaining to a designated point of rest.", "steps": "1. View a list of points of rest as a result of the use case SearchRefreshmentPoint, it selects an active and functional data changes. \n2 Upload data from the point of rest and displays the form of change. \n3 Change data in the form and submit. \n4 Verify the data entered in form and asks for confirmation of the transaction. Where the data is invalid or insufficient, the system activates the use case Errored. \n5 Confirm the operation. \n6. Stores the modified data of the point of rest.", "dataset": "eTour", "act": "\"View, selects, Upload, displays, Change, submit, Verify, asks, activates, Confirm, Stores\"", "obj": "points of rest, SearchRefreshmentPoint, data changes, point of rest, form of change, data, form, transaction, Errored, operation, modified data, point of rest", "pred_steps": "1. User selects the designated point of rest to edit.2. System displays the current data related to the selected point of rest.3. User makes the necessary changes to the data.4. User saves the changes.5. System validates the edited data for any errors.6. If there are errors, system prompts the user to correct them.7. If there are no errors, system updates the data for the designated point of rest.8. System confirms the successful update of data to the user.", "pred_act": "selects, displays, makes, saves, validates, prompts, updates, confirms\n", "pred_obj": "user, system"}
{"index": 57, "ucName": "SearchRefreshmentPoint", "uctext": "Returns the list of points of rest in the system according to certain parameters.", "steps": "1. Activate the search functionality of a point of rest. \n2 Show the form for research. \n3 Fill in the search form and submit. \n4 Processing the request.", "dataset": "eTour", "act": "Activate, Show, Fill, Submit, Processing", "obj": "search functionality, point of rest, form, research, search form, request", "pred_steps": "1. Retrieve the list of all points of rest from the system.2. Filter the list based on the specified parameters.3. Return the filtered list of points of rest.", "pred_act": "Retrieve, Filter, Return\n", "pred_obj": "points of rest, list"}
{"index": 0, "ucName": "Create and Deactivate Patients Use Case", "uctext": "An HCP is able to create a patient  or disable a selected patient . The create/disable patients and HCP transaction is logged (UC5).\n\n", "steps": " The HCP enters a patient as a new user of iTrust Medical Records system. Only the name and email are provided. The patient's assigned MID and a secret key (the initial password) are personally provided to the user, with which the user can reset his/her password. The HCP can edit the patient according to data format 6.4  with all initial values (except patient MID) defaulting to null and/or 0 as appropriate. Patient MID should be the number assigned when the patient is added to the system and cannot be edited. The HCP does not have the ability to enter/edit/view the patient's security question/password.\n The HCP selects a patient to deactivate. The HCP is presented with a confirmation containing the name of the patient and determines if it is the patient they intend to deactivate . A deactivated patient can not be modified or log into the system, and can only be reactivated by the administrator.\n The HCP uploads a comma-seperated value file containing one patient per row. The fields of the CSV file must include at least the first name, last name, and e-mail address, with additional columns available for the other demographic values. The patients are created, the tables are populated, and the MIDS and temporary passwords are displayed to the HCP in a table. The event is logged.\n", "dataset": "iTrust", "act": "\"enters, provides, assigns, can reset, can edit, does not have, selects, is presented, determines, can not be modified, can not log, can only be reactivated, uploads, must include, are created, are populated, are displayed, is logged\"", "obj": "HCP, patient, iTrust Medical Records system, name, email, MID, secret key, initial password, data format , 4, initial values, patient MID, security question, password, confirmation, first name, last name, e-mail address, demographic values, comma-seperated value file, CSV file, tables, MIDS, temporary passwords, event, system, administrator", "pred_steps": "1. HCP selects the option to create a patient.2. HCP enters the necessary patient details (e.g., name, age, contact information).3. System validates the entered patient details.4. System creates a new patient record with the entered details.5. HCP selects the option to disable a patient.6. HCP searches for the patient to be disabled.7. System retrieves the patient record based on the search criteria.8. HCP selects the specific patient to disable.9. System sets the selected patient's status as disabled.10. System logs the transaction in the system log (UC5).", "pred_act": "selects,create,enters,validates,creates,selects,searches,retrieves,selects,disable,sets,logs\n", "pred_obj": "hcp, option, patient, system, patient details, patient record, necessary patient details, search criteria, status, transaction, system log"}
{"index": 1, "ucName": "Enter/edit personal health records Use Case", "uctext": "An HCP chooses to enter/edit personal health information for a patient . The information is viewed/edited by the HCP .\n\n", "steps": " The health care personnel enters a MID  of a patient and confirms their selection .\n The health care personnel may enter/edit personal health information including Patient Information (Data Format 6.4.1), Insurance Information (6.4.2), Emergency Contact Information (6.4.3), and Patient’s Health Information (((requirements:df4|6.4.4(). The HCP can indicate drug allergies . The HCP can indicate the patient has passed away, providing an appropriate diagnosis code.\n The HCP can select a medication from a pull down list and add it to the list of medications the patient is allergic to. The medication is checked against the patient's current and future prescriptions. The HCP is notified of any current or future prescriptions to which the patient has a drug allergy.\n", "dataset": "iTrust", "act": "enters, confirms, may enter, may edit, can indicate, can select, add, is checked, is notified", "obj": "health care personnel, MID, patient, selection, personal health information, Patient Information (Data Format , , 1), Insurance Information (, , 2), Emergency Contact Information (, , 3), Patient’s Health Information (requirements:df4|, , 4()), drug allergies, diagnosis code, medication, list of medications, patient's current prescriptions, patient's future prescriptions, HCP", "pred_steps": "1. HCP logs into the healthcare system.2. HCP navigates to the patient's record.3. HCP selects the option to enter/edit personal health information for the patient.4. HCP enters or edits the relevant personal health information.5. The system saves the updated information in the patient's record.6. HCP reviews the updated information to ensure accuracy.", "pred_act": "logs, navigates, selects, enter, edit, enters, edits, saves, reviews\n", "pred_obj": "hcp, healthcare system, patient's record, personal health information, system, patient's record, updated information"}
{"index": 2, "ucName": "Document office visit Use Case", "uctext": "An HCP chooses to document  or edit  an office visit for a patient .\n\n", "steps": " The HCP enters a MID  or name of a patient and confirms their selection .\n The HCP documents the following information related to an office visit. All events are logged (UC5, S8). Required information is designated; all other information is optional:\nDate (required)\nHospital location of the office visit, if any, (the default should be the HCP's home location) (required)\nAppointment type (required) (UC60)\nNotes (numbers, characters, #, ;, ?, -, ', ., :, blankspace and carriage return are all allowed input values) (required)\nOption to send patient a billing statement (UC60)\nBasic Health Metrics (UC51) (required)\nPrescribed Medications (NDC, see Data Format 6.6) \nLab procedures that are ordered (LOINC code, see Data Format 6.11)(UC26)\nPatient Specific Instructions (UC44)\nDiagnoses (via the ICD-9CM code)\nMedical procedures (CPT code) performed\nImmunizations given (CPT Code, see UC15, S1)\nPatient referral (UC33).\n HCPs can return to an office visit and modify or delete the fields of the office visit (notes, health metrics UC51, prescriptions, laboratory procedures (UC26), referral (UC33), diagnoses, procedures, and/or immunizations (UC15)(. The event is logged (UC 5, S8) and the HCP is returned in the specific office visit record to verify his or her changes.\n The HCP has selected a medication prescribed from a pull down list. The HCP provides the dosage in milligrams, the start and end date for the prescription, and any special instructions. The instructions can contain numbers, characters, #, ;, ?, -, ', ., :, blankspace and carriage return. The HCP must provide instructions (can neither be empty nor the default form field value), or else they cannot add the prescription. The HCP can add the prescription to the list of medications (UC37).\n", "dataset": "iTrust", "act": "enters, confirms, documents, logs, designated, send, can return, modify, delete, selected, provides, must provide, cannot add, can add", "obj": "HCP, MID, name, patient, selection, information, office visit, events, Date, Hospital location, Appointment type, Notes, option, billing statement, Basic Health Metrics, Prescribed Medications, NDC, Lab procedures, LOINC code, Patient Specific Instructions, Diagnoses, ICD-9CM code, Medical procedures, CPT code, Immunizations, referral, UC5, S8, UC60, UC51, Data Format , 6, Data Format , 11, UC26, UC44, UC15, S1, UC33, UC37, medication, dosage, milligrams, start date, end date, prescription, special instructions, list, form field value", "pred_steps": "1. HCP logs into the system.2. HCP navigates to the patient's profile.3. HCP selects the option to document/edit an office visit.4. HCP fills in the required information such as date of the visit, reason for the visit, medical history, medications, etc.5. HCP saves the office visit documentation.6. System updates the patient's records with the new information.7. HCP logs out of the system.", "pred_act": "logs, navigates, selects, fills, saves, updates, logs\n", "pred_obj": "hcp, system, hcp, patient's profile, hcp, office visit, hcp, hcp, hcp, office visit documentation, system, patient's records, hcp, system"}
{"index": 3, "ucName": "Determine operational profile Use Case", "uctext": "The software tester authenticates himself or herself in the iTrust Medical Records system (UC2). He or she is then presented with the actual operational profile of the operations of the iTrust Medical Records where the use percentage is the % of total transactions for each particular transaction logging type, broken-down by each of the user types (patient, LHCP, UHCP, admin, tester(\n\n", "steps": "The software tester authenticates himself or herself in the iTrust Medical Records system (UC2). He or she is then presented with the actual operational profile of the operations of the iTrust Medical Records where the use percentage is the % of total transactions for each particular transaction logging type, broken-down by each of the user types (patient, LHCP, UHCP, admin, tester(.", "dataset": "iTrust", "act": "authenticates, is presented with", "obj": "software tester, iTrust Medical Records system, UC2, operational profile, operations, iTrust Medical Records, use percentage, total transactions, transaction logging type, user types, patient, LHCP, UHCP, admin, tester", "pred_steps": "1. Authenticate as a software tester in the iTrust Medical Records system.2. Access the operational profile section of the system.3. View the breakdown of transaction logging types.4. Identify the percentage of total transactions for each transaction logging type.5. Analyze the breakdown for each user type (patient, LHCP, UHCP, admin, tester).", "pred_act": "Authenticate,Access,View,Identify,Analyze\n", "pred_obj": "authenticate, software tester, itrust medical records system, operational profile section, transaction logging types, percentage of total transactions, user type, patient, lhcp, uhcp, admin, tester"}
{"index": 4, "ucName": "Declare/undeclare Personal Representative Use Case", "uctext": "The HCP selects a patient by typing in the MID of the patient . The HCP can choose to add or remove another registered user as a personal health representative to that patient.\n\n", "steps": "The HCP selects a patient by typing in the MID of the patient . The HCP can choose to add or remove another registered user as a personal health representative to that patient.\n\n", "dataset": "iTrust", "act": "selects, types, can choose, add, remove", "obj": "HCP, patient, MID, registered user, personal health representative", "pred_steps": "1. HCP opens the software application and logs in as a healthcare professional.2. HCP navigates to the patient search section.3. HCP enters the MID (Medical Identification Number) of the patient.4. Software verifies the patient's existence and displays the patient's profile.5. HCP selects the option to add or remove a registered user as a personal health representative for the patient.6. HCP enters the necessary information of the registered user to be added as a personal health representative or selects the registered user to be removed.7. Software validates the information and updates the patient's personal health representatives accordingly.8. The software notifies the HCP about the successful addition or removal of the personal health representative.9. HCP can choose to repeat steps 5-8 for adding or removing more personal health representatives.10. HCP can navigate to another section of the software application or log out when finished.", "pred_act": "opens,logs,navigates,enters,verifies,displays,selects,add,remove,enters,added,selects,removed,validates,updates,notifies,addition,removal,choose,adding,removing,navigate,log\n", "pred_obj": "hcp, software application, healthcare professional, patient search section, mid, medical identification number, patient, patient's profile, registered user, personal health representative, information, software, patient's personal health representatives, hcp"}
{"index": 5, "ucName": "Maintain standards lists Use Case", "uctext": "An administrator chooses to maintain the standards list for immunizations , diagnoses , allowable drugs , or allowable physical services .\n\n", "steps": " The administrator will maintain (add/update( a listing of allowable immunizations that an HCP can use. The administrator will store (1) the CPT code (The CPT code set accurately describes medical, surgical, and diagnostic services and is designed to communicate uniform information about medical services and procedures among physicians, coders, patients, accreditation organizations, and payers for administrative, financial, and analytical purposes. About CPT)  and (2) up to 30 alpha characters giving the name  of the immunization.\n The administrator will maintain a listing of allowable diagnoses that an LHCP can use. The administrator will store (1) the ICD-9CM code (The International Statistical Classification of Diseases and Related Health Problems (most commonly known by the abbreviation ICD) provides codes to classify diseases and a wide variety of signs, symptoms, abnormal findings, complaints, social circumstances and external causes of injury or disease. NHCS Classification of Diseases, Functioning and Disability) for the diagnosis ; (2) a classification that the diagnosis is either chronic/long-term OR short term; and (3) up to 30 alphanumeric characters giving the name  of the diagnosis.\n The administrator will maintain (add/update( a listing of allowable drugs that an HCP can use. The administrator will store (1) the National Drug Code (The National Drug Code (NDC) is a universal product identifier used in the United States for drugs intended for human use. National Drug Code Directory)\n The administrator will maintain (add/update( a listing of allowable physical services (including laboratory procedures) that an HCP can use. The administrator will store information of a LOINC code (Logical Observation Identifiers Names and Codes (LOINC) is a database and universal standard for identifying medical laboratory observations. LOINC c/o Medical Informatics)  according to Data Format 6.11. The administrator may choose to upload a file containing LOINC code information .\n The administrator selects a file containing LOINC information and chooses to upload it. LOINC data from this file is added to a listing of allowable physical services (including laboratory procedures that an HCP can use). If the file contains more fields than are supported by Data Format 6.11, all fields in Data Format 6.11 will be updated.\n", "dataset": "iTrust", "act": "\"maintain, add/update, store, choose to upload, selects, chooses to upload, is added, will be updated\"", "obj": "administrator, listing of allowable immunizations, HCP, CPT code, medical services, surgical services, diagnostic services, physicians, coders, patients, accreditation organizations, payers, administrative purposes, financial purposes, analytical purposes, ICD-9CM code, International Statistical Classification of Diseases and Related Health Problems, ICD, diseases, signs, symptoms, abnormal findings, complaints, social circumstances, external causes of injury, disease, NHCS Classification of Diseases, Functioning and Disability, diagnoses, classification, chronic/long-term, short term, allowable drugs, HCP, National Drug Code, NDC, drugs, allowable physical services, laboratory procedures, LOINC code, Logical Observation Identifiers Names and Codes (LOINC), medical laboratory observations, Data Format , 11, file, LOINC information, listing of allowable physical services", "pred_steps": "1. Administrator accesses the application.2. Administrator navigates to the \"Maintenance\" section.3. Administrator selects the \"Standards List\" option.4. Administrator chooses the category for maintenance (immunizations, diagnoses, allowable drugs, or allowable physical services).5. Administrator reviews the current standards list for the selected category.6. Administrator selects the \"Edit\" option for the chosen category.7. Administrator adds or modifies the standards as required.8. Administrator saves the changes made to the standards list.9. Administrator reviews the updated standards list to ensure accuracy.10. Administrator exits the maintenance section.", "pred_act": "accesses navigates selects chooses reviews selects adds modifies saves reviews exits\n", "pred_obj": "administrator, application, \"maintenance\" section, \"standards list\" option, category, maintenance, immunizations, diagnoses, allowable drugs, allowable physical services, standards list, \"edit\" option, standards, changes made, standards list, maintenance section"}
{"index": 6, "ucName": "Identify risk of chronic disease Use Case", "uctext": "Through the Personal Health Records page, an LHCP chooses a chronic disease and a patient. The data in the database is analyzed according to the risk factors for the disease to determine if the patient exhibits one or more risk factors. Currently available risk factors for chronic diseases are defined for Diabetes (Type 1 and Type2) and Heart Disease. When the chosen patient satisfies the preconditions of the chosen chronic disease , the LHCP is provided with a warning message if that patient exhibits three or more risk factors. The message will display the risk factors that the patients exhibit.\n\n", "steps": "Through the Personal Health Records page, an LHCP chooses a chronic disease and a patient. The data in the database is analyzed according to the risk factors for the disease to determine if the patient exhibits one or more risk factors. Currently available risk factors for chronic diseases are defined for Diabetes (Type 1 and Type2) and Heart Disease. When the chosen patient satisfies the preconditions of the chosen chronic disease , the LHCP is provided with a warning message if that patient exhibits three or more risk factors. The message will display the risk factors that the patients exhibit.", "dataset": "iTrust", "act": "\"chooses, is analyzed, are defined, satisfies, is provided, will display\"", "obj": "Personal Health Records page, LHCP, chronic disease, patient, database, data, risk factors, Diabetes (Type 1 and Type2), Heart Disease, preconditions, warning message", "pred_steps": "1. LHCP accesses the Personal Health Records page.2. LHCP selects a chronic disease (Diabetes Type 1, Diabetes Type 2, or Heart Disease).3. LHCP selects a patient.4. System retrieves the data from the database related to the selected chronic disease and the selected patient.5. System analyzes the data to determine the risk factors for the chosen chronic disease exhibited by the patient.6. System checks if the patient satisfies the preconditions of the chosen chronic disease.7. If the patient satisfies the preconditions, the system checks if the patient exhibits three or more risk factors.8. If the patient exhibits three or more risk factors, the system displays a warning message to the LHCP.9. The warning message includes the risk factors that the patient exhibits.", "pred_act": "accesses selects selects retrieves analyzes checks satisfies checks satisfies exhibits exhibits displays includes\n", "pred_obj": "lhcp, personal health records page, chronic disease, diabetes type 1, diabetes type 2, heart disease, patient, system, data, database, preconditions, warning message, risk factors"}
{"index": 7, "ucName": "Proactively Determine Needed Patient Care Use Case", "uctext": "An HCP chooses Office Visit Reminders and then to identify chronic patients who need an office visit , older patients who need a flu shot , or any patient who is overdue for an immunization . The HCP is presented with a listing of patients for whom they are a DLHCP who need care because of satisfying the one of preceding conditions. The presented patient information shall include each patient's name and home phone number so that reminder calls can be made. The list is sorted based on the alphabetical order of the patients' last names, and then first names.\n\n", "steps": " An alive patient who has not had an office visit for more than one year and who has been diagnosed with\ndiabetes mellitus (is diagnosed with ICD code beginning with 250:http://icd9cm.chrisendres.com/index.php?action=child&recordid=1765 (\nasthma (is diagnosed with ICD code beginning with 493:http://icd9cm.chrisendres.com/index.php?action=child&recordid=4700 (, or\ncirculatory-system disease (is diagnosed with an ICD code between 390 and 459 inclusive: http://icd9cm.chrisendres.com/index.php?action=child&recordid=4025 (.\n An alive patient over 50 years old who has not had a flu shot (CPT codes 90656, 90658, 90660 per http://www.influenza.com/index.cfm?fa=ADDITIONAL_RES_HC_2 during the months Sept - Dec of the last calendar year (or during the months Sept - Dec of the current calendar year if the retrieval time is between Sept - Dec).\n An alive patient under the age of 19 who has not had proper immunizations per the immunization schedule. The “catch up schedule” is relevant when the patient did not begin the immunizations according to the recommended schedule.\nHepatitis B (90371) three doses: at birth, at age 1 month, at age 6 months; catch up schedule: at least 4 weeks between dose 1 and dose 2 and at least 8 weeks between dose 2 and dose 3\nRotavirus (90681) three doses: at age 6 weeks, at age 4 months, at age 6 months; catch up schedule: at least 4 weeks between dose 1 and dose 2 and at least 4 weeks between dose 2 and dose 3\nDiphtheria, Tetanus, Pertussis (90696) six doses: at age 6 weeks, at age 4 months, at age 6 months, at age 15 months, at age 4 years, at age 11 years; catch up schedule: at least 4 weeks between dose 1 and dose 2, at least 4 weeks between dose 2 and dose 3, at least 6 months between doses 3 and 4, at least 6 months between dose 4 and dose 5, at least 5 years between dose 5 and dose 6\nHaemophilus influenzae (90645) three doses: at 6 weeks, at age 4 months, at age 12 months; catch up schedule: at least 4 weeks between dose 1 and dose 2 and at least 4 weeks between dose 2 and dose 3 if first dose is administered at younger than 12 months; if first dose is administered between 12 and 14 months, at least 8 weeks between dose 1 and dose 2 and dose three is canceled; if first dose is administered at or after 15 months, only one dose is required\nPneumococcal (90669) four doses: at age 6 weeks, at age 4 months, at age 6 months, at age 12 months; catch up schedule: at least 4 weeks between dose 1 and dose 2 and at least 4 weeks between dose 2 and dose 3 and at least 8 weeks between dose 3 and dose 4 if first dose is administered at younger than 12 months; if first dose is administered between 12 and 14 months, at least 8 weeks between dose 1 and dose 2 and dose three is canceled; if first dose is administered at or after 15 months, only one dose is required\nPoliovirus (90712) four doses: at age 6 weeks, at age 4 months, at age 6 months, 4 years; catch up schedule: at least 4 weeks between dose 1 and dose 2, at least 4 weeks between dose 2 and dose 3, at least 4 weeks between doses 3 and 4, dose 4 is not required if dose 3 was administered at the age of 4 or older\nMeasles, Mumps, Rubella (90707) two doses: at age 12 months, at age 4 years; catch up schedule: at least 4 weeks between dose 1 and dose 2\nVaricella (90396) two doses: at age 12 months, at age 4 years; catch up schedule: at least 3 months between dose 1 and dose 2\nHepatitis A (90633) two doses: at age 12 months; at age 18 months: catch up schedule: at least 6 months between dose 1 and dose 2\nHuman Papillomavirus (90649) Female only, three doses; at age 9 years; at age 9 years + 2 months; at age 9 years + 6 months; catch up schedule: at least two months between dose 1 and dose 2; at least four months between dose 2 and dose 3\n", "dataset": "iTrust", "act": "has not had, has been diagnosed, is diagnosed, over, has not had, has not had, did not begin, is relevant, catch up, at least, catch up, at least, catch up, at least, at least, catch up, at least, at least, if first dose is administered, is canceled, is required, catch up, at least, at least, at least, if first dose is administered, at least, is canceled, is required, catch up, at least, at least, at least, is not required, catch up, at least, catch up, at least, catch up, at least, at least", "obj": "alive patient, office visit, diabetes mellitus, ICD code, 250, asthma, ICD code, 493, circulatory-system disease, ICD code, 390, 459, flu shot, CPT codes, 90656, 90658, 90660, immunization schedule, catch up schedule, Hepatitis B, 90371, dose, Rotavirus, 90681, dose, Diphtheria, Tetanus, Pertussis, 90696, dose, Haemophilus influenzae, 90645, dose, Pneumococcal, 90669, dose, Poliovirus, 90712, dose, Measles, Mumps, Rubella, 90707, dose, Varicella, 90396, dose, Hepatitis A, 90633, dose, Human Papillomavirus, 90649, Female, dose", "pred_steps": "1. HCP selects \"Office Visit Reminders\" option.2. HCP chooses to identify chronic patients in need of an office visit.3. HCP selects older patients who require a flu shot.4. HCP selects any patient who is overdue for an immunization.5. System generates a list of patients for whom the HCP is a designated primary care provider (DLHCP) and who meet the specified criteria.6. The patient information displayed includes each patient's name and home phone number.7. The list of patients is sorted alphabetically by last names, and then first names.", "pred_act": "selects, chooses, selects, selects, generates, is, meet, displayed, includes, is, sorted\n", "pred_obj": "hcp, office visit reminders, chronic patients, office visit, older patients, flu shot, immunization, system, dlhcp, patient information, patient's name, home phone number, last names, first names"}
{"index": 8, "ucName": "Maintain a hospital listing Use Case", "uctext": "An administrator chooses to maintain the hospital listing .(Note: A personnel may be assigned to more than one (UC 2, S1))\n\n", "steps": " The administrator will store (1) hospital Id number for the hospital , (2) up to 30 alphanumeric characters giving the name of the hospital, and (3) an address for the hospital.\n. The system shall enable the administrator to add a new entry for a hospital, or modify the hospital name in an existing entry. Note that the administrator is not allowed through the system interface to delete an existing entry or modify the hospital ID number in an existing entry.\n", "dataset": "iTrust", "act": "\"store, add, modify, delete, modify\"", "obj": "administrator, hospital Id number, hospital, name of the hospital, address for the hospital, system, entry, hospital name, existing entry, interface, delete, modify, hospital ID number", "pred_steps": "Functional steps to implement the use case:1. Log in to the administrator account.2. Navigate to the hospital listing maintenance section.3. Select the option to add a new hospital entry.4. Fill in the required details for the new hospital (e.g., name, address, contact information).5. Save the new hospital entry.6. Optionally, edit existing hospital entries by selecting the edit option next to the respective entry.7. Update the necessary information for the hospital.8. Save the changes made to the hospital entry.9. Optionally, delete existing hospital entries by selecting the delete option next to the respective entry.10. Confirm the deletion action.11. Log out of the administrator account.", "pred_act": "Log in, Navigate, Select, Fill, Save, edit, selecting, Update, Save, delete, selecting, Confirm, Log out\n", "pred_obj": "administrator account, hospital listing maintenance section, hospital, name, address, contact information"}
{"index": 9, "ucName": "View prescription report Use Case", "uctext": "A patient or personal health representative  or LHCP  chooses to view prescription reports . If the LHCP is not one of the patient's DLHCP or the UAP associated with one of their DLHCP, a message is sent to the patient and their personal representative.\n\n", "steps": " The user (patient or personal health representative) can choose to view a list of (1) their own prescriptions or (2) the prescriptions for whom the user is a person health representative by choosing one patient from a a list of these patients. A prescription list is then displayed , sorted by start date (the later date is ranked earlier).\n The user (LHCP) selects a patient from the list of requested reports. At this point, the LHCP can view a prescription list for that patient , sorted by start date (the later date is ranked earlier).\n The prescription report is titled with the patient name. The prescription list includes medication, date prescribed, start date, end date for each prescription, and the name of the doctor who prescribed the medication.\n", "dataset": "iTrust", "act": "\"choose, view, display, select, view, title, include\"", "obj": "user, patient, personal health representative, prescriptions, prescription list, start date, LHCP, list of requested reports, prescription report, patient name, medication, date prescribed, end date, doctor", "pred_steps": "1. Verify if the user is a patient, personal health representative, or LHCP.2. Check if the LHCP is not one of the patient's DLHCP or the UAP associated with one of their DLHCP.3. If the LHCP does not meet the criteria in step 2, send a message to the patient and their personal representative.", "pred_act": "Verify, is, Check, is, meet, send\n", "pred_obj": "patient, personal health representative, lhcp, dlhcp, uap"}
{"index": 10, "ucName": "Create, Disable, and Edit Personnel Use Case", "uctext": "An admin creates a LHCP, an ER, a Laboratory Technician (LT), or a public health agent (PHA) . A LHCP creates UAPs . Once entered, the admin or LHCP is presented a detailed confirmation screen to approve .\n\n", "steps": " An administrator enters a LHCP, ER, or public health agent as a user of iTrust Medical Records system, initially only the name and email are provided. A secret key is personally provided to the user, with which the user can reset his/her password. The admin must specify a specialty for a new LHCP (one of: General Physician, Heart Surgeon, OB/GYN, Pediatrician, Surgeon) and for a new LT (one of blood, tissue, or general). The data for personnel can be edited according to Data Format 6.2 (all fields mandatory except for associated MID and Street Address 2). The administrator shall be allowed to assign a LHCP to multiple hospitals, and the administrator can choose among only the hospitals provided in the hospital list pull down menu. The hospital ID numbers for a LHCP are stored in the Medical Care Personnel Affiliation database (data format 6.8). The administrator shall be allowed to assign a LT to a single hospital, and the administrator can choose among only the hospitals provided in the hospital list pull down menu. The hospital ID numbers for a LT are stored in the Medical Care Personnel Affiliation database (data format 6.11).\n A LHCP enters an UAP as a user of iTrust Medical Records system according to data format 6.2 (all fields mandatory) .\n", "dataset": "iTrust", "act": "enters, is provided, can reset, must specify, can be edited, shall be allowed, assign, can choose, are stored, enters", "obj": "administrator, LHCP, ER, public health agent, iTrust Medical Records system, name, email, secret key, password, specialty, General Physician, Heart Surgeon, OB/GYN, Pediatrician, Surgeon, LT, blood, tissue, general, Data Format , 2, personnel, associated MID, Street Address 2, hospital, hospital list pull down menu, hospital ID numbers, Medical Care Personnel Affiliation database, data format , 8, data format , 11, UAP, user, data format , 2", "pred_steps": "1. Admin selects the option to create a user (LHCP, ER, LT, PHA).2. Admin enters the necessary information for the user (name, email, role, etc.).3. Admin saves the user information.4. If the user is LHCP, repeat steps 2 and 3 to create UAPs.5. Once all necessary users and UAPs are created, a confirmation screen is presented to the admin or LHCP.6. Admin or LHCP reviews the detailed confirmation information.7. Admin or LHCP approves the created users and UAPs.8. Process is completed.", "pred_act": "selects enters saves repeat created presented reviews approves completed\n", "pred_obj": "admin, user, lhcp, er, lt, pha, user, lhcp, uaps, users, uaps, admin, lhcp, lhcp, users, uaps"}
{"index": 11, "ucName": "View emergency electronic health record Use Case", "uctext": "A LHCP or ER chooses to view an emergency report and provides an MID . The LHCP/ER is presented with a patient confirmation . The LHCP obtains a printable report (meaning you should minimize the space taken up to provide the information( containing vital information for the patient:\n\nName\nAge\nGender\nEmergency contact (name and phone number)\nAllergies\nBlood type\nA list of all diagnosis codes chronic/long-term diagnoses for the patient and well as all short term diagnoses made within the last 30 days. Display the ICD-9CM code and the name of the diagnoses. Sort by most recent first.\nA list of all prescriptions the patient is likely to be currently taking as determined by the end date of the prescription has passed by 91 days or less. Display the National Drug Code and the name of the prescription. Sort by most recent first.\nA list of all immunizations the patient has had. Display the CPT Code and the name of the immunization. Sort by most recent first.\n", "steps": " The LHCP or ER enters a MID. The LHCP or ER confirms the input .\n", "dataset": "iTrust", "act": "enters, confirms", "obj": "LHCP, ER, MID, input", "pred_steps": "Functional Steps to Implement the Use Case:1. LHCP/ER chooses to view an emergency report.2. LHCP/ER provides an MID (Medical Identification Number).3. System presents a patient confirmation.4. LHCP views and obtains a printable report with minimized space.5. Display the following vital patient information:   - Name   - Age   - Gender   - Emergency contact name and phone number   - Allergies   - Blood type6. Display a list of all diagnosis codes:   - Include chronic/long-term diagnoses for the patient.   - Include short-term diagnoses made within the last 30 days.   - Display ICD-9CM code and name of the diagnoses.   - Sort the list by most recent first.7. Display a list of all current prescriptions:   - Determine by the end date of the prescription passing by 91 days or less.   - Display National Drug Code and name of the prescription.   - Sort the list by most recent first.8. Display a list of all immunizations:   - Display the CPT Code and name of the immunization.   - Sort the list by most recent first.", "pred_act": "chooses, view, provides, presents, views, obtains, minimized, Display, Display, Include, Include, Display, Sort, Display, Determine, passing, Display, Sort, Display, Display, Sort\n", "pred_obj": "functional steps, use case, lhcp/er, emergency report, mid (medical identification number), system, patient confirmation, printable report, minimized space, vital patient information, name, age, gender, emergency contact name and phone number, allergies, blood type, diagnosis codes, chronic/long-term diagnoses, short-term diagnoses, within the last 30 days, icd-9cm code, name of the diagnoses, current prescriptions, end date, prescription, passing by 91 days or less, national drug code, name of the prescription, immunizations, cpt code, name of the immunization"}
{"index": 12, "ucName": "View Comprehensive Patient Report Use Case", "uctext": "The LHCP requests a comprehensive patient report for a particular patient . The LHCP is able to view the comprehensive patient report  from a list of his/her previous requests .\n\n", "steps": " The LHCP enters a patient medical identification number (MID)  and confirms his/her input .\n The LHCP can view the comprehensive patient report for the specified patient, which includes the information below.\nAll patient demographic information (address, phone, etc.), see (UC4) and Data Format 6.1\nThe entire history of personal health records, see (UC10) and Data Format 6.4\nAll diagnoses, including those not normally viewable by the requesting LHCP, see (UC11) and Data Format 6.5\nAll designated HCPs (MIDs and Names), see (UC6)\nAll allergies, procedures, medications, office visits, and known relatives, see (UC11) and Data Format 6.5, 6.6\nAll MIDs and names of people that this person is representing, see (UC13)\nAll MIDs and names of people that this person is represented by, see (UC13)\n The LHCP views a list of requests he/she has made for reports, with the status and pertinent information about the requests.\n", "dataset": "iTrust", "act": "\"enters, confirms, can view, views\"", "obj": "LHCP, patient medical identification number (MID), comprehensive patient report, patient, patient demographic information (address, phone, etc.), entire history of personal health records, diagnoses, designated HCPs (MIDs and Names), allergies, procedures, medications, office visits, known relatives, MIDs and names of people that this person is representing, MIDs and names of people that this person is represented by, list of requests, status, pertinent information about the requests", "pred_steps": "1. LHCP logs into the system.2. LHCP navigates to the list of previous requests.3. LHCP selects the particular patient request for the comprehensive report.4. System retrieves the comprehensive patient report.5. System displays the comprehensive patient report to the LHCP.", "pred_act": "logs navigates selects retrieves displays\n", "pred_obj": "lhcp, system, comprehensive patient report"}
{"index": 13, "ucName": "Take Satisfaction Survey Use Case", "uctext": "A patient or personal health representative can answer any of the following questions relative to a previous (in UC9, S1) office visit according to Data Format 6.13.\n\nHow many minutes did you wait in the waiting room?\nHow many minutes did you wait in the examination room before seeing your physician?\nHow satisfied were you with your office visit?\nHow satisfied were you with the treatment or information you received?\nThe answers to the survey are stored.\n\n", "steps": "A patient or personal health representative can answer any of the following questions relative to a previous (in UC9, S1) office visit according to Data Format 6.13.\\n\\nHow many minutes did you wait in the waiting room?\\nHow many minutes did you wait in the examination room before seeing your physician?\\nHow satisfied were you with your office visit?\\nHow satisfied were you with the treatment or information you received?\\nThe answers to the survey are stored.", "dataset": "iTrust", "act": "\"answer, store\"", "obj": "patient, personal health representative, questions, previous office visit, Data Format , 13, waiting room, examination room, physician, office visit, treatment, information, survey, answers", "pred_steps": "1. Display the list of questions about the previous office visit to the patient or personal health representative.2. Wait for the response from the user.3. Store the answer to the question \"How many minutes did you wait in the waiting room?\" in Data Format 6.13.4. Store the answer to the question \"How many minutes did you wait in the examination room before seeing your physician?\" in Data Format 6.13.5. Store the answer to the question \"How satisfied were you with your office visit?\" in Data Format 6.13.6. Store the answer to the question \"How satisfied were you with the treatment or information you received?\" in Data Format 6.13.7. End the use case.", "pred_act": "Display Wait Store Store Store Store End\n", "pred_obj": "list of questions, patient, personal health representative, response, user, answer, question, data format 6.13, physician, office visit, use case"}
{"index": 14, "ucName": "View Physician Satisfaction Survey Results Use Case", "uctext": "A user chooses to view physician satisfaction survey results. The user provides a zip code  or a hospital code and an (optional) physician type (from a pull-down list: see data format 6.2 - general, surgeon, heart specialist, pediatrician, OB/GYN). The patient is provided with the following for each physician of that type that practices in a zip code (based upon the address/zipcode provided in UC2) that match the first three digits of the provided zip code:\n\nName\nAddress\nAverage number of minutes patients wait in waiting room\nAverage number of minutes patients wait in examination room prior to seeing physician\nAverage office visit satisfaction\nAverage satisfaction with treatment/information\nPercentage of office visits for which satisfaction information is available\n", "steps": "A user chooses to view physician satisfaction survey results. The user provides a zip code  or a hospital code and an (optional) physician type (from a pull-down list: see data format 6.2 - general, surgeon, heart specialist, pediatrician, OB/GYN). The patient is provided with the following for each physician of that type that practices in a zip code (based upon the address/zipcode provided in UC2) that match the first three digits of the provided zip code:\\n\\nName\\nAddress\\nAverage number of minutes patients wait in waiting room\\nAverage number of minutes patients wait in examination room prior to seeing physician\\nAverage office visit satisfaction\\nAverage satisfaction with treatment/information\\nPercentage of office visits for which satisfaction information is available.", "dataset": "iTrust", "act": "\"chooses, views, provides, is provided with\"", "obj": "user, physician satisfaction survey results, zip code, hospital code, physician type, general, surgeon, heart specialist, pediatrician, OB/GYN, patient, physician, address, Name, Average number of minutes patients wait in waiting room, Average number of minutes patients wait in examination room prior to seeing physician, Average office visit satisfaction, Average satisfaction with treatment/information, Percentage of office visits for which satisfaction information is available", "pred_steps": "1. User selects the \"View Physician Satisfaction Survey Results\" option.2. User enters either a zip code or a hospital code.3. User selects an optional physician type from the pull-down list.4. System validates the zip code or hospital code entered by the user.5. System validates the optional physician type selected by the user.6. System retrieves the address/zipcode information from UC2.7. System matches the first three digits of the provided zip code with the zip codes in the database.8. System filters physicians based on the provided physician type and matched zip code.9. System retrieves the following information for each physician that matches the filters:    a) Name    b) Address    c) Average waiting time in the waiting room    d) Average waiting time in the examination room prior to seeing the physician    e) Average office visit satisfaction    f) Average satisfaction with treatment/information    g) Percentage of office visits for which satisfaction information is available.10. System displays the retrieved information to the user for each matching physician.11. User can choose to view more details or perform another action.", "pred_act": "selects, enters, selects, validates, validates, retrieves, matches, filters, retrieves, displays, choose, perform\n", "pred_obj": "user, view physician satisfaction survey results option, zip code, hospital code, physician type, pull-down list, system, uc2, database, physician, address, zipcode information, percentage of office visits, satisfaction information"}
{"index": 15, "ucName": "Manage Lab Procedures Use Case", "uctext": "An HCP can create a lab procedure for a given office visit . An HCP can view a previously created lab procedure for a given office visit . An HCP can reassign a previously created lab procedure . An HCP can remove a previously created lab procedure . An HCP can add commentary to a pending lab procedure and update the lab procedure status to completed . A patient may view his or her own lab procedure results . A Lab Technician can view his or her priority queue of lab procedures . A Lab Technician can record the results of a lab procedure . A Lab Technician can update the status of a lab procedure as received . All events are logged (UC5).\n\n", "steps": " An HCP can create a lab procedure for a given office visit. The HCP selects a procedure code, a priority from 1 to 3 (1=most important, 3=not as important), and Lab Technician (listed with his/her specialty and the number of pending lab procedures in his/her priority queue, grouped by priority). The HCP saves the new lab procedure, or cancels the lab procedure creation , . The status of the lab procedure is marked as in transit.\n An HCP can view a previously created lab procedure for a given office visit. The HCP can view patient name, lab procedure code, current lab procedure status, timestamp, and Lab Technician name.\n An HCP can reassign a previously created lab procedure to a different Lab Technician if the lab procedure is not yet in the testing state. The HCP selects a different Lab Technician from the list of available Lab Technicians (displayed with Lab Technician specialty and the number of pending lab procedures in his/her priority queue, grouped by priority). The HCP confirms the reassignment, or cancels the reassignment .\n An HCP can remove a previously created lab procedure for a given office visit. The HCP chooses to remove the lab procedure as long as the status is either in transit or received. The HCP is prompted to confirm that he/she wishes to remove the lab procedure.\n An HCP can add commentary to a pending lab procedure . The HCP enters a comment for a lab procedure with status as pending. Upon entering a comment, the lab procedure status is updated to completed.\n A patient may view his or her own lab procedure. On the associated office visit page, the patient can see the current status of the lab procedure, the HCP name, and the timestamp. If the lab procedure status is marked as completed, the patient can see the results and the HCP-provided comments.\n A Lab Technician can view his or her assigned lab procedures. The Lab Technician sees a list of all lab procedures assigned to him/her that have a status of received, followed by a list of lab procedures that remain in transit. The list of received lab procedures is sorted by priority (from most important to least important), with a secondary sort by timestamp (oldest to newest). The first lab procedure in the received list is marked with a status of testing, and all other lab procedures have a status of received. The list of in transit lab procedures is sorted by timestamp, from oldest to most recent. In both lists, the Lab Technician is provided the lab procedure ID, lab procedure code, status, priority, HCP name, and timestamp.\n A Lab Technician can record the results of a lab procedure . The Lab Technician enters the lab procedure numerical result and confidence interval for the lab procedure with the status of testing. Upon recording the results of the lab procedure, the status is updated to pending.\n A Lab Technician can update the status of a lab procedure to received. In the list of in transit lab procedures , the Lab Technician can update the status to received when the sample has been received in his/her lab.\n", "dataset": "iTrust", "act": "create, selects, saves, cancels, is marked, can view, can reassign, confirms, can remove, chooses, is prompted, can add, enters, can see, can record, enters, can update", "obj": "HCP, lab procedure, office visit, procedure code, priority, Lab Technician, specialty, number of pending lab procedures, priority queue, patient name, current lab procedure status, timestamp, testing state, comment, lab procedure ID, numerical result, confidence interval, sample", "pred_steps": "1. HCP creates a lab procedure for a given office visit.2. HCP views a previously created lab procedure for a given office visit.3. HCP reassigns a previously created lab procedure.4. HCP removes a previously created lab procedure.5. HCP adds commentary to a pending lab procedure and updates the lab procedure status to completed.6. Patient views his or her own lab procedure results.7. Lab Technician views his or her priority queue of lab procedures.8. Lab Technician records the results of a lab procedure.9. Lab Technician updates the status of a lab procedure as received.10. All events logged for UC5.", "pred_act": "creates views reassigns removes adds updates views views records updates logged\n", "pred_obj": "hcp, office visit, lab procedure, patient, lab technician, priority queue, results, uc5"}
{"index": 16, "ucName": "Alert Users by Email Use Case", "uctext": "An email alert is sent out to the iTrust user in the event of a changed password , status change in laboratory procedure , comprehensive report requested and generated. Note to students: the iTrust system does NOT currently support actual email sending, only a “fake” email sending facility. All email notifications should be executed through the fake email utility.\n\n", "steps": " The user has successfully changed his/her password (UC3, S2). An email informing the user of the password change is sent to the user including the MID but not the password.\n The status of a laboratory procedure has been updated (UC26, S3). The patient is notified with the following information: the LOINC number and the updated status.\n", "dataset": "iTrust", "act": "changed, sent, updated, notified", "obj": "user, password, UC3, S2, email, MID, laboratory procedure, UC26, S3, patient, LOINC number, updated status", "pred_steps": "1. Receive notification of a changed password, status change in laboratory procedure, or comprehensive report request.2. Determine the type of notification received (changed password, status change, or report request).3. Generate an email alert message based on the type of notification.4. Use the fake email utility to send the email alert to the iTrust user.5. Include relevant information in the email such as details of the password change, laboratory procedure status change, or comprehensive report request.6. Notify the user that the email alert has been sent successfully.", "pred_act": "Receive, Determine, Generate, Use, send, Include, Notify\n", "pred_obj": "notification, password, status change, laboratory procedure, comprehensive report request, email alert message, email utility, email, itrust user, user"}
{"index": 17, "ucName": "View Patients", "uctext": "The LHCP chooses to view all patients with which he or she has ever had an office visit with. The patient’s name (clickable to view PHR), address, and date of last office visit are displayed. The list is sorted by the date of the last office visit (most recent first).\n\n", "steps": "The LHCP chooses to view all patients with which he or she has ever had an office visit with. The patient’s name (clickable to view PHR), address, and date of last office visit are displayed. The list is sorted by the date of the last office visit (most recent first).", "dataset": "iTrust", "act": "\"chooses, views, displayed, sorted\"", "obj": "LHCP, patients, office visit, patient’s name, PHR, address, date of last office visit, list", "pred_steps": "1. LHCP selects the option to view all patients.2. System retrieves and displays a list of patients that LHCP has had office visits with.3. System displays each patient's name as clickable to view additional details.4. LHCP clicks on a patient's name to view the patient's PHR, address, and the date of the last office visit.5. The system sorts the list of patients by the date of the last office visit, with the most recent visit displayed first.", "pred_act": "selects retrieves displays displays clicks view sorts displayed\n", "pred_obj": "lhcp, system, system, lhcp, system"}
{"index": 18, "ucName": "Find LHCPs with experience with a diagnosis", "uctext": "A patient has just been diagnosed with a condition and wants to find the LHCPs in the area who have handled that condition. The patient chooses 'My Diagnoses” and is presented with a listing of all their own diagnoses, sorted by diagnosis date (more recent first). The patient can select a diagnosis and will be presented with the LHCPs in the patient's living area (based upon the first three numbers of their zip code) who have handled this diagnosis in the last three years. The list is ranked by the quantity of patients the LHCP has treated for that diagnosis (each patient is only counted once regardless of the number of office visits). For each LHCP, the following information is displayed:\n\nName of LHCP linked to contact information for that LHCP\nThe quantity of unique patients treated by that LHCP for that diagnosis (each patient is only counted once regardless of the number of office visits)\nList of all prescriptions given by that LHCP for that diagnosis\nList of all laboratory procedures ordered by that LHCP for that diagnosis\nThe LCHP's average visit satisfaction\nThe LHCP's average treatment satisfaction\n", "steps": "A patient has just been diagnosed with a condition and wants to find the LHCPs in the area who have handled that condition. The patient chooses 'My Diagnoses” and is presented with a listing of all their own diagnoses, sorted by diagnosis date (more recent first). The patient can select a diagnosis and will be presented with the LHCPs in the patient's living area (based upon the first three numbers of their zip code) who have handled this diagnosis in the last three years. The list is ranked by the quantity of patients the LHCP has treated for that diagnosis (each patient is only counted once regardless of the number of office visits). For each LHCP, the following information is displayed:\\n\\nName of LHCP linked to contact information for that LHCP\\nThe quantity of unique patients treated by that LHCP for that diagnosis (each patient is only counted once regardless of the number of office visits)\\nList of all prescriptions given by that LHCP for that diagnosis\\nList of all laboratory procedures ordered by that LHCP for that diagnosis\\nThe LCHP's average visit satisfaction\\nThe LHCP's average treatment satisfaction.", "dataset": "iTrust", "act": "diagnosed, wants to find, chooses, is presented, can select, will be presented, is ranked, is displayed, linked, given, ordered", "obj": "patient, condition, LHCPs, area, 'My Diagnoses', diagnoses, diagnosis date, diagnosis, zip code, last three years, list, quantity of patients, Name of LHCP, contact information, unique patients, prescriptions, laboratory procedures, LCHP's average visit satisfaction, LHCP's average treatment satisfaction", "pred_steps": "1. Patient selects \"My Diagnoses\" option.2. System retrieves and displays a listing of all the patient's diagnoses, sorted by diagnosis date with the most recent first.3. Patient selects a specific diagnosis from the list.4. System retrieves LHCPs in the patient's living area based on the first three numbers of their zip code who have handled the selected diagnosis in the last three years.5. The list of LHCPs is ranked by the quantity of unique patients treated by each LHCP for the selected diagnosis.6. For each LHCP in the list, the system displays:   - Name of LHCP linked to contact information.   - Quantity of unique patients treated by that LHCP for the selected diagnosis.   - List of all prescriptions given by that LHCP for the selected diagnosis.   - List of all laboratory procedures ordered by that LHCP for the selected diagnosis.   - LHCP's average visit satisfaction.   - LHCP's average treatment satisfaction.", "pred_act": "selects retrieves displays sorted selects retrieves ranked displays linked given ordered\n", "pred_obj": "patient, diagnoses, system, lhcps, diagnosis, zip code, patients, lhcp, contact information, prescriptions, laboratory procedures, visit satisfaction, treatment satisfaction"}
{"index": 19, "ucName": "Authenticate Users Use Case", "uctext": "A user enters their MID and their password to gain role-based entry into the iTrust Medical Records system  or requests that their password be changed . A session that has been inactive for more than ten minutes is terminated . Upon successful authentication, the user will be directed to a personalized home page based on their role. An authenticated session ends when the user logs out or closes the iTrust application.\n\n", "steps": " If the security question/answer has been set (it is not null) , present security question and obtain answer.\n If answer to security question is correct, allow user to change their password. An email notification is sent.\n Electronic sessions must terminate after ten minutes of inactivity. Ensure that authentication is reset after a period of inactivity that exceeds ten minutes.\n", "dataset": "iTrust", "act": "\"set, present, obtain, allow, sent, terminate, ensure, reset\"", "obj": "security question, answer, password, email notification, Electronic sessions, inactivity, authentication, ten minutes, period of inactivity", "pred_steps": "1. User enters MID and password.2. System verifies the credentials for authentication.3. If authentication is successful, the system checks the role of the user.4. System directs the user to a personalized home page based on their role.5. System starts a session timer.6. If the session remains inactive for more than ten minutes, the system terminates the session.7. User can request to change the password.8. User logs out or closes the application to end the authenticated session.", "pred_act": "enters verifies is checks directs starts remains terminates request change logs closes end\n", "pred_obj": "mid, password, credentials, authentication, role, personalized home page, session timer, session, password, session"}
{"index": 20, "ucName": "Messaging between LHCP and patient", "uctext": "An LHCP wants to send a message to a patient and/or that patient's personal representative  or a patient or personal representative wants to send a message to one of their DLHCP or that of a person they are representing . LHCPs and patients/representatives may reply to messages. An LHCP or patient/representative may view a message . An LHCP or patient/representative can sort his or her message inbox and message outbox . An LHCP or patient/representative can modify and save his/her message displaying filter  or view his/her message inbox  including only the messages satisfying the specified filtering criteria in the saved filter.\n\n", "steps": " A patient or personal representative for a patient chooses to send a message to an LHCP (no multiple recipients allowed in a single message). The patient/representative is presented with a pull down menu of his/her DLHCP. The patient/representative chooses one of these DLHCP and types the subject (up to 100 characters) and text of a message (up to 1000 characters), and clicks the send button. A row for showing the message subject, the name of the recipient, and the timestamp (which includes both date and time) is then visible in the patient/representative’s message outbox. A bolded row for showing the message subject, the name of sender, and the timestamp is then visible in the LHCP's message inbox. A fake email is sent to the LHCP alerting the user that a new message has arrived. After a message is sent, the patient or personal representative is directed to his/her message outbox.\n An LHCP chooses to send a message to a patient/representative (no multiple recipients allowed in a single message). The LHCP enters and confirms the patient/representative's MID. The LHCP types the subject (up to 100 characters) and the text of a message (up to 1000 characters), and clicks the send button. A row for showing the message subject, the name of the recipient, and the timestamp is then visible in the LHCP’s message outbox. A bolded row for showing the message subject, the name of the sender, and the timestamp is then visible in the patient/representative’s message inbox, and a fake email is sent to the patient/representative that indicates that he/she has a new message from an LHCP. After a message is sent, the LHCP is directed to to his/her message outbox.\n A patient or patient representative wishes to reply to a message. The patient/representative views his or her message inbox. The patient/representative opens the message to which he or she wishes to reply , and then clicks the reply link above the message text. The patient/representative enters the text of the response message (up to 1000 characters) he or she wishes to send, then clicks the send button. A row for showing the message subject (now preceded by “RE:”), the name of the recipient, and the timestamp is then visible in the patient/representative’s message outbox. A bolded row for showing the message subject (now preceded by “RE:”), the name of the sender, and timestamp is then visible in the LHCP’s message inbox. A fake email is sent to the LHCP alerting the LHCP that a new message reply has arrived.\n An LHCP wishes to reply to a message. The LHCP views his or her message inbox. The LHCP opens the message to which he or she wishes to reply , and then clicks the reply link above the message text. The LHCP enters the text of the response message (up to 1000 characters) he or she wishes to send, then clicks the send button. A row for showing the message subject (now preceded by “RE:”), the name of the recipient, and the timestamp are then visible in the LHCP’s message outbox. A bolded row for showing the message subject (now preceded by “RE:”), the name of sender, and timestamp are then visible in the patient/representative’s message inbox. A fake email is sent to the patient/representative alerting the patient/representative that a new message reply has arrived.\n A user (a patient, patient representative, or LHCP) wishes to read a message from the message inbox or outbox. The user chooses to open his or her message inbox/outbox. Each row in the message inbox/outbox includes the message subject, the name of either the sender (only for the case of inbox) or recipient (only for the case of outbox), and timestamp. By default, the messages in the message inbox/outbox should be ordered by timestamp, the most recent first. Each row for an unread message in the message inbox is bolded. The user selects a message from the message inbox/outbox to read by clicking the “Read” link beside the row for the message, and then the message subject, the name of the sender, the name of the the recipient, timestamp, and the message text shall be displayed in a new page. After a message in the message inbox is read (i.e., displayed in a new page), the row for the message in the message inbox is not bolded anymore.\n A user (a patient, patient representative, or LHCP) can sort messages in his or her message inbox by either the sender's last name or timestamp (but not both) in either ascending or descending order (where timestamps in descending order would have the most recent first). A user can sort messages in his or her message outbox by the recipient's last name or timestamp (but not both) in either ascending or descending order. To do so, a user selects one option out of the “Sort by” labeled drop-down box (with options of “Sender/Recipient” or “Timestamp”) and selects one option out of the “by order of” labeled drop-down box (with options of “ascending” or “descending”), and then click the “Sort” button. Note that the sorted order is not saved for later viewing after the message inbox or outbox is reopened again (where the default sorting is always used).\n A user (an LHCP or patient/representative) can modify his/her message displaying filter by modifying the following filtering criteria: (1) the sender (i.e., the sender's name is exactly the same as the specified string), (2) the subject (i.e., the subject is exactly the same as the specified string), (3) has the words (i.e., the subject or the message body has the specified substring), (4) doesn't have (i.e., neither the subject nor the message body has the specified substring), (5) time stamp falling into the period defined by the starting date and ending date (inclusive) (the user interface shall provide both the option of typing in a specific date in the date format and the option of selecting a date from a calendar for the current month). Note that a single filter includes values for these five filtering criteria (rather than five filters for these five filtering criteria) and a value could be an empty string, indicating that this criterion has no impact on filtering (i.e., imposing no constraints related to this criterion). The user interface shall be initially populated with the values of the filtering criteria from the previously saved filter. After the user modifies the criteria, the user chooses to click the “Cancel” button to cancel the modifications of the filter (i.e., repopulate the user interface with the values of the filtering criteria from the previously saved filter), to click the “Test Search” button to search (i.e., displaying the message inbox  including only the messages satisfying the specified filtering criteria), or to click the “Save” button to save the modified filter. Each user is associated with only one filter (being saved across login sessions) and applies only this saved filter. The user's associated filter initially has all empty inputs for the filtering criteria before the user modifies it.\n", "dataset": "iTrust", "act": "chooses, is presented, chooses, types, clicks, is visible, is visible, is sent, is directed, chooses, enters, confirms, types, clicks, is visible, is visible, is sent, is directed, wishes, views, opens, clicks, enters, clicks, is visible, is visible, is sent, wishes, views, opens, clicks, enters, clicks, is visible, is visible, is sent, wishes, chooses, includes, orders, is bolded, selects, displays, is not bolded, can sort, selects, selects, clicks, can modify, provides, be initially populated, modifies, chooses, clicks, clicks, clicks, be associated, applies, has, modifies", "obj": "patient, personal representative, message, LHCP, multiple recipients, pull down menu, DLHCP, subject, text, send button, row, message subject, name of recipient, timestamp, date, time, message outbox, bolded row, name of sender, fake email, MID, response message, message inbox, reply link, \"RE:\", unread message, \"Read\" link, message text, new page, sender's last name, ascending order, descending order, \"Sort by\" labeled drop-down box, \"by order of\" labeled drop-down box, \"Sort\" button, message displaying filter, filtering criteria, sender's name, specified string, subject, message body, specified substring, starting date, ending date, date format, calendar, current month, single filter, user interface, \"Cancel\" button, \"Test Search\" button, \"Save\" button, saved filter, login sessions", "pred_steps": "1. Allow LHCP to compose a message to a patient or patient's representative.2. Allow patient or patient's representative to compose a message to one of their DLHCP or a person they are representing.3. Enable LHCP and patients/representatives to reply to messages.4. Allow LHCP or patient/representative to view a message.5. Enable LHCP or patient/representative to sort their message inbox and message outbox.6. Allow LHCP or patient/representative to modify and save their message display filter.7. Enable LHCP or patient/representative to view their message inbox with a specified filter criteria.", "pred_act": "Allow, compose, Allow, compose, Enable, reply, Allow, view, Enable, sort, Allow, modify, save, Enable, view\n", "pred_obj": "lhcp, patient, patient's representative, dlhcp, person, message, inbox, outbox, filter criteria"}
{"index": 21, "ucName": "Find LHCPs for prescription renewal Use Case", "uctext": "A patient wants to renew the patient's expired prescriptions (i.e., prescriptions' end dates are earlier than the current date) and therefore wants to find the LHCPs who earlier wrote the patient's expired prescriptions (it is assumed that the doctors who wrote prescriptions are all LHCPs so no LHCP checks on the prescription-writing doctors are needed). The patient chooses “My Expired Prescription Reports” and is presented with a list of the patient's expired prescriptions , sorted by start date (the later date is ranked earlier closer to the top). The patient can select to view contact information of a selected LHCP shown in the expired prescription list .\n\n", "steps": " The expired prescription report list is titled with the patient name. The expired prescription list includes medication, date prescribed (i.e., the day of the office visit), start date, end date for each prescription, and the name of the LHCP who prescribed the medication (where the name of the LHCP is linked to contact information for that LHCP). If there are no expired prescriptions, an empty expired prescription list is presented.\n The patient clicks on the name of the LHCP for an expired prescription, and is presented with the contact information for that LHCP (including First Name Last Name, LHCP Type, Street Address 1, Street Address 2, City, State, Zip Code, Phone, and Contact Email); if any type of contact information is missing or the whole contact information for the LHCP is not available in the database, the corresponding missing types of information are simply shown as blank.\n", "dataset": "iTrust", "act": "\"is titled, includes, is linked, is presented, clicks, is presented, is missing, is not available, are shown\"", "obj": "expired prescription report list, patient name, expired prescription list, medication, date prescribed, day of the office visit, start date, end date, prescription, name of the LHCP, contact information, First Name, Last Name, LHCP Type, Street Address 1, Street Address 2, City, State, Zip Code, Phone, Contact Email", "pred_steps": "1. Click on \"My Expired Prescription Reports\" option.2. View list of expired prescriptions sorted by start date (later date ranked earlier).3. Select a specific LHCP from the list.4. Click on the selected LHCP to view their contact information.", "pred_act": "Click View Select Click view\n", "pred_obj": "my expired prescription reports, expired prescriptions, start date, lhcp, contact information"}
{"index": 22, "ucName": "Proactively Confirm Prescription-Renewal Needs Use Case", "uctext": "The HCP chooses “Potential Prescription-Renewals” and is presented with a list of patients  that satisfy ALL of the three conditions: (1) patients for whom the HCP is a DLHCP, (2) special-diagnosis-history patients , (3) patients whose prescriptions will expire within 7 days (including the 7th day) from the current date (i.e., (currentDate < = expiredDate < = (currentDate + 7 days)).\n\n", "steps": " A chronic special-diagnosis-history patient is an alive patient who has been diagnosed with at least one of the following:\ndiabetes mellitus (is diagnosed with ICD code beginning with 250:http://icd9cm.chrisendres.com/icd9cm/index.php?action=child&recordid=1894 (,\nasthma (is diagnosed with ICD code beginning with 493:http://icd9cm.chrisendres.com/icd9cm/index.php?action=child&recordid=5000 (, or\ncirculatory-system disease (is diagnosed with an ICD code between 390 and 459 inclusive: http://icd9cm.chrisendres.com/icd9cm/index.php?action=child&recordid=4314 (.\n The patient list is titled with the HCP's name. The patient list includes the patient's name (i.e., first name and last name), phone number, and contact email address  (so that confirmation calls or emails can be made or sent outside of the iTrust system). The list is sorted based on the ascending alphabetical order of the patients' last names, and then first names. When a chronic special-diagnosis-history patient satisfies all three conditions and has multiple prescriptions satisfying the third condition, the patient is listed in the list only once. The list is a static list with no link on the patient's name, phone number, or contact email address)\n", "dataset": "iTrust", "act": "is, is diagnosed with, is titled, includes, can be made, can be sent, is sorted, satisfies, is listed, has", "obj": "chronic special-diagnosis-history patient, alive patient, diabetes mellitus, ICD code, 250, asthma, 493, circulatory-system disease, ICD code, 390, 459, HCP's name, patient's name, first name, last name, phone number, contact email address, iTrust system, conditions, prescriptions, list, patient, static list", "pred_steps": "1. HCP selects the \"Potential Prescription-Renewals\" option.2. System retrieves the list of patients for whom the HCP is designated as a DLHCP.3. System filters out patients who have a special diagnosis history.4. System further filters the list to include only patients whose prescriptions will expire within the next 7 days, including the 7th day from the current date (currentDate <= expiredDate <= currentDate + 7 days).5. System presents the HCP with the final list of patients who satisfy all three conditions.", "pred_act": "selects retrieves filters filters include presents satisfy\n", "pred_obj": "hcp, potential prescription-renewals, system, list of patients, dlhcp, patients, special diagnosis history, prescriptions, currentdate, expireddate, currentdate + 7 days, final list of patients"}
{"index": 23, "ucName": "Manage Patient Referrals Use Case", "uctext": "A sending HCP refers a patient to another receiving HCP . A receiving HCP views a list of received referrals . A sending HCP views a list of previously sent patient referrals . A patient views the details of his/her referrals . A sending HCP edits a previously sent patient referral . A sending HCP cancels a previously sent patient referral . All events are logged (UC5).\n\n", "steps": " An HCP chooses to refer a patient to another receiving HCP through the referral feature on a patient's office visit page (UC11). The sending HCP must select a receiving HCP by either entering the HCP's MID and confirming the selection , or by searching for the HCP by name. The sending HCP is also presented with a text box to include notes about the referral. The sending HCP then chooses a priority from 1-3 (1 is most important, 3 is least important) for the referral. The HCP may send the referral, cancel the referral, or edit the referral . Upon sending a referral, the patient, sending HCP, and receiving HCP receive a message summarizing the newly created referral information (sending HCP name & specialty, receiving HCP name & specialty, patient name, referral notes, and referral creation timestamp); additionally, the sending and receiving HCP messages include the referral priority.\n An HCP chooses to view received referrals. The receiving HCP is presented with a list of referrals sorted by priority (from most important to least important). The receiving HCP then selects a referral to view details and is presented with the name and specialty of the sending HCP, the patient's name, the referral notes, the referral priority, the office visit date with a link to the office visit, and the time the referral was created.\n A sending HCP views a list of previously sent patient referrals. The HCP may sort the list of referrals by patient name, receiving HCP name, time generated, and/or priority. The HCP chooses a specific referral from the list to view complete details about the referral: patient name, receiving HCP name and specialty, time generated, priority, office visit date, and notes.\n A patient views a list of his/her referrals. The patient may sort the list of referrals by receiving HCP name, time generated, and/or priority. The patient chooses a specific referral from the list to view complete details about the referral: sending HCP name and specialty, receiving HCP name and specialty, time generated, priority, office visit date, and notes. The patient is also provided with the option to send a message to the receiving HCP to request that an appointment be scheduled.\n A sending HCP edits a previously created patient referral as long as the referral has not been viewed by the receiving HCP. The sending HCP may edit the priority of the referral and/or the referral notes. The sending HCP then chooses to save the edits, cancel the edits, or re-enter the data .\n A sending HCP cancels a previously sent patient referral by visiting the office visit page, viewing the details of a previously sent patient referral , and choosing cancel. The HCP is asked to confirm the decision to cancel the referral. The patient and receiving HCP receive a message (UC30) indicating that the referral was canceled.\n", "dataset": "iTrust", "act": "choose to refer, must select, enter, confirm, search, present, include, choose, may send, cancel, edit, receive, view, sort, select to view, provide, send, edit, save, re-enter, visit, view details, ask, confirm, indicate", "obj": "HCP, patient, referral feature, patient's office visit page, sending HCP, receiving HCP, HCP's MID, text box, referral, notes, priority, message, referral information, sending HCP name, sending HCP specialty, receiving HCP name, receiving HCP specialty, patient name, referral notes, referral creation timestamp, referrals, list of referrals, referral details, office visit date, link to the office visit, time the referral was created, previously sent patient referrals, specific referral, time generated, appointment, previously created patient referral, edits, office visit page, decision, UC11, UC30", "pred_steps": "1. Sending HCP refers a patient to a receiving HCP.2. Receiving HCP views a list of received referrals.3. Sending HCP views a list of previously sent patient referrals.4. Patient views the details of his/her referrals.5. Sending HCP edits a previously sent patient referral.6. Sending HCP cancels a previously sent patient referral.7. Log all events as per UC5.", "pred_act": "Sending, refers, receiving, views, sending, views, patient, views, sending, edits, sending, cancels, log\n", "pred_obj": "sending hcp, receiving hcp, patient"}
{"index": 24, "ucName": "Report Telemedicine Monitoring Details Use Case", "uctext": "An LHCP or UAP creates a list of patients by adding and confirming patients (by MID) for which he or she will monitor remotely. A patient either chooses to input his or her physiologic measurements (blood pressure and/or glucose levels) , or to input his or her weight, height, and/or pedometer readings . An LHCP can see the blood pressure and glucose levels , or weight, height, and pedometer readings  for the patients he or she is monitoring, with two separate lists for physiologic and height/weight/pedometer readings . A UAP or patient representative can input the blood pressure, glucose levels, height, weight, or pedometer readings for a patient. A patient may have up to 10 physiologic data points in any one day, reported by him/herself, a UAP, or a personal representative . A patient may have at most one height data point, one weight data point, and one pedometer data point in any one day, reported by him/herself, a UAP, or a personal representative.\n", "steps": " An LHCP or UAP can add and delete patients from his or her monitoring list. A patient is added to the list by the LHCP or UAP typing in the patient's MID  or name. An LHCP can delete a patient from his or her monitoring list by the LHCP typing the the patient's MID . In both cases, the LHCP is presented the name of the patient and must confirm the add/delete. For each patient from the monitoring list, the LHCP can choose to edit which types of remote monitoring information (blood pressure, glucose levels, height, weight, and pedometer readings) should be submitted by the patient. By default, all types of information are selected for monitoring.\n A patient whose at least one physiologic data type is specified to be under monitoring chooses to report their physiologic data. He or she can report his or her blood pressure (systolic and diastolic)  and/or glucose levels . The input data, a timestamp, and the fact that the status is “self-reported” are saved.\n An LHCP chooses to view the physiologic data monitoring details. The LHCP is presented with a listing of all his or her patients whose at least one physiologic data type is specified to be under monitoring with their blood pressure and glucose levels, recording timestamp, and whom reported the data (patient, UAP name, personal representative name). Patients with no information for the current day are highlighted. Patients with blood pressure or glucose level out of range are highlighted (normal blood pressure: systolic 90-140; diastolic 60-90; normal glucose 70-150). The LHCP can select a patient to obtain additional information about a patient .\n An LHCP selects to view additional information for a patient. The LHCP is presented with a screen upon which he/she can choose a date range. Once the date range is selected, the LHCP can see the patient name; patient phone number; personal representative (name and phone number), if applicable; and the blood pressure, glucose levels, height, weight, and pedometer readings as well as whom reported the data (patient, UAP name, personal representative name) for that date range.\n A UAP can select to report physiologic measurements. He/she is presented with a list of the patients whose at least one physiologic data type is specified to be under monitoring and for whom he/she is allowed to report measurements. He or she can select a patient and then enter data. He or she can report the blood pressure (systolic and diastolic)  and/or glucose levels  for the patient. The input data, a timestamp, and the fact the the status was reported by “case manager” and their MID are saved. Only the applicable input entries (those whose corresponding data types of the patient are specified to be under monitoring) are displayed to the UAP.\n A patient can select to report physiologic measurements for those whose at least one physiologic data type is specified to be under monitoring andfor whom he/she is a patient representative. He/she is presented with a list of the patients whose at least one physiologic data type is specified to be under monitoring and for which he/she is allowed to report measurements. He or she can select a patient and then enter data. He or she can report the blood pressure (systolic and diastolic)  and/or glucose levels  for the patient. The input data and a timestamp and the fact that the status was reported by “patient representative” and their MID are saved. Only the applicable input entries (those whose corresponding data types of the patient are specified to be under monitoring) are displayed to the patient.\n A patient whose height, weight, or pedometer data type is specified to be under monitoring chooses to report his/her height/weight/pedometer data. He or she can report his or her daily height (in the format of digits XXXX.X with the units of “feet”), daily weight (in the format of digits XXXX.X with units of “lbs”), and/or pedometer readings (in the format of up to 10 digits of integer with units of “footsteps”). The input data, a timestamp, and the fact that the status is “self-reported” are saved. Only the applicable input entries (those whose corresponding data types of the patient are specified to be under monitoring) are displayed to the patient.\n An LHCP chooses to view the height/weight/pedometer data monitoring details. The LHCP is presented with a listing of all his or her patients whose height, weight, or pedometer data type is specified to be under monitoring with their height, weight and pedometer reading numbers, recording timestamp, and who reported the data (patient name, UAP name, or personal representative name). Patients with no information for the current day are highlighted in red. Patients with a weight value 5% more or less than the immediate previously recorded weight value are highlighted (if the new weight value exceeds 105% of the previous weight value, the entry should be highlighted yellow; if the new weight value is below 95% of the previous weight value, the entry should be highlighted yellow). The LHCP can select a patient to obtain additional information about a patient .\n A UAP can select to report height/weight/pedometer measurements. He/she is presented with a list of the patients whose height, weight, or pedometer data type is specified to be under monitoring and for which he/she is allowed to report measurements. He or she can select a patient and then enter data. He or she can report the height, weight, and/or pedometer reading for the patient. The input data, a timestamp, and the fact that the status was reported by “case manager” and his/her MID are saved. Only the applicable input entries (those whose corresponding data types of the patient are specified to be under monitoring) are displayed to the UAP.\n A patient can select to report height, weight, and/or pedometer readings for those for whom he/she is a patient representative. He/she is presented with a list of the patients for which he/she is allowed to report measurements. He or she can select a patient and then enter data. He or she can report the height, weight, and/or pedometer readings for the patient. The input data, a timestamp, and the fact that the status was reported by “patient representative” and his/her MID are saved. Only the applicable input entries (those whose corresponding data types of the patient are specified to be under monitoring) are displayed to the patient.\n", "dataset": "iTrust", "act": "add, delete, type, confirm, edit, choose, report, save, view, present, highlight, select, enter, obtain, display", "obj": "LHCP, UAP, patients, monitoring list, MID, name, remote monitoring information, blood pressure, glucose levels, height, weight, pedometer readings, physiologic data, timestamp, self-reported, physiologic data monitoring details, date range, patient phone number, personal representative, case manager, patient representative, height/weight/pedometer data, feet, lbs, footsteps, yellow", "pred_steps": "1. LHCP or UAP logs into the system.2. LHCP or UAP navigates to the \"Create Patient List\" section.3. LHCP or UAP adds a patient to the list by entering the MID and confirming the selection.4. Patient selects the option to input physiologic measurements or height/weight/pedometer readings.5. Patient enters the blood pressure and/or glucose levels or weight, height, and/or pedometer readings.6. Physiologic data points are stored for the patient, up to 10 data points in any one day.7. Height, weight, and pedometer readings are stored for the patient, with a limit of one data point each in any one day.8. LHCP navigates to the patient monitoring section.9. LHCP views the separate lists of physiologic data and height/weight/pedometer readings for the patients being monitored.10. UAP or patient representative inputs blood pressure, glucose levels, height, weight, or pedometer readings for a patient.11. Data points are recorded for the specified patient by the UAP or patient representative.", "pred_act": "logs, navigates, adds, entering, confirming, selects, input, enters, stored, stored, navigates, views, inputs, recorded\n", "pred_obj": "lhcp, uap, patient, system, create patient list, mid, selection, physiologic measurements, height, weight, pedometer readings, blood pressure, glucose levels, physiologic data points, patient monitoring section, lists, patient representative, data points"}
{"index": 25, "ucName": "Report Adverse Event Use Case", "uctext": "A patient selects to report an event related to a prescription drug  or immunization  reaction.\n\n", "steps": " A patient is presented with a listing of all prescription drugs for which he/she has been prescribed and/or has taken in the last 12 months. The patient chooses one or more drug(s) for which to report the adverse event. The patient is then able to write a textual description which describes the symptoms of the adverse event and to save the information. A fake email is sent to the LHCP who prescribed the medication indicating the patient name and MID, drug, and symptoms.\n A patient is presented with a listing of all immunizations for which he/she has been administered in the last 12 months. The patient chooses the immunization for which to report the adverse event. The patient is then able to write a textual description which describes the symptoms of the adverse event and to save the information. A fake email is sent to the LHCP who administered the immunization indicating the patient name and MID, drug, and symptoms.\n", "dataset": "iTrust", "act": "\"is presented, chooses, is able, write, save, is sent, is presented, chooses, is able, write, save, is sent\"", "obj": "patient, listing, prescription drugs, adverse event, textual description, symptoms, fake email, LHCP, name, MID, drug, immunizations", "pred_steps": "1. Patient selects the option to report an event related to a prescription drug or immunization reaction.2. System prompts the patient to provide details about the event.3. Patient enters information such as the type of reaction, symptoms experienced, date and time of occurrence, severity, and any other relevant details.4. System records the event details provided by the patient.5. System prompts the patient to confirm and submit the report.6. Patient confirms the report and submits it.7. System acknowledges the successful submission of the event report.", "pred_act": "selects prompts provide enters experienced occurred records provided prompts confirm submit confirms submits acknowledges\n", "pred_obj": "patient, event, option, prescription drug, immunization reaction, system, details, type of reaction, symptoms, date, time, severity, report, submission, acknowledgment"}
{"index": 26, "ucName": "Monitor Adverse Event Use Case", "uctext": "A public health agent (PHA) selects a specific time period for which he/she would like to see a detailed listing of all adverse events related to prescription drugs  or immunizations  or to see trends in adverse events related to prescription drugs  or immunizations .\n\n", "steps": " A public health agent is presented with a listing of prescription drug-related adverse events for the time period that do not have a status of “removed”, sorted by NDC. The public health agent can select to see the detail of a specific report. Upon reading the report, the public health agent can choose to send a “fake email” message to the adverse event reporter to gain more information about the report. The public health agent may also choose to remove an adverse event report (such as based upon communication with the reporter or because the report appears to be bogus) .\n A public health agent is presented with a listing of immunization-related adverse events for the time period that do not have a status of “removed”, sorted by CPT code . The public health agent can select to see the detail of a specific report. Upon reading the report, the public health agent can choose to send a “fake email” message to the adverse event reporter to gain more information about the report. The public health agent may also choose to remove an adverse event report (such as based upon communication with the reporter or because the report appears to be bogus) .\n The adverse event report changes to a status of “removed.” A message of the removal is sent to the adverse event reporter and to the LHCP involved in the report (because the LHCP prescribed the drug or administered the immunization).\n", "dataset": "iTrust", "act": "\"is presented, can select, can choose to send, may also choose to remove, changes, is sent\"", "obj": "public health agent, prescription drug-related adverse events, time period, status, removed, NDC, detail, report, fake email, adverse event reporter, immunization-related adverse events, CPT code, adverse event report, LHCP, drug, immunization, message, removal", "pred_steps": "1. PHA logs into the system.2. PHA navigates to the adverse events section.3. PHA selects the option to view adverse events related to prescription drugs or immunizations.4. PHA selects the specific time period for which to view the adverse events.5. System retrieves and displays a detailed listing of adverse events related to prescription drugs or immunizations for the selected time period.6. If PHA chooses to see trends, PHA selects the option to view trends in adverse events related to prescription drugs or immunizations.7. System generates and displays trends in adverse events related to prescription drugs or immunizations based on the selected time period.8. PHA logs out of the system.", "pred_act": "logs, navigates, selects, selects, retrieves, displays, chooses, selects, generates, displays, logs\n", "pred_obj": "pha, system, adverse events, option, prescription drugs, immunizations, time period, listing, trends"}
{"index": 27, "ucName": "Safe Drug Prescription Use Case", "uctext": "While documenting an office visit, the HCP selects to prescribe a patient a drug by selecting its NDC and name. Upon notice of allergies and/or interactions the HCP must either choose to proceed with the prescription  or cancel the prescription and remain on the office visit page. The administrator maintains the override reasons that an HCP can select from .\n\n", "steps": " The drug desired to be prescribed is checked against the patient's drug allergies. The HCP is notified of drug allergy.\n The drug desired to be prescribed is checked for interactions between other drugs currently taken by the patient. The HCP is notified of possible interactions.\n The HCP selects one or more of the override reasons available for selection . The patient is sent a “fake email” that the HCP has prescribed a medication that he/she is allergic to or that has a known interaction with a drug he/she is taking.\n The system shall enable the administrator to add a new entry for a reason or modify the reason name in an existing entry . Note that the administrator is not allowed through the system interface to delete an existing entry or modify the reason ID number in an existing entry.\n The system shall store (1) reason id number for the reason ; and (2) up to 80 alphanumeric characters giving the name of the reason .\n", "dataset": "iTrust", "act": "checked, notified, checked, notified, selects, sent, enable, add, modify, allowed, delete, modify, store, give", "obj": "drug, patient, drug allergies, HCP, interactions, override reasons, fake email, medication, system, administrator, entry, reason, reason name, existing entry, reason ID number, alphanumeric characters", "pred_steps": "1. HCP opens the software interface for documenting an office visit.2. HCP navigates to the medication prescribing section.3. HCP selects the option to prescribe a drug.4. HCP is presented with a list of drugs containing their NDC and name.5. HCP selects a drug by choosing its NDC and name from the list.6. System checks for any allergies and interactions related to the selected drug.7. If no allergies or interactions are found, proceed to step 9.8. If allergies or interactions are found, system displays a notice to the HCP.9. HCP is provided with the option to proceed with the prescription or cancel.10. If HCP chooses to proceed, the system completes the prescription.11. If HCP chooses to cancel, the system remains on the office visit page.12. Administrator maintains the override reasons for HCPs to select from.", "pred_act": "opens, navigates, selects, is, selects, choosing, checks, are, proceed, are, found, displays, is, provided, proceed, cancel, chooses, proceed, completes, chooses, cancel, remains, maintains, select\n", "pred_obj": "hcp, software interface, office visit, medication prescribing section, drug, list, ndc, name, system, allergies, interactions, notice, administrator, override reasons"}
{"index": 28, "ucName": "Maintain Drug Interaction Use Case", "uctext": "The administrator records  or deletes  a drug interaction between two prescription drugs.\n\n", "steps": " The administer is presented with two lists of NDC codes/names. The administrator chooses a drug from each list to record an interaction between the two drugs . The two drugs and a textual description of the possible effects of the interaction are stored.\n The administrator selects one drug and is presented with a listing of all drug interactions currently associated with that drug. The administrator can select a particular pair of drugs and delete the interaction between the two drugs.\n", "dataset": "iTrust", "act": "\"presented, chooses, record, stored, selects, presented, can select, delete\"", "obj": "administer, lists, NDC codes/names, administrator, drug, interaction, two drugs, textual description, possible effects, one drug, listing, drug interactions, particular pair of drugs", "pred_steps": "Functional Steps:1. Log in to the system as an administrator.2. Navigate to the drug interaction management section.3. Select the option to record a new drug interaction.4. Enter the details of the first prescription drug.5. Enter the details of the second prescription drug.6. Add relevant information about the drug interaction.7. Save the recorded drug interaction.8. Optionally, navigate to the drug interaction management section.9. Select the option to delete a drug interaction.10. Search for the drug interaction to be deleted.11. Confirm the deletion action.12. Verify that the drug interaction has been successfully deleted.13. Logout from the system.", "pred_act": "Log in, Navigate, Select, Enter, Enter, Add, Save, navigate, Select, Search, Confirm, Verify, Logout\n", "pred_obj": "functional steps, log in, the system, an administrator, the drug interaction management section, the option, a new drug interaction, the details, the first prescription drug, the second prescription drug, relevant information, save, the recorded drug interaction, the drug interaction management section, the option, a drug interaction, the drug interaction, the deletion action, the drug interaction, logout"}
{"index": 29, "ucName": "Enter/edit Demographics Use Case", "uctext": "Demographic information is entered and/or edited. The user is presented with a success or failure message and the form is updated so that the user may correct the form or add more information.\n\n", "steps": " A patient or personal health representative may enter or edit their own demographic information including their security question/answer according to data format 6.1. When answer to the security question is typed in, the answer should not appear on the screen (similar to how a password normally appears) and the answer should be confirmed (by the patient or personal health representative) before it is saved. .\n HCP must enter the MID of a patient and then enter or edit demographic information with the exception of the patient's security question/password according to data format 6.1 .\n An HCP may enter or edit their own demographic information according to data format 6.2 .\n An HCP may upload a photo of the patient as part of the patient's demographic records .\n", "dataset": "iTrust", "act": "enter, edit, type in, appear, confirm, save, must enter, enter, edit, may enter, edit, may upload", "obj": "patient, personal health representative, demographic information, security question/answer, data format , 1, answer, screen, password, HCP, MID, patient's security question/password, data format , 2, photo, demographic records", "pred_steps": "1. Display the form for entering/editing demographic information.2. User enters or edits the demographic information.3. Validate the entered information.4. If validation fails, display a failure message.5. Highlight the fields with validation errors.6. Allow the user to correct the information in the highlighted fields.7. If validation succeeds, update the form with the entered/edited information.8. Display a success message.9. Provide an option for the user to add more information if needed.", "pred_act": "Display, entering, editing, enters, edits, Validate, fails, display, Highlight, Allow, correct, succeeds, update, Display, Provide, add\n", "pred_obj": "form, demographic information, user, failure message, fields, success message, option"}
{"index": 30, "ucName": "Log Transaction Use Case", "uctext": "Any event which creates, views, edits, or deletes information is logged . Login failures, valid authentication, and log outs are also logged . Individual audit codes related to specific use cases are presented within each Use Case description.\n\nNote: The subflow and transaction values are based on Use Case. For example, any in the range of 100-199 are for use case one, any in the range of 200-299 are in use case two. The values from range 1-99 are logging events which do not exist in any use case. Miscellaneous transaction codes 1-99 are presented in 5.5 below.\n\n", "steps": " For Login Failures, the IP Address of the machine, transaction type = 1, and timestamp are recorded.\n For creating, viewing, modifying, or deleting information, the following information is recorded: the MID of the logged in user, any appropriate secondary MID of the user whose information is being accessed, a transaction type corresponding to the given action, and the current timestamp.\n", "dataset": "iTrust", "act": "recorded, recorded, creating, viewing, modifying, deleting, is accessed, output", "obj": "Login Failures, IP Address, machine, transaction type, timestamp, creating, viewing, modifying, deleting, MID, logged in user, secondary MID, user, action, current timestamp", "pred_steps": "1. Create a log entry for the event of creating information (Transaction Code: 100). 2. Create a log entry for the event of viewing information (Transaction Code: 101).3. Create a log entry for the event of editing information (Transaction Code: 102).4. Create a log entry for the event of deleting information (Transaction Code: 103).5. Create a log entry for a login failure event (Transaction Code: 1).6. Create a log entry for a successful authentication event (Transaction Code: 2).7. Create a log entry for a log out event (Transaction Code: 3).", "pred_act": "Create Create Create Create Create Create Create\n", "pred_obj": "event"}
{"index": 31, "ucName": "View HCP; Designate/Undesignate Designated Licensed Health Care Professional Use Case", "uctext": "The patient chooses to view all LHCPs the patient has ever had an office visit with and those whom he/she had designated. The patient can also add a LHCP to their provider list by searching for the name and/or specialty of a LHCP  and then selecting to add the HCP to their list of providers.\n\n", "steps": " The LHCP's name, specialty, address, date of office visit, and whether or not the LHCP is a DLHCP for this patient is indicated. The list is sorted by the date of the last office visit (most recent first).\n The patient can choose to toggle between designating/undesignating any LHCP as being a DLHCP for them.\n The patient types a last name or partial last name, and/or providing the specialty. The patient may optionally enter a zip code (match on first three numbers of zip code), in addition to the name and/or specialty. The LHCP's name, specialty, and address are provided.\n", "dataset": "iTrust", "act": "indicated, sorted, choose, toggle, designating, undesignating, types, providing, enter, provided", "obj": "LHCP, name, specialty, address, date of office visit, DLHCP, patient, list, date of the last office visit, last name, partial last name, zip code", "pred_steps": "1. Display a list of LHCPs the patient has ever had an office visit with.2. Display a list of LHCPs the patient has designated.3. Provide a search functionality for the patient to search for LHCPs by name and/or specialty.4. Display search results based on the entered name and/or specialty.5. Allow the patient to select a LHCP from the search results.6. Provide an option for the patient to add the selected LHCP to their list of providers.", "pred_act": "Display,Display,Provide,search,search,Display,Allow,select,Provide,add\n", "pred_obj": "lhcp, patient, office visit, name, specialty, search results, providers"}
{"index": 32, "ucName": "View Access Log Use Case", "uctext": "The patient chooses to view his or her access log or that for a person for whom they are a personal health representative. The patient then chooses the beginning and end date for the period of time they would like to view their access log for. The resulting list should include the following for each access:\n\nName of non-DLHCP accessor (with a link to contact information if the viewer is an LHCP)\nRole of non-DLHCP accessor relative to the patient\nDate and time of access\nTransaction Type (See Data Format 6.3)\n", "steps": " By default, the patient is presented with a list sorted by dates, most recent access first.\n The patient may choose to view the list sorted by the role of the accessor relative to the patient (personal health representative, LHCP, UAP, Emergency Responder; any order is fine as long as the list is sorted by role) as well as by date for each role type, most recent access first.\n", "dataset": "iTrust", "act": "\"is presented, may choose to view\"", "obj": "patient, list, dates, access, role, accessor, personal health representative, LHCP, UAP, Emergency Responder, date, role type", "pred_steps": "1. Display options for the patient to view access log:   - Patient's access log   - Personal health representative's access log2. If patient selects personal health representative's access log, allow them to enter the person's identifier.3. Prompt the patient to select the start date and end date for the access log they want to view.4. Retrieve the access log data based on the selected options.5. Display the following information for each access entry:   - Name of non-DLHCP accessor     - If viewer is an LHCPR, provide a link to contact information   - Role of non-DLHCP accessor relative to the patient   - Date and time of access   - Transaction Type as per Data Format 6.36. Provide options for the patient to navigate through the access log entries.", "pred_act": "Display, view, selects, allow, enter, Prompt, select, want, view, Retrieve, Display, provide, Provide, navigate\n", "pred_obj": "patient, patient's access log, personal health representative's access log, personal health representative's access log, person's identifier, start date, end date, access log, access log data, non-dlhcp accessor, lhcpr, contact information, role of non-dlhcp accessor, patient, date and time of access, transaction type, data format 6.3, patient, access log entries"}
{"index": 33, "ucName": "View records Use Case", "uctext": "A patient or personal health representative chooses to view medical records  including family history .\n\n", "steps": " The patient or personal health representative can see patient personal health information (including historical values), immunizations, and office visit information (date, diagnoses, medication, name of attending physician but not notes, laboratory procedures) for (a) their own records and (b) the records for whom the user is a personal representative. If a patient or personal health representative has not taken an office visit satisfaction survey for an office visit yet, the patient may choose to take the survey for an office visit (if the survey has already been taken, the patient or personal health representative will not have the ability to take the survey or view their previously submitted survey) (UC24).\n The patient or personal health representative can see an abbreviated health history of their siblings, parents, and both sets of grandparents for which MIDs are available in iTrust. They can see diagnoses related to the following (presented as a table with an x if the family member suffered from that diagnosis(:\nhigh blood pressure (Systolic blood pressure over 240 mmHg and/or a diastolic blood pressure over 120 mmHg);\nhigh cholesterol (HDL (“good”) cholesterol levels under 35 mg/dL (milligrams per deciliter) and/or a triglyceride level over 250 mg/dL);\ndiabetes (is diagnosed with ICD-9CM code beginning with 250:http://icd9cm.chrisendres.com/index.php?action=child&recordid=1765,;\ncancer (is diagnosed with ICD-9CM code beginning with 199:http://icd9cm.chrisendres.com/index.php?action=child&recordid=1765,;\nheart disease (is diagnosed with ICD=9CM code beginning with 402:http://icd9cm.chrisendres.com/index.php?action=child&recordid=1765,;\nsmoking; and\nthe cause of death if the family member is deceased.\n", "dataset": "iTrust", "act": "\"can see, can choose to take, can see, suffered from, is diagnosed with\"", "obj": "patient, personal health representative, patient personal health information, historical values, immunizations, office visit information, date, diagnoses, medication, name of attending physician, notes, laboratory procedures, records, office visit satisfaction survey, abbreviated health history, siblings, parents, grandparents, MIDs, iTrust, high blood pressure, Systolic blood pressure, diastolic blood pressure, high cholesterol, HDL cholesterol levels, triglyceride level, diabetes, ICD-9CM code, cancer, heart disease, smoking, cause of death", "pred_steps": "1. User logs into the system with valid credentials.2. User navigates to the \"Medical Records\" section.3. User selects the option to view family history.4. System retrieves and displays the family history records associated with the patient.5. User has the option to download or print the family history records if needed.6. User logs out of the system after viewing the family history records.", "pred_act": "logs navigates selects retrieves displays has download print logs\n", "pred_obj": "user, system, valid credentials, medical records, family history, patient, family history records"}
