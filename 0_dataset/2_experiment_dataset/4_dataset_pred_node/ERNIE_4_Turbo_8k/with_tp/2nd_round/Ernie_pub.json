{"index": 0, "ucName": "New Database", "uctext": "It is the first thing a user must do to begin using KeePass. Its main function is the determination of the master password that will unlock the database from now on", "steps": ["User opens KeePass and select New->Database", "User writes his private Master Password and/or selects Key File", "User selects OK", "Master Password confirmation: the user retypes Master Password", "The main database window opens"], "dataset": "keepass", "act": ["opens", "selects", "writes", "selects", "selects", "retypes", "opens"], "obj": ["User", "KeePass", "New", "Database", "User", "Master Password", "Key File", "User", "OK", "Master Password", "user", "Master Password", "main database window"], "pred_steps": "User initiates KeePass, system prompts for creation of new database, user confirms, system requests master password input, user enters master password, system confirms password entry, system creates and secures database with master password, database initialization complete, user proceeds to use KeePass with new database.", "pred_act": ["initiates", "prompts", "confirms", "requests", "enters", "confirms", "creates", "secures", "complete", "proceeds"], "pred_obj": ["User", "KeePass", "system", "new database", "creation", "confirmation", "master password", "input", "password entry", "initialization"], "tp": ["User", "KeePass", "system", "new database", "master password"]}
{"index": 1, "ucName": "Open Database", "uctext": "When choosing to open a database a user is transferred to his documents where he navigates to find the database he wants. When the database is found, the master password is wanted so that the database will be unlocked. Once this is done the user is free to access his data.", "steps": ["User opens KeePass and select Open->Database", "User navigates through his folders", "User selects a database", "User types Master Password", "The main database window opens"], "dataset": "keepass", "act": ["opens", "select", "navigates", "selects", "types", "opens"], "obj": ["User", "KeePass", "Open", "Database", "User", "folders", "User", "database", "User", "Master Password", "main database window"], "pred_steps": "User navigates to documents, searches for desired database, inputs master password to unlock database, accesses data.", "pred_act": ["navigates", "searches", "inputs", "unlocks", "accesses"], "pred_obj": ["User", "documents", "desired database", "master password", "database", "data"], "tp": ["navigates", "unlocks", "User", "desired database", "master password", "database", "data"]}
{"index": 2, "ucName": "Save Database", "uctext": "When a database is opened, the user can access his passwords, organize them into new\ngroups and subgroups, delete and add entries and so much more. But when it is time for the database to close or during his working on the database, he can save the changes made.", "steps": ["User opens KeePass and changes his data", "User selects save database", "Database is saved", "User exits KeePass"], "dataset": "keepass", "act": ["opens", "changes", "selects", "saved", "exits"], "obj": ["User", "KeePass", "data", "User", "save", "database", "Database", "User", "KeePass"], "pred_steps": "Functional steps to implement the use case \"Save Database\": Open database, allow user access to passwords, enable organization of passwords into new groups and subgroups, allow deletion and addition of entries, provide option to save changes made during working on or closing the database.", "pred_act": ["Open", "allow", "enable", "allow", "provide"], "pred_obj": ["Save Database", "database", "user", "passwords", "groups", "subgroups", "entries", "changes"], "tp": ["Save Database", "database", "user"]}
{"index": 3, "ucName": "Print Database", "uctext": "While working on the database, the user has the option to print data from his database. This can be done by selecting print. When this happens, a list of data types that can be printed are shown and the user can select the data to be printed. More specifically fields that can be selected for printing are: Backup entries, which contain entries in the back up group, password groups, group tree, title, username, password, URL, notes, creation time, last access, last modification, expires, icon, UUID and attachment.", "steps": ["User opens KeePass", "User selects print from file menu", "The list of options opens with checked the fields: password groups, title, user name, password, URL, notes", "User selects OK", "Data are print", "User returns on the main window"], "dataset": "keepass", "act": ["opens", "selects", "prints", "opens", "checked", "selects", "print", "returns"], "obj": ["User", "KeePass", "User", "print", "file menu", "list", "options", "fields", "password groups", "title", "user name", "password", "URL", "notes", "User", "OK", "Data", "User", "main window"], "pred_steps": "Functional steps: User accesses database, selects print option, system displays list of printable data types, user selects data types including backup entries, password groups, group tree, title, username, password, URL, notes, creation time, last access, last modification, expires, icon, UUID, and attachment, system processes selection and initiates printing.", "pred_act": ["accesses", "selects", "displays", "selects", "processes", "initiates"], "pred_obj": ["User", "database", "print option", "system", "list of printable data types", "data types", "backup entries", "password groups", "group tree", "title", "username", "password", "URL", "notes", "creation time", "last access", "last modification", "expires", "icon", "UUID", "attachment", "selection", "printing"], "tp": ["selects", "selects", "User", "print option", "password groups", "title", "username", "password", "URL", "notes", "printing"]}
{"index": 4, "ucName": "Search Database", "uctext": "There is the ability to search in the database for usernames, groups, passwords, URLs, notes and titles. This is very useful when the user needs to find out very quickly which password is required in one account or what username he has put on another account. It is not necessary to write in the search field all characters. By writing just one character the database will present all data which contains it or are related with it.", "steps": ["User opens KeePass", "User types a password, user name, URL, word of notes, title or group that exist in the database", "The list of data related to search word are appeared in the main window"], "dataset": "keepass", "act": ["opens", "types", "exist", "appeared"], "obj": ["User", "KeePass", "password", "user", "name", "URL", "word", "notes", "title", "group", "database", "list", "data", "search word", "main window"], "pred_steps": "Functional steps to implement the Search Database use case: Display search field, allow user input of at least one character, query database for usernames, groups, passwords, URLs, notes, and titles containing or related to input, display results to user.", "pred_act": ["Display", "allow", "input", "query", "display"], "pred_obj": ["Search Database", "search field", "user input", "character", "database", "usernames", "groups", "passwords", "URLs", "notes", "titles", "results"], "tp": ["Search Database", "search field", "user input", "database", "groups", "passwords", "URLs", "notes", "titles"]}
{"index": 5, "ucName": "Add Group/Subgroup", "uctext": "There is the ability to organize data into groups and subgroups. The user can create a new group or subgroups into an existing group. When creating a group/subgroup the user must select a name and then he can add entries into it.", "steps": ["User opens KeePass and selects to add new group/subgroup", "User types a name and has the option to select an image", "User selects OK", "The group/subgroup is created", "The access returns to the database main window"], "dataset": "keepass", "act": ["opens", "selects", "types", "has", "select", "selects", "is created", "returns"], "obj": ["User", "KeePass", "group", "subgroup", "User", "name", "image", "User", "OK", "group", "subgroup", "access", "returns", "database", "main window"], "pred_steps": "Functional steps: Display group organization interface, allow user to select create new group or subgroup option, prompt user to enter name for group/subgroup, validate name input, create group/subgroup with entered name, display created group/subgroup, allow user to add entries to group/subgroup, save group/subgroup and entries.", "pred_act": ["Display", "allow", "prompt", "validate", "create", "display", "allow", "add", "save"], "pred_obj": ["group organization interface", "create new group", "create subgroup", "name", "group", "subgroup", "entered name", "created group", "created subgroup", "entries"], "tp": ["create", "group organization interface", "create new group", "create subgroup", "name", "group", "subgroup", "entered name", "created group", "created subgroup"]}
{"index": 6, "ucName": "Modify group/subgroup", "uctext": "When user wants to change a group or subgroup’s name he has the ability to do that by\nmodifying it.", "steps": ["User opens KeePass and selects modify group/subgroup", "User types the new name and has the option to select an image", "User selects OK", "The group/subgroup changes name", "The access returns to the database main window"], "dataset": "keepass", "act": ["opens", "selects", "types", "has", "select", "selects", "changes", "returns"], "obj": ["User", "KeePass", "group", "subgroup", "User", "name", "image", "User", "OK", "group", "subgroup", "name", "access", "returns", "database", "main window"], "pred_steps": "User navigates to group/subgroup, selects the desired group/subgroup to modify, accesses the edit option, changes the name, saves the changes, and the system updates the group/subgroup name accordingly.", "pred_act": ["navigates", "selects", "accesses", "changes", "saves", "updates"], "pred_obj": ["User", "group", "subgroup", "edit option", "name", "system", "changes"], "tp": ["selects", "changes", "User", "group", "subgroup", "name"]}
{"index": 7, "ucName": "Delete Group/Subgroup", "uctext": "When a user wants to delete an existing group/subgroup he can do this by selecting Delete group/subgroup from the edit menu. In order for that to happen, he must have chosen first a group/subgroup.", "steps": ["User opens KeePass and selects a group/subgroup", "User selects to delete the group/subgroup", "A message is appeared to confirm the delete", "User selects yes", "The group/subgroup is deleted", "The main window opens"], "dataset": "keepass", "act": ["opens", "selects", "selects", "delete", "appeared", "confirm", "delete", "selects", "deleted", "opens"], "obj": ["User", "KeePass", "group/subgroup", "User", "group", "subgroup", "message", "delete", "User", "yes", "group", "subgroup", "main window"], "pred_steps": "User selects a group/subgroup, navigates to the edit menu, chooses Delete group/subgroup, confirms deletion if prompted, and the system removes the selected group/subgroup.", "pred_act": ["selects", "navigates", "chooses", "confirms", "removes"], "pred_obj": ["User", "group/subgroup", "edit menu", "Delete group/subgroup", "system"], "tp": ["selects", "chooses", "confirms", "removes", "User", "group/subgroup", "Delete group/subgroup"]}
{"index": 8, "ucName": "Find Group/Subgroup", "uctext": "The user selects a group/subgroup and then he chooses “find in this group” from file menu. Then a window appears which prompts the user to write a sequence of characters (letters and numbers) from one character to 200 (or more). After that a menu of options to choose from appears and the user can select to search for: title, user name, password, URL, notes, group name. Search results appear in the main window.", "steps": ["User opens KeePass and selects to find something in a selected group/subgroup", "User types the word to search for", "User selects the fields which will be searched", "User selects OK", "Results appears at the database main window"], "dataset": "keepass", "act": ["opens", "selects", "types", "search", "selects", "selects", "appears"], "obj": ["User", "KeePass", "group", "subgroup", "User", "word", "User", "fields", "searched", "User", "OK", "Results", "database", "main window"], "pred_steps": "User selects group/subgroup, chooses \"find in this group\" from file menu, a window prompts user to input sequence of characters (1-200+), user selects search option (title, user name, password, URL, notes, group name), search results display in main window.", "pred_act": ["selects", "chooses", "prompts", "selects", "display"], "pred_obj": ["User", "group", "subgroup", "file menu", "find in this group", "window", "sequence of characters", "search option", "title", "user name", "password", "URL", "notes", "group name", "search results", "main window"], "tp": ["selects", "chooses", "selects", "User", "group", "subgroup", "find in this group", "window", "group name", "search results", "main window"]}
{"index": 9, "ucName": "Add Entry", "uctext": "The user can add a new entry on the database by clicking add entry on the main menu. When he does this, a window opens which is actually a form. In this form the user completes the fields he wants. He can fill in fields like: group where the entry will be added, title, user name, password, repeat password, URL, notes, expiration date and attachment file. Not all fields are required for an entry to be created. In fact an entry can be added with no fields at all. By selecting OK the entry is created in the group selected.", "steps": ["User opens KeePass and selects to add an entry", "User fills in the form, as many fields as he wants, from 1 to 9", "User selects OK", "The new entry is added in the selected group"], "dataset": "keepass", "act": ["opens", "selects", "add", "fills", "wants", "selects", "added"], "obj": ["User", "KeePass", "entry", "User", "form", "fields", "User", "OK", "new entry", "selected group"], "pred_steps": "The user clicks \"Add Entry\" on the main menu, a form window opens, the user optionally fills in fields such as group, title, user name, password, repeat password, URL, notes, expiration date, and attachment file, selects \"OK\", and the entry is created in the selected group.", "pred_act": ["clicks", "opens", "fills", "selects", "is created"], "pred_obj": ["user", "Add Entry", "main menu", "form window", "fields", "group", "title", "user name", "password", "repeat password", "URL", "notes", "expiration date", "attachment file", "OK", "entry", "selected group"], "tp": ["opens", "fills", "selects", "user", "Add Entry", "form window", "fields", "group", "OK", "entry", "selected group"]}
{"index": 10, "ucName": "View/Edit Entry", "uctext": "The user can modify the context of an entry he already has added. This can be done by\nselecting view/edit entry. In order for that to happen, the user must select an entry first.\nWhen he does this, the form he filled in when he created or last modified the entry open.\nThen the user can change the group, title, user name, password, URL, notes, expiration date and attachment file. His changes are saved by clicking OK.", "steps": ["User opens KeePass and selects to view/edit an existing entry", "User changes the fields he wants in the form", "User selects OK", "The modified entry is saved in the selected group"], "dataset": "keepass", "act": ["opens", "selects", "view/edit", "changes", "selects", "saved"], "obj": ["User", "KeePass", "entry", "User", "fields", "form", "User", "OK", "modified entry", "selected group"], "pred_steps": "The user selects an entry, the system displays the form filled during creation or last modification, the user modifies the group, title, user name, password, URL, notes, expiration date, and attachment file, then saves changes by clicking OK.", "pred_act": ["selects", "displays", "modifies", "saves"], "pred_obj": ["user", "entry", "system", "form", "group", "title", "user name", "password", "URL", "notes", "expiration date", "attachment file", "changes", "OK"], "tp": ["selects", "saves", "user", "entry", "form", "group", "OK"]}
{"index": 11, "ucName": "Duplicate Entry", "uctext": "The user can create an exact copy of an entry. This can be done by selecting an entry and clicking duplicate entry. When this is done the new entry is added in the same group were the first was.", "steps": ["User opens KeePass and selects an existing entry", "User duplicates entry", "The new entry is added below the first one"], "dataset": "keepass", "act": ["opens", "selects", "duplicates", "added"], "obj": ["User", "KeePass", "entry", "User", "entry", "new entry", "first one"], "pred_steps": "User selects an entry, clicks duplicate entry, system creates an exact copy of the selected entry, adds the new entry to the same group as the original entry.", "pred_act": ["selects", "clicks", "creates", "adds"], "pred_obj": ["User", "entry", "duplicate entry", "system", "exact copy", "new entry", "group", "original entry"], "tp": ["selects", "adds", "User", "entry", "duplicate entry", "new entry", "original entry"]}
{"index": 12, "ucName": "Delete Entry", "uctext": "The user can delete an existing entry by selecting it and then by clicking delete entry. When this is done a message appears and informs the user that if he deletes the entry he won’t be able to restore it back.", "steps": ["User opens KeePass and selects to delete an existing entry", "A message appears “Are you sure you want to delete the selected entry?”", "User selects yes", "The deleted entry is permanently removed from the database"], "dataset": "keepass", "act": ["opens", "selects", "delete", "appears", "selects", "deleted", "removed"], "obj": ["User", "KeePass", "entry", "message", "Are you sure you want to delete the selected entry", "User", "yes", "deleted entry", "database"], "pred_steps": "User selects an existing entry, clicks delete entry, system displays a message informing the user that deletion is permanent and cannot be restored, user confirms deletion, system deletes the entry.", "pred_act": ["selects", "clicks", "displays", "informs", "confirms", "deletes"], "pred_obj": ["User", "entry", "delete entry", "system", "message", "deletion", "user", "entry"], "tp": ["selects", "deletes", "User", "entry", "delete entry", "message", "deletion", "user", "entry"]}
{"index": 13, "ucName": "Change Language", "uctext": "The user can select between a number of translations that are available at KeePass website.There are available translations in Arabic, Brazilian, Bulgarian, Catalan, Chinese(Simplified and Traditional), Czech, Danish, Dutch, English, Estonian, Finnish, French,Galician, German, Greek, Hebrew, Hungarian, Italian, Japanese, Korean, Lithuanian, Macedonian, Malay, Norwegian, Polish, Portuguese, Romanian, Russian, Serbian, Slovak,Spanish, Swedish, Turkish and Ukrainian. All the user has to do is to select change language from the view menu and then the language he wants. If he already has download languages packets he can choose one of them. If he wants another language pack he can select get more language. Doing this he will be transferred at KeePass website and choose the language he wants for downloading..", "steps": ["1. User opens KeePass and selects to change language from the view menu", "2. The user selects a language to load from the list that appears", "3. A message appears that informs user that the installation has been done and in order for the changes to take place KeePass must be restarted", "4. User selects yes (restart now)", "5. KeePass asks to save any changes that may have been made in the database and restarts", "6. User unlocks the database using the Master Password", "7. The database appears translated in the new language"], "dataset": "keepass", "act": ["opens", "selects", "selects", "appears", "appears", "informs", "done", "must be restarted", "selects", "asks", "save", "restarts", "unlocks", "appears translated"], "obj": ["User", "KeePass", "view menu", "language", "user", "language", "list", "message", "user", "installation", "KeePass", "changes", "User", "yes", "restart now", "KeePass", "changes", "database", "User", "database", "Master Password", "database", "new language"], "pred_steps": "Functional steps: User selects \"Change Language\" from view menu, views available translations (Arabic, Brazilian, Bulgarian, Catalan, Chinese Simplified, Chinese Traditional, Czech, Danish, Dutch, English, Estonian, Finnish, French, Galician, German, Greek, Hebrew, Hungarian, Italian, Japanese, Korean, Lithuanian, Macedonian, Malay, Norwegian, Polish, Portuguese, Romanian, Russian, Serbian, Slovak, Spanish, Swedish, Turkish, Ukrainian), chooses previously downloaded language pack or selects \"Get more languages\" to be transferred to KeePass website, selects desired language for downloading.", "pred_act": ["selects", "views", "chooses", "selects", "downloading", "transfers"], "pred_obj": ["Change Language", "view menu", "translations", "Arabic", "Brazilian", "Bulgarian", "Catalan", "Chinese Simplified", "Chinese Traditional", "Czech", "Danish", "Dutch", "English", "Estonian", "Finnish", "French", "Galician", "German", "Greek", "Hebrew", "Hungarian", "Italian", "Japanese", "Korean", "Lithuanian", "Macedonian", "Malay", "Norwegian", "Polish", "Portuguese", "Romanian", "Russian", "Serbian", "Slovak", "Spanish", "Swedish", "Turkish", "Ukrainian", "language pack", "Get more languages", "KeePass website", "desired language"], "tp": ["selects", "chooses", "selects", "Change Language", "view menu", "Arabic", "English", "Japanese", "Korean", "Portuguese", "Spanish", "Swedish", "language pack", "Get more languages", "KeePass website", "desired language"]}
{"index": 0, "ucName": "Login", "uctext": "Allow a user to log in to the system", "steps": "1. Verify that username and password have length >=5. If the condition is met go to step two, otherwise notify the user of the error. Search the archive to see if the username and password entered by the user are among the loggable users 3. If the search is successful, the user is logged in to the system.", "dataset": "SMOS", "act": ["Verify", "go", "notify", "search", "log in", "output"], "obj": ["username", "password", "length", "step", "user", "error", "archive", "loggable users", "system"], "pred_steps": "Display login interface, prompt user to enter username and password, validate input format, authenticate username and password against database, if valid, grant access to system, otherwise display error message and prompt to re-enter.", "pred_act": ["Display", "prompt", "validate", "authenticate", "grant", "display", "prompt"], "pred_obj": ["login interface", "user", "username", "password", "input format", "database", "system", "error message"], "tp": ["authenticate", "user", "username", "password", "system", "error message"]}
{"index": 1, "ucName": "Assign/RemoveRolesToA User", "uctext": "Allows you to assign or remove roles to a user", "steps": "2. Select the roles to assign or remove to the user 3. Click the 'Submit' button System 1. Displays the role management form 4. Assigns or removes the user's roles as instructed by the Administrator", "dataset": "SMOS", "act": ["Select", "assign", "remove", "click", "displays", "assigns", "removes"], "obj": ["roles", "user", "Submit' button", "System", "role management form", "Administrator"], "pred_steps": "Display user list, select user, display available roles, select role to assign or remove, confirm action, update user role assignment in system, save changes, notify user of role update.", "pred_act": ["Display", "select", "display", "select", "confirm", "update", "save", "notify"], "pred_obj": ["user list", "user", "available roles", "role", "action", "user role assignment", "system", "changes", "user"], "tp": ["Display", "select", "display", "select", "user list", "user", "available roles", "role", "user role assignment", "system", "user"]}
{"index": 2, "ucName": "Assign/RemoveTeachingsToA Lecturer", "uctext": "Allows assigning or removing teachings to a lecturer", "steps": "2. Select the academic year 4. Select the desired class 6. Select the teachings to be associated with or removed from the teacher System 1. Displays the teaching management form for the teacher in question 3. Displays the list of available classes for the selected year 5. Displays the list of teachings associated with that class 7. Assigns or removes the teacher's teachings as directed by the Administrator.", "dataset": "SMOS", "act": ["Select", "Displays", "Select", "Displays", "Displays", "Assigns", "removes"], "obj": ["academic year", "class", "teachings", "teacher", "teaching management form", "list of available classes", "list of teachings", "Administrator"], "pred_steps": "Please refer to relevant websites for more information, and feel free to ask me any other questions.", "pred_act": ["refer", "feel", "ask", "is"], "pred_obj": ["websites", "information", "questions"], "tp": []}
{"index": 3, "ucName": "Assign/RemoveStudentsToA Parent", "uctext": "Allows you to associate new students to a parent or remove previously entered associations", "steps": "2. Select the students to be assigned or removed to the parent 3. Click the 'Submit' button System 1. Displays the child management form for the parent in question 4. Assign/Remove students associated with a Parent", "dataset": "SMOS", "act": ["Select", "Click", "Displays", "Assign/Remove"], "obj": ["students", "parent", "Submit' button", "System", "child management form", "Parent"], "pred_steps": "Display list of students and parents, select parent, display associated students, add/select new student(s) to associate or select student(s) to remove, confirm action, update and save associations in the system.", "pred_act": ["Display", "select", "display", "add/select", "remove", "confirm", "update", "save"], "pred_obj": ["students", "parents", "parent", "associated students", "new student(s", "student(s", "action", "associations", "system"], "tp": ["Display", "select", "display", "add/select", "remove", "students", "parents", "parent", "system"]}
{"index": 4, "ucName": "ViewListClasses", "uctext": "Allows you to view the list of classes", "steps": "2. Select the academic year of interest. System 1. Allows you to select the academic year whose class list you want to view. 3. Searches the classes in the archive and displays the class management screen 4. Displays the list of classes for the selected academic year.", "dataset": "SMOS", "act": ["Select", "Allows", "select", "Searches", "displays", "Displays"], "obj": ["academic year", "System 1", "class list", "classes", "archive", "class management screen", "list of classes"], "pred_steps": "DisplayListClasses: Open application, navigate to \"Classes\" section, retrieve list of classes from database, populate and display class list on screen, allow user to scroll through list, provide option to sort list by class name or other criteria, enable search functionality to find specific classes, highlight selected class, and provide back button to return to previous screen.", "pred_act": ["Open", "navigate", "retrieve", "populate", "display", "allow", "provide", "enable", "highlight", "return"], "pred_obj": ["DisplayListClasses", "application", "Classes section", "list of classes", "database", "class list", "screen", "user", "scroll", "option", "class name", "criteria", "search functionality", "specific classes", "selected class", "back button", "previous screen"], "tp": ["display", "allow", "enable", "DisplayListClasses", "Classes section", "list of classes", "class list", "screen", "class name", "specific classes", "selected class", "previous screen"]}
{"index": 5, "ucName": "InsertNewClass", "uctext": "Insert a new class into the archive", "steps": "2. Fill out the form 3. Click the 'Save' button System 1. The system shows the form to fill out with: name, address, academic year. It performs checks on the validity of the data entered and inserts the new class into the archive; in case the data entered is invalid, it activates the 'ErrorData' use case.", "dataset": "SMOS", "act": ["Fill", "Click", "shows", "performs", "inserts", "activates"], "obj": ["form", "Save' button", "System", "name", "address", "academic year", "data", "new class", "archive", "ErrorData' use case"], "pred_steps": "Open archive, validate user permission, display form for new class details, receive and validate class information input, check for class name uniqueness, generate unique class identifier, store class information in database, update archive index with new class details, confirm insertion success to user.", "pred_act": ["Open", "validate", "display", "receive", "validate", "check", "generate", "store", "update", "confirm"], "pred_obj": ["archive", "user permission", "form", "new class details", "class information input", "class name", "unique class identifier", "class information", "database", "archive index", "insertion success"], "tp": ["archive", "form", "new class details", "class name", "database"]}
{"index": 6, "ucName": "ViewClassDetails", "uctext": "Allows you to view the details of a class", "steps": "1. View the screen with the details of an individual class: name, address, school year.", "dataset": "SMOS", "act": ["View"], "obj": ["screen", "details", "individual class", "name", "address", "school year"], "pred_steps": "Functional steps: OpenClassDetailsPage, RetrieveClassDataFromDatabase, DisplayClassName, DisplayClassDescription, DisplayClassAttributes, DisplayClassMethods, HandleUserInteractionForMoreDetails", "pred_act": ["OpenClassDetailsPage", "RetrieveClassDataFromDatabase", "DisplayClassName", "DisplayClassDescription", "DisplayClassAttributes", "DisplayClassMethods", "HandleUserInteractionForMoreDetails"], "pred_obj": ["OpenClassDetailsPage", "RetrieveClassDataFromDatabase", "DisplayClassName", "DisplayClassDescription", "DisplayClassAttributes", "DisplayClassMethods", "HandleUserInteractionForMoreDetails"], "tp": []}
{"index": 7, "ucName": "DeleteClass", "uctext": "Delete a class from the archive", "steps": "1. Deletes the class from the archive 2. View updated class list", "dataset": "SMOS", "act": ["Deletes", "View"], "obj": ["class", "archive", "class list"], "pred_steps": "Display list of archived classes, select class to delete, confirm deletion, check dependencies, remove class from archive, update related records, save changes, notify user of successful deletion or any issues encountered.", "pred_act": ["Display", "select", "confirm", "check", "remove", "update", "save", "notify"], "pred_obj": ["archived classes", "class", "deletion", "dependencies", "archive", "related records", "changes", "user", "successful deletion", "issues"], "tp": ["class", "archive"]}
{"index": 8, "ucName": "ViewListAddresses", "uctext": "Allows you to view the list of Addresses", "steps": "1. View list of addresses.", "dataset": "SMOS", "act": ["View"], "obj": ["list", "addresses"], "pred_steps": "Open application, navigate to Addresses section, retrieve list of Addresses from database, display Addresses in a readable format on the screen, allow user to scroll through the list, provide option to select an Address for further actions if needed.", "pred_act": ["Open", "navigate", "retrieve", "display", "allow", "scroll", "provide", "select", "output"], "pred_obj": ["application", "Addresses section", "list of Addresses", "database", "Addresses", "user", "option", "Address"], "tp": ["display", "list of Addresses", "Addresses", "Address"]}
{"index": 9, "ucName": "InsertNewAddress", "uctext": "Insert a new address into the archive", "steps": "2. Fill out the form 3. Click the 'Save' button System 1. The system shows the form to fill out with: address name. It performs checks on the validity of the entered data and inserts a new address into the archive; in case the entered data is invalid, it activates the use case 'ErrorData'.", "dataset": "SMOS", "act": ["Fill", "Click", "Save", "shows", "perform", "checks", "inserts", "activates"], "obj": ["form", "Save' button", "System", "address", "name", "data", "archive", "ErrorData"], "pred_steps": "Open form for new address, input address fields (street, city, state, zip code), validate address data, save address to database, confirm address insertion success, close form.", "pred_act": ["Open", "input", "validate", "save", "confirm", "close"], "pred_obj": ["form", "address", "street", "city", "state", "zip code", "database", "address insertion success"], "tp": ["save", "form", "address", "database"]}
{"index": 10, "ucName": "ViewAddressDetails", "uctext": "Allows you to view the details of an address", "steps": "1. Displays the screen with the details of an individual address; specifically :address name.", "dataset": "SMOS", "act": ["Displays"], "obj": ["screen", "details", "individual address", "address name"], "pred_steps": "Initiate request to view address details, retrieve address ID from input, validate address ID, fetch address details from database using address ID, populate UI with retrieved address details, display address details on screen.", "pred_act": ["Initiate", "retrieve", "validate", "fetch", "populate", "display"], "pred_obj": ["request", "address details", "address ID", "input", "database", "UI", "screen"], "tp": ["display", "address details", "address ID", "screen"]}
{"index": 11, "ucName": "LoginError", "uctext": "Occurs when user has entered incorrect authentication data.", "steps": "1. View login form", "dataset": "SMOS", "act": ["View"], "obj": ["login form"], "pred_steps": "Display error message to user indicating incorrect authentication data, log the error attempt, prompt user to re-enter authentication data, validate re-entered data against stored credentials, if correct, allow access; if incorrect, repeat error message and lock account after predefined number of failed attempts.", "pred_act": ["Display", "log", "prompt", "validate", "allow", "repeat", "lock"], "pred_obj": ["error message", "user", "authentication data", "error attempt", "stored credentials", "access", "account", "predefined number of failed attempts"], "tp": []}
{"index": 12, "ucName": "DeleteAddress", "uctext": "Delete an address from the archive", "steps": "1. Checks whether the address has associated classes; if so, displays an error message 'Unable to delete the address, delete associated classes and try again', otherwise deletes the address. 2. Displays updated address list.", "dataset": "SMOS", "act": ["Checks", "displays", "deletes", "displays"], "obj": ["address", "classes", "error message", "Unable to delete the address", "delete associated classes", "try again", "updated address list"], "pred_steps": "Display list of addresses, select address to delete, confirm deletion, check user permission, if permitted, remove selected address from archive, update address list, display updated list, save changes to database, notify user of successful deletion.", "pred_act": ["Display", "select", "confirm", "check", "remove", "update", "display", "save", "notify"], "pred_obj": ["addresses", "address", "deletion", "user permission", "archive", "address list", "database", "user", "successful deletion"], "tp": ["Display", "display", "addresses", "address", "deletion", "address list"]}
{"index": 13, "ucName": "AssignRemoveTeachings", "uctext": "Assign or remove one or more teachings from an address", "steps": "2. Select the teachings to be assigned or removed to the address 3. Click the 'Submit' button System 1. Displays a form from which you can add and/or remove teachings to the address. 4. Associate or remove the selected teachings to the address. 5. Return to the address details view.", "dataset": "SMOS", "act": ["Select", "assign", "remove", "click", "display", "add", "associate", "return"], "obj": ["teachings", "address", "Submit' button", "System", "form"], "pred_steps": "Please refer to relevant websites for more information, and feel free to ask me any other questions.", "pred_act": ["refer", "feel", "ask"], "pred_obj": ["relevant websites", "information", "questions"], "tp": []}
{"index": 14, "ucName": "ViewListInsignments", "uctext": "Allows viewing the list of teachings", "steps": "1. 2. Search the in the archive and screen of teachings View teachings view the management of the the list of", "dataset": "SMOS", "act": ["Search", "view", "manage"], "obj": ["archive", "screen", "teachings", "View", "management", "list"], "pred_steps": "Functional steps: Open application, navigate to teachings section, retrieve list of teachings from database, display list of teachings on screen, allow user to scroll through list, allow user to select teaching for detailed view, provide option to refresh list.", "pred_act": ["Open", "navigate", "retrieve", "display", "allow", "allow", "provide"], "pred_obj": ["application", "teachings section", "list of teachings", "database", "screen", "user", "teaching", "detailed view", "option", "list"], "tp": ["teachings section", "list of teachings", "screen", "teaching", "list"]}
{"index": 15, "ucName": "InsertNewTeaching", "uctext": "Insert new teaching into the archive", "steps": "2. Fill out the form 3. Click the 'Save' button System 1. The system shows the form to fill out with: teaching name. It performs checks on the validity of the data entered and inserts the new teaching into the archive; in case the data entered is invalid, it activates the use case 'ErrorData'.", "dataset": "SMOS", "act": ["Fill", "Click", "shows", "performs", "inserts", "activates"], "obj": ["form", "Save' button", "System", "teaching name", "data", "new teaching", "archive", "use case 'ErrorData"], "pred_steps": "Please refer to relevant websites for more information, and feel free to ask me any other questions.", "pred_act": ["refer", "feel", "ask"], "pred_obj": ["websites", "information", "questions"], "tp": []}
{"index": 16, "ucName": "ViewTeachingDetails", "uctext": "Allows you to view the details of a teaching", "steps": "1. View the screen with the details of an individual teaching.", "dataset": "SMOS", "act": ["View"], "obj": ["screen", "details", "individual teaching"], "pred_steps": "Open application, navigate to teaching details section, retrieve teaching data from database, display teaching title, display teaching description, display teaching schedule, display teaching location, display teaching instructor, allow user to scroll through details, provide back button to return to previous screen.", "pred_act": ["Open", "navigate", "retrieve", "display", "display", "display", "display", "display", "allow", "provide", "return"], "pred_obj": ["application", "teaching details section", "teaching data", "database", "teaching title", "teaching description", "teaching schedule", "teaching location", "teaching instructor", "user", "details", "back button", "previous screen"], "tp": ["display", "display", "display", "display", "display", "teaching details section", "teaching data", "teaching title", "teaching description", "teaching location", "teaching instructor", "details"]}
{"index": 17, "ucName": "EditTeaching", "uctext": "Edit details of a teaching", "steps": "1. Click on the 'Save' button 2. Perform checks on the validity of the entered data and edit the teaching in the archive; in case the entered data is invalid, activate the 'ErrorData' use case. 3. Displays the updated teaching list.", "dataset": "SMOS", "act": ["Click", "Perform", "edit", "activate", "Displays"], "obj": ["Save button", "entered data", "teaching", "archive", "ErrorData use case", "updated teaching list"], "pred_steps": "Please refer to relevant websites for more information, and feel free to ask me any other questions.", "pred_act": ["refer", "feel", "ask"], "pred_obj": ["relevant websites", "questions"], "tp": []}
{"index": 18, "ucName": "DeleteTeaching", "uctext": "Delete a teaching from the archive", "steps": "1. Delete teaching from the archive 2. View updated teaching list.", "dataset": "SMOS", "act": ["Delete", "View"], "obj": ["teaching", "archive", "teaching list"], "pred_steps": "Please refer to relevant websites for more information, and feel free to ask me any other questions.", "pred_act": ["refer", "feel", "ask"], "pred_obj": ["websites", "information", "questions"], "tp": []}
{"index": 19, "ucName": "ViewListRegisters", "uctext": "View the list of records for an academic year", "steps": "2. Select school year 1. Display a screen for selecting the academic year of interest. 3. Search the archive for all digital records for that year and display them associated with the class to which they belong.", "dataset": "SMOS", "act": ["Display", "Select", "Search", "Display"], "obj": ["school year", "screen", "academic year", "archive", "digital records", "class"], "pred_steps": "DisplayListRegisters: Open system, navigate to Records section, select Academic Year, retrieve record list for selected year, display list on screen.", "pred_act": ["Open", "navigate", "select", "retrieve", "display"], "pred_obj": ["DisplayListRegisters", "system", "Records section", "Academic Year", "record list", "selected year", "screen"], "tp": ["select", "display", "Records section", "Academic Year", "record list", "selected year", "screen"]}
{"index": 20, "ucName": "ViewSingleRegisterDetails", "uctext": "View the details of one of the class registers", "steps": "1. Displays on the screen the information contained in the register organized by date. In particular, it shows, for today's date, the list of pupils, specifying: absent/attending, late entries, and a form from which you can manage justifications and disciplinary notes.", "dataset": "SMOS", "act": ["Displays", "shows", "specifying", "manage"], "obj": ["screen", "information", "register", "date", "today's date", "list of pupils", "absent", "attending", "late entries", "form", "justifications", "disciplinary notes"], "pred_steps": "User navigates to the register details page, selects a specific class register from the list, system retrieves the details of the selected register, displays the register details including class name, instructor, schedule, and enrolled students, allows user to scroll through and view all information, and provides an option to return to the previous page or log out.", "pred_act": ["navigates", "selects", "retrieves", "displays", "allows", "view", "provides", "return", "log out"], "pred_obj": ["User", "register details page", "specific class register", "list", "system", "details", "selected register", "class name", "instructor", "schedule", "enrolled students", "information", "previous page", "log out"], "tp": ["displays", "provides", "specific class register", "selected register", "enrolled students", "information"]}
{"index": 21, "ucName": "InsertAbsencesAdmin", "uctext": "Digitization of Registry, data entry by Administrator", "steps": "2. Fill out the form by entering absent/present students and click 'Save' 1. Refresh the screen displayed by date 3. Send the data to the server. The server for each absence sends an e-mail notification to the student's parent. 4. View the updated register data.", "dataset": "SMOS", "act": ["Fill", "enter", "click", "Refresh", "display", "Send", "sends", "notify", "View"], "obj": ["form", "absent/present students", "Save", "screen", "date", "data", "server", "absence", "e-mail notification", "student's parent", "updated register data"], "pred_steps": "Functional steps: Open digitization registry system, log in as administrator, navigate to absence entry section, input absence details including student ID, absence date, reason for absence, duration of absence, save entered absence data, verify data accuracy, submit absence entry for approval if required, receive confirmation of successful entry, log out of system.", "pred_act": ["Open", "log in", "navigate", "input", "save", "verify", "submit", "receive", "log out"], "pred_obj": ["digitization registry system", "administrator", "absence entry section", "absence details", "student ID", "absence date", "reason for absence", "duration of absence", "entered absence data", "data accuracy", "absence entry", "confirmation of successful entry"], "tp": ["absence entry section", "absence details", "absence date", "reason for absence", "duration of absence", "entered absence data", "data accuracy", "absence entry"]}
{"index": 22, "ucName": "Logout", "uctext": "Allows a user to log out of the system", "steps": "1. View login form", "dataset": "SMOS", "act": ["View"], "obj": ["login form"], "pred_steps": "Verify user identity, display logout confirmation prompt, receive user confirmation, terminate user session, redirect to login page, update session status to logged out in the database.", "pred_act": ["Verify", "display", "receive", "terminate", "redirect", "update"], "pred_obj": ["user identity", "logout confirmation prompt", "user confirmation", "user session", "login page", "session status", "database"], "tp": ["display", "login page"]}
{"index": 23, "ucName": "InsertDelayAdmin", "uctext": "Digitization of Registry, data entry by Administrator", "steps": "2. Fill out the form by entering students with delay and click 'Save' 1. Refresh the displayed screen by date 3. Submit the data to the server. 4. Display updated log data.", "dataset": "SMOS", "act": ["Fill", "enter", "click", "Refresh", "Submit", "Display"], "obj": ["form", "students", "Save", "screen", "date", "data", "server", "log data"], "pred_steps": "Functional steps: Admin accesses digitization system, navigates to registry section, selects insert delay option, enters necessary data into designated fields, verifies entered data for accuracy, saves data to registry, system confirms successful data entry and update.", "pred_act": ["accesses", "navigates", "selects", "enters", "verifies", "saves", "confirms"], "pred_obj": ["Admin", "digitization system", "registry section", "insert delay option", "necessary data", "designated fields", "entered data", "registry", "system", "successful data entry", "update"], "tp": ["enters", "necessary data", "entered data"]}
{"index": 24, "ucName": "EditAbsence", "uctext": "Edit absence by Administrator. Editing is intended as inserting/deleting the absence.", "steps": "2. Edit the absence (Insert or Delete) and click 'Save' 1. Refresh the screen according to the selected date 3. Sends the changed data to the server. The system sends a correction e-mail to the parent of the student.", "dataset": "SMOS", "act": ["Edit", "Insert", "Delete", "click", "Refresh", "send", "sends"], "obj": ["absence", "Save", "screen", "selected date", "changed data", "server", "correction e-mail", "parent", "student"], "pred_steps": "Functional steps: Administrator accesses the system, searches for the absence record to be edited, selects the record, makes necessary changes (insert or delete absence details), confirms the changes, saves the updated absence record, and verifies the edits are correctly reflected in the system.", "pred_act": ["accesses", "searches", "selects", "makes", "confirms", "saves", "verifies"], "pred_obj": ["Administrator", "system", "absence record", "necessary changes", "absence details", "updates", "edits"], "tp": []}
{"index": 25, "ucName": "EditDelay", "uctext": "editing a delay by Administrator", "steps": "2. User edits the delay and clicks 'Save' 1. Updates the screen based on the selected date 3. The system sends the modified data to the server .", "dataset": "SMOS", "act": ["edits", "clicks", "Updates", "sends"], "obj": ["User", "delay", "Save", "screen", "selected date", "system", "modified data", "server"], "pred_steps": "Administrator logs in, navigates to delay settings, selects the delay to edit, modifies delay parameters as needed, saves changes, verifies the updated delay settings, and logs out.", "pred_act": ["logs", "navigates", "selects", "modifies", "saves", "verifies", "logs"], "pred_obj": ["Administrator", "delay settings", "delay", "delay parameters", "changes", "updated delay settings"], "tp": ["delay"]}
{"index": 26, "ucName": "DeleteDelay", "uctext": "Deleting a late entry by the Administrator", "steps": "2. Delete a student's late entry and click 'Save' 1. Refresh the screen based on the selected date 3. Delete the late entry from the archive.", "dataset": "SMOS", "act": ["Delete", "click", "Refresh", "Delete"], "obj": ["student's late entry", "Save", "screen", "selected date", "late entry", "archive"], "pred_steps": "Administrator navigates to the system interface, selects the \"Delete\" option, identifies the late entry by its unique identifier, confirms the deletion prompt, system verifies administrator privileges, retrieves the late entry details from the database, checks for dependencies or constraints related to the late entry, if none exist, proceeds to remove the entry from the database, updates the interface to reflect the deletion, logs the deletion action with timestamp and administrator ID, and finally, notifies the administrator of successful deletion.", "pred_act": ["navigates", "selects", "identifies", "confirms", "verifies", "retrieves", "checks", "proceeds", "removes", "updates", "logs", "notifies"], "pred_obj": ["Administrator", "system interface", "Delete option", "late entry", "unique identifier", "deletion prompt", "system", "administrator privileges", "database", "late entry details", "dependencies", "constraints", "entry", "interface", "deletion action", "timestamp", "administrator ID", "successful deletion"], "tp": ["removes", "late entry", "late entry details", "entry"]}
{"index": 27, "ucName": "ViewExcusedList", "uctext": "ViewExcusedList", "steps": "1. Show all absences of the student recorded school selected Absences already excused are displayed in green, those to be excused in red during the year.", "dataset": "SMOS", "act": ["Show", "display"], "obj": ["absences", "student", "school", "Absences already excused", "those to be excused"], "pred_steps": "User navigates to the Excused List section, system retrieves the list of excused individuals from the database, system displays the excused list on the user interface, user scrolls through and views the details of each excused individual, user can filter or sort the list based on specific criteria, user can select an individual to view detailed information, system provides options to export or print the list.", "pred_act": ["navigates", "retrieves", "displays", "scrolls", "views", "can filter", "can sort", "can select", "provides"], "pred_obj": ["User", "Excused List section", "system", "list of excused individuals", "database", "user interface", "details of each excused individual", "specific criteria", "individual", "options", "export", "print", "list"], "tp": ["displays", "views", "provides", "Excused List section", "list of excused individuals", "details of each excused individual"]}
{"index": 28, "ucName": "ViewListNotes", "uctext": "View list of notes inherent to the student", "steps": "1. Show all student notes recorded during the school year", "dataset": "SMOS", "act": ["Show", "recorded"], "obj": ["student notes", "school year"], "pred_steps": "Authenticate user, fetch student-specific notes from database, organize notes into list format, render list of notes on user interface, provide option to select individual note for detailed view, handle user selection to display note details if applicable.", "pred_act": ["Authenticate", "fetch", "organize", "render", "provide", "handle", "display"], "pred_obj": ["user", "student-specific notes", "database", "list format", "user interface", "individual note", "detailed view", "user selection", "note details"], "tp": []}
{"index": 29, "ucName": "InsertJustification", "uctext": "Insert Justification", "steps": "2. Fill out the form 3. Click 'Save' 1. Show a form in which to enter the justification fields (justification date). 4. Save the justification.", "dataset": "SMOS", "act": ["Show", "Fill", "Click", "Save"], "obj": ["form", "justification fields", "justification date", "Save"], "pred_steps": "Receive user input for justification, validate input format and content, determine the appropriate insertion point in the document, insert justification at the specified location, adjust document formatting as necessary to accommodate the justification, save the updated document, and provide user feedback confirming the successful insertion of the justification.", "pred_act": ["Receive", "validate", "determine", "insert", "adjust", "save", "provide", "confirm"], "pred_obj": ["user input", "justification", "input format", "content", "insertion point", "document", "justification", "document formatting", "updated document", "user feedback"], "tp": ["save", "justification", "justification"]}
{"index": 30, "ucName": "InsertNote", "uctext": "Insert Disciplinary Notes", "steps": "2. Fill out the form 3. Click 'Save' 1. Show a form with note fields (student, date, teacher , description). 4. Save the note and send an e-mail notification to the parent.", "dataset": "SMOS", "act": ["Show", "Fill out", "Click", "Save", "Send"], "obj": ["form", "note fields", "student", "date", "teacher", "description", "note", "e-mail notification", "parent"], "pred_steps": "Please refer to relevant websites for more information, and feel free to ask me any other questions.", "pred_act": ["refer", "feel", "ask"], "pred_obj": ["relevant websites", "questions"], "tp": []}
{"index": 31, "ucName": "ViewJustificationDetails", "uctext": "View the details of a justification", "steps": "1. Show a form with the details of the justification and the ability to edit or delete the justification.", "dataset": "SMOS", "act": ["Show", "edit", "delete"], "obj": ["form", "details of the justification", "ability", "justification"], "pred_steps": "Functional steps: OpenJustificationDetailsScreen, RetrieveJustificationDataFromDatabase, DisplayJustificationDetailsOnScreen, AllowUserToScrollThroughDetails, ProvideOptionToCloseDetailsScreen.", "pred_act": ["Open", "Retrieve", "Display", "Allow", "Provide"], "pred_obj": ["OpenJustificationDetailsScreen", "RetrieveJustificationDataFromDatabase", "DisplayJustificationDetailsOnScreen", "AllowUserToScrollThroughDetails", "ProvideOptionToCloseDetailsScreen"], "tp": ["DisplayJustificationDetailsOnScreen"]}
{"index": 32, "ucName": "ViewNoteDetails", "uctext": "View the details of a note", "steps": "1. Show a form with note details: student, description, teacher, date.", "dataset": "SMOS", "act": ["Show"], "obj": ["student", "description", "teacher", "date", "form", "note details"], "pred_steps": "OpenNote, RetrieveNoteDetails, DisplayNoteTitle, DisplayNoteContent, DisplayNoteTimestamp, DisplayNoteLocation, AllowUserInteraction, HandleUserEditRequest, HandleUserDeleteRequest, HandleUserCloseRequest, CloseNoteDetailsView", "pred_act": ["OpenNote", "RetrieveNoteDetails", "DisplayNoteTitle", "DisplayNoteContent", "DisplayNoteTimestamp", "DisplayNoteLocation", "AllowUserInteraction", "HandleUserEditRequest", "HandleUserDeleteRequest", "HandleUserCloseRequest", "CloseNoteDetailsView"], "pred_obj": ["OpenNote", "RetrieveNoteDetails", "DisplayNoteTitle", "DisplayNoteContent", "DisplayNoteTimestamp", "DisplayNoteLocation", "AllowUserInteraction", "HandleUserEditRequest", "HandleUserDeleteRequest", "HandleUserCloseRequest", "CloseNoteDetailsView"], "tp": ["RetrieveNoteDetails", "CloseNoteDetailsView"]}
{"index": 33, "ucName": "ChangePassword", "uctext": "Allows a user to change their password", "steps": "2. Fill out the form and submit; System 1. Displays the form with the fields: old password, new password, confirm new password. 3. Confirms that the password has been changed.", "dataset": "SMOS", "act": ["Fill", "submit", "displays", "confirms"], "obj": ["form", "System", "fields", "old password", "new password", "confirm new password", "password"], "pred_steps": "User navigates to Change Password section, enters current password, enters new password, confirms new password, system validates current password, system checks new password strength, system ensures new password matches confirmation, system updates user password, system confirms password change success.", "pred_act": ["navigates", "enters", "enters", "confirms", "validates", "checks", "ensures", "updates", "confirms"], "pred_obj": ["User", "Change Password section", "current password", "new password", "system", "confirmation", "user password", "password change success"], "tp": ["confirms", "confirms", "Change Password section", "current password", "new password", "system", "confirmation", "user password", "password change success"]}
{"index": 34, "ucName": "EditJustification", "uctext": "Edit a Justification", "steps": "1. Edit one or more fields in the displayed form: date justification. Click 'Save' 3. Edit the justification.", "dataset": "SMOS", "act": ["Edit", "Click", "Edit"], "obj": ["fields", "form", "date justification", "Save", "justification"], "pred_steps": "OpenEditJustificationScreen, LoadCurrentJustification, DisplayJustificationDetails, AllowUserToEditJustification, SaveEditedJustification, ValidateJustification, UpdateJustificationInDatabase, CloseEditJustificationScreen", "pred_act": ["OpenEditJustificationScreen", "LoadCurrentJustification", "DisplayJustificationDetails", "AllowUserToEditJustification", "SaveEditedJustification", "ValidateJustification", "UpdateJustificationInDatabase", "CloseEditJustificationScreen"], "pred_obj": ["OpenEditJustificationScreen", "LoadCurrentJustification", "DisplayJustificationDetails", "AllowUserToEditJustification", "SaveEditedJustification", "ValidateJustification", "UpdateJustificationInDatabase", "CloseEditJustificationScreen"], "tp": ["OpenEditJustificationScreen", "AllowUserToEditJustification", "SaveEditedJustification", "CloseEditJustificationScreen", "OpenEditJustificationScreen", "LoadCurrentJustification", "DisplayJustificationDetails", "AllowUserToEditJustification", "SaveEditedJustification", "ValidateJustification", "UpdateJustificationInDatabase", "CloseEditJustificationScreen"]}
{"index": 35, "ucName": "EditNote", "uctext": "Editing a Disciplinary Note", "steps": "1. The user edits one or more fields in the displayed form: Student, description, teacher, date. 2. User clicks on 'Save' 3. The system saves the changes.", "dataset": "SMOS", "act": ["edits", "clicks", "saves"], "obj": ["user", "fields", "form", "Student", "description", "teacher", "date", "Save", "system", "changes"], "pred_steps": "Please refer to relevant websites for more information, and feel free to ask me any other questions.", "pred_act": ["refer", "feel", "ask", "is"], "pred_obj": ["websites", "information", "questions"], "tp": []}
{"index": 36, "ucName": "DeleteJustify", "uctext": "DeleteJustify", "steps": "1. Delete justification.", "dataset": "SMOS", "act": ["Delete"], "obj": ["justification"], "pred_steps": "Select record to delete, confirm deletion prompt, validate deletion permission, check dependencies, remove record from database, update related data structures, log deletion activity, notify user of successful deletion.", "pred_act": ["Select", "confirm", "validate", "check", "remove", "update", "log", "notify"], "pred_obj": ["record", "deletion prompt", "deletion permission", "dependencies", "database", "related data structures", "deletion activity", "user", "successful deletion"], "tp": ["remove"]}
{"index": 37, "ucName": "DeleteNote", "uctext": "Delete Disciplinary Notes", "steps": "1. The system sends a notification of errata to the student's parents, then deletes the note data from the archive.", "dataset": "SMOS", "act": ["sends", "deletes"], "obj": ["system", "notification", "errata", "student's parents", "note data", "archive"], "pred_steps": "Display list of disciplinary notes, select note to delete, confirm deletion, remove selected note from database, update UI to reflect deletion, notify user of successful deletion.", "pred_act": ["Display", "select", "confirm", "remove", "update", "notify"], "pred_obj": ["disciplinary notes", "note", "deletion", "database", "UI", "user"], "tp": ["remove", "note"]}
{"index": 38, "ucName": "PerformStudentMonitoring", "uctext": "Allows you to query the system about the number of absences and notes associated with students.", "steps": "1. Search the archive for students who have, for the current school year a number of absences and notes above a predetermined threshold. 2. Displays a screen presenting the data obtained.", "dataset": "SMOS", "act": ["Search", "have", "Displays", "presenting"], "obj": ["archive", "students", "school year", "absences", "notes", "threshold", "screen", "data"], "pred_steps": "Query the system for student data, retrieve absence records and notes associated with the student, count the number of absences, compile the notes, and display the results.", "pred_act": ["Query", "retrieve", "count", "compile", "display"], "pred_obj": ["system", "student data", "absence records", "notes", "number of absences", "results"], "tp": ["display", "student data", "absence records", "notes", "number of absences"]}
{"index": 39, "ucName": "ViewingOfA Report Card", "uctext": "ViewingA Report Card", "steps": "1. Selects the academic year 3. Chooses the class of the student whose report card you want to view 5. Selects the student and the quarter whose report card you want to view by clicking on the appropriate button. System 2. Displays the list of classes in the system with a 'Report Card' button associated with each class next to it 4. Displays the list of pupils in the class chosen by the user 6. Displays the report card of the chosen pupil referring to the selected term.", "dataset": "SMOS", "act": ["Selects", "Chooses", "Selects", "Displays", "Displays", "Displays"], "obj": ["academic year", "class", "student", "report card", "system", "list of classes", "Report Card button", "list of pupils", "pupil", "term"], "pred_steps": "User navigates to report card section, selects desired report card from available options, system retrieves and displays report card details on screen, user reviews the displayed information.", "pred_act": ["navigates", "selects", "retrieves", "displays", "reviews"], "pred_obj": ["User", "report card section", "desired report card", "available options", "system", "report card details", "screen", "displayed information"], "tp": ["selects", "displays", "report card section", "desired report card", "system", "report card details"]}
{"index": 40, "ucName": "EnterPagella", "uctext": "Entering a student's report card performed by the Administrator", "steps": "2. Selects the class of the student whose report card is to be entered 4. Selects the student whose report card is to be entered by clicking on the appropriate button 6. Enters the report card grades, all or in part, and clicks the 'save' button System 1. Displays the list of classes in the system referring to the current academic year with a 'Report Card' button associated with each class next to it 3. Displays the list of pupils in the class chosen by the user 5. Displays the form for entering a report card 7. Inserts grades entered into the archive and returns the user to the class student view page.", "dataset": "SMOS", "act": ["Selects", "Selects", "Selects", "Enters", "Displays", "Displays", "Displays", "Inserts", "returns"], "obj": ["class", "student", "report card", "system", "academic year", "Report Card' button", "pupils", "form", "grades", "archive", "class student view page"], "pred_steps": "Administrator accesses system, navigates to report card entry section, selects student from database, inputs student's grades for each subject, saves entered data, system validates data for completeness and accuracy, generates report card, displays report card for review, allows editing if necessary, finalizes and stores report card in student's record.", "pred_act": ["accesses", "navigates", "selects", "inputs", "saves", "validates", "generates", "displays", "allows", "edits", "finalizes", "stores"], "pred_obj": ["Administrator", "system", "report card entry section", "student", "database", "student's grades", "subject", "entered data", "report card", "student's record"], "tp": ["selects", "displays", "system", "report card entry section", "student", "student's grades", "report card", "student's record"]}
{"index": 41, "ucName": "EditOfAPage", "uctext": "Use case for editing a student's report card", "steps": "2. Enters the new data and clicks the confirmation button System 1. Displays the form with the fields that can be edited including the grades of different subjects 3. The system displays a confirmation message and displays the form with the list of pupils.", "dataset": "SMOS", "act": ["Enters", "clicks", "displays", "can be edited", "displays", "displays"], "obj": ["new data", "confirmation button", "System 1", "form", "fields", "grades", "subjects", "confirmation message", "list of pupils"], "pred_steps": "OpenReportCard, RetrieveStudentData, DisplayReportCard, SelectEditableField, InputNewValue, ValidateInput, SaveChanges, UpdateReportCard, NotifyUserOfSuccessOrError", "pred_act": ["OpenReportCard", "RetrieveStudentData", "DisplayReportCard", "SelectEditableField", "InputNewValue", "ValidateInput", "SaveChanges", "UpdateReportCard", "NotifyUserOfSuccessOrError"], "pred_obj": ["OpenReportCard", "RetrieveStudentData", "DisplayReportCard", "SelectEditableField", "InputNewValue", "ValidateInput", "SaveChanges", "UpdateReportCard", "NotifyUserOfSuccessOrError"], "tp": ["DisplayReportCard"]}
{"index": 42, "ucName": "DeletionOfAPage", "uctext": "Administrator deletes a report card from the system", "steps": "2. The user accepts the deletion by pressing the confirmation key System 1. The system displays a form to confirm the deletion 3. Displays a message of successful deletion and displays the form with the class list.", "dataset": "SMOS", "act": ["accepts", "presses", "displays", "displays", "displays"], "obj": ["user", "deletion", "confirmation key", "System 1", "system", "form", "message", "successful deletion", "class list"], "pred_steps": "Administrator navigates to the report card management interface, selects the target report card to be deleted, confirms deletion, system verifies user permission, retrieves and validates the selected report card, performs deletion operation, updates the database to reflect deletion, logs the deletion action, and notifies administrator of successful deletion.", "pred_act": ["navigates", "selects", "confirms", "verifies", "retrieves", "validates", "performs", "updates", "logs", "notifies"], "pred_obj": ["Administrator", "report card management interface", "target report card", "system", "user permission", "selected report card", "database", "deletion action", "successful deletion"], "tp": ["system", "deletion action", "successful deletion"]}
{"index": 43, "ucName": "ViewRequestsSubscription", "uctext": "Allows the administrator to view the list of enrollment requests arrived at the system", "steps": "1 . Displays the list of enrollments yet to be activated.", "dataset": "SMOS", "act": ["Displays"], "obj": ["enrollments"], "pred_steps": "Administrator authenticates, system retrieves list of enrollment requests, displays requests in a user-friendly format, allows filtering and sorting of requests, provides option to view details of each request, and logs actions for auditing purposes.", "pred_act": ["authenticates", "retrieves", "displays", "allows", "provides", "logs"], "pred_obj": ["Administrator", "system", "list of enrollment requests", "requests", "user-friendly format", "filtering", "sorting", "option", "details of each request", "actions", "auditing purposes"], "tp": ["displays"]}
{"index": 44, "ucName": "ViewListUsers", "uctext": "View the list of users in the system", "steps": "1. Search for users in the archive and display their list", "dataset": "SMOS", "act": ["Search", "display"], "obj": ["users", "archive", "list"], "pred_steps": "Initiate request to view user list, authenticate user, retrieve user list from database, format user list data, display user list on interface.", "pred_act": ["Initiate", "authenticate", "retrieve", "format", "display"], "pred_obj": ["request", "user list", "user", "database", "user list data", "interface"], "tp": ["display", "user list", "user list data"]}
{"index": 45, "ucName": "AcceptStudentEnrollment", "uctext": "Allows the administrator to accept a student's enrollment in the system", "steps": "1 . Activates the new user in the system. 2. Displays the list of enrollments yet to be activated.", "dataset": "SMOS", "act": ["Activates", "Displays"], "obj": ["user", "system", "list", "enrollments"], "pred_steps": "Administrator logs in to the system, navigates to the pending enrollments section, selects the student's enrollment request, verifies the student's information, confirms the acceptance of enrollment, updates the student's status to enrolled, and notifies the student via email of the acceptance.", "pred_act": ["logs", "navigates", "selects", "verifies", "confirms", "updates", "notifies"], "pred_obj": ["Administrator", "system", "pending enrollments section", "student's enrollment request", "student's information", "acceptance of enrollment", "student's status", "email"], "tp": ["system", "pending enrollments section"]}
{"index": 46, "ucName": "RejectStudentEnrollment", "uctext": "Allows the administrator to reject a student's enrollment in the system", "steps": "1. Deletes the system enrollment request. 2. Displays the list of enrollments yet to be activated.", "dataset": "SMOS", "act": ["Deletes", "Displays"], "obj": ["system enrollment request", "list of enrollments"], "pred_steps": "Administrator selects student to reject, system retrieves student details, administrator confirms rejection, system updates student status to rejected, system logs rejection action, system notifies student of rejection.", "pred_act": ["selects", "retrieves", "confirms", "updates", "logs", "notifies"], "pred_obj": ["Administrator", "student", "system", "rejection", "student details", "student status", "rejection action"], "tp": []}
{"index": 47, "ucName": "Entity Search", "uctext": "Allows the administrator to search the system for all entities characterized by the keywords entered", "steps": "1 . Displays the list of entities related to the searched keywords; in particular, the following are shown in an active list: Classes, Teachings, Addresses, Users found.", "dataset": "SMOS", "act": ["Displays", "shows"], "obj": ["Entities", "Classes", "Teachings", "Addresses", "Users", "object"], "pred_steps": "Administrator enters keywords into search field, system retrieves all entities containing those keywords, displays search results to administrator, administrator views results.", "pred_act": ["enters", "retrieves", "displays", "views"], "pred_obj": ["Administrator", "search field", "system", "entities", "keywords", "search results"], "tp": ["displays", "views", "entities"]}
{"index": 48, "ucName": "ViewElencoClasses", "uctext": "View Classes", "steps": "1. The system shows the user a screen with all the classes in the database, with a button to access the record of each class.", "dataset": "SMOS", "act": ["shows", "access"], "obj": ["system", "user", "screen", "classes", "database", "button", "record"], "pred_steps": "Initiate request to view classes, retrieve class list from database, populate class data into display format, render class list on user interface, handle user interaction for detailed class view, provide option to filter or sort classes, update display based on user preferences, and ensure responsive and intuitive UI for optimal viewing experience.", "pred_act": ["Initiate", "retrieve", "populate", "render", "handle", "provide", "update", "ensure"], "pred_obj": ["request", "classes", "class list", "database", "class data", "display format", "user interface", "user interaction", "detailed class view", "option", "filter", "sort", "user preferences", "UI", "viewing experience"], "tp": ["classes", "class list", "database", "class data"]}
{"index": 49, "ucName": "EnterAbsences", "uctext": "Digitizing the Register, collecting data from ATA staff class by class", "steps": "2. User selects absent students 3. Clicks save 1. Shows user a screen with pupils and radio buttons to select whether a pupil is absent or present. By default the pupil is present. 4. The system sends the data to the server. The server for each absence sends an e- mail notification to the pupil's parent.", "dataset": "SMOS", "act": ["selects", "clicks", "shows", "sends", "sends"], "obj": ["User", "absent students", "save", "screen", "pupils", "radio buttons", "pupil", "server", "absence", "e-mail notification", "pupil's parent"], "pred_steps": "EnterAbsences: Open digitizing register system, select class, input ATA staff data, validate input data, save data to system, generate absence report, notify relevant staff.", "pred_act": ["Open", "select", "input", "validate", "save", "generate", "notify"], "pred_obj": ["EnterAbsences", "digitizing register system", "class", "ATA staff data", "input data", "system", "absence report", "relevant staff"], "tp": ["EnterAbsences", "absence report"]}
{"index": 50, "ucName": "InsertDelayAta", "uctext": "Digitizing the Register, collecting data from ATA staff class by class", "steps": "2. User selects tardies 3. User clicks 'Confirm' 1. The system shows the user a screen with all pupils present, with a 'tardy' checkbox next to it. If selected, select fields are activated beside it to select the time of the delay 4. The system sends the data to the server.", "dataset": "SMOS", "act": ["selects", "clicks", "shows", "selects", "are activated", "sends"], "obj": ["User", "tardies", "Confirm", "system", "screen", "pupils", "tardy", "checkbox", "fields", "time", "delay", "data", "server"], "pred_steps": "Functional steps: Open digitization interface, select ATA staff class, input class details, collect and validate ATA staff data, store data in digital register, confirm data integrity, close digitization interface.", "pred_act": ["Open", "select", "input", "collect", "validate", "store", "confirm", "close"], "pred_obj": ["digitization interface", "ATA staff class", "class details", "ATA staff data", "digital register", "data integrity"], "tp": ["select"]}
{"index": 51, "ucName": "ViewListClassesDoctor", "uctext": "This use case allows a teacher to view the list of classes in which he or she teaches.", "steps": "2. Select the academic year of interest. Displays the list of academic years in which there is at least one class in which the lecturer teaches 1. 3. Displays the classes associated with the selected academic year.", "dataset": "SMOS", "act": ["Select", "Displays", "Displays"], "obj": ["academic year", "class", "lecturer"], "pred_steps": "Teacher initiates request to view list of classes, system validates teacher credentials, retrieves list of classes taught by teacher from database, formats list for display, presents list to teacher on interface.", "pred_act": ["initiates", "validates", "retrieves", "formats", "presents"], "pred_obj": ["Teacher", "request", "list of classes", "system", "teacher credentials", "database", "list", "interface"], "tp": ["Teacher", "list of classes"]}
{"index": 52, "ucName": "ViewRegister", "uctext": "View Class Register", "steps": "1. View information related to the class register and in particular:Date, Absences, Disciplinary Notes, Tardiness and Excuses.", "dataset": "SMOS", "act": ["View"], "obj": ["class register", "Date", "Absences", "Disciplinary Notes", "Tardiness", "Excuses"], "pred_steps": "ViewRegister: Open application, navigate to class register section, retrieve and display class register data, allow user to scroll and view all entries, provide option to search for specific student, highlight selected entry if searched, enable user to sort register by various criteria, close register view when requested.", "pred_act": ["Open", "navigate", "retrieve", "display", "allow", "scroll", "view", "provide", "search", "highlight", "enable", "sort", "close"], "pred_obj": ["ViewRegister", "application", "class register section", "class register data", "entries", "specific student", "selected entry", "register", "criteria", "register view"], "tp": ["display", "view"]}
{"index": 53, "ucName": "DisplayOfAPagellaDoctor", "uctext": "Display of a report card", "steps": "2. Select the academic year of interest. 4. Select one of the displayed classes. 6. Select the student whose report card and the relevant quarter to view by clicking on the appropriate button. 1 . View the list of academic years in which there is at least one class in which the teacher teaches. 3. Displays the classes associated with the selected academic year. 5. Displays the list of pupils in the class chosen by the user 7. Displays the report card of the chosen pupil referring to the specified term.", "dataset": "SMOS", "act": ["Select", "View", "Displays", "Select", "Displays", "Displays", "Displays"], "obj": ["academic year", "class", "student", "report card", "quarter", "teacher", "pupil", "term"], "pred_steps": "Functional steps: Open application, navigate to report card section, retrieve report card data from database, populate report card template with retrieved data, render report card on screen, provide options to print or save report card.", "pred_act": ["Open", "navigate", "retrieve", "populate", "render", "provide"], "pred_obj": ["application", "report card section", "report card data", "database", "report card template", "report card", "options"], "tp": ["report card section", "report card data", "report card template", "report card"]}
{"index": 54, "ucName": "DisplayOfAStudentPage", "uctext": "The report card of the requesting student is displayed", "steps": "2. Select the report card of interest 1. The system displays the logged-in student's report cards on file 3. Displays details of the selected report card.", "dataset": "SMOS", "act": ["Select", "displays", "Displays"], "obj": ["report card", "system", "logged-in student's report cards", "details", "selected report card"], "pred_steps": "Receive student request, retrieve student ID from request, validate student ID, fetch student report card data from database using student ID, format report card data, generate student page with report card data, display student page on user interface.", "pred_act": ["Receive", "retrieve", "validate", "fetch", "format", "generate", "display"], "pred_obj": ["student request", "student ID", "request", "student report card data", "database", "report card data", "student page", "user interface"], "tp": ["display", "student report card data", "report card data"]}
{"index": 55, "ucName": "NewUser", "uctext": "Enter a new user into the system", "steps": "2. Fill in the form fields 3. Click on the 'Save' button System 1. Displays the user entry form consisting of the following fields: First Name, Last Name, e-mail, cell, login, password, password confirmation. Performs checks on the validity of the entered data and enters the new user into the archive; in case the entered data is invalid, activate the use case 'ErrorData'", "dataset": "SMOS", "act": ["Fill", "Click", "Displays", "Performs", "enters", "activate"], "obj": ["form fields", "Save' button", "System", "user entry form", "First Name", "Last Name", "e-mail", "cell", "login", "password", "password confirmation", "entered data", "archive", "use case 'ErrorData"], "pred_steps": "Display new user form, input user details including name, email, password, validate inputs, check for duplicate email, create user account, generate confirmation email, send confirmation email, store user data in database, display confirmation message.", "pred_act": ["Display", "input", "validate", "check", "create", "generate", "send", "store", "display"], "pred_obj": ["new user form", "user details", "name", "email", "password", "inputs", "duplicate email", "user account", "confirmation email", "user data", "database", "confirmation message"], "tp": ["Display", "display", "new user form", "user details", "name", "email", "password", "user account", "confirmation email", "user data", "confirmation message"]}
{"index": 56, "ucName": "ViewSchoolStudentData", "uctext": "View school information about the 'user", "steps": "1. 2. Search the 'archive for data related to the record of the class to which the student belongs View data about the student and in particular: Date, Absences, Disciplinary Notes, Tardies and Excuses.", "dataset": "SMOS", "act": ["Search", "View"], "obj": ["archive", "data", "record", "class", "student", "Date", "Absences", "Disciplinary Notes", "Tardies", "Excuses"], "pred_steps": "Authenticate user, retrieve user role and permissions, fetch school data related to user from database, filter data based on user role and permissions, display school data in a user-friendly interface, allow user to sort and filter data, provide options for exporting data, handle user requests for specific student data, update interface with requested student data, allow user to edit student data if permitted, save edited data to database, and notify user of successful data retrieval or edit.", "pred_act": ["Authenticate", "retrieve", "fetch", "filter", "display", "allow", "provide", "handle", "update", "allow", "save", "notify"], "pred_obj": ["user", "user role", "permissions", "school data", "database", "user-friendly interface", "data", "specific student data", "interface", "requested student data", "student data", "edit", "successful data retrieval", "successful edit"], "tp": ["school data", "data", "specific student data", "requested student data", "student data"]}
{"index": 57, "ucName": "ViewStudentData", "uctext": "This use case allows a parent to view information about their children.", "steps": "1. View a summary table with information about their children and in particular:Date, Absences, Disciplinary Notes, Tardiness and Excuses.", "dataset": "SMOS", "act": ["View"], "obj": ["summary table", "information", "children", "Date", "Absences", "Disciplinary Notes", "Tardiness", "Excuses"], "pred_steps": "Parent authenticates, selects child, system retrieves child's data, displays student information including name, age, grade, attendance, assignments, and grades, parent views data.", "pred_act": ["authenticates", "selects", "retrieves", "displays", "views"], "pred_obj": ["Parent", "child", "system", "child's data", "student information", "name", "age", "grade", "attendance", "assignments", "grades", "data"], "tp": ["views", "child", "attendance"]}
{"index": 58, "ucName": "DisplayOfAPage", "uctext": "The required student's report card is displayed", "steps": "2. Select the report card of interest 1. Displays the selected student's report cards 3. Displays details of the selected report card.", "dataset": "SMOS", "act": ["Select", "Displays", "Displays"], "obj": ["report card", "student's report cards", "selected report card"], "pred_steps": "Retrieve student data, fetch report card details from database, generate report card display, render report card on screen, allow user interaction with displayed report card if necessary.", "pred_act": ["Retrieve", "fetch", "generate", "render", "allow"], "pred_obj": ["student data", "report card details", "database", "report card display", "screen", "user interaction", "displayed report card"], "tp": ["report card details", "report card display", "displayed report card"]}
{"index": 59, "ucName": "PerformStudentMonitoring", "uctext": "Displays students with a number of notes and absences above a user-specified threshold.", "steps": "1. Search for students with a number of absences and notes above a specified threshold. 2. Displays retrieved information.", "dataset": "SMOS", "act": ["Search", "retrieve", "display"], "obj": ["students", "absences", "notes", "retrieved information"], "pred_steps": "Retrieve user-specified thresholds for notes and absences, query student data to get notes and absences count, filter students with counts above thresholds, display filtered students with their notes and absences count.", "pred_act": ["Retrieve", "query", "filter", "display"], "pred_obj": ["user-specified thresholds", "notes", "absences", "student data", "notes count", "absences count", "students", "counts", "filtered students"], "tp": ["Retrieve", "display", "notes", "absences", "notes count", "absences count", "students"]}
{"index": 60, "ucName": "ViewListRecords", "uctext": "View the list of records for an academic year", "steps": "2. Select academic year 1.Display a screen for selecting the academic year of interest. 3. Search the archive for all digital records for that year and display them associated with the class to which they belong.", "dataset": "SMOS", "act": ["Display", "Select", "Search", "Display"], "obj": ["academic year", "screen", "archive", "digital records", "class"], "pred_steps": "DisplayListRecords: OpenRecordsPage, ValidateUserPermissions, RetrieveAcademicYearRecords, PopulateRecordsList, DisplayRecordsList, HandleUserInteractions, UpdateUIWithUserSelections, AllowSortingFiltering, ProvidePaginationOptions, EnableExportFunctionality", "pred_act": ["OpenRecordsPage", "ValidateUserPermissions", "RetrieveAcademicYearRecords", "PopulateRecordsList", "DisplayRecordsList", "HandleUserInteractions", "UpdateUIWithUserSelections", "AllowSortingFiltering", "ProvidePaginationOptions", "EnableExportFunctionality"], "pred_obj": ["DisplayListRecords", "OpenRecordsPage", "ValidateUserPermissions", "RetrieveAcademicYearRecords", "PopulateRecordsList", "DisplayRecordsList", "HandleUserInteractions", "UpdateUIWithUserSelections", "AllowSortingFiltering", "ProvidePaginationOptions", "EnableExportFunctionality"], "tp": ["DisplayRecordsList"]}
{"index": 61, "ucName": "ViewRegister", "uctext": "Details about a class register", "steps": "1. Displays on the screen the information contained in the register organized by date. In particular it shows, for the selected date the list of pupils, specifying: absent/present, late entries and a form from which you can manage justifications and disciplinary notes.", "dataset": "SMOS", "act": ["Displays", "shows", "specifying", "manage"], "obj": ["screen", "information", "register", "date", "list of pupils", "absent", "present", "late entries", "form", "justifications", "disciplinary notes"], "pred_steps": "ViewRegister: Retrieve class register details from the database, validate user permission to view the register, display the register details including class name, instructor, schedule, and enrolled students, allow user to sort and filter displayed data, handle user interactions like clicking on student names for more details, and ensure responsive and user-friendly interface for optimal viewing experience.", "pred_act": ["Retrieve", "validate", "display", "allow", "sort", "filter", "handle", "ensure"], "pred_obj": ["ViewRegister", "class register details", "database", "user permission", "register", "class name", "instructor", "schedule", "enrolled students", "displayed data", "student names", "interface", "viewing experience"], "tp": ["display", "handle", "register", "student names"]}
{"index": 62, "ucName": "ViewingA Report Card", "uctext": "ViewingA Report Card", "steps": "1. Selects the academic year 3 . Selects the class of the student whose report card you want to view 5. Selects the student whose report card you want to view and the quarter of interest by clicking on the relevant button 2. Displays the list of classes in the system with a 'Report Card' button associated with each class next to it 4. Displays the list of pupils in the class chosen by the user 6. Displays the report card of the chosen pupil referring to the selected semester.", "dataset": "SMOS", "act": ["Selects", "Selects", "Selects", "Displays", "Displays", "Displays"], "obj": ["academic year", "class", "student", "report card", "quarter", "list of classes", "Report Card button", "system", "list of pupils", "pupil", "semester"], "pred_steps": "Open application, authenticate user, navigate to report card section, select desired report card, display report card details, allow user to scroll and zoom, provide options to download or print report card, handle user interactions, update user interface as needed, log user activity, exit report card view.", "pred_act": ["Open", "authenticate", "navigate", "select", "display", "allow", "provide", "handle", "update", "log", "exit"], "pred_obj": ["application", "user", "report card section", "desired report card", "report card details", "options", "user interactions", "user interface", "user activity", "report card view"], "tp": ["select", "display", "report card section", "desired report card", "report card details", "report card view"]}
{"index": 63, "ucName": "RegistrationAlSite", "uctext": "Allows a student to register with the system", "steps": "2. Fills in the form fields 3. Submits the form 1 . Displays the registration form containing: First name, Last name, Mobile phone, e-mail, username, password, password confirmation. 4. Enters the registration request into the system.", "dataset": "SMOS", "act": ["Displays", "Fills", "Submits", "Enters"], "obj": ["form fields", "registration form", "First name", "Last name", "Mobile phone", "e-mail", "username", "password", "password confirmation", "registration request", "system"], "pred_steps": "Display registration form, input student details including name, email, password, confirm password, validate input data, check email uniqueness, hash password, store student data in database, send confirmation email, display registration success message.", "pred_act": ["Display", "input", "validate", "check", "hash", "store", "send", "display"], "pred_obj": ["registration form", "student details", "name", "email", "password", "confirm password", "input data", "database", "confirmation email", "registration success message"], "tp": ["registration form", "name", "email", "password", "confirm password", "confirmation email"]}
{"index": 64, "ucName": "ViewUserDetails", "uctext": "View a user's details", "steps": "1. View the user's detailed information and in particular: First Name, Last Name, e-mail, cell, login, password.", "dataset": "SMOS", "act": ["View"], "obj": ["user's detailed information", "First Name", "Last Name", "e-mail", "cell", "login", "password"], "pred_steps": "ViewUserDetails: Open user interface, retrieve user ID from input, validate user ID, fetch user details from database using user ID, display user details on interface.", "pred_act": ["Open", "retrieve", "validate", "fetch", "display"], "pred_obj": ["ViewUserDetails", "user interface", "user ID", "input", "database", "user details"], "tp": ["display"]}
{"index": 65, "ucName": "EditUser", "uctext": "Edit one or more data regarding a user in the system", "steps": "1. Click on the 'edit' button System 2. Performs checks on the validity of the entered data and edits the user; in case the entered data is invalid, activate the use case 'ErrorData'", "dataset": "SMOS", "act": ["Click", "performs", "checks", "edits", "activate"], "obj": ["edit button", "System", "entered data", "user", "use case 'ErrorData"], "pred_steps": "OpenUserInterface,DisplayUserData,AllowUserSelection,EnableEditingFields,ReceiveUserEdits,ValidateEdits,SaveEditsToSystem,UpdateUserDataInDatabase,RefreshUserInterfaceWithUpdatedData", "pred_act": ["Open", "Display", "Allow", "Enable", "Receive", "Validate", "Save", "Update", "Refresh"], "pred_obj": ["OpenUserInterface", "DisplayUserData", "AllowUserSelection", "EnableEditingFields", "ReceiveUserEdits", "ValidateEdits", "SaveEditsToSystem", "UpdateUserDataInDatabase", "RefreshUserInterfaceWithUpdatedData"], "tp": ["Enable"]}
{"index": 66, "ucName": "DeleteUser", "uctext": "Delete a user from the system", "steps": "1. Deletes the user from the archive 2. Displays the list of updated users or", "dataset": "SMOS", "act": ["Deletes", "Displays"], "obj": ["user", "archive", "list", "updated users"], "pred_steps": "Authenticate user, verify user has permission to delete, receive user ID to delete, validate user ID exists in the system, confirm deletion with user, remove user data from database, update related records to reflect deletion, log deletion activity, notify user of successful deletion or any errors encountered.", "pred_act": ["Authenticate", "verify", "receive", "validate", "confirm", "remove", "update", "log", "notify"], "pred_obj": ["user", "permission", "user ID", "system", "user data", "database", "related records", "deletion activity", "errors"], "tp": ["user", "user ID", "user data"]}
{"index": 0, "ucName": "Input anagrafica of a laboratory", "uctext": ":\nIt allows the operator to enter the anagrafica of a laboratory analysis or any data that the characterize", "steps": "The operator activates the execution of the anagrafica input service Laboratory\n[S1] View the mask to enter information needed\n[S2] Inserts data about the anagrafica of laboratory\n[S3] Confirm placement\n[S4] Verify the data entered\n[S5] Stores data\n[S6] Notify that the operation it is finished with success", "dataset": "easyClinic", "act": ["activates", "View", "Inserts", "Confirm", "Verify", "Stores", "Notify"], "obj": ["operator", "execution", "anagrafica input service", "Laboratory", "mask", "information", "data", "anagrafica of laboratory", "operation"], "pred_steps": "Display input form for laboratory anagrafica, receive and validate user input for laboratory details including name, address, contact information, analysis type, and any other characterizing data, store validated data in the system database, and provide confirmation message to the operator upon successful data submission.", "pred_act": ["Display", "receive", "validate", "store", "provide", "submit"], "pred_obj": ["input form", "laboratory anagrafica", "user input", "laboratory details", "name", "address", "contact information", "analysis type", "characterizing data", "system database", "confirmation message", "operator", "data submission"], "tp": ["validate", "store", "laboratory anagrafica", "laboratory details", "contact information", "characterizing data", "operator"]}
{"index": 1, "ucName": "Delete visit", "uctext": ":\nIt allows the operator to delete a visit previously recorded", "steps": "The operator activates the execution of service elimination of a visit\n1 View the list of visits in chronological order\n2 Select the visit to delete\n3 Confirm the selection\n4 View the mask for viewing of visit\n5 Confirm the delete\n6 Delete the visit and examinations related to it\n7 Notify the operator that the operation was concluded successfully", "dataset": "easyClinic", "act": ["activates", "views", "selects", "confirms", "deletes", "notifies"], "obj": ["operator", "execution", "service elimination", "visit", "list of visits", "chronological order", "mask", "view", "delete", "examinations", "notification", "operation", "success"], "pred_steps": "Display list of recorded visits, select visit to delete, confirm deletion, check user permissions, delete selected visit from database, update visit list display, notify user of successful deletion or error if any.", "pred_act": ["Display", "select", "confirm", "check", "delete", "update", "notify"], "pred_obj": ["recorded visits", "visit", "deletion", "user permissions", "database", "visit list display", "user", "successful deletion", "error"], "tp": ["select", "confirm", "delete", "notify", "recorded visits", "visit", "deletion", "visit list display", "successful deletion"]}
{"index": 2, "ucName": "Input examination", "uctext": ":\nIt allows the operator to record results of a examination supported by a patient required a visit held in outpatient", "steps": "The operator activates the execution of input service of data from an examination\n1 View the mask to record of examination\n2 Input necessary data to registration of examination\n3 Confirm input\n4 Verify the data inserted by operator\n5 Stores data confirm the elimination \n6 Notify the operator that the operation was concluded successfully", "dataset": "easyClinic", "act": ["activates", "views", "inputs", "confirms", "verifies", "stores", "notify"], "obj": ["operator", "execution", "input service", "data", "examination", "mask", "record", "registration", "input", "data inserted", "elimination", "operation"], "pred_steps": "The operator initiates the input examination process, selects the patient record, enters the examination results, verifies the accuracy of the input data, saves the examination results to the patient's record, and finally, the system confirms the successful saving of the data.", "pred_act": ["initiates", "selects", "enters", "verifies", "saves", "confirms"], "pred_obj": ["operator", "input examination process", "patient record", "examination results", "input data", "system"], "tp": ["verifies", "confirms", "operator", "input examination process", "patient record", "input data"]}
{"index": 3, "ucName": "Changing examination", "uctext": ":\nIt allows the operator to change a examination  previously recorded", "steps": "The operator activates the execution of service to modify an examination\n1 View a list of tests carried out in chronological order\n2 Select the examination by change\n3 Confirm your selection \n4 View the mask for the modification of a examination\n5 Change of data \n6 Confirm Changes \n7 Verify the data inserted by operator\n8 updates the examination.\n6 Notify the operator that the operation was concluded successfully", "dataset": "easyClinic", "act": ["activates", "views", "selects", "confirms", "views", "changes", "confirms", "verifies", "updates", "notifies"], "obj": ["operator", "execution of service", "examination", "list of tests", "chronological order", "examination by change", "selection", "mask", "modification of a examination", "data", "changes", "operator", "examination", "operation"], "pred_steps": "Display list of previously recorded examinations, select examination to change, edit examination details, save changes, update examination record in the system.", "pred_act": ["Display", "select", "edit", "save", "update"], "pred_obj": ["previously recorded examinations", "examination", "examination details", "changes", "examination record", "system"], "tp": ["select", "update", "previously recorded examinations", "examination", "examination details", "changes", "examination record"]}
{"index": 4, "ucName": "Delete examination", "uctext": ":\nIt allows the operator to delete a Visit previously recorded", "steps": "The operator activates the execution of service elimination of an examination\n1 View a list of examinations conducted in chronological order\n2 Select the examination to change\n3 Confirm your selection \n4 View the mask for viewing examination\n5 confirms the deletion\n6 Delete the examination \n7 Notify the operator that the operation was concluded successfully", "dataset": "easyClinic", "act": ["activates", "views", "selects", "confirms", "deletes", "notifies"], "obj": ["operator", "execution", "service", "elimination", "examination", "list", "examinations", "examination(to change", "mask", "deletion"], "pred_steps": "Functional steps to implement the use case \"Delete examination\": Display list of recorded Visits, select Visit to delete, confirm deletion, verify Visit selection, delete selected Visit from database, update display to reflect deletion.", "pred_act": ["Display", "select", "confirm", "verify", "delete", "update"], "pred_obj": ["Functional steps", "use case", "Delete examination", "list", "recorded Visits", "Visit", "deletion", "Visit selection", "database", "display"], "tp": ["select", "confirm", "verify", "delete", "Delete examination", "list", "deletion"]}
{"index": 5, "ucName": "Book visit", "uctext": ":\nIt allows the operator to meet request for a booking service made by an ambulatory patient\nThe Operator has an interest in the record renting an outpatient service requested by a patient", "steps": "The operator activates the execution of service booking service\n1 The Operator has received a request for a first visit\n2 View the mask for booking of outpatient service\n3 Select the type of visit that the patient wants to make\n4 Inserts motivation of the request\n5 Confirm data inserted\n6 Verify that the sequence of reservations are valid (See BrValSeq)\n7 Select available dates\n8 Confirm your reservation \n9 Stores data \n10 Notify the operator that the operation was concluded successfully", "dataset": "easyClinic", "act": ["activates", "has received", "View", "Select", "Inserts", "Confirm", "Verify", "Select", "Confirm", "Stores", "Notify"], "obj": ["Operator", "execution", "service booking service", "request", "first visit", "mask", "booking", "outpatient service", "type of visit", "patient", "motivation", "data", "sequence of reservations", "BrValSeq", "available dates", "reservation", "operation"], "pred_steps": "Receive booking request from ambulatory patient, verify patient details, check available appointment slots, confirm service details with patient, allocate appointment time and date, generate and send appointment confirmation to patient, update patient record with booking information, and notify operator of successful booking.", "pred_act": ["Receive", "verify", "check", "confirm", "allocate", "generate", "send", "update", "notify"], "pred_obj": ["booking request", "ambulatory patient", "patient details", "appointment slots", "service details", "patient", "appointment time", "appointment date", "appointment confirmation", "patient record", "booking information", "operator", "successful booking"], "tp": ["Receive", "verify", "check", "confirm", "notify", "booking request", "patient details", "appointment slots", "service details", "patient", "appointment time", "appointment date", "appointment confirmation", "patient record", "booking information", "operator", "successful booking"]}
{"index": 6, "ucName": "Changing reservation", "uctext": ":\nIt allows the operator to meet request to change a reservation a service by Outpatient", "steps": "The operator activates the execution of service to changing a reservation\n1 View the list of reservations for the patient\n2 Select the reservation to be changed\n3 Confirm the selection\n4 View the mask for changing the reservations\n5 Select dates available\n6 confirm the change \n7 verifies that the sequence of reservations is valid (See BrValSeq)\n8 updates the data\n9 Notify the operator that the operation was concluded successfully", "dataset": "easyClinic", "act": ["activates", "views", "selects", "confirms", "views", "selects", "confirms", "verifies", "updates", "notifies"], "obj": ["operator", "execution", "service", "reservation", "list", "reservations", "patient", "mask", "dates", "sequence", "reservations", "BrValSeq", "data"], "pred_steps": "Operator receives request to change reservation, validates Outpatient identity, retrieves existing reservation details, checks availability for requested changes, updates reservation details as per Outpatient request, confirms changes with Outpatient, and saves updated reservation information in the system.", "pred_act": ["receives", "validates", "retrieves", "checks", "updates", "confirms", "saves"], "pred_obj": ["Operator", "request", "change", "reservation", "Outpatient", "identity", "existing reservation details", "availability", "requested changes", "reservation details", "Outpatient request", "updated reservation information", "system"], "tp": ["validates", "updates", "confirms", "Operator", "reservation", "existing reservation details", "reservation details", "updated reservation information"]}
{"index": 7, "ucName": "Cancel Reservation", "uctext": ":\nIt allows the operator to meet request for annulment of a renting an outpatient service by a patient", "steps": "The operator activates the execution of service cancellation of a Reservations\n1 View the list of reservations for the patient\n2 Select the reservation to be changing\n3 Confirm cancellation \n4 Verify that the sequence of reservations are valid (See BrValSeq)\n5 Cancel Reservation \n6 Notify the operator that the operation was concluded successfully", "dataset": "easyClinic", "act": ["activates", "View", "Select", "Confirm", "Verify", "Cancel", "Notify"], "obj": ["operator", "execution", "service cancellation", "Reservations", "list", "reservations", "patient", "reservation", "sequence", "reservations", "BrValSeq", "Reservation"], "pred_steps": "Verify patient identity, retrieve reservation details, confirm reservation exists, check cancellation policy, notify patient of cancellation terms, confirm patient's decision to cancel, update reservation status to cancelled, refund payment if applicable, generate cancellation confirmation, notify relevant departments, update system logs with cancellation details.", "pred_act": ["Verify", "retrieve", "confirm", "check", "notify", "confirm", "update", "refund", "generate", "notify", "update"], "pred_obj": ["patient identity", "reservation details", "reservation", "cancellation policy", "cancellation terms", "patient's decision", "reservation status", "payment", "cancellation confirmation", "relevant departments", "system logs", "cancellation details"], "tp": ["Verify", "confirm", "check", "notify", "confirm", "notify", "reservation details", "reservation", "cancellation policy", "cancellation terms", "reservation status", "cancellation confirmation", "cancellation details"]}
{"index": 8, "ucName": "Changing anagrafica of the patient", "uctext": ":\nIt allows the operator to change the anagrafica of a patient that are at outpatient\nIt deals with the modification of data about anagrafica a Patient", "steps": "The operator activates the execution of change Service  of the anagrafica of the patient\n1 View the mask for editing the anagrafica of patient\n2 Change the anagrafica of patient\n3 Confirm Changes \n4 Verify the data inserted by operator\n5 Remember the updates\n6 Notify that the operation finished with success", "dataset": "easyClinic", "act": ["activates", "View", "Change", "Confirm", "Verify", "Remember", "Notify"], "obj": ["operator", "execution", "change Service", "anagrafica", "patient", "mask", "editing", "data", "updates", "operation", "success"], "pred_steps": "Operator selects patient, accesses patient's anagrafica data, modifies required fields (name, address, contact details, etc.), saves changes, system validates modifications, updates patient record with new anagrafica data, and confirms changes to operator.", "pred_act": ["selects", "accesses", "modifies", "saves", "validates", "updates", "confirms"], "pred_obj": ["Operator", "patient", "patient's anagrafica data", "required fields", "name", "address", "contact details", "changes", "system", "modifications", "patient record", "new anagrafica data", "confirmation"], "tp": ["validates", "confirms", "Operator", "patient", "patient's anagrafica data", "changes", "new anagrafica data"]}
{"index": 9, "ucName": "input anagrafica of patient", "uctext": ":\nIt allows the operator to enter the anagrafica of a patient who contact the outpatient for the first time.", "steps": "1 View the mask for input of necessary information\n2 Inserts data about anagrafica of Patient\n3 Confirm input\n4 Verify the data inserted by operator\n5 Build and assigns Hospital Card (See BrCreCar)\n10 First visit", "dataset": "easyClinic", "act": ["View", "Inserts", "Confirm", "Verify", "Build", "assigns"], "obj": ["mask", "necessary information", "data", "anagrafica", "Patient", "operator", "Hospital Card", "BrCreCar", "First visit"], "pred_steps": "Operator accesses patient registration system, selects option to input new patient anagrafica, enters patient's personal details including name, date of birth, gender, contact information, address, selects save to store the entered anagrafica into the system database.", "pred_act": ["accesses", "selects", "enters", "selects", "store"], "pred_obj": ["Operator", "patient registration system", "option", "new patient anagrafica", "patient's personal details", "name", "date of birth", "gender", "contact information", "address", "save", "system database"], "tp": ["Operator", "new patient anagrafica"]}
{"index": 10, "ucName": "Access section of patient", "uctext": ":\nIt allows access to this patient by enabling the operator to meet one or more Requests received by Patient", "steps": "The operator activates the execution of service access to section patient\n1 valid patient\n2 View mask of section patient", "dataset": "easyClinic", "act": ["activates", "View"], "obj": ["operator", "execution", "service", "access", "section", "patient", "View", "mask"], "pred_steps": "Operator logs in, system authenticates user, operator selects patient from patient list, system retrieves patient information, operator views patient details, operator selects request to access section, system verifies operator permission for request, if permitted, system grants access to requested patient section, operator performs necessary actions, system saves changes if applicable, operator exits patient section.", "pred_act": ["logs", "authenticates", "selects", "retrieves", "views", "selects", "verifies", "grants", "performs", "saves", "exits"], "pred_obj": ["Operator", "system", "user", "patient", "patient list", "patient information", "patient details", "request", "patient section", "changes"], "tp": ["views", "Operator", "patient", "patient list", "patient section"]}
{"index": 11, "ucName": "Changing anagrafica laboratory", "uctext": ":\nIt allows the operator to change the anagrafica of a laboratory analysis\nIt deals with the modification of data about anagrafica of laboratory analysis", "steps": "The operator activates the execution of service changing of the anagrafica of laboratory\n1 View the list of laboratories in the SIO\n2 Select the laboratory which change the anagrafica\n3 Confirm your selection\n4 View the mask for editing the anagrafica of laboratory\n5 Changing the angrafica of laboratory\n6 Confirm the changes\n7 Verify the data insert by operator\n8 updates data\n9 Notify that the operation finished with success", "dataset": "easyClinic", "act": ["activates", "View", "Select", "Confirm", "View", "Changing", "Confirm", "Verify", "updates", "Notify"], "obj": ["operator", "execution", "service", "changing", "anagrafica", "laboratory", "list", "laboratories", "SIO", "laboratory", "mask", "editing", "anagrafica", "laboratory", "angrafica", "laboratory", "data", "operator", "updates", "operation", "success"], "pred_steps": "Operator accesses system, searches for the specific laboratory analysis, selects the desired analysis, modifies the anagrafica data (such as name, address, contact details), saves changes, and verifies that the modifications are correctly updated in the system.", "pred_act": ["accesses", "searches", "selects", "modifies", "saves", "verifies"], "pred_obj": ["Operator", "system", "specific laboratory analysis", "desired analysis", "anagrafica data", "name", "address", "contact details", "changes", "modifications"], "tp": ["selects", "verifies", "Operator", "specific laboratory analysis", "anagrafica data", "changes"]}
{"index": 12, "ucName": "Validate patient", "uctext": ":\nHe works to perform the functions necessary to authenticate an patient", "steps": "The Operator active enforcement of a depending on a specific patient\n1 View the mask for validating the patient\n2 input the code of hospital Card\n3 Confirm validation \n4 Verify that the code of hospital card or tax code to identify a patient within SIO\n5 Get patient information\n6 Transfer patient data to the memory", "dataset": "easyClinic", "act": ["active", "View", "input", "Confirm", "Verify", "Get", "Transfer"], "obj": ["Operator", "enforcement", "patient", "mask", "code", "hospital Card", "tax code", "SIO", "patient information", "patient data", "memory"], "pred_steps": "ValidatePatient:Receive patient identification information, retrieve patient data from database, verify provided information against database records, check for any discrepancies or inconsistencies, if valid, authenticate patient, if invalid, generate error message and deny access.", "pred_act": ["Receive", "retrieve", "verify", "check", "authenticate", "generate", "deny"], "pred_obj": ["patient identification information", "patient data", "database", "database records", "discrepancies", "inconsistencies", "patient", "error message", "access"], "tp": ["retrieve", "verify", "check", "authenticate", "patient identification information", "patient data", "database", "patient"]}
{"index": 13, "ucName": "Show clinic folder", "uctext": ":\nAllows a patient to view clinic folder own folder using the specific locations displaced of the outpatient", "steps": "The patient activates the execution of service display clinic folder\n1 Access to the database and retrieves information in patient clinic folder\n2 View details of patient and the list of visits in chronological order and pathology", "dataset": "easyClinic", "act": ["activates", "accesses", "retrieves", "views"], "obj": ["patient", "execution", "service", "display", "clinic", "folder", "database", "information", "details", "list", "visits", "chronological order", "pathology"], "pred_steps": "Patient requests to view clinic folder, system retrieves and displays patient's specific outpatient clinic folder location, patient navigates to and views the folder contents.", "pred_act": ["requests", "retrieves", "displays", "navigates", "views"], "pred_obj": ["Patient", "clinic folder", "system", "patient's specific outpatient clinic folder location", "folder contents"], "tp": ["retrieves", "views", "Patient", "clinic folder", "patient's specific outpatient clinic folder location"]}
{"index": 14, "ucName": "Show Reservations", "uctext": ":\nAllows a patient to view thr list of reservation profits using the appropriate locations displaced of the outpatient", "steps": "The patient activates the execution of service displaying their reservations\n1 Access to the database and retrieves information of the useful patient reservation\n2 View the list of the patient bookings in chronological order", "dataset": "easyClinic", "act": ["activates", "accesses", "retrieves", "view"], "obj": ["patient", "execution", "service", "reservations", "database", "information", "patient reservation", "list", "patient bookings"], "pred_steps": "Patient selects \"Show Reservations\" option, system retrieves and displays list of reservations with corresponding locations for the outpatient.", "pred_act": ["selects", "retrieves", "displays"], "pred_obj": ["Patient", "Show Reservations\" option", "system", "list of reservations", "locations", "outpatient"], "tp": ["retrieves", "Patient", "Show Reservations\" option", "list of reservations"]}
{"index": 15, "ucName": "Show anagrafica", "uctext": ":\nAllows a patient of view their anagrafica data using the specific locations displaced of the outpatient", "steps": "The patient activates the execution of service display their anagrafica data\n1 Access to the database and retrieves information about patient anagrafica\n2 View information patient anagrafiche", "dataset": "easyClinic", "act": ["activates", "accesses", "retrieves", "view"], "obj": ["patient", "execution", "service", "anagrafica data", "access", "database", "information", "view"], "pred_steps": "Functional steps: Patient accesses system, system retrieves patient's anagrafica data, system displays anagrafica data on specific outpatient location interface for patient to view.", "pred_act": ["accesses", "retrieves", "displays", "views"], "pred_obj": ["Patient", "system", "patient's anagrafica data", "specific outpatient location interface"], "tp": ["accesses", "retrieves", "views", "Patient", "patient's anagrafica data"]}
{"index": 16, "ucName": "Access Box Tower", "uctext": ":\nAllows the patient to access a locations of internally displaced of the outpatient", "steps": "Patient access to one of the locations displaced of the outpatient\n1 valid patient\n2 find patients information\n3 Transfer patient data in the memory\n4 View the root mask of a box tower", "dataset": "easyClinic", "act": ["access", "find", "Transfer", "View"], "obj": ["patient", "location", "outpatient", "patient information", "patient data", "memory", "root mask", "box tower"], "pred_steps": "Patient requests access to Box Tower, system verifies patient identity, retrieves patient information, fetches locations of internally displaced outpatients, displays available locations to patient, allows patient to select a location, and provides directions to the selected location.", "pred_act": ["requests", "verifies", "retrieves", "fetches", "displays", "allows", "provides"], "pred_obj": ["Patient", "Box Tower", "system", "patient identity", "patient information", "internally displaced outpatients", "locations", "available locations", "directions"], "tp": ["Patient", "Box Tower", "patient identity", "patient information", "locations"]}
{"index": 17, "ucName": "Validation patient", "uctext": ":\nHe works to perform the functions necessary to authenticate an patient", "steps": "Patient access to Box Tower \n1 View the mask for the login operation\n2 input the code of Hospital Card PIN\n3 Confirm validation \n4 Verify that the couple (Hospital Card PIN)\n5 identifies a patient within SIO", "dataset": "easyClinic", "act": ["access View input Confirm Verify identifies"], "obj": ["Patient", "Box Tower", "mask", "login operation", "code", "Hospital Card PIN", "validation", "couple", "SIO"], "pred_steps": "Receive patient identification information, validate the information against the database, check for matching records, if match found, authenticate the patient, if not, reject the authentication request and notify the user.", "pred_act": ["Receive", "validate", "check", "found", "authenticate", "reject", "notify"], "pred_obj": ["patient identification information", "database", "matching records", "patient", "authentication request", "user"], "tp": ["authenticate", "patient", "authentication request"]}
{"index": 18, "ucName": "Report reservations", "uctext": ":\nIt allows the operator to have a report on reservation", "steps": "The operator activates the execution of service report reservation\n1 View the mask for viewing of the report of reservation\n2 Select the time gap\n3 Select the type of information summary\n4 Confirm selection \n5 Access to the database and found in the training required\n6 View information obtained", "dataset": "easyClinic", "act": ["activates", "views", "selects", "confirms", "accesses", "found", "views"], "obj": ["operator", "execution", "service report reservation", "mask", "report", "reservation", "time gap", "type", "information summary", "selection", "database", "training", "information"], "pred_steps": "Operator accesses reservation system, selects report generation option, specifies report criteria (date range, reservation status, customer details), system retrieves reservation data based on criteria, generates report with reservation details (reservation ID, customer name, reservation date, status), displays report on screen, operator has option to save or print report.", "pred_act": ["accesses", "selects", "specifies", "retrieves", "generates", "displays", "has", "save", "print"], "pred_obj": ["Operator", "reservation system", "report generation option", "report criteria", "date range", "reservation status", "customer details", "system", "reservation data", "report", "reservation details", "reservation ID", "customer name", "reservation date", "status", "screen", "option", "save", "print report"], "tp": ["accesses", "selects", "displays", "Operator", "reservation system", "report criteria", "reservation status", "customer details", "reservation data", "report", "reservation details", "reservation ID", "reservation date", "option", "print report"]}
{"index": 19, "ucName": "Report visits", "uctext": ":\nIt allows the operator to have a record of the outpatient visits, inside so have a total of visits made by a patient, visits supported by a doctor etc", "steps": "The operator activates the execution of service record visits\n1 View the mask for viewing the reporting of visits\n2 Select the time gap\n3 Select the type of information summary\n4 Confirm selection \n5 Access to the database and found in the required training\n6 View information obtained", "dataset": "easyClinic", "act": ["activates", "views", "selects", "confirms", "accesses", "found", "views"], "obj": ["operator", "execution", "service record visits", "mask", "reporting", "visits", "time gap", "type", "information summary", "selection", "database", "training", "information"], "pred_steps": "Functional steps: Access system, authenticate operator, navigate to report visits section, input patient or doctor identifier, retrieve visit records, display total visits, filter visits by patient or doctor, generate report, save or export report.", "pred_act": ["Access", "authenticate", "navigate", "input", "retrieve", "display", "filter", "generate", "save", "export"], "pred_obj": ["system", "operator", "report visits section", "patient identifier", "doctor identifier", "visit records", "total visits", "patient", "doctor", "report"], "tp": ["Access", "operator", "report visits section", "visit records", "total visits", "report"]}
{"index": 20, "ucName": "Report examinations", "uctext": ":\nIt allows the operator to have a report on tests carried out in reference to visits made in outpatient", "steps": "The operator activates the execution of reporting service examinations\n1 View the mask for viewing the reporting of examinations\n2 Select the storm\n3 Confirm your selection \n4 Access to the database and found in the required training\n5 View information obtained", "dataset": "easyClinic", "act": ["activates", "View", "Select", "Confirm", "Access", "found", "View"], "obj": ["operator", "execution", "reporting service", "examinations", "mask", "viewing", "reporting", "storm", "selection", "database", "training", "information"], "pred_steps": "Operator selects reporting option, specifies criteria for tests carried out in reference to outpatient visits, system retrieves relevant test data, generates report with test results, operator reviews and saves or prints report.", "pred_act": ["selects", "specifies", "retrieves", "generates", "reviews", "saves", "prints"], "pred_obj": ["Operator", "reporting option", "criteria", "tests", "outpatient visits", "system", "relevant test data", "report", "test results"], "tp": ["selects", "reviews", "Operator", "reporting option", "report"]}
{"index": 21, "ucName": "The average time of waiting", "uctext": ":\nIt allows the operator to get an estimate the average time required to serve a booking", "steps": "The operator activates the execution of service for calculating the estimated average time\n1 View a mask to see the result of the calculation estimation of average time to serve a request reservations\n2 Start function \n3 View results calculating", "dataset": "easyClinic", "act": ["activates", "views", "see", "start", "views", "calculating"], "obj": ["operator", "activation", "execution", "service", "calculating", "estimated average time", "mask", "result", "calculation", "estimation", "average time", "request reservations", "function", "results"], "pred_steps": "Fetch all bookings data, calculate total waiting time by summing individual waiting times, count total number of bookings, compute average waiting time by dividing total waiting time by total number of bookings, display average waiting time to operator.", "pred_act": ["Fetch", "calculate", "sum", "count", "compute", "divide", "display"], "pred_obj": ["bookings data", "total waiting time", "individual waiting times", "total number of bookings", "average waiting time", "operator"], "tp": ["calculate", "compute", "total waiting time", "individual waiting times", "average waiting time", "operator"]}
{"index": 22, "ucName": "Delete anagrafica laboratory", "uctext": ":\nIt allows the operator to remove the anagrafica of a laboratory analysis.\nIt works for the elimination of data at anagrafica on a laboratory analysis.", "steps": "The operator activates the execution of the elimination of the anagrafica of the laboratory.\n1 View the list of laboratories in the SIO.\n2 Select the laboratory which needs to change the anagrafica.\n3 Confirm your selection.\n4 View the mask to eliminate the anagrafica of the laboratory.\n5 Confirm the delete of laboratory.\n6 Delete the data about anagrafica of laboratory.\n7 Notify that the operation is finished with success.", "dataset": "easyClinic", "act": ["activates", "View", "Select", "Confirm", "View", "Confirm", "Delete", "Notify"], "obj": ["operator", "execution", "elimination", "anagrafica", "laboratory", "list", "laboratories", "SIO", "laboratory(duplicate", "mask", "delete", "data"], "pred_steps": "Functional steps to implement the use case: Verify operator permissions, display list of laboratory analyses, select analysis to delete, confirm deletion, remove selected anagrafica data from the system, update database, and notify operator of successful deletion.", "pred_act": ["Verify", "display", "select", "confirm", "remove", "update", "notify"], "pred_obj": ["operator permissions", "list of laboratory analyses", "analysis", "selected anagrafica data", "database", "operator", "successful deletion"], "tp": ["select", "confirm", "remove", "notify", "selected anagrafica data", "database", "operator", "successful deletion"]}
{"index": 23, "ucName": "Plans reservations", "uctext": ":\nIt allows the operator to view and print plans of bookings made for each type visit in tabular form", "steps": "The operator activates the execution of service to view and print plans reservations\n1 View a mask to view and print plans reservations\n2 Select the type of visit\n3 Enable \n4 Access to the database and found in the required training\n5 View information obtained", "dataset": "easyClinic", "act": ["activates", "view", "print", "select", "enable", "access", "found", "view"], "obj": ["operator", "execution of service", "plans reservations", "mask", "type of visit", "database", "required training", "information obtained"], "pred_steps": "Functional steps: Display tabular view of bookings for each type of visit, allow operator to filter and sort data, provide option to print the displayed plans.", "pred_act": ["Display", "allow", "filter", "sort", "provide", "print"], "pred_obj": ["bookings", "type of visit", "operator", "data", "plans"], "tp": ["allow", "print", "bookings", "type of visit", "operator", "data", "plans"]}
{"index": 24, "ucName": "Inserting doctor anagrafica", "uctext": ":\nIt allows the operator to input the anagrafica of a doctor who works at the outpatient.\nThe Operator is responsible for the input of the doctor anagrafica in the SIO.", "steps": "View the mask for input of needed information\nInsert data of doctor anagrafica\nConfirm input\nVerify the data insert by the operator\nStore data\nNotify that the operation is finished with success\nData entered invalid:\n4.1. Display a message showing the data deemed invalid\n4.2. Take back running from point 1, underpinned the fields of the form with data inserted by the operator", "dataset": "easyClinic", "act": ["View", "Insert", "Confirm", "Verify", "Store", "Notify", "Display", "Take back", "output"], "obj": ["mask", "needed information", "data of doctor anagrafica", "input", "data", "operator", "operation", "message", "data deemed invalid", "point", "fields", "form", "data inserted by the operator"], "pred_steps": "The functional steps to implement the use case \"Inserting doctor anagrafica\" are: Display input form for doctor anagrafica, receive input data from operator, validate input data, store validated data in SIO, and provide confirmation of successful data insertion to operator.", "pred_act": ["Display", "receive", "validate", "store", "provide", "output"], "pred_obj": ["functional steps", "use case", "Inserting doctor anagrafica", "input form", "doctor anagrafica", "input data", "operator", "validated data", "SIO", "confirmation", "successful data insertion"], "tp": ["Display", "validate", "store", "output", "Inserting doctor anagrafica", "input form", "doctor anagrafica", "input data", "operator", "validated data", "successful data insertion"]}
{"index": 25, "ucName": "Changing  doctor anagrafica", "uctext": ":\nIt allows the operator to change the anagrafica of a doctor who works at the outpatient. It deals with the modification of data about a doctor anagrafica", "steps": "The operator activates the execution of Chanching service of the doctor anagrafica\n1 View the list of doctors present in the SIO.\n2 Select the anagrafica doctor which change the anagrafica\n3 Confirm the selection\n4 View the mask for changing of the doctor anagrafica\n5 Changing the anagrafica of doctor\n6 Confirm Changes\n7 Verify the data insert by operator\n8 Remember the updates\n9 Notify that the operation is finished with success.", "dataset": "easyClinic", "act": ["activates", "View", "Select", "Confirm", "Changing", "Confirm", "Verify", "Remember", "Notify"], "obj": ["operator", "execution", "Chanching service", "doctor anagrafica", "list of doctors", "SIO", "anagrafica doctor", "mask", "data", "updates", "operation", "success"], "pred_steps": "Functional steps: Access doctor database, search for doctor by unique identifier, retrieve doctor's current anagrafica data, display anagrafica data for review, allow operator to modify desired fields, validate modified data for correctness and completeness, save changes to doctor's anagrafica data, update doctor database with revised anagrafica, and generate confirmation message of successful update.", "pred_act": ["Access", "search", "retrieve", "display", "allow", "modify", "validate", "save", "update", "generate"], "pred_obj": ["doctor database", "unique identifier", "doctor's current anagrafica data", "anagrafica data", "operator", "desired fields", "modified data", "doctor's anagrafica data", "revised anagrafica", "confirmation message of successful update"], "tp": ["validate", "doctor database", "doctor's current anagrafica data", "anagrafica data", "operator", "modified data", "doctor's anagrafica data", "revised anagrafica"]}
{"index": 26, "ucName": "Delete doctor anagrafica", "uctext": ":\nIt allows the operator to delete the anagrafica of a doctor who works at the outpatient", "steps": "The operator activates the execution of delete of the register service laboratory\n1 View the list of laboratories that are in the SIO\n2 Select the doctor which changing the anagrafica\n3 Confirm the selection\n4 View the mask to delete the doctor anagrafica\n6 confirm to delete of doctor\n7 Delete the data  about anagrafica of doctor\n8 Notify that the operation is finished with success", "dataset": "easyClinic", "act": ["activates", "View", "Select", "Confirm", "View", "confirm", "Delete", "Notify"], "obj": ["operator", "execution", "delete", "register service", "laboratory", "list", "laboratories", "SIO", "doctor", "anagrafica", "selection", "mask", "data"], "pred_steps": "Operator selects delete doctor anagrafica option, system displays list of doctors at outpatient, operator selects doctor to delete, system confirms deletion request, operator confirms, system deletes selected doctor's anagrafica, system updates database and displays confirmation of deletion.", "pred_act": ["selects", "displays", "selects", "confirms", "confirms", "deletes", "updates", "displays"], "pred_obj": ["Operator", "delete doctor anagrafica option", "system", "list of doctors", "outpatient", "doctor", "deletion request", "selected doctor's anagrafica", "database", "confirmation of deletion"], "tp": ["selects", "selects", "confirms", "confirms", "deletes", "Operator", "delete doctor anagrafica option", "list of doctors", "doctor", "deletion request", "selected doctor's anagrafica", "database"]}
{"index": 27, "ucName": "Validate operator", "uctext": ":\nHe works to perform the functions necessary to authenticate an operator", "steps": "The operator tries to log on system\n1 View the mask for validation of operator\n2 Inserts login and password\n3 Confirm data\n4 verify login and identify password of a operator within the SIO\n5 allows access\n6 View the main mask", "dataset": "easyClinic", "act": ["tries", "View", "Inserts", "Confirm", "verify", "allows", "View"], "obj": ["operator", "system", "mask", "validation", "login", "password", "data", "SIO", "access", "main mask"], "pred_steps": "Receive operator credentials, validate credentials against stored data, generate authentication result, return result to requesting system, log authentication attempt with timestamp and result.", "pred_act": ["Receive", "validate", "generate", "return", "log"], "pred_obj": ["operator credentials", "stored data", "authentication result", "requesting system", "authentication attempt", "timestamp", "result"], "tp": ["validate", "operator credentials", "stored data", "authentication result", "requesting system", "authentication attempt"]}
{"index": 28, "ucName": "Record visit", "uctext": ":\nIt allows the operator to record a visit held in outpatient", "steps": "The operator activates the execution of registration service of a visit\n1 View the mask to record of the visit\n\n2 inputs the neccesary data of the registration of visit\n3 Confirm input\n4 Verify the data inserted by operator\n5 Stores data\n6 Notify the operator that the operation was concluded successfully", "dataset": "easyClinic", "act": ["activates", "View", "inputs", "Confirm", "Verify", "Stores", "Notify"], "obj": ["operator", "execution", "registration service", "visit", "mask", "record", "neccesary data", "registration", "input", "data", "operation"], "pred_steps": "Operator initiates recording, system captures visit details including patient information, outpatient department, visit date and time, system stores visit record in the database, operator confirms recording accuracy, system updates visit status to recorded, operator ends recording session.", "pred_act": ["initiates", "captures", "stores", "confirms", "updates", "ends"], "pred_obj": ["Operator", "system", "visit details", "patient information", "outpatient department", "visit date", "time", "database", "recording accuracy", "visit status", "recording session"], "tp": ["stores", "confirms", "Operator", "visit details", "database"]}
{"index": 29, "ucName": "Changing visit", "uctext": ":\nIt allows the operator to change a visit previously recorded", "steps": "The operator activates the execution of service editing a visit\n1 View the list of visits in chronological order\n2 Select the visit by change\n3 Confirm your selection \n4 View the mask for the modification of a visit\n5 Changing data of the visit\n6 Confirm Changes \n7 Verify the data insert by operator\n8 Remember the updates\n9 Notify to the operator that the operation was concluded successfully", "dataset": "easyClinic", "act": ["activates", "views", "selects", "confirms", "views", "changes", "confirms", "verifies", "remembers", "notifies"], "obj": ["operator", "execution", "service", "visit", "list", "visits", "chronological order", "change", "selection", "mask", "modification", "data", "updates", "operation"], "pred_steps": "Display visit list, select visit to change, retrieve visit details, allow operator to edit visit information, save changes, update visit record in the system, confirm changes saved successfully.", "pred_act": ["Display", "select", "retrieve", "allow", "edit", "save", "update", "confirm"], "pred_obj": ["visit list", "visit", "visit details", "operator", "visit information", "changes", "visit record", "system"], "tp": ["select", "confirm", "visit list", "visit", "visit details", "operator", "visit information", "changes", "visit record"]}
{"index": 0, "ucName": "AuthenticationAdministrator", "steps": "1. Administrator logs in to the system. \n2. The system displays the login form for entering data (user name and password). \n3. The administrator enters the data and submits the authentication request. \n4. The system receives the form, verifies the data and allows the administrator access to the system with the specified access permissions.", "dataset": "eANCI", "act": ["logs", "displays", "enters", "submits", "receives", "verifies", "allows"], "obj": ["Administrator", "system", "login form", "data", "user name", "password", "authentication request", "access permissions"], "pred_steps": "Administrator initiates authentication request, system validates administrator credentials, retrieves user information from database, compares provided credentials with stored information, verifies credential match, grants access if authenticated, generates and stores authentication token, redirects administrator to administration dashboard, monitors session activity, and logs out administrator on session expiration or explicit logout request.", "pred_act": ["initiates", "validates", "retrieves", "compares", "verifies", "grants", "generates", "stores", "redirects", "monitors", "logs out"], "pred_obj": ["Administrator", "system", "administrator credentials", "user information", "database", "provided credentials", "stored information", "authentication token", "administration dashboard", "session activity", "session expiration", "explicit logout request"], "tp": ["validates", "verifies", "Administrator", "system", "administrator credentials", "user information", "provided credentials", "authentication token"]}
{"index": 1, "ucName": "LogoutEmployee", "steps": "1. The employee wants to end the work session and clicks on the Logout button. \n2. The system disconnects the employee from the system and returns to the main screen.", "dataset": "eANCI", "act": ["wants", "clicks", "disconnects", "returns"], "obj": ["employee", "work session", "Logout button", "system", "main screen"], "pred_steps": "Verify user authentication, retrieve user session, invalidate user session, update session status in database to logged out, redirect user to login page, display logout confirmation message.", "pred_act": ["Verify", "retrieve", "invalidate", "update", "redirect", "display"], "pred_obj": ["user authentication", "user session", "user session", "session status", "database", "login page", "logout confirmation message"], "tp": []}
{"index": 2, "ucName": "HowToBecomeAVolunteer", "steps": "1. The Citizen accesses this descriptive screen \n2. The system responds to the need by letting him know how to become a Civil Defense volunteer, and of the requirements that the Citizen will necessarily have to meet. \n3. The Citizen takes note of what is written and therefore wishes to access the associated form, and therefore, the use case DownloadModule will be called.", "dataset": "eANCI", "act": ["accesses", "responds", "letting", "take note", "wishes to access", "will be called"], "obj": ["Citizen", "descriptive screen", "system", "Civil Defense volunteer", "requirements", "written", "associated form", "DownloadModule"], "pred_steps": "Visit website, navigate to volunteer section, click on 'Become a Volunteer' button, fill out registration form with personal details, select preferred volunteer roles, read and agree to terms and conditions, submit form, receive confirmation email, attend orientation session, complete training modules, get assigned to volunteer tasks, track volunteer hours and activities, receive feedback and evaluations, earn rewards and recognitions for volunteering.", "pred_act": ["Visit", "navigate", "click", "fill out", "select", "read", "agree", "submit", "receive", "attend", "complete", "get assigned", "track", "receive", "earn"], "pred_obj": ["website", "volunteer section", "Become a Volunteer' button", "registration form", "personal details", "preferred volunteer roles", "terms", "conditions", "form", "confirmation email", "orientation session", "training modules", "volunteer tasks", "volunteer hours", "activities", "feedback", "evaluations", "rewards", "recognitions"], "tp": ["volunteer section", "form", "volunteer tasks", "volunteer hours"]}
{"index": 3, "ucName": "Committee", "steps": "1. The Citizen accesses this service in order to take note of the hierarchical composition of the Civil Defense. \n2. The system responds to the Citizen's curiosity with a screen where there is an organizational chart of the components of the Municipal Civil Defense in accordance with the other governmental institutions in the area according to the law of the Municipal Council approved by all.", "dataset": "eANCI", "act": ["accesses", "take note of", "responds", "there is"], "obj": ["Citizen", "service", "hierarchical composition", "Civil Defense", "system", "curiosity", "screen", "organizational chart", "components", "Municipal Civil Defense", "governmental institutions", "area", "law", "Municipal Council"], "pred_steps": "CreateCommittee, AddMembersToCommittee, VerifyMemberEligibility, AssignCommitteeRoles, SetCommitteeGoals, ScheduleCommitteeMeetings, ConductMeetings, RecordMeetingMinutes, DocumentDecisions, CommunicateDecisionsToStakeholders, ReviewProgressAgainstGoals, AdjustGoalsAsNeeded, EvaluateCommitteePerformance, DisbandCommitteeIfComplete.", "pred_act": ["CreateCommittee", "AddMembersToCommittee", "VerifyMemberEligibility", "AssignCommitteeRoles", "SetCommitteeGoals", "ScheduleCommitteeMeetings", "ConductMeetings", "RecordMeetingMinutes", "DocumentDecisions", "CommunicateDecisionsToStakeholders", "ReviewProgressAgainstGoals", "AdjustGoalsAsNeeded", "EvaluateCommitteePerformance", "DisbandCommitteeIfComplete"], "pred_obj": ["CreateCommittee", "AddMembersToCommittee", "VerifyMemberEligibility", "AssignCommitteeRoles", "SetCommitteeGoals", "ScheduleCommitteeMeetings", "ConductMeetings", "RecordMeetingMinutes", "DocumentDecisions", "CommunicateDecisionsToStakeholders", "ReviewProgressAgainstGoals", "AdjustGoalsAsNeeded", "EvaluateCommitteePerformance", "DisbandCommitteeIfComplete"], "tp": []}
{"index": 4, "ucName": "DownloadIscription", "steps": "1. The Citizen accesses this screen because he/she wants to register for Civil Service. \n2. The system responds with a page where the requesting Citizen can download the form to fill out and submit to the Civil Defense office.", "dataset": "eANCI", "act": ["accesses", "wants", "register", "responds", "can download", "fill out", "submit"], "obj": ["Citizen", "screen", "Civil Service", "system", "page", "form", "Civil Defense office"], "pred_steps": "User initiates download request, system validates user authentication, retrieves download link from database, checks link validity, prepares download package, initiates download process, monitors download progress, handles any interruptions or errors, notifies user of download completion or failure, and updates download history log.", "pred_act": ["initiates", "validates", "retrieves", "checks", "prepares", "initiates", "monitors", "handles", "notifies", "updates"], "pred_obj": ["User", "download request", "system", "user authentication", "download link", "database", "link validity", "download package", "download process", "download progress", "interruptions", "errors", "download completion", "download failure", "download history log"], "tp": ["system"]}
{"index": 5, "ucName": "DownloadModule", "steps": "1. The Citizen accesses the download of the form as he/she wants to join Volunteer \n3. \n2. The system responds to this need with the ability to view the form The Citizen acknowledges the form, and decides to start downloading the file. \n4. The system responds to the Citizen's need by saving the form to join the Volunteer Action.", "dataset": "eANCI", "act": ["accesses", "responds", "view", "acknowledges", "decides", "start downloading", "responds", "saving"], "obj": ["Citizen", "download", "form", "Volunteer", "system", "ability", "need", "file", "Volunteer Action"], "pred_steps": "InitiateDownloadRequest, VerifyUserPermissions, AuthenticateUser, FetchModuleDetails, CheckSystemCompatibility, DisplayDownloadConfirmation, InitiateDownloadProcess, MonitorDownloadProgress, HandleDownloadErrors, VerifyDownloadIntegrity, SaveModuleToFileSystem, NotifyUserOfCompletion", "pred_act": ["InitiateDownloadRequest", "VerifyUserPermissions", "AuthenticateUser", "FetchModuleDetails", "CheckSystemCompatibility", "DisplayDownloadConfirmation", "InitiateDownloadProcess", "MonitorDownloadProgress", "HandleDownloadErrors", "VerifyDownloadIntegrity", "SaveModuleToFileSystem", "NotifyUserOfCompletion"], "pred_obj": ["InitiateDownloadRequest", "VerifyUserPermissions", "AuthenticateUser", "FetchModuleDetails", "CheckSystemCompatibility", "DisplayDownloadConfirmation", "InitiateDownloadProcess", "MonitorDownloadProgress", "HandleDownloadErrors", "VerifyDownloadIntegrity", "SaveModuleToFileSystem", "NotifyUserOfCompletion"], "tp": ["InitiateDownloadRequest", "InitiateDownloadProcess", "SaveModuleToFileSystem", "DisplayDownloadConfirmation"]}
{"index": 6, "ucName": "ManageModifications", "steps": "1. The employee after authenticating in the system accesses the Civil Defense feature to edit the relevant forms. \n2. The system responds to this need with the ability to display a screen with the use cases UpdateAtmosphericConditions, UpdateEnvironmentalAnalysis, UpdateCompetitionsBands. \n3. The 'employee selects the feature to be modified. \n4. The system responds to the employee's need with the requested change form.", "dataset": "eANCI", "act": ["authenticates", "accesses", "edit", "responds", "display", "selects", "responds"], "obj": ["employee", "system", "Civil Defense feature", "relevant forms", "UpdateAtmosphericConditions", "UpdateEnvironmentalAnalysis", "UpdateCompetitionsBands", "feature", "change form"], "pred_steps": "Receive modification request, validate request details, check user permissions, retrieve existing data, display modification options, accept user input for modifications, validate input data, apply modifications to data, save modified data, generate modification report, send notification of modifications to relevant stakeholders, update modification history log.", "pred_act": ["Receive", "validate", "check", "retrieve", "display", "accept", "validate", "apply", "save", "generate", "send", "update"], "pred_obj": ["modification request", "request details", "user permissions", "existing data", "modification options", "user input", "input data", "data", "modified data", "modification report", "notification of modifications", "relevant stakeholders", "modification history log"], "tp": ["display"]}
{"index": 7, "ucName": "Fires", "steps": "1. The Citizen can access this section if he or she has chosen to view the Risks use case, and decides to learn more about the possible causes that trigger fires. \n2. The system responds to the Citizen's need with a detailed description of how to prevent fires, and who deals with them.", "dataset": "eANCI", "act": ["access", "choose", "view", "decide", "learn", "respond", "describe", "deal"], "obj": ["Citizen", "Risks use case", "possible causes", "fires", "system", "detailed description", "how to prevent fires", "who deals with them"], "pred_steps": "Detect fire incident, trigger alarm, gather sensor data, analyze data for fire confirmation, notify emergency services, activate fire suppression system, initiate evacuation protocol, record incident details, generate incident report, review and update system performance.", "pred_act": ["Detect", "trigger", "gather", "analyze", "notify", "activate", "initiate", "record", "generate", "review", "update"], "pred_obj": ["fire incident", "alarm", "sensor data", "data", "emergency services", "fire suppression system", "evacuation protocol", "incident details", "incident report", "system performance"], "tp": ["fire incident", "fire suppression system", "incident details"]}
{"index": 8, "ucName": "MonitoringIdro-pluviometric", "steps": "1. The Citizen accesses this screen as he wants to satisfy his curiosity in knowing the situation monitored by the Civil Defense of municipal water \n2. The system responds with a screen where he can view information about how the municipal water is being monitored, the bacteriological situation, and an update of the latest analysis performed on the samples taken.", "dataset": "eANCI", "act": ["accesses", "wants", "satisfy", "knowing", "responds", "view"], "obj": ["Citizen", "screen", "curiosity", "situation", "Civil Defense", "municipal water", "system", "information", "municipal water", "bacteriological situation", "update", "analysis", "samples"], "pred_steps": "Collect sensor data from idro-pluviometric stations, preprocess data to ensure accuracy, store preprocessed data in a centralized database, analyze data to detect trends and anomalies, generate alerts for any detected anomalies, display real-time and historical data on a user-friendly interface, allow users to set thresholds for alerts, provide customizable reports and dashboards, enable data export in various formats, and ensure system security and data privacy.", "pred_act": ["Collect", "preprocess", "store", "analyze", "detect", "generate", "display", "allow", "set", "provide", "enable", "customize", "ensure"], "pred_obj": ["sensor data", "idro-pluviometric stations", "preprocessed data", "centralized database", "trends", "anomalies", "alerts", "real-time data", "historical data", "user-friendly interface", "thresholds", "customizable reports", "dashboards", "various formats", "system security", "data privacy"], "tp": []}
{"index": 9, "ucName": "MonitoringVulcanic", "steps": "1. The Citizen accesses this screen as he or she wants to know more about how the Civil Defense actually performs monitoring of volcanoes in the municipality and nationwide territory, with a detailed description of the information technologies adopted. \n2. The system responds to the request by displaying an information sheet describing everything the Civil Defense does to keep track of volcanic activity.", "dataset": "eANCI", "act": ["accesses", "responds", "displaying", "describing", "keeps", "track"], "obj": ["Citizen", "screen", "Civil Defense", "volcanoes", "municipality", "nationwide territory", "information technologies", "system", "request", "information sheet", "volcanic activity"], "pred_steps": "ReceiveVolcanicData, ProcessVolcanicData, AnalyzeVolcanicActivity, GenerateAlertsIfNecessary, DisplayVolcanicStatus, StoreVolcanicData, UpdateVolcanicModels, ProvideHistoricalDataAccess", "pred_act": ["ReceiveVolcanicData", "ProcessVolcanicData", "AnalyzeVolcanicActivity", "GenerateAlertsIfNecessary", "DisplayVolcanicStatus", "StoreVolcanicData", "UpdateVolcanicModels", "ProvideHistoricalDataAccess"], "pred_obj": ["ReceiveVolcanicData", "ProcessVolcanicData", "AnalyzeVolcanicActivity", "GenerateAlertsIfNecessary", "DisplayVolcanicStatus", "StoreVolcanicData", "UpdateVolcanicModels", "ProvideHistoricalDataAccess"], "tp": ["ProcessVolcanicData", "AnalyzeVolcanicActivity", "DisplayVolcanicStatus", "UpdateVolcanicModels"]}
{"index": 10, "ucName": "UsefulNumbers", "steps": "1. The Citizen accesses this page to take advantage of the telephone contact information to contact in case of danger of any kind. \n2. The system responds by allowing the display of a descriptive card with the telephone numbers of the agencies concerned with the safety of the Citizen himself. \n3. The Citizen by accessing this screen can, in addition, view advice, and standard procedures, divided into categories, about the correct communication between him and the Call Center contact person of a given municipal body. \n4. The system responds with an emergency support screen corresponding to the service the Citizen decides to contact.", "dataset": "eANCI", "act": ["accesses", "take advantage", "contact", "responds", "allows", "display", "accessing", "can view", "responds", "decides to contact"], "obj": ["Citizen", "page", "telephone contact information", "system", "descriptive card", "telephone numbers", "agencies", "safety", "screen", "advice", "standard procedures", "categories", "communication", "Call Center contact person", "municipal body", "emergency support screen", "service"], "pred_steps": "Display list of useful numbers, allow user to search for specific number by category or keyword, provide option to add new number with category and description, allow user to edit or delete existing numbers, save changes to database, and enable sorting of numbers by category or relevance.", "pred_act": ["Display", "allow", "provide", "add", "allow", "edit", "delete", "save", "enable", "sort"], "pred_obj": ["list of useful numbers", "user", "specific number", "category", "keyword", "option", "new number", "description", "existing numbers", "changes", "database", "sorting", "relevance"], "tp": ["Display", "allow", "allow", "enable", "category", "description"]}
{"index": 11, "ucName": "CivilProtection", "steps": "1. The citizen accesses the descriptive sheet about general information about the municipal body in question. \n2. The system responds to the information functionality, allowing the display of a description about the active roles played by the Civil Protection.", "dataset": "eANCI", "act": ["accesses", "responds", "allows", "display", "responds", "allows", "display"], "obj": ["citizen", "descriptive sheet", "general information", "municipal body", "system", "information functionality", "description", "active roles", "Civil Protection"], "pred_steps": "Receive civil protection alert, validate alert authenticity, fetch alert details, assess threat level, notify relevant authorities, update emergency database, initiate evacuation protocol if necessary, dispatch response teams, monitor situation progress, provide real-time updates to authorities and public, log all actions and communications, conduct post-event analysis, and generate report for future improvements.", "pred_act": ["Receive", "validate", "fetch", "assess", "notify", "update", "initiate", "dispatch", "monitor", "provide", "log", "conduct", "generate"], "pred_obj": ["civil protection alert", "alert authenticity", "alert details", "threat level", "relevant authorities", "emergency database", "evacuation protocol", "response teams", "situation progress", "real-time updates", "authorities", "public", "actions", "communications", "post-event analysis", "report", "future improvements"], "tp": ["civil protection alert"]}
{"index": 12, "ucName": "EditCitizen", "steps": "1. The employee presses the edit citizen button. \n2. The system displays a form for editing the citizen. \n3. The clerk enters the data. \n4. The system saves the changes made.", "dataset": "eANCI", "act": ["presses", "displays", "enters", "saves"], "obj": ["employee", "edit citizen button", "system", "form", "clerk", "data", "changes"], "pred_steps": "OpenEditCitizenForm, RetrieveCitizenData, DisplayCitizenData, AllowUserToEditFields, ValidateEditedData, SaveEditedCitizenData, CloseEditCitizenForm, UpdateCitizenListDisplay", "pred_act": ["OpenEditCitizenForm", "RetrieveCitizenData", "DisplayCitizenData", "AllowUserToEditFields", "ValidateEditedData", "SaveEditedCitizenData", "CloseEditCitizenForm", "UpdateCitizenListDisplay"], "pred_obj": ["OpenEditCitizenForm", "RetrieveCitizenData", "DisplayCitizenData", "AllowUserToEditFields", "ValidateEditedData", "SaveEditedCitizenData", "CloseEditCitizenForm", "UpdateCitizenListDisplay"], "tp": ["DisplayCitizenData", "SaveEditedCitizenData", "CloseEditCitizenForm"]}
{"index": 13, "ucName": "Waste", "steps": "1. The Citizen accesses the fact sheet because he wants to know the actual waste situation in his municipality, and whether of course, the environment is protected by the Civil Defense with the help of municipal agencies. \n2. The system responds to this need with a large and descriptive screen where the goals of the Municipal Council and informative notes on the dangers of waste fires are pointed out, and what kind of waste collection is in your municipality. In addition, you can view the use case ViewResultsToxicologicalAmbiental i.", "dataset": "eANCI", "act": ["accesses", "responds", "points out", "can view"], "obj": ["Citizen", "fact sheet", "waste situation", "municipality", "environment", "Civil Defense", "municipal agencies", "system", "large", "descriptive screen", "goals of the Municipal Council", "informative notes", "dangers of waste fires", "waste collection", "ViewResultsToxicologicalAmbiental"], "pred_steps": "Initiate waste management system, capture waste data including type, quantity, and location, validate captured data for accuracy, categorize waste based on predefined criteria, assign appropriate disposal method, generate waste disposal instructions, track waste movement and disposal status, update waste database with disposal results, generate reports on waste management activities, notify stakeholders of waste management status and reports.", "pred_act": ["Initiate", "capture", "validate", "categorize", "assign", "generate", "track", "update", "notify"], "pred_obj": ["waste management system", "waste data", "type", "quantity", "location", "captured data", "waste", "predefined criteria", "disposal method", "waste disposal instructions", "waste movement", "disposal status", "waste database", "disposal results", "reports", "waste management activities", "stakeholders", "waste management status"], "tp": ["waste management system", "waste data", "waste", "waste movement", "disposal status", "waste database", "waste management activities", "waste management status"]}
{"index": 14, "ucName": "Hazards", "steps": "1. The Citizen accesses the screen about the meanings of the hazards Civil Defense deals with, with specific images for each category of hazard, and videos of how it operates during rescue operations. \n2. The system responds to the Citizen's request, with a screen where there are causes, meanings, about landslides, floods, and coastal erosion phenomena, and videos of interventions. \n3. The Citizen, after viewing the descriptive sheet may want to know the causes of other hazards that the body deals with, and therefore decides to view them by activating, the use cases Fire, Volcanic, Seismic, SanitaryAntropic,Hydrological monitoring. \n4. The system also makes available additional fact sheets on other hazards that Civil Defense deals with.", "dataset": "eANCI", "act": ["accesses", "responds", "may want", "decides to view", "activating", "makes available"], "obj": ["Citizen", "screen", "meanings", "hazards", "Civil Defense", "images", "category", "videos", "rescue operations", "system", "request", "causes", "landslides", "floods", "coastal erosion phenomena", "interventions", "descriptive sheet", "body", "Fire", "Volcanic", "Seismic", "SanitaryAntropic", "Hydrological monitoring", "additional fact sheets", "other hazards"], "pred_steps": "Detect potential hazards in the environment, analyze the type and severity of hazards, generate alerts for immediate hazards, log all hazards and their statuses, update hazard status based on ongoing monitoring, provide real-time hazard information to relevant stakeholders, and allow for manual override and adjustment of hazard alerts and statuses.", "pred_act": ["Detect", "analyze", "generate", "log", "update", "provide", "allow"], "pred_obj": ["potential hazards", "environment", "type of hazards", "severity of hazards", "immediate hazards", "all hazards", "statuses", "hazard status", "ongoing monitoring", "real-time hazard information", "relevant stakeholders", "manual override", "adjustment of hazard alerts", "adjustment of hazard statuses"], "tp": ["provide", "allow", "potential hazards", "type of hazards", "severity of hazards", "immediate hazards", "all hazards", "hazard status", "ongoing monitoring", "real-time hazard information", "adjustment of hazard alerts", "adjustment of hazard statuses"]}
{"index": 15, "ucName": "SanitaryAntropic", "steps": "1. The Citizen accesses the desired screen from the list of environmental hazards that is next to each description of those hazards. \n2. The system responds to the Citizen's request by providing a detailed explanation of what this use case means in practical terms, and distributing advice and standard procedures in case of hazards.", "dataset": "eANCI", "act": ["accesses", "is", "responds", "providing", "distributing"], "obj": ["Citizen", "screen", "list", "environmental hazards", "description", "hazards", "system", "request", "detailed explanation", "use case", "practical terms", "advice", "standard procedures"], "pred_steps": "User initiates SanitaryAntropic request, system validates user authentication, retrieves user location, fetches local sanitary conditions and anthropic activities data, processes data to identify safe zones, displays safe zones on map, allows user to select a safe zone, provides navigation instructions to selected zone, monitors user's journey, updates safe zones in real-time based on changes in conditions, and notifies user of any updates or alerts.", "pred_act": ["initiates", "validates", "retrieves", "fetches", "processes", "displays", "allows", "provides", "monitors", "updates", "notifies"], "pred_obj": ["User", "SanitaryAntropic request", "system", "user authentication", "user location", "local sanitary conditions", "anthropic activities data", "safe zones", "map", "navigation instructions", "user's journey", "updates", "alerts"], "tp": ["provides", "system"]}
{"index": 16, "ucName": "Civil Service", "steps": "1. The Citizen accesses this section to get information about his or her usefulness to others. \n2. The system responds with a screen display where it clarifies the goals of civil service, general information, and the ability to call the DownloadIscription use case.", "dataset": "eANCI", "act": ["accesses", "gets", "responds", "clarifies", "call"], "obj": ["Citizen", "section", "information", "usefulness", "system", "screen display", "goals", "civil service", "general information", "ability", "DownloadIscription use case"], "pred_steps": "RegisterUser, VerifyUserEligibility, DisplayExamInfo, AllowUserToSelectExam, CollectExamFee, ScheduleExam, ProvideStudyMaterials, ConductExam, CollectAndGradeExam, NotifyUserOfResults, IssueCertificateIfEligible", "pred_act": ["RegisterUser", "VerifyUserEligibility", "DisplayExamInfo", "AllowUserToSelectExam", "CollectExamFee", "ScheduleExam", "ProvideStudyMaterials", "ConductExam", "CollectAndGradeExam", "NotifyUserOfResults", "IssueCertificateIfEligible"], "pred_obj": ["RegisterUser", "VerifyUserEligibility", "DisplayExamInfo", "AllowUserToSelectExam", "CollectExamFee", "ScheduleExam", "ProvideStudyMaterials", "ConductExam", "CollectAndGradeExam", "NotifyUserOfResults", "IssueCertificateIfEligible"], "tp": ["DisplayExamInfo"]}
{"index": 17, "ucName": "Seismic", "steps": "1. The Citizen accesses the descriptive screen of how seismic monitoring of the territory takes place and the possibility of acquiring information about the causes of an earthquake, and the measurement and prevention technologies used by the specialists of the operational core. \n2. The system responds by providing the Citizen with the opportunity to view in an always descriptive manner, the characteristics of the instruments, the work done by the specialists, and the national bodies with which they collaborate.", "dataset": "eANCI", "act": ["accesses", "acquiring", "view", "responds", "providing", "view", "collaborate"], "obj": ["Citizen", "descriptive screen", "seismic monitoring", "territory", "causes of an earthquake", "measurement technologies", "prevention technologies", "specialists", "operational core", "system", "opportunity", "characteristics of the instruments", "work", "national bodies"], "pred_steps": "Collect seismic data from sensors, preprocess data to remove noise and errors, analyze data to detect seismic events, determine magnitude and location of events, generate alerts if events exceed certain thresholds, store event data in database, provide real-time data visualization, generate detailed reports and analytics, allow user to configure alert thresholds and data visualization settings, ensure system security and data integrity.", "pred_act": ["Collect", "preprocess", "analyze", "detect", "determine", "generate", "store", "provide", "allow", "configure", "ensure"], "pred_obj": ["seismic data", "sensors", "noise", "errors", "seismic events", "magnitude", "location", "alerts", "thresholds", "event data", "database", "real-time data visualization", "detailed reports", "analytics", "user", "alert thresholds", "data visualization settings", "system security", "data integrity"], "tp": ["Collect", "provide", "seismic data", "seismic events"]}
{"index": 18, "ucName": "ViewEnvironmentalToxicologicalResults", "steps": "1. The Citizen accesses this tab in order to be personally aware of the environmental situation in the municipality in which he or she resides, whether it is being kept under control, and what values are at risk and why this situation exists. \n2. The system responds with a descriptive screen about the toxicological values received from the chemical and toxicological analyses carried out by the Civil Defense on the environment and municipal land.", "dataset": "eANCI", "act": ["accesses", "be aware", "responds"], "obj": ["Citizen", "tab", "environmental situation", "municipality", "toxicological values", "chemical analyses", "toxicological analyses", "Civil Defense", "environment", "municipal land"], "pred_steps": "Functional steps to implement the use case ViewEnvironmentalToxicologicalResults: User navigates to environmental toxicological results section, system retrieves stored toxicological data from database, system processes data to generate visual representation, system displays results in user-friendly format, user interacts with displayed results (e.g., zooms, filters), system updates display based on user interactions, user saves or exports results if needed.", "pred_act": ["navigates", "retrieves", "processes", "displays", "interacts", "updates", "saves", "exports"], "pred_obj": ["Functional steps", "ViewEnvironmentalToxicologicalResults", "User", "environmental toxicological results section", "system", "stored toxicological data", "database", "data", "visual representation", "results", "user-friendly format", "interactions", "display", "zooms", "filters", "updates", "exports"], "tp": ["ViewEnvironmentalToxicologicalResults", "environmental toxicological results section", "stored toxicological data"]}
{"index": 19, "ucName": "Volunteerism", "steps": "1. The Citizen accesses the introductory screen. \n2. The system responds by displaying the descriptive tab about general information about this aspect of Civil Defense, and the possibility of knowing the prerequisites for participation. \n3. The Citizen becomes aware of what is written, and therefore selects the link where the use case ComeBecomeVolunteer is called. \n4. The system responds by allowing him to view this description.", "dataset": "eANCI", "act": ["accesses", "responds", "displays", "becomes aware", "selects", "allows", "view"], "obj": ["Citizen", "introductory screen", "system", "descriptive tab", "general information", "Civil Defense", "prerequisites for participation", "link", "use case ComeBecomeVolunteer", "description"], "pred_steps": "Display volunteer opportunities, allow user to select opportunity, provide details of selected opportunity, enable user to sign up for opportunity, confirm user signup, notify user of signup success, update volunteer database with user signup information, track user volunteer hours, provide volunteer certificate upon completion of hours.", "pred_act": ["Display", "allow", "select", "provide", "enable", "confirm", "notify", "update", "track", "provide"], "pred_obj": ["volunteer opportunities", "user", "selected opportunity", "signup", "signup success", "volunteer database", "user signup information", "volunteer hours", "volunteer certificate"], "tp": ["Display", "allow", "select", "enable", "volunteer opportunities"]}
{"index": 20, "ucName": "Volcanic", "steps": "1. The Citizen accesses this tab, from the Risks use case if he wants to know more, about the volcanic situation in his municipality, and the possibility of viewing the Civil Defense monitoring methods. \n2. The system responds with the correct display of a descriptive screen about the different types of eruptions of a volcano, making available, the possibility to view the current volcanic situation of the municipality. \n3. The Citizen wants to know how the present volcanoes are being monitored, and therefore, will invoke the MonitoraggioVulcanico use case \n4. The system provides the Citizen with a link to the MonitoraggioVulcanico use case, so that he or she can learn about the actual situation.", "dataset": "eANCI", "act": ["accesses", "responds", "wants", "will invoke", "provides"], "obj": ["Citizen", "Risks use case", "volcanic situation", "municipality", "Civil Defense monitoring methods", "system", "descriptive screen", "different types of eruptions", "volcano", "current volcanic situation", "MonitoraggioVulcanico use case", "link", "actual situation"], "pred_steps": "Collect volcanic data from sensors, preprocess data to filter noise and errors, analyze data to detect volcanic activity patterns, generate alerts if volcanic activity thresholds are exceeded, update volcanic activity database, display real-time volcanic activity status on user interface, provide historical volcanic activity data for analysis, allow user to configure alert thresholds and notification settings.", "pred_act": ["Collect", "preprocess", "filter", "analyze", "detect", "generate", "update", "display", "provide", "allow", "configure"], "pred_obj": ["volcanic data", "sensors", "noise", "errors", "volcanic activity patterns", "alerts", "volcanic activity thresholds", "volcanic activity database", "real-time volcanic activity status", "user interface", "historical volcanic activity data", "alert thresholds", "notification settings"], "tp": ["provide", "volcanic data", "volcanic activity patterns", "volcanic activity thresholds", "volcanic activity database", "real-time volcanic activity status", "historical volcanic activity data"]}
{"index": 21, "ucName": "CalculateAmount", "steps": "1. The Citizen presses the button related to the tax calculation function. \n2. The System presents the list of fees and taxes for which the amount can be calculated. \n3. The Citizen selects the tax of interest. \n4. The System shows a form to be filled in for calculation. \n5. The Citizen enters the necessary data. \n6. The System verifies the correctness of the data,computes the amount and shows it to the Citizen.", "dataset": "eANCI", "act": ["presses", "presents", "selects", "shows", "enters", "verifies", "computes", "shows"], "obj": ["Citizen", "button", "tax calculation function", "System", "list of fees", "taxes", "tax of interest", "form", "necessary data", "amount"], "pred_steps": "Input user-specified quantity and unit price, validate inputs, calculate the total amount by multiplying quantity with unit price, display the calculated total amount.", "pred_act": ["Input", "validate", "calculate", "display"], "pred_obj": ["user-specified quantity", "unit price", "inputs", "total amount", "quantity", "unit price", "calculated total amount"], "tp": ["validate", "calculate", "display", "total amount", "quantity", "calculated total amount"]}
{"index": 22, "ucName": "CalculateImportUnful", "steps": "1. The Citizen presses the button related to the tax calculation function. \n2. The System presents the list of taxes and fees for which the amount can be calculated. \n3. The Citizen selects the tax of interest. \n4. The System shows a form to be filled in for calculation. \n5. The Citizen enters the necessary data. \n6. The System verifies the correctness of the data but fails to perform the calculation, notifying the user of the reason for failure.", "dataset": "eANCI", "act": ["presses", "presents", "selects", "shows", "enters", "verifies", "notifies", "fails"], "obj": ["Citizen", "button", "tax calculation function", "System", "list", "taxes", "fees", "amount", "tax of interest", "form", "data", "correctness", "reason for failure"], "pred_steps": "Receive input parameters including import details and fulfillment criteria; Validate input parameters for completeness and correctness; Retrieve relevant data from database or other sources; Calculate the difference between import details and fulfillment criteria; Apply business rules and logic to determine the level of import unfulfillment; Generate a report or output detailing the calculated import unfulfillment; Store the results in the database or provide output to the user as required.", "pred_act": ["Receive", "Validate", "Retrieve", "Calculate", "Apply", "Generate", "Store", "provide"], "pred_obj": ["input parameters", "import details", "fulfillment criteria", "database", "other sources", "difference", "business rules", "logic", "level of import unfulfillment", "report", "output", "calculated import unfulfillment", "results", "user"], "tp": []}
{"index": 23, "ucName": "EditEMailAdministrator", "steps": "1. Administrator accesses the email edit form. \n2. The system shows the form the enter the new e-mail. \n3. The administrator enters the new email and presses the confirmation button. \n4. The system updates the new email.", "dataset": "eANCI", "act": ["accesses", "shows", "enters", "presses", "updates"], "obj": ["Administrator", "email edit form", "system", "form", "new e-mail", "administrator", "new email", "confirmation button", "system", "new email"], "pred_steps": "OpenEditEMailAdministratorScreen, ValidateUserPermissions, DisplayCurrentEMailSettings, AllowUserToEditFields, SaveChangesIfValid, DisplayConfirmationMessage, UpdateEMailSettingsInDatabase, RefreshEMailSettingsDisplay, LogEditAction", "pred_act": ["OpenEditEMailAdministratorScreen", "ValidateUserPermissions", "DisplayCurrentEMailSettings", "AllowUserToEditFields", "SaveChangesIfValid", "DisplayConfirmationMessage", "UpdateEMailSettingsInDatabase", "RefreshEMailSettingsDisplay", "LogEditAction"], "pred_obj": ["OpenEditEMailAdministratorScreen", "ValidateUserPermissions", "DisplayCurrentEMailSettings", "AllowUserToEditFields", "SaveChangesIfValid", "DisplayConfirmationMessage", "UpdateEMailSettingsInDatabase", "RefreshEMailSettingsDisplay", "LogEditAction"], "tp": ["UpdateEMailSettingsInDatabase", "OpenEditEMailAdministratorScreen", "DisplayCurrentEMailSettings", "UpdateEMailSettingsInDatabase", "RefreshEMailSettingsDisplay"]}
{"index": 24, "ucName": "Dispute Fine", "steps": "1. The Citizen clicks on the button to access the online fine management feature. \n2. The System redirects the Citizen to the desired section. \n3. The Citizen clicks on the online fine payment button. \n4. The System searches for fines against the Citizen in the database for which payment has not yet been received. \n5. The Citizen selects the fine for which he/she wishes to make a dispute. \n6. The System displays all available information related to the fine, as well as the form to be filled in for the dispute. \n7. The Citizen enters the necessary information. \n8. The System verifies that the information is correct, forwards the dispute request to the appropriate person and notifies the Citizen.", "dataset": "eANCI", "act": ["clicks", "redirects", "clicks", "searches", "selects", "displays", "enters", "verifies", "forwards", "notifies"], "obj": ["Citizen", "button", "online fine management feature", "System", "desired section", "online fine payment button", "fines", "database", "payment", "fine", "dispute", "information", "form", "necessary information", "appropriate person", "notification"], "pred_steps": "User initiates dispute request, system validates user identity, retrieves fine details, displays fine information to user, user provides reason for dispute, system records dispute reason, system assesses dispute validity, if valid, initiates review process, assigns reviewer, reviewer evaluates dispute, reviewer makes decision, system updates fine status accordingly, notifies user of decision, provides option for user to appeal if decision is unfavorable.", "pred_act": ["initiates", "validates", "retrieves", "displays", "provides", "records", "assesses", "initiates", "assigns", "evaluates", "makes", "updates", "notifies", "provides"], "pred_obj": ["User", "dispute request", "system", "user identity", "fine details", "fine information", "dispute reason", "dispute validity", "review process", "reviewer", "decision", "fine status", "appeal"], "tp": ["validates", "displays", "notifies", "system", "fine details", "fine information", "fine status"]}
{"index": 25, "ucName": "ICI", "steps": "1. The Citizen clicks on the button to access the Online Tax Payment area. \n2. The System displays the list of taxes that can be paid online. \n3. The Citizen selects the section dedicated to Municipal Property Tax and its payment. \n4. The System redirects the Citizen to the necessary section, showing the form of the relevant tax and the relevant amount to be paid. \n5. The Citizen confirms the correctness of the information and initiates the transaction, selecting the preferred payment method. \n6. The System performs the transaction and displays a successful payment message.", "dataset": "eANCI", "act": ["clicks", "displays", "selects", "redirects", "shows", "confirms", "initiates", "selects", "performs", "displays"], "obj": ["Citizen", "button", "Online Tax Payment area", "System", "list of taxes", "Municipal Property Tax", "payment", "necessary section", "form", "relevant tax", "relevant amount", "information", "transaction", "preferred payment method", "successful payment message"], "pred_steps": "User initiates ICI request, system validates user credentials, retrieves user data, displays available ICI options, user selects desired ICI service, system processes selection, performs necessary calculations or actions, generates ICI result, displays result to user, allows user to save or print result, and logs transaction for record keeping.", "pred_act": ["initiates", "validates", "retrieves", "displays", "selects", "processes", "performs", "generates", "displays", "allows", "logs"], "pred_obj": ["User", "ICI request", "system", "user credentials", "user data", "ICI options", "desired ICI service", "selection", "necessary calculations", "actions", "ICI result", "transaction"], "tp": ["initiates", "displays", "selects", "performs", "displays", "system", "transaction"]}
{"index": 26, "ucName": "IPPA", "steps": "1. The Citizen clicks on the button to access the Online Tax Payment area. \n2. The System displays the list of fees that can be paid online. \n3. The Citizen selects the section dedicated to 'Advertising and Public Display Tax and its payment and enters the file code. \n4. The System redirects the Citizen to the necessary section, showing the form of the relevant tax and the relevant amount to be paid. \n5. The Citizen confirms that the information is correct, selects the preferred payment method and initiates the transaction. \n6. The System performs the transaction and displays a successful payment message.", "dataset": "eANCI", "act": ["clicks", "displays", "selects", "enters", "redirects", "shows", "confirms", "initiates", "performs", "displays"], "obj": ["Citizen", "button", "Online Tax Payment area", "System", "list of fees", "Advertising", "Public Display Tax", "payment", "file code", "necessary section", "form", "relevant tax", "relevant amount", "information", "preferred payment method", "transaction", "successful payment message"], "pred_steps": "Initiate IPPA session, validate user credentials, display main menu, receive user selection for IPPA type, gather necessary input parameters, validate input parameters, execute selected IPPA process, generate results, display results to user, handle user acknowledgment, log session details, end IPPA session.", "pred_act": ["Initiate", "validate", "display", "receive", "gather", "validate", "execute", "generate", "display", "handle", "log", "end"], "pred_obj": ["IPPA session", "user credentials", "main menu", "user selection", "IPPA type", "input parameters", "selected IPPA process", "results", "user", "session details"], "tp": ["Initiate", "display", "execute", "display"]}
{"index": 27, "ucName": "IRPEF", "steps": "1. The Citizen clicks on the button to access the Online Tax Payment area. \n2. The System displays the list of taxes that can be paid online. \n3. The Citizen selects the section dedicated to Personal Income Tax and its payment. \n4. The System redirects the Citizen to the necessary section, showing the form of the relevant tax and the relevant amount to be paid. \n5. The Citizen confirms the correctness of the information, selects the preferred payment method and initiates the transaction. \n6. The System performs the transaction and displays a successful payment message.", "dataset": "eANCI", "act": ["clicks", "displays", "selects", "redirects", "confirms", "initiates", "performs", "displays"], "obj": ["Citizen", "button", "Online Tax Payment area", "System", "list of taxes", "Personal Income Tax", "payment", "necessary section", "form", "relevant tax", "relevant amount", "information", "preferred payment method", "transaction", "successful payment message"], "pred_steps": "Calculate taxable income, determine applicable tax rate based on income bracket, compute IRPEF (Italian personal income tax) liability, apply any deductions or credits, generate tax payment slip or refund request, update tax records, notify taxpayer of results.", "pred_act": ["Calculate", "determine", "compute", "apply", "generate", "update", "notify"], "pred_obj": ["taxable income", "income bracket", "IRPEF liability", "deductions", "credits", "tax payment slip", "refund request", "tax records", "taxpayer", "results"], "tp": ["taxable income", "IRPEF liability", "tax payment slip", "tax records", "taxpayer"]}
{"index": 28, "ucName": "Forms", "steps": "1. The Citizen clicks on the button to access forms section. \n3. \n2. The System redirects the Citizen to the required section and displays the various forms available for download. The Citizen selects the desired form. \n4. The System starts the download.", "dataset": "eANCI", "act": ["clicks", "redirects", "displays", "selects", "starts"], "obj": ["Citizen", "button", "forms section", "System", "required section", "various forms", "desired form", "download"], "pred_steps": "Display form options, allow user to select form type, load selected form template, display form fields, enable user input, validate user input, provide error messages for invalid input, save form data upon successful validation, generate form submission confirmation, and store form data in database for future access.", "pred_act": ["Display", "allow", "load", "display", "enable", "validate", "provide", "save", "generate", "store"], "pred_obj": ["form options", "form type", "form template", "form fields", "user input", "error messages", "form data", "validation", "form submission confirmation", "database"], "tp": ["Display", "display", "form options", "form type", "form template", "form fields", "form data"]}
{"index": 29, "ucName": "PaymentFines", "steps": "1. The Citizen clicks on the button to access the online fine management feature. \n2. The System redirects the Citizen to the desired section. \n3. The Citizen clicks on the button to pay fines online. \n4. The System searches for fines against the Citizen in the database for which payment has not yet been received. \n5. The Citizen selects the fine for which he/she wishes to make payment. \n6. The System displays the fine form and the relevant amount to be paid. \n7. The Citizen verifies that the information is correct and initiates the transaction, selecting the preferred payment method. \n8. The System performs the transaction and displays a successful payment message.", "dataset": "eANCI", "act": ["clicks", "redirects", "clicks", "searches", "selects", "displays", "verifies", "initiates", "selects", "performs", "displays"], "obj": ["Citizen", "button", "online fine management feature", "System", "desired section", "fines", "database", "fine", "fine form", "relevant amount", "information", "transaction", "preferred payment method", "successful payment message"], "pred_steps": "Display payment fines options, select fine type, enter fine amount, confirm fine details, calculate total payment including fines, provide payment options, select payment method, process payment, generate payment receipt, update payment and fine records, notify user of successful payment.", "pred_act": ["Display", "select", "enter", "confirm", "calculate", "provide", "select", "process", "generate", "update", "notify"], "pred_obj": ["payment fines options", "fine type", "fine amount", "fine details", "total payment", "payment options", "payment method", "payment", "payment receipt", "payment records", "fine records", "user", "successful payment"], "tp": ["Display", "select", "confirm", "select", "payment fines options", "fine type", "fine amount", "fine details", "payment options", "payment method", "payment", "payment receipt", "payment records", "fine records", "successful payment"]}
{"index": 30, "ucName": "PaymentUnsuccessful", "steps": "1. The Citizen clicks on the button to access the Online Payment area of taxes or fines. \n2. The System displays the list of taxes/fines that can be paid online. \n3. The Citizen selects the tax/fine of interest \n5. \n4. The System redirects the Citizen to the necessary section, showing the form to the Citizen. The Citizen initiates the transaction. \n6. The System does not allow the transaction because there were problems with the selected payment method.", "dataset": "eANCI", "act": ["clicks", "displays", "selects", "redirects", "initiates", "does not allow"], "obj": ["Citizen", "button", "Online Payment area", "taxes", "fines", "System", "list", "tax/fine", "section", "form", "transaction", "payment method"], "pred_steps": "Display error message to user, log unsuccessful payment attempt, check payment details for errors, prompt user to retry or cancel payment, update payment status to unsuccessful in system, offer customer support options if retry fails.", "pred_act": ["display", "log", "check", "prompt", "update", "offer"], "pred_obj": ["error message", "user", "unsuccessful payment attempt", "payment details", "errors", "payment", "payment status", "system", "customer support options", "retry"], "tp": ["display", "payment details", "payment", "payment status", "system"]}
{"index": 31, "ucName": "SearchVerbaliMulte", "steps": "1. The Citizen clicks on the button to access the online fine management feature. \n3. \n2. The System redirects the Citizen to the desired section. The Citizen clicks on the button to search for fines (only charged to him/her). \n4. The System searches for the citizen's charge fines (paid and unpaid) in the database and displays them in a list in which you can browse to show all available information for a given fine.", "dataset": "eANCI", "act": ["clicks", "redirects", "clicks", "searches", "displays", "browse", "show"], "obj": ["Citizen", "button", "online fine management feature", "System", "desired section", "fines", "charge fines", "database", "list", "information", "given fine"], "pred_steps": "Enter search criteria, initiate search request, validate input data, query database for matching records, retrieve relevant verbal warnings and fines data, filter results based on criteria, display search results, allow user to sort and refine results, provide option to view details of each result, handle user interactions and inputs for further actions.", "pred_act": ["Enter", "initiate", "validate", "query", "retrieve", "filter", "display", "allow", "provide", "handle"], "pred_obj": ["search criteria", "search request", "input data", "database", "matching records", "verbal warnings", "fines data", "results", "search results", "user", "details of each result", "interactions", "inputs", "further actions"], "tp": ["display", "database", "fines data"]}
{"index": 32, "ucName": "RequestIPPA", "steps": "1. The Citizen clicks on the button to access the municipality's service request area. \n2. The System redirects the Citizen to the necessary section. \n3. The Citizen selects the section dedicated to the Advertising and Public Display Tax request. \n4. The System displays the form of the relevant request,automatically obtaining the necessary data. \n5. The Citizen enters additional data necessary for correct completion of the form,confirms the correctness of the information and sends the request. \n6. The System notifies the employee of the request.", "dataset": "eANCI", "act": ["clicks", "redirects", "selects", "displays", "enters", "confirms", "sends", "notifies"], "obj": ["Citizen", "button", "municipality's service request area", "System", "necessary section", "Advertising", "Public Display Tax request", "form", "relevant request", "necessary data", "additional data", "employee", "request"], "pred_steps": "RequestIPPA: User initiates request, system validates user authentication, retrieves user details, displays IPPA request form, user fills in required information, system validates input data, calculates IPPA cost, displays cost to user, user confirms request, system processes IPPA request, generates IPPA document, stores document in database, sends confirmation email to user, updates user account with IPPA details, logs transaction.", "pred_act": ["initiates", "validates", "retrieves", "displays", "fills", "validates", "calculates", "displays", "confirms", "processes", "generates", "stores", "sends", "updates", "logs"], "pred_obj": ["RequestIPPA", "User", "system", "user authentication", "user details", "IPPA request form", "required information", "input data", "IPPA cost", "request", "IPPA document", "database", "confirmation email", "user account", "IPPA details", "transaction"], "tp": ["displays", "displays", "confirms", "sends", "RequestIPPA", "system", "IPPA request form", "required information", "request"]}
{"index": 33, "ucName": "RequestIPPAAccepted", "steps": "1. \n3. The Clerk displays the notification received. \n2. The System shows the Clerk the request made by the citizen. The Clerk certifies the validity of the request by checking the accuracy of the data and enables the bureaucratic procedure for requesting the service. \n4. The System sends a confirmation e-mail to the citizen who requested the service.", "dataset": "eANCI", "act": ["displays", "shows", "certifies", "checking", "enables", "sends"], "obj": ["Clerk", "notification", "System", "request", "citizen", "data", "bureaucratic procedure", "service", "confirmation e-mail"], "pred_steps": "RequestIPPAAccepted: User initiates request, system validates user credentials, retrieves user data, displays request form, user fills out form with IPPA details, system validates IPPA information, calculates fees, user confirms details and fees, system generates request ID, stores request data, sends confirmation email, updates user interface with request status, and logs transaction.", "pred_act": ["initiates", "validates", "retrieves", "displays", "fills", "validates", "calculates", "confirms", "generates", "stores", "sends", "updates", "logs"], "pred_obj": ["RequestIPPAAccepted", "User", "system", "credentials", "user data", "request form", "IPPA details", "IPPA information", "fees", "request ID", "request data", "confirmation email", "user interface", "request status", "transaction"], "tp": ["validates", "displays", "validates", "confirms", "sends", "RequestIPPAAccepted", "system", "request form", "request ID", "request data", "confirmation email", "request status"]}
{"index": 34, "ucName": "EditEMailCitizen", "steps": "1. Citizen accesses the edit e- mail form. \n3. \n2. The system shows the form the enter the new e-mail. The citizen enters the new email and presses the confirmation button. \n4. The system updates the new e-mail.", "dataset": "eANCI", "act": ["accesses", "shows", "enters", "presses", "updates"], "obj": ["Citizen", "edit e-mail form", "system", "form", "new e-mail", "confirmation button"], "pred_steps": "OpenEditEMailCitizenScreen, LoadCurrentUserEmailDetails, DisplayEmailDetails, HandleUserInputForEditing, ValidateInputFields, SaveEditedEmailDetails, UpdateEmailDetailsInDatabase, NotifyUserOfSuccessfulEdit, CloseEditEMailCitizenScreen", "pred_act": ["Open", "Load", "Display", "Handle", "Validate", "Save", "Update", "Notify", "Close"], "pred_obj": ["OpenEditEMailCitizenScreen", "LoadCurrentUserEmailDetails", "DisplayEmailDetails", "HandleUserInputForEditing", "ValidateInputFields", "SaveEditedEmailDetails", "UpdateEmailDetailsInDatabase", "NotifyUserOfSuccessfulEdit", "CloseEditEMailCitizenScreen"], "tp": ["Update", "OpenEditEMailCitizenScreen", "CloseEditEMailCitizenScreen"]}
{"index": 35, "ucName": "RequestIPPARified", "steps": "1. \n3. The Clerk displays the received notification. \n2. The System shows the Clerk the request made by the citizen. The Clerk reveals an error in the request and rejects the procedure the request. \n4. The System sends a notification to the citizen who requested the service.", "dataset": "eANCI", "act": ["displays", "shows", "reveals", "rejects", "sends"], "obj": ["Clerk", "notification", "System", "request", "citizen", "error", "procedure", "service"], "pred_steps": "RequestIPPARified: User submits request, system validates user authentication, system retrieves user details, system checks request validity, system processes request if valid, system generates IPPA report, system sends notification to user upon report completion, user accesses and views IPPA report.", "pred_act": ["submits", "validates", "retrieves", "checks", "processes", "generates", "sends", "accesses", "views"], "pred_obj": ["RequestIPPARified", "User", "request", "system", "user authentication", "user details", "request validity", "IPPA report", "notification"], "tp": ["submits", "sends", "views", "request", "system", "notification"]}
{"index": 36, "ucName": "RequestTOSAP", "steps": "1. The Citizen clicks on the button to access the municipality's service request area. \n2. The System redirects the Citizen to the necessary section. \n3. The Citizen selects the section dedicated to the request for Tax for the Occupation of Public Land and Areas. \n4. The System displays the relevant request form,automatically obtaining the necessary data. \n5. The Citizen enters additional data necessary for the correct completion of the form,confirms the correctness of the information and sends the request. \n6. The System notifies the employee of the request.", "dataset": "eANCI", "act": ["clicks", "redirects", "selects", "displays", "enters", "confirms", "sends", "notifies"], "obj": ["Citizen", "button", "municipality's service request area", "System", "necessary section", "section", "request", "Tax for the Occupation of Public Land", "Areas", "relevant request form", "necessary data", "additional data", "form", "information", "request", "employee"], "pred_steps": "User initiates request, system validates user authentication, system displays request form, user fills in request details including SAP type and reason, system validates input data, system calculates SAP amount based on predefined rules, user confirms request details, system generates SAP request ID, system stores request data in database, system sends request confirmation email to user, system updates user SAP request status to pending approval, system notifies approver of new SAP request.", "pred_act": ["initiates", "validates", "displays", "fills", "validates", "calculates", "confirms", "generates", "stores", "sends", "updates", "notifies"], "pred_obj": ["User", "request", "system", "user authentication", "request form", "request details", "SAP type", "reason", "input data", "SAP amount", "predefined rules", "request details", "SAP request ID", "database", "request confirmation email", "user SAP request status", "approver", "new SAP request"], "tp": ["displays", "confirms", "sends", "notifies", "request", "system", "request form", "request details", "input data", "request details", "SAP request ID", "database", "request confirmation email", "user SAP request status", "new SAP request"]}
{"index": 37, "ucName": "RequestTOSAPAccepted", "steps": "1. \n3. The Clerk displays the notification received. \n2. The System shows the Clerk the request made by the citizen. The Clerk certifies the validity of the request by checking the accuracy of the data and enables the bureaucratic procedure for requesting the service. \n4. The System sends a confirmation e-mail to the citizen who requested the service.", "dataset": "eANCI", "act": ["displays", "shows", "certifies", "checks", "enables", "sends"], "obj": ["Clerk", "notification", "System", "request", "citizen", "validity", "data", "bureaucratic procedure", "service", "confirmation e-mail"], "pred_steps": "RequestTOSAPAccepted: User submits request, system validates request details, retrieves user information, checks eligibility for SAP, verifies SAP availability, calculates SAP benefits, displays SAP offer to user, user accepts offer, system updates user SAP status, generates confirmation, and notifies user of acceptance.", "pred_act": ["submits", "validates", "retrieves", "checks", "verifies", "calculates", "displays", "accepts", "updates", "generates", "notifies"], "pred_obj": ["RequestTOSAPAccepted", "User", "system", "request", "request details", "user information", "eligibility for SAP", "SAP availability", "SAP benefits", "SAP offer", "user SAP status", "confirmation"], "tp": ["checks", "verifies", "displays", "RequestTOSAPAccepted", "system", "request", "request details", "confirmation"]}
{"index": 38, "ucName": "RequestTOSAPRifted", "steps": "1. \n3. The Clerk displays the received notification. \n2. The System shows the Clerk the request made by the citizen. The Clerk reveals an error in the request and rejects the procedure the request. \n4. The System sends a notification to the citizen who requested the service.", "dataset": "eANCI", "act": ["displays", "shows", "reveals", "rejects", "sends"], "obj": ["Clerk", "notification", "System", "request", "citizen", "error", "procedure", "service"], "pred_steps": "User submits request, system validates request details, retrieves relevant information from database, checks user eligibility, generates unique request ID, calculates SAP rift based on predefined algorithms, displays SAP rift result to user, allows user to confirm or reject result, saves confirmed result in database, updates user interface with confirmation status, sends notification to relevant stakeholders, logs all actions and results for auditing.", "pred_act": ["submits", "validates", "retrieves", "checks", "generates", "calculates", "displays", "allows", "saves", "updates", "sends", "logs"], "pred_obj": ["User", "request", "system", "request details", "database", "user eligibility", "unique request ID", "SAP rift", "predefined algorithms", "result", "confirmation", "confirmed result", "user interface", "confirmation status", "notification", "stakeholders", "actions", "results", "auditing"], "tp": ["submits", "displays", "sends", "request", "system", "request details", "notification"]}
{"index": 39, "ucName": "TIA", "steps": "1. The Citizen clicks on the button to access the Online Tax Payment area. \n2. The System displays the list of taxes that can be paid online. \n3. The Citizen selects the section dedicated to the Environmental Hygiene Fee and its payment. \n4. The System redirects the Citizen to the necessary section, showing the form of the relevant fee and the relevant amount to be paid. \n5. The Citizen confirms the correctness of the information,selects the preferred payment method and initiates the transaction. \n6. The System performs the transaction and displays a successful payment message.", "dataset": "eANCI", "act": ["clicks", "displays", "selects", "redirects", "confirms", "selects", "initiates", "performs", "displays"], "obj": ["Citizen", "button", "Online Tax Payment area", "System", "list of taxes", "Environmental Hygiene Fee", "payment", "section", "form", "relevant fee", "relevant amount", "information", "preferred payment method", "transaction", "successful payment message"], "pred_steps": "User initiates TIA request, system validates user credentials, retrieves user-specific TIA settings, displays TIA options, user selects desired TIA action, system processes selected action, generates TIA report, displays report to user, allows user to save or print report, and logs TIA activity.", "pred_act": ["initiates", "validates", "retrieves", "displays", "selects", "processes", "generates", "displays", "allows", "logs"], "pred_obj": ["User", "TIA request", "system", "user credentials", "user-specific TIA settings", "TIA options", "desired TIA action", "TIA report", "save", "print", "TIA activity"], "tp": ["initiates", "displays", "selects", "displays", "system"]}
{"index": 40, "ucName": "TOSAP", "steps": "1. The Citizen clicks on the button to access the Online Tax Payment area. \n2. The System displays the list of taxes that can be paid online. \n3. The Citizen selects the section dedicated to the Tax for the Occupation of Public Land and Areas and its payment and enters the file code. \n4. The System redirects the Citizen to the necessary section, showing the form of the relevant fee and the relevant amount to be paid. \n5. The Citizen confirms that the information is correct, selects the preferred payment method and initiates the transaction. \n6. The System performs the transaction and displays a successful payment message.", "dataset": "eANCI", "act": ["clicks", "displays", "selects", "enters", "redirects", "confirms", "selects", "initiates", "performs", "displays"], "obj": ["Citizen", "button", "Online Tax Payment area", "System", "list of taxes", "Tax for the Occupation of Public Land", "Areas", "payment", "file code", "necessary section", "form", "relevant fee", "relevant amount", "information", "preferred payment method", "transaction", "successful payment message"], "pred_steps": "Initiate TOSAP session, gather user input for parameters, validate input data, process data according to TOSAP algorithm, generate results, display results to user, handle user queries and feedback, log session details, terminate TOSAP session.", "pred_act": ["Initiate", "gather", "validate", "process", "generate", "display", "handle", "log", "terminate"], "pred_obj": ["TOSAP session", "user input", "parameters", "input data", "TOSAP algorithm", "results", "user queries", "feedback", "session details"], "tp": ["Initiate", "display", "TOSAP session"]}
{"index": 41, "ucName": "Forms", "steps": "1. The Citizen clicks on the button to access forms section. \n3. \n2. The System redirects the Citizen to the required section and displays the various forms available for download. The Citizen selects the desired form. \n4. The System starts the download.", "dataset": "eANCI", "act": ["clicks", "redirects", "displays", "selects", "starts"], "obj": ["Citizen", "button", "forms section", "System", "required section", "forms", "desired form", "download"], "pred_steps": "Design functional steps for \"Forms\" use case: Initialize form, display form fields, validate user input, handle form submission, store form data, generate confirmation message, provide edit and delete options for submitted forms, ensure data security and privacy.", "pred_act": ["Initialize", "display", "validate", "handle", "store", "generate", "provide", "ensure"], "pred_obj": ["Forms", "form", "form fields", "user input", "form submission", "form data", "confirmation message", "edit options", "delete options", "submitted forms", "data security", "privacy"], "tp": ["display", "Forms", "form", "form fields", "form submission", "form data", "submitted forms"]}
{"index": 42, "ucName": "ConsultationHelpOn-Line", "steps": "1. The Citizen enters the dedicated online help section. \n2. The system presents a screen containing the list of features. \n3. The Citizen accesses the help information by clicking on the link related to the functionality he/she wants to receive. \n4. The system presents the help information, explaining the methods and actions to be performed for the specific functionality.", "dataset": "eANCI", "act": ["enters", "presents", "accesses", "clicks", "presents", "explaining"], "obj": ["Citizen", "dedicated online help section", "system", "screen", "list of features", "help information", "link", "functionality", "methods", "actions"], "pred_steps": "User accesses online consultation platform, searches for available consultants, selects desired consultant, initiates consultation session, describes issue or query, receives real-time responses and solutions from consultant, may provide additional information or clarification, consultant provides final recommendation or solution, user evaluates consultation session, session ends, and user has option to save or print consultation transcript.", "pred_act": ["accesses", "searches", "selects", "initiates", "describes", "receives", "may provide", "provides", "evaluates", "ends", "has", "save", "print"], "pred_obj": ["User", "online consultation platform", "consultants", "desired consultant", "consultation session", "issue", "query", "real-time responses", "solutions", "consultant", "additional information", "clarification", "final recommendation", "evaluation", "consultation transcript"], "tp": ["accesses", "additional information"]}
{"index": 43, "ucName": "DataErrati", "steps": "1. System displays a message to the terminal screen indicating that the request entered was incorrect. \n2. Citizen reads the notification message. \n3. The system resubmits the input form.", "dataset": "eANCI", "act": ["displays", "reads", "resubmits"], "obj": ["System", "message", "terminal screen", "request", "Citizen", "notification message", "input form"], "pred_steps": "Receive data input, validate data format and completeness, identify errors and anomalies, log error details, generate error report, notify user of errors, allow user to review and correct errors, revalidate corrected data, update data storage with corrected data, provide confirmation of successful data update.", "pred_act": ["Receive", "validate", "identify", "log", "generate", "notify", "allow", "review", "correct", "revalidate", "update", "provide"], "pred_obj": ["data input", "data format", "completeness", "errors", "anomalies", "error details", "error report", "user", "corrected errors", "corrected data", "data storage", "confirmation of successful data update"], "tp": []}
{"index": 44, "ucName": "ServiceNotAvailable", "steps": "1. System displays a message on the terminal screen indicating that the request cannot be made. \n2. Citizen reads the notification message. \n3. The system resubmits the input form.", "dataset": "eANCI", "act": ["displays", "reads", "resubmits"], "obj": ["System", "terminal screen", "message", "request", "input form", "Citizen", "notification message", "System", "input form"], "pred_steps": "Check if the service is available; if not, display a \"Service Not Available\" message to the user; log the unavailability incident with a timestamp; attempt to reconnect to the service after a predetermined interval; if the service remains unavailable after a set number of attempts, notify the system administrator; end the use case.", "pred_act": ["Check", "display", "log", "attempt", "reconnect", "notify", "end"], "pred_obj": ["service", "Service Not Available\" message", "user", "unavailability incident", "timestamp", "predetermined interval", "set number of attempts", "system administrator", "use case"], "tp": ["Service Not Available\" message"]}
{"index": 45, "ucName": "EditEMailEmployee", "steps": "1. The 'employee accesses the edit e- mail form. \n2. The system shows the form the entry of the new e-mail. \n3. The employee enters the new email and presses the confirmation button. \n4. The system updates the new email.", "dataset": "eANCI", "act": ["accesses", "shows", "enters", "presses", "updates"], "obj": ["employee", "edit e-mail form", "system", "form", "entry", "new e-mail", "confirmation button", "email"], "pred_steps": "OpenEditEMailEmployeeScreen, ValidateUserPermission, LoadEmployeeData, DisplayEmployeeEMail, AllowEditingEMail, SaveEditedEMail, ValidateEMailFormat, UpdateEmployeeData, NotifyUserOfSuccessOrFailure", "pred_act": ["OpenEditEMailEmployeeScreen", "ValidateUserPermission", "LoadEmployeeData", "DisplayEmployeeEMail", "AllowEditingEMail", "SaveEditedEMail", "ValidateEMailFormat", "UpdateEmployeeData", "NotifyUserOfSuccessOrFailure"], "pred_obj": ["OpenEditEMailEmployeeScreen", "ValidateUserPermission", "LoadEmployeeData", "DisplayEmployeeEMail", "AllowEditingEMail", "SaveEditedEMail", "ValidateEMailFormat", "UpdateEmployeeData", "NotifyUserOfSuccessOrFailure"], "tp": ["UpdateEmployeeData", "OpenEditEMailEmployeeScreen", "DisplayEmployeeEMail", "AllowEditingEMail", "SaveEditedEMail", "ValidateEMailFormat"]}
{"index": 46, "ucName": "EditEmployee", "steps": "1. The administrator presses the EditEmployee button. \n2. The system displays a form for editing the employee. \n3. The administrator enters the data. \n4. The system saves the changes made.", "dataset": "eANCI", "act": ["presses", "displays", "enters", "saves"], "obj": ["administrator", "EditEmployee button", "system", "form", "employee", "data", "changes"], "pred_steps": "OpenEditEmployeeScreen, ValidateUserPermission, LoadEmployeeData, DisplayEmployeeData, EnableEditableFields, ReceiveUserInput, ValidateInput, UpdateEmployeeData, SaveEmployeeData, RefreshEmployeeList, DisplayConfirmationMessage, CloseEditEmployeeScreen", "pred_act": ["OpenEditEmployeeScreen", "ValidateUserPermission", "LoadEmployeeData", "DisplayEmployeeData", "EnableEditableFields", "ReceiveUserInput", "ValidateInput", "UpdateEmployeeData", "SaveEmployeeData", "RefreshEmployeeList", "DisplayConfirmationMessage", "CloseEditEmployeeScreen"], "pred_obj": ["OpenEditEmployeeScreen", "ValidateUserPermission", "LoadEmployeeData", "DisplayEmployeeData", "EnableEditableFields", "ReceiveUserInput", "ValidateInput", "UpdateEmployeeData", "SaveEmployeeData", "RefreshEmployeeList", "DisplayConfirmationMessage", "CloseEditEmployeeScreen"], "tp": ["DisplayEmployeeData", "SaveEmployeeData", "UpdateEmployeeData", "CloseEditEmployeeScreen"]}
{"index": 47, "ucName": "ChangePasswordAdministrator", "steps": "1. The administrator wants to change the password and presses the change password button. \n2. The system displays the form for entering the old password. \n3. The administrator enters the old password, the new password and presses the confirm button. \n4. The system notifies that the password has been changed.", "dataset": "eANCI", "act": ["wants", "presses", "displays", "enters", "presses", "notifies"], "obj": ["administrator", "password", "change password button", "form", "old password", "new password", "confirm button", "system"], "pred_steps": "Administrator requests password change, system validates administrator identity, administrator enters current password, system verifies current password, administrator enters new password, system checks new password strength, administrator confirms new password, system matches new password with confirmation, system updates administrator password in database, system sends confirmation of password change to administrator.", "pred_act": ["requests", "validates", "enters", "verifies", "enters", "checks", "confirms", "matches", "updates", "sends"], "pred_obj": ["Administrator", "password change", "system", "administrator identity", "current password", "new password", "password strength", "confirmation", "database", "confirmation of password change"], "tp": ["enters", "enters", "Administrator", "password change", "system", "current password", "new password", "password strength", "confirmation of password change"]}
{"index": 48, "ucName": "ChangePasswordCitizen", "steps": "1. The citizen wants to change the password and presses the change password button. \n2. The system displays the form for entering the old password and the new one. \n3. The citizen enters the old password, the new password and presses the confirm button. \n4. The system notifies that the password has been changed.", "dataset": "eANCI", "act": ["wants", "presses", "displays", "enters", "presses", "notifies"], "obj": ["citizen", "password", "change password button", "system", "form", "old password", "new password", "confirm button", "notification"], "pred_steps": "User initiates password change request, system validates user identity through login credentials, displays current password change form, user inputs new password and confirms, system validates new password strength, checks for password match between new and confirm fields, updates user password in database if validations pass, sends confirmation email or notification to user, logs user out and prompts to login with new password.", "pred_act": ["initiates", "validates", "displays", "inputs", "confirms", "validates", "checks", "updates", "sends", "logs", "prompts"], "pred_obj": ["User", "password change request", "system", "login credentials", "current password change form", "new password", "confirm fields", "database", "confirmation email", "notification", "user logout", "prompt to login with new password"], "tp": ["displays", "password change request", "system", "login credentials", "current password change form", "new password", "confirm fields", "notification", "prompt to login with new password"]}
{"index": 49, "ucName": "ChangePasswordEmployee", "steps": "1. The employee wants to change the password and presses the change password button. \n2. The system displays the form for entering the old password and the new one. \n3. The employee enters the old password, the new password and presses the confirm button. \n4. The system notifies that the password has been changed.", "dataset": "eANCI", "act": ["wants", "presses", "displays", "enters", "presses", "notifies"], "obj": ["employee", "password", "change password button", "form", "old password", "new password", "confirm button", "system"], "pred_steps": "Employee requests password change, system validates employee identity, employee enters current password, system verifies current password, employee enters new password, system checks new password strength, employee confirms new password, system matches new password with confirmation, system updates employee password in database, system confirms password change success to employee.", "pred_act": ["requests", "validates", "enters", "verifies", "enters", "checks", "confirms", "matches", "updates", "confirms"], "pred_obj": ["Employee", "password", "system", "current password", "new password", "database", "password change success"], "tp": ["enters", "enters", "password", "system", "current password", "new password", "password change success"]}
{"index": 50, "ucName": "RecoverPasswordCitizen", "steps": "1. Citizen has forgotten his password and presses on the Recover Password button. \n2. The system displays the password recovery screen that requires entering the user name and ID card code. \n3. The citizen enters his/her data and presses the confirmation button. \n4. The system verifies the correctness of the data and sends the password to the citizen's email address.", "dataset": "eANCI", "act": ["forgets", "presses", "displays", "requires", "enters", "presses", "verifies", "sends"], "obj": ["Citizen", "password", "Recover Password button", "system", "password recovery screen", "user name", "ID card code", "data", "confirmation button", "email address"], "pred_steps": "User initiates password recovery, system displays input field for user ID, user enters user ID, system validates user ID, if valid, system sends password reset link to user's registered email, user receives email, clicks on reset link, system directs user to password reset page, user enters new password, system validates new password, if valid, system updates user password, user receives confirmation of successful password recovery.", "pred_act": ["initiates", "displays", "enters", "validates", "sends", "receives", "clicks", "directs", "enters", "validates", "updates", "receives"], "pred_obj": ["User", "password recovery", "system", "input field", "user ID", "password reset link", "user's registered email", "email", "reset link", "password reset page", "new password", "confirmation of successful password recovery"], "tp": ["displays", "enters", "validates", "sends", "enters", "validates", "password recovery", "system", "password reset link", "user's registered email", "email", "password reset page", "new password", "confirmation of successful password recovery"]}
{"index": 51, "ucName": "AuthenticationCitizen", "steps": "1. Citizen logs in to authentication session. \n2. The system displays the login form for entering data (username and password). \n3. The citizen enters the data and submits the authentication request. \n4. The system verifies the accuracy of the data and grants access to the citizen.", "dataset": "eANCI", "act": ["logs in", "displays", "enters", "submits", "verifies", "grants"], "obj": ["Citizen", "authentication session", "system", "login form", "data", "username", "password", "authentication request", "accuracy of the data", "access"], "pred_steps": "User enters credentials, system validates credentials against stored data, if valid, user is authenticated and granted access, if invalid, access is denied and error message is displayed.", "pred_act": ["enters", "validates", "is authenticated", "is granted", "is denied", "is displayed"], "pred_obj": ["User", "credentials", "system", "stored data", "access", "error message"], "tp": ["enters", "validates", "is granted", "is displayed", "credentials", "system", "stored data", "access"]}
{"index": 52, "ucName": "RecoverPasswordAdministrator", "steps": "1. The administrator has forgotten the password and presses the password recovery button. \n2. The system shows the form for entering the freshman. \n3. The administrator enters his/her matriculation number and presses the confirmation button. \n4. The system verifies the data and sends the password to the administrator's email address.", "dataset": "eANCI", "act": ["forgotten presses shows enters presses verifies sends"], "obj": ["Please refer to relevant websites for more information", "feel free to ask me any other questions"], "pred_steps": "Administrator requests password recovery, system validates administrator identity, system retrieves administrator account details, system generates temporary password, system sends temporary password to registered email, administrator receives temporary password, administrator logs in using temporary password, system prompts administrator to create new password, administrator creates and confirms new password, system updates administrator password, administrator logs in with new password.", "pred_act": ["requests", "validates", "retrieves", "generates", "sends", "receives", "logs in", "prompts", "creates", "confirms", "updates", "logs in"], "pred_obj": ["Administrator", "password recovery", "system", "administrator identity", "administrator account details", "temporary password", "registered email", "new password"], "tp": ["sends"]}
{"index": 53, "ucName": "PasswordRecoveryEmployee", "steps": "1. The employee has forgotten his password and presses the password recovery button. \n2. The system shows the form for entering the matriculation number. \n3. The employee enters his/her matriculation number and presses the confirmation button. \n4. The system verifies the data and sends the password to the employee's email address.", "dataset": "eANCI", "act": ["forgotten", "presses", "shows", "enters", "presses", "verifies", "sends"], "obj": ["employee", "password", "password recovery button", "form", "matriculation number", "confirmation button", "data", "email address"], "pred_steps": "Employee navigates to password recovery page, enters employee ID, receives verification code via email or SMS, enters verification code, sets new password, confirms new password, system validates new password against security criteria, updates employee password in database, displays success message.", "pred_act": ["navigates", "enters", "receives", "enters", "sets", "confirms", "validates", "updates", "displays"], "pred_obj": ["Employee", "password recovery page", "employee ID", "verification code", "email", "SMS", "new password", "system", "security criteria", "database", "success message"], "tp": ["enters", "enters", "confirms", "validates", "displays", "Employee", "password recovery page", "email", "new password"]}
{"index": 54, "ucName": "RegistrationCitizen", "steps": "1. Citizen accesses the registration form. \n2. The system displays the registration form. \n3. The citizen enters his/her data and presses the confirmation button. \n4. The system checks the data for correctness, saves it and sends an e-mail of successful registration to the citizen.", "dataset": "eANCI", "act": ["accesses", "displays", "enters", "presses", "checks", "saves", "sends"], "obj": ["Citizen", "registration form", "system", "data", "confirmation button", "e-mail"], "pred_steps": "User accesses registration form, enters personal details including name, date of birth, gender, contact information, selects citizenship type, uploads identification documents, verifies entered information, agrees to terms and conditions, submits form, system validates input data, checks for duplicate registrations, stores user data in database, generates confirmation message with unique registration ID, and sends confirmation to user's email/phone.", "pred_act": ["accesses", "enters", "selects", "uploads", "verifies", "agrees", "submits", "validates", "checks", "stores", "generates", "sends"], "pred_obj": ["User", "registration form", "personal details", "name", "date of birth", "gender", "contact information", "citizenship type", "identification documents", "entered information", "terms", "conditions", "form", "system", "input data", "duplicate registrations", "user data", "database", "confirmation message", "unique registration ID", "user's email/phone"], "tp": ["accesses", "enters", "checks", "sends", "registration form", "form", "system", "input data", "confirmation message", "user's email/phone"]}
{"index": 55, "ucName": "RegistrationCitizen", "steps": "1. Citizen accesses the registration form. \n2. The system displays the registration form. \n3. The citizen enters his/her data and presses the confirmation button. \n4. The system checks the data for correctness, saves it and sends an e-mail of successful registration to the citizen.", "dataset": "eANCI", "act": ["accesses", "displays", "enters", "presses", "checks", "saves", "sends"], "obj": ["Citizen", "registration form", "system", "data", "confirmation button", "e-mail"], "pred_steps": "Display registration form, collect citizen's personal information including name, date of birth, gender, address, contact details, validate input data for completeness and correctness, check for duplicate registrations, store valid information in the database, generate and display a confirmation message with a unique registration ID.", "pred_act": ["Display", "collect", "validate", "check", "store", "generate", "display"], "pred_obj": ["registration form", "citizen's personal information", "name", "date of birth", "gender", "address", "contact details", "input data", "duplicate registrations", "valid information", "database", "confirmation message", "unique registration ID"], "tp": ["Display", "check", "display", "registration form", "input data", "confirmation message"]}
{"index": 56, "ucName": "Employee Search", "steps": "1. The administrator presses on the Employee Search button. \n3. \n2. The system displays the form to search for an employee. The administrator performs a search using the employee's data. \n4. The system returns the data of the searched employee.", "dataset": "eANCI", "act": ["presses", "displays", "performs", "returns"], "obj": ["administrator", "Employee Search button", "system", "form", "employee", "employee's data", "searched employee"], "pred_steps": "User enters search criteria, system validates input, retrieves matching employee records from database, displays search results, allows user to sort and filter results, user selects an employee to view detailed information, system displays detailed employee information.", "pred_act": ["enters", "validates", "retrieves", "displays", "allows", "selects", "displays"], "pred_obj": ["User", "search criteria", "system", "input", "employee records", "database", "search results", "results", "employee", "detailed information"], "tp": ["displays", "displays", "search criteria", "system", "employee records", "search results", "employee"]}
{"index": 57, "ucName": "ChangeOfResidence", "steps": "1. \n3. \n5. \n6. \n7. The Citizen presses on the Change of Residence button. \n2. The system shows the citizen the form to fill out. The citizen enters the data of his new residence. \n4. The system notifies the citizen that the request has been successfully submitted and is stored in the system. The clerk logs into the system and views the request received. The clerk verifies the data, fills in the document with the rest of the data to be entered, and confirms the operation. The system saves the form and updates the data.", "dataset": "eANCI", "act": ["presses", "shows", "enters", "notifies", "logs", "views", "verifies", "fills", "confirms", "saves", "updates"], "obj": ["Citizen", "Change of Residence button", "system", "form", "data", "new residence", "request", "clerk", "document", "rest of the data", "operation"], "pred_steps": "Verify user identity, retrieve current residence information, prompt user to enter new residence details, validate new residence details, update residence information in the system, generate and send confirmation notification to user, update related records and dependencies, log the change of residence transaction.", "pred_act": ["Verify", "retrieve", "prompt", "validate", "update", "generate", "send", "update", "log"], "pred_obj": ["user identity", "current residence information", "new residence details", "residence information", "confirmation notification", "related records", "dependencies", "residence transaction"], "tp": ["Verify", "validate", "update", "update", "log", "current residence information", "new residence details", "residence information", "residence transaction"]}
{"index": 58, "ucName": "ChangeOfResidenceOtherCommunity", "steps": "1. \n3. \n5. \n6. \n7. \n8. \n9. The Citizen presses on the Change of Residence button. \n2. The system shows the citizen the form to fill out. The citizen enters the data of his new residence. \n4. The system notifies the citizen that the request has been successfully submitted and the request is stored. The clerk logs into the system and views the request received. The clerk verifies the data, fills in the document with the rest of the data to be entered, and confirms the operation. The system saves the form and updates the data. The clerk sends a document with the request made by the citizen to the clerk of the other municipality. The clerk of the other municipality verifies the document and sends a positive notification to the other clerk and a notification to the citizen.", "dataset": "eANCI", "act": ["presses", "shows", "enters", "notifies", "logs", "views", "verifies", "fills", "confirms", "saves", "updates", "sends", "verifies", "sends"], "obj": ["Citizen", "Change of Residence button", "system", "form", "data", "new residence", "request", "clerk", "document", "municipality", "notification"], "pred_steps": "Verify user identity, display current residence information, prompt user to enter new community details, validate new community details, update residence information in the database, generate and send confirmation notification to user, update user interface with new residence information.", "pred_act": ["Verify", "display", "prompt", "validate", "update", "generate", "send", "update"], "pred_obj": ["user identity", "current residence information", "user", "new community details", "residence information", "database", "confirmation notification", "user", "user interface", "new residence information"], "tp": ["Verify", "display", "validate", "update", "send", "update", "current residence information", "residence information", "confirmation notification", "new residence information"]}
{"index": 59, "ucName": "ChangeFamilyState", "steps": "1. \n3. The Citizen presses on the Change Family Status button. \n2. The system shows the citizen the form to fill out. The citizen enters the data of the new household and submits the request. \n4. The system sends the request to the appropriate clerk.", "dataset": "eANCI", "act": ["presses", "shows", "enters", "submits", "sends"], "obj": ["Citizen", "Change Family Status button", "system", "form", "data", "new household", "request", "appropriate clerk"], "pred_steps": "ReceiveChangeFamilyStateRequest, ValidateRequestParameters, FetchFamilyDataFromDatabase, CheckUserAuthorization, UpdateFamilyStateInDatabase, LogChangeAction, SendConfirmationResponseToUser", "pred_act": ["Receive", "Validate", "Fetch", "Check", "Update", "Log", "Send"], "pred_obj": ["ReceiveChangeFamilyStateRequest", "ValidateRequestParameters", "FetchFamilyDataFromDatabase", "CheckUserAuthorization", "UpdateFamilyStateInDatabase", "LogChangeAction", "SendConfirmationResponseToUser"], "tp": ["Send", "ReceiveChangeFamilyStateRequest"]}
{"index": 60, "ucName": "DeletePractice", "steps": "1. \n3. The citizen presses the delete practice button (ID Card, Change of Residence) if the practice has not been initialized . \n2. The system asks the citizen for confirmation. The citizen confirms the operation. \n4. The system deletes the practice.", "dataset": "eANCI", "act": ["presses", "asks", "confirms", "deletes"], "obj": ["citizen", "delete practice button", "ID Card", "Change of Residence", "system", "confirmation", "operation", "practice"], "pred_steps": "Verify user authentication, retrieve practice ID, confirm practice existence, check user permission for deletion, prompt user confirmation, if confirmed, delete practice data from database, update related records, log deletion activity, notify user of successful deletion or handle and notify any errors encountered.", "pred_act": ["Verify", "retrieve", "confirm", "check", "prompt", "delete", "update", "log", "notify", "handle"], "pred_obj": ["user authentication", "practice ID", "practice existence", "user permission", "user confirmation", "practice data", "database", "related records", "deletion activity", "successful deletion", "errors"], "tp": ["confirm", "delete", "practice ID", "practice existence", "user confirmation", "practice data", "deletion activity"]}
{"index": 61, "ucName": "EditPractice", "steps": "1. The citizen presses the practice edit button (ID Card, Change of Residence) if the practice has not been initialized. \n3. \n2. The system displays a form for editing the practice. The citizen enters the data. \n4. The system saves the changes made.", "dataset": "eANCI", "act": ["presses", "displays", "enters", "saves"], "obj": ["citizen", "practice edit button", "ID Card", "Change of Residence", "system", "form", "practice", "data", "changes"], "pred_steps": "OpenEditPracticeScreen, LoadCurrentPracticeData, DisplayPracticeDataToUser, AllowUserToModifyPracticeFields, ValidateUserInput, SaveModifiedPracticeData, UpdatePracticeDataOnScreen, ProvideConfirmationOfEdit", "pred_act": ["Open", "Load", "Display", "Allow", "Validate", "Save", "Update", "Provide"], "pred_obj": ["OpenEditPracticeScreen", "LoadCurrentPracticeData", "DisplayPracticeDataToUser", "AllowUserToModifyPracticeFields", "ValidateUserInput", "SaveModifiedPracticeData", "UpdatePracticeDataOnScreen", "ProvideConfirmationOfEdit"], "tp": ["Display", "Save", "OpenEditPracticeScreen"]}
{"index": 62, "ucName": "AuthenticationEmployee", "steps": "1. Employee logs in to authentication session. \n2. The system displays the login form for entering data (username and password). \n3. The employee enters data and submits the authentication request. \n4. The system verifies the accuracy of the data and allows the employee to log in.", "dataset": "eANCI", "act": ["logs", "displays", "enters", "submits", "verifies", "allows"], "obj": ["Employee", "authentication session", "system", "login form", "data", "username", "password", "authentication request", "accuracy"], "pred_steps": "Employee enters credentials, system validates credentials against stored data, if credentials match, system grants access to employee account, otherwise system denies access and prompts for re-entry or recovery options.", "pred_act": ["enters", "validates", "match", "grants", "denies", "prompts"], "pred_obj": ["Employee", "credentials", "system", "stored data", "employee account", "re-entry", "recovery options"], "tp": ["enters", "validates", "system", "stored data"]}
{"index": 63, "ucName": "RequestCartaDiDentity", "steps": "1. The Citizen displays the family status and selects a family member. \n2. The system displays a form for entering personal data(Height, special marks, etc.) \n3. The Citizen enters the data, selects the payment method and presses the confirm button. \n4. The system shows the screen with documentation to be shown at the counter on the days and hours the office is open. \n5. The citizen confirms the transaction. \n6. The system notifies the clerk of the request.", "dataset": "eANCI", "act": ["displays", "selects", "displays", "enters", "selects", "presses", "shows", "confirms", "notifies"], "obj": ["Citizen", "family status", "family member", "system", "form", "personal data", "Height", "special marks", "data", "payment method", "confirm button", "screen", "documentation", "transaction", "clerk", "request"], "pred_steps": "User initiates request, system validates user identity, retrieves user information from database, displays request form, user fills out personal details and document type, system validates input data, generates unique request ID, stores request data in database, initiates e-signature process, user receives confirmation email with request ID and link to e-sign, user completes e-signature, system updates request status to \"Pending Verification\", back-office team verifies request details, upon verification system updates status to \"Approved\" and generates digital identity card, user receives final email with digital identity card attachment and approval notification.", "pred_act": ["initiates", "validates", "retrieves", "displays", "fills out", "validates", "generates", "stores", "initiates", "receives", "completes", "updates", "verifies", "updates", "generates", "receives"], "pred_obj": ["User", "system", "request", "user identity", "user information", "database", "request form", "personal details", "document type", "input data", "unique request ID", "request data", "e-signature process", "confirmation email", "request ID", "link", "e-signature", "request status", "Pending Verification", "back-office team", "verification", "status", "Approved", "digital identity card", "final email", "digital identity card attachment", "approval notification"], "tp": ["displays", "verifies", "system", "request", "user information", "database", "request form", "personal details", "document type", "input data", "unique request ID", "request data", "request ID", "request status", "status"]}
{"index": 64, "ucName": "RequestAcceptedIdentityCard", "steps": "1. \n3. \n5. The clerk displays the notification received. \n2. The system shows the clerk the citizen's request for the creation of the identity card. The clerk certifies the validity of the request by checking the accuracy of the data and enables the ID card creation procedure. \n4. The system sends a confirmation e-mail to the citizen who requested the creation of the ID card. The citizen goes to the counter.", "dataset": "eANCI", "act": ["displays", "shows", "certifies", "checks", "enables", "sends", "goes"], "obj": ["clerk", "notification", "system", "citizen", "request", "identity card", "validity", "data", "ID card creation procedure", "confirmation e-mail", "counter"], "pred_steps": "User submits request for identity card, system validates user information, retrieves user data from database, generates unique identity card number, creates digital identity card, stores digital identity card in database, updates user status to 'identity card issued', sends notification of acceptance and identity card details to user, logs all actions and transactions for auditing purposes.", "pred_act": ["submits", "validates", "retrieves", "generates", "creates", "stores", "updates", "sends", "logs"], "pred_obj": ["User", "request", "identity card", "system", "user information", "user data", "database", "unique identity card number", "digital identity card", "user status", "notification", "acceptance", "identity card details", "actions", "transactions", "auditing purposes"], "tp": ["validates", "sends", "request", "identity card", "system", "user data", "unique identity card number", "digital identity card", "notification", "identity card details"]}
{"index": 65, "ucName": "RequestRejectedIdentityCard", "steps": "1. \n3. The clerk displays the notification received. \n2. The system shows the clerk the citizen's request to create an identity card. The clerk detects an error in the data and rejects the ID card creation procedure. \n4. The system sends an e-mail notification to the citizen who requested the ID card creation.", "dataset": "eANCI", "act": ["displays", "shows", "detects", "rejects", "sends"], "obj": ["clerk", "notification", "system", "citizen", "request", "identity card", "data", "ID card creation procedure", "e-mail notification"], "pred_steps": "User submits request for identity card, system validates user information, checks for eligibility criteria, identifies reason for rejection if not eligible, generates rejection notice, notifies user of rejection with reason, updates user record with rejection status, logs event in system.", "pred_act": ["submits", "validates", "checks", "identifies", "generates", "notifies", "updates", "logs"], "pred_obj": ["User", "request", "identity card", "system", "user information", "eligibility criteria", "reason for rejection", "rejection notice", "user record", "rejection status", "event", "system"], "tp": ["request", "identity card", "system", "rejection notice", "system"]}
{"index": 66, "ucName": "RequestCertificates", "steps": "1. The citizen selects a specific certificate(birth certificates, marital status certificates). \n2. The system displays the form for entering the data of the person concerned. \n3. The citizen enters the data of the person concerned. \n4. The system displays a screen with the requested certificate. \n5. The citizen selects the payment and shipping method. \n6. The system sends the certificate.", "dataset": "eANCI", "act": ["selects", "displays", "enters", "displays", "selects", "sends"], "obj": ["citizen", "specific certificate", "birth certificates", "marital status certificates", "system", "form", "data", "person concerned", "screen", "requested certificate", "payment", "shipping method"], "pred_steps": "User initiates request, system validates user authentication, user selects certificate type, user provides necessary details, system validates input data, system generates certificate request, system displays confirmation and request status, user reviews and confirms details, system processes request, system issues certificate, system updates user and certificate database, system notifies user of completion.", "pred_act": ["initiates", "validates", "selects", "provides", "validates", "generates", "displays", "reviews", "confirms", "processes", "issues", "updates", "notifies"], "pred_obj": ["User", "system", "request", "user authentication", "certificate type", "necessary details", "input data", "certificate request", "confirmation", "request status", "details", "certificate", "user", "certificate database", "completion"], "tp": ["selects", "displays", "system", "certificate type", "input data", "certificate request", "request status", "certificate", "certificate database"]}
{"index": 67, "ucName": "RequestCertificatesThirds", "steps": "1. The citizen selects a specific certificate(birth certificates, marital status certificates). \n2. The system displays the form for entering the data of the person concerned. \n3. The citizen enters the data of the person concerned (see note). \n4. The system stores the data of the citizen and interested person in a special form \n5. The system shows a screen with the requested certificate. \n6. The citizen selects the mode of payment and shipping. \n7. The system sends the certificate.", "dataset": "eANCI", "act": ["selects", "displays", "enters", "stores", "shows", "selects", "sends"], "obj": ["citizen", "specific certificate", "birth certificates", "marital status certificates", "system", "form", "data", "person concerned", "interested person", "screen", "requested certificate", "mode of payment", "shipping", "certificate"], "pred_steps": "RequestCertificatesThirds: User initiates request, system validates user credentials, retrieves user data, displays certificate request form, user fills out form with required details, system validates form input, generates certificate request, sends request to third-party certificate authority, receives response from authority, processes response, stores certificate in user account, notifies user of successful request or error.", "pred_act": ["initiates", "validates", "retrieves", "displays", "fills out", "validates", "generates", "sends", "receives", "processes", "stores", "notifies"], "pred_obj": ["RequestCertificatesThirds", "User", "system", "credentials", "user data", "certificate request form", "required details", "form input", "certificate request", "third-party certificate authority", "response", "certificate", "user account"], "tp": ["displays", "sends", "stores", "RequestCertificatesThirds", "system", "credentials", "user data", "certificate request form", "required details", "form input", "certificate request", "third-party certificate authority", "certificate"]}
{"index": 68, "ucName": "RequestToMarry", "steps": "1. The Citizen presses on the RequestToMarry button. \n2. The system shows the citizen the form to fill out. \n3. The citizen enters all his/her data, the partner's data and presses the confirmation button. \n4. The system automatically creates the form to be submitted with self-certification and family status of the applicant citizen and sends the form to the clerk. \n5. The clerk receives the notification and publishes the marriage application.", "dataset": "eANCI", "act": ["presses", "shows", "enters", "presses", "creates", "sends", "receives", "publishes"], "obj": ["Citizen", "RequestToMarry button", "system", "form", "citizen's data", "partner's data", "confirmation button", "self-certification", "family status", "applicant citizen", "clerk", "notification", "marriage application"], "pred_steps": "User initiates request, system validates user identity, retrieves user profile, checks eligibility to marry, displays form for entering partner details, user submits form, system validates partner details, checks compatibility, confirms request, updates user and partner status to 'engaged', notifies both users of engagement, provides options for marriage planning.", "pred_act": ["initiates", "validates", "retrieves", "checks", "displays", "submits", "validates", "checks", "confirms", "updates", "notifies", "provides"], "pred_obj": ["User", "system", "user identity", "user profile", "eligibility to marry", "form", "partner details", "partner", "user", "partner status", "engagement", "both users", "marriage planning"], "tp": ["retrieves", "displays", "submits", "system", "form", "partner details", "partner", "partner status", "marriage planning"]}
{"index": 69, "ucName": "RequestStateOfFamily", "steps": "1. The Citizen presses on the Family Status button. \n3. \n2. The system displays the Family Status to the citizen. The citizen chooses whether to print or send the family status to his/her e-mail. \n4. The system executes the choice made by the citizen.", "dataset": "eANCI", "act": ["presses", "displays", "chooses", "executes"], "obj": ["Citizen", "Family Status button", "system", "Family Status", "citizen", "e-mail", "choice"], "pred_steps": "RequestStateOfFamily: User initiates request by selecting family member, system validates selection, retrieves current state data for selected family member from database, processes data to determine current state, displays state information to user, allows user to request updates if desired, processes update request, updates database with new state information, and notifies user of successful update.", "pred_act": ["initiates", "selects", "validates", "retrieves", "processes", "displays", "allows", "requests", "processes", "updates", "notifies"], "pred_obj": ["RequestStateOfFamily", "User", "family member", "system", "selection", "current state data", "database", "state information", "update request", "new state information"], "tp": ["selects", "displays", "RequestStateOfFamily", "system", "selection"]}
{"index": 70, "ucName": "IdentityCardRenewal", "steps": "1. The Citizen presses on the Identity Card Renewal button. \n2. The system directly sends a renewal request from the citizen to the appropriate clerk. \n3. The citizen goes to the counter to renew the ID card.", "dataset": "eANCI", "act": ["presses", "sends", "goes", "renew"], "obj": ["Citizen", "Identity Card Renewal button", "system", "renewal request", "citizen", "clerk", "counter", "ID card"], "pred_steps": "User initiates IdentityCardRenewal request, system validates user identity, retrieves user information, checks eligibility for renewal, displays renewal options, user selects desired option, system calculates fees, user confirms and pays fees, system updates user information with new Identity Card details, generates and issues new Identity Card, updates database with renewal records, sends confirmation email/SMS to user, and marks use case as complete.", "pred_act": ["initiates", "validates", "retrieves", "checks", "displays", "selects", "calculates", "confirms", "pays", "updates", "generates", "issues", "updates", "sends", "marks"], "pred_obj": ["User", "IdentityCardRenewal request", "system", "user identity", "user information", "eligibility for renewal", "renewal options", "desired option", "fees", "new Identity Card details", "database", "renewal records", "confirmation email/SMS", "use case"], "tp": ["sends", "IdentityCardRenewal request", "system", "user identity", "eligibility for renewal", "renewal options", "new Identity Card details", "renewal records"]}
{"index": 71, "ucName": "LoseIdentityCard", "steps": "1. The Citizen presses on the LoseIdentityCard button. \n2. The system directly sends a lost card notification to the appropriate clerk. \n3. The Citizen goes to the clerk's office with a copy of the loss report.", "dataset": "eANCI", "act": ["presses", "sends", "goes"], "obj": ["Citizen", "LoseIdentityCard button", "system", "lost card notification", "clerk", "clerk's office", "copy of the loss report"], "pred_steps": "ReportLoss, VerifyIdentity, CollectDetails, GenerateReport, InitiateReplacementProcess, UpdateRecords, NotifyAuthorities, ProvideConfirmation", "pred_act": ["ReportLoss", "VerifyIdentity", "CollectDetails", "GenerateReport", "InitiateReplacementProcess", "UpdateRecords", "NotifyAuthorities", "ProvideConfirmation"], "pred_obj": ["ReportLoss", "VerifyIdentity", "CollectDetails", "GenerateReport", "InitiateReplacementProcess", "UpdateRecords", "NotifyAuthorities", "ProvideConfirmation"], "tp": ["ReportLoss", "NotifyAuthorities"]}
{"index": 72, "ucName": "LostElectoralCard", "steps": "1. The Citizen presses on the Lost Electoral Card button. \n2. The system directly sends a lost card notification to the appropriate clerk. \n3. The Citizen goes to the clerk's office with a copy of the lost card report.", "dataset": "eANCI", "act": ["presses", "sends", "goes"], "obj": ["Citizen", "Lost Electoral Card button", "system", "lost card notification", "clerk", "clerk's office", "copy of the lost card report"], "pred_steps": "Functional steps to implement the use case LostElectoralCard: User reports loss of electoral card, System verifies user identity, System checks electoral card status, System confirms loss and deactivates card, System generates replacement request, System updates user data with replacement request status, System notifies user of replacement process and timeline, User receives replacement electoral card, User confirms receipt of replacement card, System updates user data with new card details.", "pred_act": ["reports", "verifies", "checks", "confirms", "deactivates", "generates", "updates", "notifies", "receives", "confirms", "updates"], "pred_obj": ["Functional steps", "LostElectoralCard", "User", "electoral card", "System", "user identity", "electoral card status", "loss", "replacement request", "user data", "replacement request status", "replacement process", "timeline", "replacement electoral card", "new card details"], "tp": ["LostElectoralCard", "electoral card", "System", "electoral card status", "loss", "replacement request", "replacement electoral card", "new card details"]}
{"index": 73, "ucName": "CancellationCitizen", "steps": "1. \n3. The clerk presses the delete-citizen button. \n2. The system asks the clerk for confirmation. The clerk confirms the operation. \n4. The system deletes the citizen.", "dataset": "eANCI", "act": ["presses", "asks", "confirms", "deletes"], "obj": ["clerk", "delete-citizen button", "system", "confirmation", "operation", "citizen"], "pred_steps": "Verify user identity, retrieve booking details, display booking information to user, confirm cancellation request from user, check cancellation policy, calculate cancellation fee if applicable, process payment reversal if necessary, update booking status to cancelled in the system, notify relevant stakeholders of cancellation, generate cancellation confirmation for user, and archive cancellation details.", "pred_act": ["Verify", "retrieve", "display", "confirm", "check", "calculate", "process", "update", "notify", "generate", "archive"], "pred_obj": ["user identity", "booking details", "booking information", "cancellation request", "cancellation policy", "cancellation fee", "payment reversal", "booking status", "stakeholders", "cancellation confirmation", "cancellation details"], "tp": ["confirm", "cancellation confirmation"]}
{"index": 74, "ucName": "ElectoralCardRequest", "steps": "1. The Citizen presses on the Electoral Card button. \n2. The system displays the card request form. \n3. Citizen confirms the operation \n4. The system sends a notification to the clerk. \n5. The citizen will receive the voter card, which will be delivered to his/her home.", "dataset": "eANCI", "act": ["presses", "displays", "confirms", "sends", "receive", "will be delivered"], "obj": ["Citizen", "Electoral Card button", "system", "card request form", "operation", "notification", "clerk", "voter card", "home"], "pred_steps": "User initiates ElectoralCardRequest, system validates user identity, retrieves user details from database, displays request form, user fills out form with personal info and desired card type, system validates form data, calculates fee based on card type, user confirms request and pays fee, system generates unique request ID, stores request details in database, updates user status to 'pending', sends confirmation email with request ID to user, and notifies admin for further processing.", "pred_act": ["initiates", "validates", "retrieves", "displays", "fills", "validates", "calculates", "confirms", "pays", "generates", "stores", "updates", "sends", "notifies"], "pred_obj": ["User", "ElectoralCardRequest", "system", "user identity", "user details", "database", "request form", "personal info", "card type", "form data", "fee", "request", "unique request ID", "request details", "user status", "confirmation email", "request ID", "admin"], "tp": ["retrieves", "displays", "confirms", "sends", "ElectoralCardRequest", "system", "request form", "card type", "form data", "request", "request details", "request ID"]}
{"index": 75, "ucName": "ViewPractice", "steps": "1. Citizen clicks on the button view practices(ID Card, Change of Residence). \n2. The system displays a screen with the practices that concern the citizen.", "dataset": "eANCI", "act": ["clicks", "displays"], "obj": ["Citizen", "button", "view practices", "ID Card", "Change of Residence", "system", "screen", "practices"], "pred_steps": "InitiateViewPracticeRequest, ValidateUserSession, RetrievePracticeData, ProcessPracticeData, DisplayPracticeInformation", "pred_act": ["InitiateViewPracticeRequest", "ValidateUserSession", "RetrievePracticeData", "ProcessPracticeData", "DisplayPracticeInformation"], "pred_obj": ["InitiateViewPracticeRequest", "ValidateUserSession", "RetrievePracticeData", "ProcessPracticeData", "DisplayPracticeInformation"], "tp": ["DisplayPracticeInformation", "InitiateViewPracticeRequest", "ProcessPracticeData", "DisplayPracticeInformation"]}
{"index": 76, "ucName": "Practice Accepted", "steps": "1. The Clerk accepts the file. \n2. The system sets the practice as accepted. It then sends a notification to the Citizen.", "dataset": "eANCI", "act": ["accepts", "sets", "sends"], "obj": ["Clerk", "file", "system", "practice", "notification", "Citizen"], "pred_steps": "User selects practice mode, system loads practice questions, user answers questions, system checks answers, system provides feedback on correct and incorrect answers, user reviews feedback, user has option to retry incorrect questions, upon completion user views summary of practice session including score and areas for improvement.", "pred_act": ["selects", "loads", "answers", "checks", "provides", "reviews", "has", "retries", "views"], "pred_obj": ["User", "practice mode", "system", "practice questions", "answers", "feedback", "correct answers", "incorrect answers", "retry option", "incorrect questions", "completion", "summary of practice session", "score", "areas for improvement"], "tp": ["system", "practice questions"]}
{"index": 77, "ucName": "PracticeRejected", "steps": "1. The Clerk rejects the file. \n2. The system sets the practice as rejected. It then sends a notification to the Citizen.", "dataset": "eANCI", "act": ["rejects", "sets", "sends"], "obj": ["Clerk", "file", "system", "practice", "notification", "Citizen"], "pred_steps": "When PracticeRejected use case is triggered, verify user role and permissions, retrieve practice submission details, display rejection notification to user, provide reason for rejection, allow user to view feedback, enable user to resubmit after addressing issues, update submission status to rejected in the system, log rejection event with timestamp and details, notify relevant stakeholders of rejection.", "pred_act": ["trigger", "verify", "retrieve", "display", "provide", "allow", "view", "enable", "resubmit", "update", "log", "notify"], "pred_obj": ["PracticeRejected use case", "user role", "permissions", "practice submission details", "rejection notification", "reason for rejection", "feedback", "submission status", "system", "rejection event", "timestamp", "details", "relevant stakeholders"], "tp": ["PracticeRejected use case", "rejection notification", "system"]}
{"index": 78, "ucName": "ViewPracticesAwaitingEmployee", "steps": "1. Employee selects 'View Requests on Hold'. \n2. The System shows the list of pending practices.", "dataset": "eANCI", "act": ["selects", "shows", "output"], "obj": ["Employee", "View Requests on Hold", "System", "list of pending practices"], "pred_steps": "Fetch and display list of practices where employee's participation is awaited, including practice details such as name, description, deadline, and status.", "pred_act": ["Fetch", "display"], "pred_obj": ["practices", "employee's participation", "practice details", "name", "description", "deadline", "status"], "tp": ["display", "practices", "practice details"]}
{"index": 79, "ucName": "Night Reception", "steps": "1. The user selects the Social Assistance feature by selecting 'Night Reception Request'. \n2. The system displays the form for entering the applicant and recipient data. \n3. The user enters his/her own data and if necessary enters the data of a third person specifying the relationship with that person. He also specifies an alternative home or address and a possible date of appointment with social workers. He then submits the form. \n4. The system picks up the master data of the requesting citizen and the receiving citizen (if different from the requestor), and data regarding the receiving Citizen's household. The request is sent to the Social Services office and the user is notified of the submission.", "dataset": "eANCI", "act": ["selects", "displays", "enters", "specifies", "submits", "picks up", "sends", "notifies"], "obj": ["user", "Social Assistance feature", "Night Reception Request", "system", "form", "applicant", "recipient", "data", "his/her own data", "third person", "relationship", "alternative home", "address", "possible date of appointment", "social workers", "master data", "requesting citizen", "receiving citizen", "receiving Citizen's household", "Social Services office", "submission"], "pred_steps": "Please refer to relevant websites for more information, and feel free to ask me any other questions.", "pred_act": ["refer", "ask"], "pred_obj": ["relevant websites", "more information", "questions"], "tp": []}
{"index": 80, "ucName": "Sickness Allowance", "steps": "1. User selects 'Request Sickness Allowance'. \n2. The system displays the page with the information for requesting the INPS office for the sickness allowance, also allowing the user to print it out.", "dataset": "eANCI", "act": ["selects", "displays", "allowing", "print", "is"], "obj": ["User", "Request Sickness Allowance", "system", "page", "information", "INPS office", "sickness allowance", "print"], "pred_steps": "Initiate sickness allowance request by employee, system validates employee eligibility, retrieve medical certificate and sick leave details, calculate allowance amount based on company policy, approve or reject request, notify employee of decision, process payment if approved, update employee records with allowance details, generate report for HR and finance.", "pred_act": ["Initiate", "validates", "retrieve", "calculate", "approve", "reject", "notify", "process", "update", "generate"], "pred_obj": ["employee", "system", "medical certificate", "sick leave details", "allowance amount", "company policy", "request", "decision", "payment", "employee records", "allowance details", "report", "HR", "finance"], "tp": ["system", "sick leave details", "allowance amount", "request", "allowance details"]}
{"index": 81, "ucName": "Housing Assistance", "steps": "1. The user selects the Social Assistance feature by selecting 'Housing Assistance Request (Evictions)'. \n2. The system displays the form for entering the applicant's and recipient's data (if different). \n3. The user enters his/her own data and those of the recipient (if the recipient is a third person)if necessary specifying the relationship with that person, also specifies the new domicile. The user selects the attached documentation (minutes of enforceable eviction, the new registered lease and the ISEE model). He/she then submits the form. \n4. The system retrieves the master data of the recipient citizen, and data regarding the recipient Citizen's household. The request is sent to the Social Services office and the user is notified of the submission.", "dataset": "eANCI", "act": ["selects", "displays", "enters", "specifies", "selects", "submits", "retrieves", "sends", "notifies"], "obj": ["user", "Social Assistance feature", "Housing Assistance Request (Evictions", "system", "form", "applicant's data", "recipient's data", "own data", "recipient", "relationship", "new domicile", "attached documentation", "minutes of enforceable eviction", "new registered lease", "ISEE model", "master data", "recipient citizen", "recipient Citizen's household", "Social Services office", "submission"], "pred_steps": "User submits housing assistance application, system validates application completeness, retrieves user's financial and personal information, assesses eligibility based on predefined criteria, calculates assistance amount if eligible, generates approval or rejection notice, notifies user of decision via email/SMS, updates user profile with assistance status, and maintains logs of all interactions and decisions for auditing purposes.", "pred_act": ["submits", "validates", "retrieves", "assesses", "calculates", "generates", "notifies", "updates", "maintains"], "pred_obj": ["User", "housing assistance application", "system", "application completeness", "user's financial information", "user's personal information", "predefined criteria", "assistance amount", "approval notice", "rejection notice", "user profile", "assistance status", "logs", "interactions", "decisions", "auditing purposes"], "tp": ["submits", "retrieves", "notifies", "User", "housing assistance application", "system", "user's personal information", "assistance amount", "assistance status"]}
{"index": 82, "ucName": "Home careDomestic assistance", "steps": "1. User selects 'Request home care elderly, minors, disabled.' \n2. The system displays the form for entering the applicant and recipient data. \n3. The user enters the master data of the applicant and if necessary enters the data of a third person specifying the relationship with that person. \n4. The system retrieves the data of the applicant citizen , the master data of the recipient citizen (in case the applicant and the recipient were not the same person), and the data concerning the household of the recipient Citizen. \n5. The user specifies the psycho-physical conditions of the recipient specifying the attached documents (disability certificate issued by the ASL commission and/or health card of the attending physician and/or certificate of the pension provider,ISEE model) finally specifying a possible date of appointment with social workers. Then submit the form. \n6. The system picks up data regarding any social welfare services the recipient already uses. It then forwards the request to the Social Services office and notifies the Citizen that the request has been made.", "dataset": "eANCI", "act": ["selects", "displays", "enters", "retrieves", "specifies", "submit", "picks up", "forwards", "notifies"], "obj": ["User", "Request home care elderly", "minors", "disabled", "system", "form", "applicant", "recipient", "master data", "third person", "relationship", "citizen", "household", "psycho-physical conditions", "attached documents", "disability certificate", "ASL commission", "health card", "attending physician", "certificate", "pension provider", "ISEE model", "date of appointment", "social workers", "social welfare services", "Social Services office", "Citizen", "request"], "pred_steps": "Register user, verify user information, display available domestic assistance services, allow user to select service, collect service details, confirm service request, assign service provider, track service status, notify user of service updates, allow user to rate service, collect payment, and generate service report.", "pred_act": ["Register", "verify", "display", "allow", "collect", "confirm", "assign", "track", "notify", "rate", "collect", "generate"], "pred_obj": ["user", "user information", "domestic assistance services", "service", "service details", "service request", "service provider", "service status", "service updates", "service", "payment", "service report"], "tp": ["display", "notify", "domestic assistance services", "service", "service details", "service request", "service provider", "service status", "service updates", "service", "service report"]}
{"index": 83, "ucName": "Economic Assistance", "steps": "1. User selects 'Request economic assistance elderly, minor orphans, AIDS patients, prisoners, adults in need.' \n2. The system displays the form for entering the data of the applicant and the recipient. \n3. The user enters his/her own data and if necessary enters the data of a third person specifying the relationship with that person. \n4. The system retrieves the data of the applicant citizen , the master data of the recipient citizen (in case the applicant and the recipient were not the same person), and the data regarding the household of the recipient Citizen. \n5. The user specifies the psycho-physical conditions of the recipient specifying the attached documents (disability certificate issued by the ASL commission and/or health card of the attending physician and/or certificate of the pension provider,ISEE model) finally specifying a possible date of appointment with social workers. Then submit the form. \n6. The system picks up data regarding any social welfare services the recipient already uses. It then forwards the request to the Social Services office and notifies the user that the request has been made.", "dataset": "eANCI", "act": ["selects", "displays", "enters", "retrieves", "specifies", "submit", "picks up", "forwards", "notifies"], "obj": ["User", "Request economic assistance", "elderly", "minor orphans", "AIDS patients", "prisoners", "adults in need", "system", "form", "data", "applicant", "recipient", "third person", "relationship", "master data", "household", "psycho-physical conditions", "attached documents", "disability certificate", "ASL commission", "health card", "attending physician", "certificate", "pension provider", "ISEE model", "date of appointment", "social workers", "social welfare services", "Social Services office"], "pred_steps": "User initiates Economic Assistance request, system validates user eligibility, retrieves user financial data, calculates assistance amount based on predefined criteria, displays assistance amount to user, user confirms assistance amount, system processes assistance payment, updates user financial records, generates payment confirmation, and notifies user of successful assistance disbursement.", "pred_act": ["initiates", "validates", "retrieves", "calculates", "displays", "confirms", "processes", "updates", "generates", "notifies"], "pred_obj": ["User", "Economic Assistance request", "system", "user eligibility", "user financial data", "assistance amount", "predefined criteria", "payment confirmation", "successful assistance disbursement"], "tp": ["retrieves", "displays", "notifies", "Economic Assistance request", "system", "assistance amount"]}
{"index": 84, "ucName": "DeleteEmployee", "steps": "1. The administrator presses the delete employee button. \n2. The system asks the administrator for confirmation. \n3. The administrator confirms the operation. \n4. The system deletes the 'employee.", "dataset": "eANCI", "act": ["presses", "asks", "confirms", "deletes"], "obj": ["administrator", "delete employee button", "system", "confirmation", "operation", "employee"], "pred_steps": "Verify user permissions, display employee list, select employee to delete, confirm deletion, update database to remove selected employee, log deletion action, refresh employee list to reflect deletion.", "pred_act": ["Verify", "display", "select", "confirm", "update", "log", "refresh"], "pred_obj": ["user permissions", "employee list", "employee", "deletion", "database", "deletion action"], "tp": ["confirm", "employee list", "employee", "deletion", "deletion action"]}
{"index": 85, "ucName": "AssistanceGirlsMothersMinors", "steps": "1. The user selects the Social Assistance feature by selecting 'Request for Assistance to GirlsMothers and Minors in Difficulty'. \n2. The system displays the form for entering the applicant's and recipient's data. \n3. The user enters his/her own data and those of the recipient of the request (himself/herself, other person) if necessary specifying the relationship with that person. He/she also specifies a possible appointment date with Social Workers. He/she then submits the form. \n4. The system retrieves from the system the master data of the recipient citizen, and data regarding the household of the recipient Citizen. The request is sent to the Social Services office and the user is notified of the submission.", "dataset": "eANCI", "act": ["selects", "displays", "enters", "specifies", "submits", "retrieves", "sends", "notifies"], "obj": ["user", "Social Assistance feature", "Request for Assistance to GirlsMothers", "Minors in Difficulty", "system", "form", "applicant's data", "recipient's data", "user's data", "recipient of the request", "relationship", "appointment date", "Social Workers", "master data of the recipient citizen", "data regarding the household of the recipient Citizen", "request", "Social Services office", "submission"], "pred_steps": "RegisterUser, VerifyUserEligibility, DisplayAssistanceOptions, SelectAssistanceType, EnterDetailsForAssistedIndividual, UploadSupportingDocuments, ReviewSubmittedInformation, SubmitApplication, NotifyApplicationReceipt, AssessApplication, ApproveOrRejectApplication, NotifyApplicantOfDecision, ProvideAssistanceIfApproved, MonitorAssistanceProgress, CloseAssistanceCaseWhenComplete", "pred_act": ["RegisterUser", "VerifyUserEligibility", "DisplayAssistanceOptions", "SelectAssistanceType", "EnterDetailsForAssistedIndividual", "UploadSupportingDocuments", "ReviewSubmittedInformation", "SubmitApplication", "NotifyApplicationReceipt", "AssessApplication", "ApproveOrRejectApplication", "NotifyApplicantOfDecision", "ProvideAssistanceIfApproved", "MonitorAssistanceProgress", "CloseAssistanceCaseWhenComplete"], "pred_obj": ["RegisterUser", "VerifyUserEligibility", "DisplayAssistanceOptions", "SelectAssistanceType", "EnterDetailsForAssistedIndividual", "UploadSupportingDocuments", "ReviewSubmittedInformation", "SubmitApplication", "NotifyApplicationReceipt", "AssessApplication", "ApproveOrRejectApplication", "NotifyApplicantOfDecision", "ProvideAssistanceIfApproved", "MonitorAssistanceProgress", "CloseAssistanceCaseWhenComplete"], "tp": ["SubmitApplication", "NotifyApplicationReceipt", "NotifyApplicantOfDecision", "EnterDetailsForAssistedIndividual", "ReviewSubmittedInformation", "SubmitApplication", "ProvideAssistanceIfApproved"]}
{"index": 86, "ucName": "ResidentialResidential care", "steps": "1. User selects 'Request residential and semi-residential care.' \n2. The system displays the form for entering the applicant's and recipient's data. \n3. The user enters his/her own data and if necessary enters the data of a third person specifying the relationship with that person. \n4. The system retrieves the master data of the applicant, the recipient citizen (if the recipient is a third person), and data regarding the household of the recipient Citizen. \n5. The user specifies the recipient's psycho-physical condition, the reason for the request, the type of service requested, and the hours required. He/she then submits the form. \n6. The system forwards the request to the appropriate ASL and notifies the user that the request has been made.", "dataset": "eANCI", "act": ["selects", "displays", "enters", "retrieves", "specifies", "submits", "forwards", "notifies"], "obj": ["User", "Request residential", "semi-residential care", "system", "form", "applicant's data", "recipient's data", "user's data", "third person", "relationship", "master data", "applicant", "recipient citizen", "household", "recipient Citizen", "psycho-physical condition", "reason for the request", "type of service", "hours", "ASL", "request"], "pred_steps": "Receive patient information, assess patient needs, assign appropriate caregiver, schedule care sessions, monitor care activities, collect feedback, update care plan, generate reports, communicate with family/guardians, ensure compliance with regulations, handle emergencies.", "pred_act": ["Receive", "assess", "assign", "schedule", "monitor", "collect", "update", "generate", "communicate", "ensure", "handle"], "pred_obj": ["patient information", "patient needs", "caregiver", "care sessions", "care activities", "feedback", "care plan", "reports", "family/guardians", "regulations", "emergencies"], "tp": ["patient information", "patient needs", "care sessions", "care activities", "care plan"]}
{"index": 87, "ucName": "Usury Victims Funds", "steps": "1. The user selects the feature 'Application for Solidarity Fund Allocation for Victims of Usury and Extortion.' \n2. The system displays the information and related forms to be downloaded and sent to the Prefecture, offering in addition the possibility to print it out.", "dataset": "eANCI", "act": ["selects", "displays", "download", "send", "offer", "print", "displays", "download", "send", "offer", "print"], "obj": ["user", "feature 'Application for Solidarity Fund Allocation for Victims of Usury", "Extortion", "system", "information", "related forms", "Prefecture", "possibility"], "pred_steps": "Please refer to relevant websites for more information, and feel free to ask me any other questions.", "pred_act": ["refer", "feel", "ask"], "pred_obj": ["websites", "information", "questions"], "tp": ["information"]}
{"index": 88, "ucName": "IndemnityAccompaniment", "steps": "1. User selects 'Request Accompaniment Allowance'. \n2. The system displays the information about the disability pension and shows the link to download the relevant form to send to INPS, providing the option to print it out. It also shows direct links to the request for family status and marital status.", "dataset": "eANCI", "act": ["selects", "displays", "shows", "provides", "shows", "is"], "obj": ["User", "Request Accompaniment Allowance", "system", "information", "disability pension", "link", "form", "INPS", "option", "family status", "marital status"], "pred_steps": "Verify user eligibility, collect user details, assess indemnity request, calculate indemnity amount, generate indemnity agreement, obtain user consent, process indemnity payment, update user account status, notify user of indemnity status, archive indemnity records.", "pred_act": ["Verify", "collect", "assess", "calculate", "generate", "obtain", "process", "update", "notify", "archive"], "pred_obj": ["user", "eligibility", "user details", "indemnity request", "indemnity amount", "indemnity agreement", "user consent", "indemnity payment", "user account status", "indemnity status", "indemnity records"], "tp": []}
{"index": 89, "ucName": "ShowPracticeAttendedEmployee", "steps": "1. The system displays information regarding the selected practice with its practice acceptance or practice rejection options. \n2. The Clerk can Accept or Reject the practice if it is already complete with all the documentation, necessary signatures and after verifying it. He/she can also print the practice data if necessary.", "dataset": "eANCI", "act": ["displays", "acceptance", "rejection", "can Accept", "can Reject", "can print", "can Accept", "can Reject", "can print"], "obj": ["system", "information", "practice", "practice acceptance", "practice rejection options", "Clerk", "documentation", "necessary signatures", "practice data"], "pred_steps": "Fetch practice data from database, filter employees who attended the practice, retrieve employee details, display list of attended employees with relevant information.", "pred_act": ["Fetch", "filter", "retrieve", "display"], "pred_obj": ["practice data", "database", "employees", "practice", "employee details", "list of attended employees", "relevant information"], "tp": ["display", "practice data", "practice", "relevant information"]}
{"index": 90, "ucName": "PlanZoneAssistance", "steps": "1. The user remotely selects the Social Assistance feature by selecting 'Zone Plan: assistance services'. \n2. The system displays the zone plan regarding assistance services.", "dataset": "eANCI", "act": ["selects", "displays"], "obj": ["user", "Social Assistance feature", "Zone Plan: assistance services", "system", "zone plan", "assistance services"], "pred_steps": "PlanZoneAssistance: User initiates assistance request, system validates user credentials, retrieves user location, identifies nearest assistance zones, displays zone options with details, user selects desired zone, system confirms zone selection, navigates user to selected zone, monitors user progress, provides real-time updates, and alerts if deviation occurs, ensures user safety throughout the journey.", "pred_act": ["initiates", "validates", "retrieves", "identifies", "displays", "selects", "confirms", "navigates", "monitors", "provides", "alerts", "ensures"], "pred_obj": ["PlanZoneAssistance", "User", "system", "credentials", "location", "assistance zones", "zone options", "details", "desired zone", "zone selection", "real-time updates", "deviation", "user safety", "journey"], "tp": ["displays", "selects", "PlanZoneAssistance", "User", "system", "assistance zones", "zone options", "desired zone", "zone selection"]}
{"index": 91, "ucName": "War veteran qualification", "steps": "1. The user selects the 'Request for Recognition of Qualification as a veteran or orphan of labor' feature. \n2. The system shows the information and related forms to be downloaded and sent to the Prefecture,offering the option to print it out. It also shows a direct link to the page for requesting the Birth Certificate, Residence Certificate and Death Certificate.", "dataset": "eANCI", "act": ["selects", "shows", "offers", "link to"], "obj": ["user", "Request for Recognition of Qualification as a veteran", "orphan of labor' feature", "system", "information", "related forms", "Prefecture", "option", "Birth Certificate", "Residence Certificate", "Death Certificate"], "pred_steps": "Verify identity and military service records, check for combat experience and war-related injuries, assess psychological evaluation results, validate discharge status and honorable service, cross-reference with official military databases, confirm eligibility criteria for war veteran benefits, generate qualification report, and update system records accordingly.", "pred_act": ["Verify", "check", "assess", "validate", "cross-reference", "confirm", "generate", "update"], "pred_obj": ["identity", "military service records", "combat experience", "war-related injuries", "psychological evaluation results", "discharge status", "honorable service", "official military databases", "eligibility criteria for war veteran benefits", "qualification report", "system records"], "tp": []}
{"index": 92, "ucName": "DisabledParkingRelease", "steps": "1. The user selects the Social Assistance feature by selecting 'Disabled Parking Release.' \n2. The system displays the form for entering applicant and recipient data (if different). \n3. The user enters the master data of the applicant and those of the recipient (if different) if necessary specifying the relationship to that person. Also specified is the type of documentation attached to the traffic police command (medical-legal certificate issued by the ASL commission). It then submits the form. \n4. The system picks up the master data of the recipient citizen. The request is sent to the traffic police command and the user is notified of the submission.", "dataset": "eANCI", "act": ["selects", "displays", "enters", "specifies", "submits", "picks up", "sends", "notifies"], "obj": ["user", "Social Assistance feature", "Disabled Parking Release", "system", "form", "applicant", "recipient", "master data", "relationship", "type of documentation", "traffic police command", "medical-legal certificate", "ASL commission", "recipient citizen", "request", "submission"], "pred_steps": "Verify user eligibility for disabled parking release, retrieve disabled parking permit information, validate permit details, check parking duration and fees, process payment if applicable, update parking system records, release parking lock, notify user of successful release, and log transaction details.", "pred_act": ["Verify", "retrieve", "validate", "check", "process", "update", "release", "notify", "log"], "pred_obj": ["user eligibility", "disabled parking release", "disabled parking permit information", "permit details", "parking duration", "fees", "payment", "parking system records", "parking lock", "successful release", "transaction details"], "tp": ["notify", "disabled parking release", "disabled parking permit information"]}
{"index": 93, "ucName": "DisabledMobilityService", "steps": "1. User selects 'Disabled Mobility and Transportation Service.' \n2. The system displays the form for entering applicant and recipient data. \n3. The user enters his/her own data and if necessary enters the data of a third person specifying the relationship with that person. \n4. The system picks up the data of the applicant citizen , the master data of the recipient citizen (in case the applicant and recipient were not the same person), and the data regarding the household of the recipient Citizen. \n5. The user specifies the psycho-physical conditions of the recipient specifying the attached documents (disability certificate issued by the ASL commission and/or health card of the attending physician and/or certificate of the pension provider,ISEE model) finally specifying a possible date of appointment with the social workers. Then submit the form. \n6. The system picks up data regarding any social welfare services the recipient already uses. It then forwards the request to the Social Services office and notifies the user that the request has been made.", "dataset": "eANCI", "act": ["selects", "displays", "enters", "picks up", "specifies", "submit", "picks up", "forwards", "notifies"], "obj": ["User", "Disabled Mobility", "Transportation Service", "system", "form", "applicant", "recipient", "data", "third person", "relationship", "applicant citizen", "master data", "recipient citizen", "household", "psycho-physical conditions", "attached documents", "disability certificate", "ASL commission", "health card", "attending physician", "certificate", "pension provider", "ISEE model", "date of appointment", "social workers", "social welfare services", "Social Services office", "request"], "pred_steps": "Verify user eligibility for DisabledMobilityService, retrieve user mobility data, process data to determine service requirements, generate personalized service plan, present plan to user for approval, upon approval, activate service, monitor service usage, adjust service plan as needed, and provide ongoing support and feedback mechanism.", "pred_act": ["Verify", "retrieve", "process", "determine", "generate", "present", "approve", "activate", "monitor", "adjust", "provide"], "pred_obj": ["user", "DisabledMobilityService", "user mobility data", "service requirements", "personalized service plan", "approval", "service", "service usage", "service plan", "support", "feedback mechanism"], "tp": ["DisabledMobilityService", "service requirements", "service", "service usage", "service plan"]}
{"index": 94, "ucName": "UnsubscribeNewsInformagiovani", "steps": "1. Citizen requests unsubscription from advertisement service related to informagiovani news. \n2. The system displays a form to confirm the request. \n3. The citizen confirms the unsubscribe operation. \n4. The system deletes the citizen from the advertisement service.", "dataset": "eANCI", "act": ["requests", "displays", "confirms", "deletes"], "obj": ["Citizen", "advertisement service", "informagiovani news", "system", "form", "request", "unsubscribe operation"], "pred_steps": "Verify user identity, retrieve user subscription details from database, display current subscriptions to user, receive user selection for unsubscription, update database to remove selected subscription, send confirmation email to user, update user interface to reflect unsubscription.", "pred_act": ["Verify", "retrieve", "display", "receive", "update", "send", "update"], "pred_obj": ["user", "identity", "user subscription details", "database", "current subscriptions", "user selection", "subscription", "confirmation email", "user interface"], "tp": ["display"]}
{"index": 95, "ucName": "EnterCitizen", "steps": "1. The clerk logs into the system, and activates the citizen registration procedure. \n2. The system displays the form for entering a new citizen. \n3. The clerk enters the citizen's data and submits the registration request. \n4. The system receives the form, checks that the citizen entered by the clerk is not already in the system.", "dataset": "eANCI", "act": ["logs", "activates", "displays", "enters", "submits", "receives", "checks"], "obj": ["clerk", "system", "citizen registration procedure", "form", "new citizen", "citizen's data", "registration request"], "pred_steps": "EnterCitizen: Open form, display citizen input fields, validate input data, store citizen data in database upon successful validation, display confirmation message, provide option to edit or delete entry, close form.", "pred_act": ["Open", "display", "validate", "store", "display", "provide", "close"], "pred_obj": ["EnterCitizen", "form", "citizen input fields", "input data", "citizen data", "database", "confirmation message", "option", "entry"], "tp": ["display", "display", "EnterCitizen", "form", "citizen input fields", "input data", "citizen data", "database", "entry"]}
{"index": 96, "ucName": "CancellationCardGiovani", "steps": "1. Citizen requests cancellation of CardGiovani. \n2. The system displays a form for entering the Card number. \n3. The citizen enters the number. \n4. The system verifies the existence of the card and the citizen's membership. \n5. The system displays a form for confirming the request. \n6. The citizen confirms the deletion of the card. \n7. The system deletes the youth card from the repository.", "dataset": "eANCI", "act": ["requests", "displays", "enters", "verifies", "displays", "confirms", "deletes"], "obj": ["Citizen", "CardGiovani", "system", "form", "Card number", "card", "citizen's membership", "youth card", "repository"], "pred_steps": "Verify user identity, check eligibility for CancellationCardGiovani, retrieve user's current subscription details, display cancellation confirmation to user, obtain user consent for cancellation, process cancellation request, update subscription status to cancelled, generate cancellation confirmation email/notification, send confirmation to user, log cancellation activity in user's account history.", "pred_act": ["Verify", "check", "retrieve", "display", "obtain", "process", "update", "generate", "send", "log"], "pred_obj": ["user identity", "eligibility for CancellationCardGiovani", "user's current subscription details", "cancellation confirmation", "user consent", "cancellation request", "subscription status", "cancellation confirmation email/notification", "user", "user's account history"], "tp": ["Verify", "display", "eligibility for CancellationCardGiovani"]}
{"index": 97, "ucName": "CardCanceled", "steps": "1. Citizen decides he wants to cancel the youth card and then enters in the form that he wants to cancel it. \n2. The system receives the form notifies that the card has been cancelled and resubmits the form.", "dataset": "eANCI", "act": ["decides", "wants", "enters", "receives", "notifies", "resubmits"], "obj": ["Citizen", "youth card", "form", "system", "card"], "pred_steps": "Receive card cancellation request, validate user identity, verify card details, check for any active transactions or balances, prompt user to resolve active transactions or transfer balances if applicable, confirm cancellation intent from user, update card status to canceled in the system, notify relevant departments or systems of the cancellation, generate cancellation confirmation, and send confirmation to the user.", "pred_act": ["Receive", "validate", "verify", "check", "prompt", "confirm", "update", "notify", "generate", "send"], "pred_obj": ["card cancellation request", "user identity", "card details", "active transactions", "balances", "user", "cancellation intent", "card status", "system", "relevant departments", "systems", "cancellation confirmation", "confirmation", "user"], "tp": ["Receive", "notify", "card details", "system", "systems"]}
{"index": 98, "ucName": "EliminationConsultationReservation", "steps": "1. Citizen requests cancellation of interview reservation in the counseling center. \n2. The system displays a form to confirm the request. \n3. The citizen confirms the deletion of the reservation. \n4. Thesystemeliminatesreservation.", "dataset": "eANCI", "act": ["requests", "displays", "confirms", "eliminates"], "obj": ["Citizen", "interview reservation", "counseling center", "system", "form", "request", "deletion", "reservation"], "pred_steps": "User searches for available consultants, views consultant profiles, selects desired consultant, checks consultant's availability, chooses reservation date and time, provides personal and contact information, confirms reservation details, receives confirmation email with reservation details, and optionally cancels or reschedules reservation.", "pred_act": ["searches", "views", "selects", "checks", "chooses", "provides", "confirms", "receives", "cancels", "reschedules"], "pred_obj": ["User", "consultants", "consultant profiles", "desired consultant", "consultant's availability", "reservation date", "reservation time", "personal", "contact information", "reservation details", "confirmation email", "reservation"], "tp": ["confirms", "cancels", "reservation date", "reservation time", "reservation details", "reservation"]}
{"index": 99, "ucName": "InformationConsultingYouth", "steps": "1. The Citizen requests to view the list of consulting rooms. \n3. \n2. The system allows to view the list of counseling centers. Citizen chooses the counseling center. \n4. The system returns information regarding the chosen consultatory displaying such data as: - its location; - its opening dates and times. - the list of booked interviews (if any)(invoking the use case VisualizationReservationConsu ltory).", "dataset": "eANCI", "act": ["requests", "allows", "view", "chooses", "returns", "displaying", "invoking"], "obj": ["Citizen", "list of consulting rooms", "system", "list of counseling centers", "counseling center", "chosen consultatory", "location", "opening dates", "times", "list of booked interviews", "VisualizationReservationConsultory"], "pred_steps": "DisplayInformationConsultingOptions, SelectConsultingTopic, RetrieveTopicInformation, DisplayInformation, AllowUserToAskQuestions, ProvideAnswers, SaveConsultationSession, EndSession", "pred_act": ["DisplayInformationConsultingOptions", "SelectConsultingTopic", "RetrieveTopicInformation", "DisplayInformation", "AllowUserToAskQuestions", "ProvideAnswers", "SaveConsultationSession", "EndSession"], "pred_obj": ["DisplayInformationConsultingOptions", "SelectConsultingTopic", "RetrieveTopicInformation", "DisplayInformation", "AllowUserToAskQuestions", "ProvideAnswers", "SaveConsultationSession", "EndSession"], "tp": ["DisplayInformationConsultingOptions", "DisplayInformation", "DisplayInformationConsultingOptions", "SelectConsultingTopic"]}
{"index": 100, "ucName": "Information", "steps": "1. The Citizen requests to view the list of informagiovani news. \n3. \n2. The system allows to view the list of information regarding: - special employment official gazette; - local competition notices information; - study trips. The citizen selects the desired information. \n4. The system returns the information regarding the news specifying: - date of publication of the notice; - expiration date of the notice; - description", "dataset": "eANCI", "act": ["requests", "allows", "view", "selects", "returns"], "obj": ["Citizen", "list", "informagiovani news", "system", "information", "special employment official gazette", "local competition notices information", "study trips", "date of publication of the notice", "expiration date of the notice", "description"], "pred_steps": "Display information request, fetch data from database, validate data integrity, format data for display, render information on user interface.", "pred_act": ["request", "fetch", "validate", "format", "render"], "pred_obj": ["information request", "database", "data integrity", "data", "user interface"], "tp": ["information request"]}
{"index": 101, "ucName": "EnrollmentCardYouth", "steps": "1. Citizen applies for youth card. \n2. The system displays a form for submitting the request. \n3. The citizen enters the card application data into a form. \n4. The system receives the form, verifies the data, and submits the request. \n5. The system notifies that the card has been entered and displays the card number and a summary of the data entered in a form.", "dataset": "eANCI", "act": ["applies", "displays", "enters", "receives", "verifies", "submits", "notifies", "displays"], "obj": ["Citizen", "youth card", "system", "form", "request", "card application data", "card", "card number", "summary of the data entered"], "pred_steps": "Verify user eligibility for youth enrollment, collect user information including name, age, and contact details, validate the provided information, calculate enrollment fees based on youth category, display fee details to the user, collect payment from the user, generate a unique enrollment card number, store user and enrollment details in the database, issue the enrollment card with the unique number, and send a confirmation email with enrollment details to the user.", "pred_act": ["Verify", "collect", "validate", "calculate", "display", "collect", "generate", "store", "issue", "send"], "pred_obj": ["user", "eligibility", "youth enrollment", "name", "age", "contact details", "provided information", "enrollment fees", "youth category", "fee details", "payment", "unique enrollment card number", "user details", "enrollment details", "database", "enrollment card", "confirmation email", "enrollment details"], "tp": ["Verify", "validate", "display", "unique enrollment card number", "user details", "database", "enrollment card", "enrollment details"]}
{"index": 102, "ucName": "SubscribeNewsInformagiovani", "steps": "1. Citizen requests subscription to informagiovani news to receive service-related advertisements. \n2. The system displays a form for submitting the request. \n3. The citizen enters the news request data into a form. \n4. The system receives the form, verifies the data and submits the request.", "dataset": "eANCI", "act": ["requests", "displays", "enters", "receives", "verifies", "submits"], "obj": ["Citizen", "subscription", "informagiovani news", "service-related advertisements", "system", "form", "request", "news request data"], "pred_steps": "User navigates to website, selects SubscribeNewsInformagiovani option, enters email address, confirms email address, receives confirmation email, clicks confirmation link, subscription is activated, user receives news updates via email.", "pred_act": ["navigates", "selects", "enters", "confirms", "receives", "clicks", "is activated", "receives"], "pred_obj": ["User", "website", "SubscribeNewsInformagiovani option", "email address", "confirmation email", "confirmation link", "subscription", "news updates"], "tp": ["enters", "confirms", "receives", "receives", "SubscribeNewsInformagiovani option", "subscription", "news updates"]}
{"index": 103, "ucName": "ChangePreservationInterview", "steps": "1. Citizen requests a change of interview reservation in the counseling center. \n2. The system displays a form for editing the reservation fields. \n3. The citizen makes the changes in the form confirms the reservation. \n4. Ilsistemodificalapreservation.", "dataset": "eANCI", "act": ["requests", "displays", "makes", "confirms", "modifica"], "obj": ["Citizen", "interview reservation", "counseling center", "system", "form", "reservation fields", "changes", "Ilsistemodificalapreservation"], "pred_steps": "Open application, authenticate user, display main menu, select ChangePreservationInterview option, retrieve current interview details, display interview details, allow user to edit interview fields, save edited interview details, confirm changes saved, update interview status, return to main menu.", "pred_act": ["Open", "authenticate", "display", "select", "retrieve", "display", "allow", "save", "confirm", "update", "return"], "pred_obj": ["application", "user", "main menu", "ChangePreservationInterview option", "current interview details", "interview details", "interview fields", "edited interview details", "changes", "interview status"], "tp": ["display", "display", "confirm", "ChangePreservationInterview option", "changes"]}
{"index": 104, "ucName": "NewsCanceled", "steps": "1. Citizen decides she wants to cancel informagiovani news and then enters in the form that she wants to cancel it. \n2. The system receives the form notifies that the news has been cancelled and resubmits the form.", "dataset": "eANCI", "act": ["decides", "enters", "wants", "receives", "notifies", "resubmits", "receives", "notifies", "resubmits"], "obj": ["Citizen", "form", "informagiovani news", "system"], "pred_steps": "Verify user permissions, retrieve news ID, check news existence, confirm news status as active, update news status to canceled, log cancellation action, notify relevant stakeholders, and update UI to reflect cancellation.", "pred_act": ["Verify", "retrieve", "check", "confirm", "update", "log", "notify", "update"], "pred_obj": ["user permissions", "news ID", "news", "news status", "cancellation action", "relevant stakeholders", "UI"], "tp": ["notify", "news ID", "news", "news status"]}
{"index": 105, "ucName": "ReservationInterview", "steps": "1. The citizen requests an interview in the preselected counseling center. \n2. The system displays a form for submitting the request. \n3. The citizen enters the interview request data into a form. \n4. The system receives the form, verifies the reservation data, and submits the request. \n5. Citizen requests prints out receipt of interview booking. \n6. Thesystemprintsthebooking.", "dataset": "eANCI", "act": ["requests", "displays", "enters", "receives", "verifies", "submits", "requests", "prints", "prints"], "obj": ["citizen", "interview", "preselected counseling center", "system", "form", "request", "interview request data", "reservation data", "receipt of interview booking", "booking"], "pred_steps": "Functional steps to implement ReservationInterview: User accesses reservation system, selects interview type and preferred time slot, system checks availability, user provides necessary details, system confirms reservation, generates confirmation code, sends confirmation email/SMS, updates calendar, and stores reservation details.", "pred_act": ["accesses", "selects", "checks", "provides", "confirms", "generates", "sends", "updates", "stores"], "pred_obj": ["Functional steps", "ReservationInterview", "User", "reservation system", "interview type", "preferred time slot", "system", "availability", "necessary details", "reservation", "confirmation code", "confirmation email/SMS", "calendar", "reservation details"], "tp": ["confirms", "ReservationInterview", "reservation system", "interview type", "system", "reservation", "reservation details"]}
{"index": 106, "ucName": "EntryEmployee", "steps": "1. The administrator logs into the system, via administrative terminal, and activates the Employee Registration procedure. \n2. The system displays the form for entering a new employee. \n3. The Administrator enters the Employee's data and submits the registration request. \n4. The system receives the form, verifies that the matriculation entered by the Administrator is not already in the system and generates a password, saves the entered data and displays a notification of successful registration with the password assigned to the employee.", "dataset": "eANCI", "act": ["logs", "activates", "displays", "enters", "submits", "receives", "verifies", "generates", "saves", "displays"], "obj": ["administrator", "system", "administrative terminal", "Employee Registration procedure", "form", "new employee", "Employee's data", "registration request", "matriculation", "password", "notification of successful registration"], "pred_steps": "Capture employee details, validate input data, store employee information in database, generate employee ID, notify HR department, update system logs.", "pred_act": ["Capture", "validate", "store", "generate", "notify", "update"], "pred_obj": ["employee details", "input data", "employee information", "database", "employee ID", "HR department", "system logs"], "tp": ["validate", "generate", "employee details", "employee information"]}
{"index": 107, "ucName": "ReservationInterviewCanceled", "steps": "1. Citizen decides he wants to cancel the interview reservation and then enters in the form that he wants to cancel it. \n2. The system receives the form notifies that the interview booking has been cancelled and resubmits the form.", "dataset": "eANCI", "act": ["decides", "enters", "receives", "notifies", "resubmits"], "obj": ["Citizen", "interview reservation", "form", "system", "interview booking"], "pred_steps": "ReservationInterviewCanceled: Verify user identity, check interview reservation details, confirm cancellation request, update reservation status to canceled, notify interviewer of cancellation, notify interviewee of cancellation, log cancellation details, update system records.", "pred_act": ["Verify", "check", "confirm", "update", "notify", "log"], "pred_obj": ["ReservationInterviewCanceled", "user identity", "interview reservation details", "cancellation request", "reservation status", "interviewer", "interviewee", "cancellation details", "system records"], "tp": ["notify", "ReservationInterviewCanceled", "interview reservation details", "reservation status"]}
{"index": 108, "ucName": "ViewReservationConsulting", "steps": "1. Citizen requests viewing of reservation made in a consulting room. \n2. The system returns information regarding the chosen reservation displaying such data as: - Date and time; - Consultatory.", "dataset": "eANCI", "act": ["requests", "viewing", "returns", "displaying"], "obj": ["Citizen", "viewing", "reservation", "consulting room", "system", "information", "chosen reservation", "Date", "time", "Consultatory"], "pred_steps": "The functional steps to implement the use case ViewReservationConsulting are: Open the reservation system, authenticate user, display the main menu, select the view reservation option, retrieve user reservations from the database, display the list of reservations, allow user to filter reservations by date or status, display the selected reservation details, provide options to modify or cancel the reservation, and update the database accordingly if modifications or cancellations are made.", "pred_act": ["Open", "authenticate", "display", "select", "retrieve", "display", "allow", "filter", "display", "provide", "modify", "cancel", "update"], "pred_obj": ["functional steps", "use case ViewReservationConsulting", "reservation system", "user", "main menu", "view reservation option", "user reservations", "database", "list of reservations", "date", "status", "selected reservation details", "options", "reservation", "modifications", "cancellations"], "tp": ["display", "display", "display", "use case ViewReservationConsulting", "reservation system", "view reservation option", "user reservations", "list of reservations", "date", "selected reservation details", "reservation"]}
{"index": 109, "ucName": "DeleteInformation", "steps": "1. Employee requests news deletion. \n2. The system displays the list of existing news items \n3. The employee chooses a news item. \n4. The system displays a form the confirmation of the operation. \n5. The employee confirms the operation through the form. \n6. The system receives the form, and clears the news data from the system.", "dataset": "eANCI", "act": ["requests", "displays", "chooses", "displays", "confirms", "receives", "clears"], "obj": ["Employee", "news", "system", "news items", "news item", "form", "operation", "form"], "pred_steps": "Verify user authorization, retrieve information ID to be deleted, confirm deletion with user, delete information from database, update related records if necessary, log deletion action, notify user of successful deletion.", "pred_act": ["Verify", "retrieve", "confirm", "delete", "update", "log", "notify"], "pred_obj": ["user authorization", "information ID", "information", "database", "related records", "deletion action", "user", "successful deletion"], "tp": ["confirm"]}
{"index": 110, "ucName": "InformationLibaries", "steps": "1. The Citizen requests to view the list of libraries. \n3. \n2. The system allows viewing the list of libraries. Citizen chooses the library. \n4. The system returns information regarding the chosen library displaying such data as: - - - - location; opening dates and times; link to the library's website.", "dataset": "eANCI", "act": ["requests", "allows", "view", "chooses", "returns", "displaying"], "obj": ["Citizen", "list of libraries", "system", "chosen library", "location", "opening dates", "times", "link to the library's website"], "pred_steps": "Design functional steps: Identify user needs for information libraries, gather and curate relevant data sources, organize information into categories and subcategories, develop search functionality with filtering options, implement information retrieval and display mechanisms, allow users to save and bookmark favorite resources, provide options for sharing information, ensure regular updates and maintenance of the library, incorporate user feedback for continuous improvement.", "pred_act": ["Design", "Identify", "gather", "curate", "organize", "develop", "implement", "allow", "save", "bookmark", "provide", "ensure", "update", "maintain", "incorporate", "feedback"], "pred_obj": ["functional steps", "user needs", "information libraries", "relevant data sources", "categories", "subcategories", "search functionality", "filtering options", "information retrieval", "display mechanisms", "favorite resources", "options for sharing information", "regular updates", "maintenance of the library", "user feedback"], "tp": ["allow"]}
{"index": 111, "ucName": "InformationEventsInTheTerritory", "steps": "1. The Citizen requests to view the list of events. \n3. \n2. The system allows viewing the list of events. The Citizen chooses the event. \n4. The system returns information regarding the chosen event displaying such data as: - - - - the location; the date and time of the event; site managing the event (Pro-loco).", "dataset": "eANCI", "act": ["requests", "allows", "view", "chooses", "returns", "displaying"], "obj": ["Citizen", "list of events", "system", "event", "location", "date", "time", "site", "Pro-loco"], "pred_steps": "Please refer to relevant websites for more information, and feel free to ask me any other questions.", "pred_act": ["refer", "feel", "ask", "is"], "pred_obj": ["relevant websites", "questions"], "tp": []}
{"index": 112, "ucName": "InformationMuseums", "steps": "1. The Citizen requests to view the list of museums. \n3. \n2. The system allows the list of museums to be displayed. Citizen chooses the museum. \n4. The system returns information regarding the chosen museum displaying such data as: - - - - location; opening dates and times; link to the museum's website.", "dataset": "eANCI", "act": ["requests", "allows", "displayed", "chooses", "returns", "displaying"], "obj": ["Citizen", "list of museums", "system", "museum", "location", "opening dates", "times", "link to the museum's website"], "pred_steps": "Display list of museums, allow user to select museum, show details of selected museum including location, hours, exhibits, allow user to search for specific exhibit, provide navigation to museum, allow user to save museum as favorite, allow user to share museum information via social media, and allow user to provide feedback on museum information.", "pred_act": ["Display", "allow", "show", "allow", "provide", "allow", "allow", "allow", "provide"], "pred_obj": ["museums", "museum", "location", "hours", "exhibits", "specific exhibit", "navigation", "favorite", "social media", "feedback"], "tp": ["Display", "allow", "show", "allow", "allow", "allow", "allow", "museums", "museum", "location"]}
{"index": 113, "ucName": "InformationPromotionTerritory", "steps": "1. The Citizen requests to view the list of territorial promotions. \n3. \n2. The system allows the list of promotions to be displayed. Citizen chooses the promotion. \n4. The system returns information regarding the chosen promotion.", "dataset": "eANCI", "act": ["requests", "allows", "be displayed", "chooses", "returns"], "obj": ["Citizen", "list of territorial promotions", "system", "list of promotions", "promotion", "information regarding the chosen promotion"], "pred_steps": "Please refer to relevant websites for more information, and feel free to ask me any other questions.", "pred_act": ["refer", "feel", "ask", "is"], "pred_obj": ["websites", "information", "questions"], "tp": ["information"]}
{"index": 114, "ucName": "EntryInformation", "steps": "1. The employee requests a new news entry. \n2. The system displays a form for submitting the request. \n3. The employee enters data about the new news item in a form. \n4. The system receives the form, and enters the news into the system.", "dataset": "eANCI", "act": ["requests", "displays", "enters", "receives", "enters"], "obj": ["employee", "new news entry", "system", "form", "request", "data", "new news item", "news"], "pred_steps": "DisplayEntryForm, ValidateUserInput, SaveEntryData, GenerateConfirmationMessage, UpdateEntryLog", "pred_act": ["DisplayEntryForm", "ValidateUserInput", "SaveEntryData", "GenerateConfirmationMessage", "UpdateEntryLog"], "pred_obj": ["DisplayEntryForm", "ValidateUserInput", "SaveEntryData", "GenerateConfirmationMessage", "UpdateEntryLog"], "tp": ["SaveEntryData"]}
{"index": 115, "ucName": "EditInformation", "steps": "1. Employee requests a news change. \n2. The system displays the list of existing news items \n3. The employee chooses a news item. \n4. The system displays a form for editing the news. \n5. The employee enters data about the news into a form. \n6. The system receives the form, and updates the news data in the system.", "dataset": "eANCI", "act": ["requests", "displays", "chooses", "displays", "enters", "receives", "updates"], "obj": ["Employee", "news change", "system", "list of existing news items", "news item", "form", "news", "data", "news data"], "pred_steps": "Load user interface, display current information, detect user input for edit mode, enable editable fields, capture and validate user input, update information upon validation success, save changes to database, refresh user interface with updated information, provide success feedback to user.", "pred_act": ["Load", "display", "detect", "enable", "capture", "validate", "update", "save", "refresh", "provide"], "pred_obj": ["user interface", "current information", "user input", "edit mode", "editable fields", "validation", "information", "database", "success feedback"], "tp": ["display", "update", "current information", "information", "database"]}
{"index": 116, "ucName": "ViewInformation", "steps": "1. The Citizen requests to view the information in the territory. \n2. The system returns information regarding the territory by displaying such data as: - libraries; - events; - museums; - promotions present in the territory.", "dataset": "eANCI", "act": ["requests", "views", "returns", "displaying"], "obj": ["Citizen", "territory", "system", "information", "libraries", "events", "museums", "promotions"], "pred_steps": "User initiates request to view information, system validates user permissions, retrieves requested information from database, processes information for display, presents information to user on screen, allows user to navigate within displayed information, and provides options to export or print information if applicable.", "pred_act": ["initiates", "validates", "retrieves", "processes", "presents", "allows", "provides", "navigate", "export", "print"], "pred_obj": ["User", "request", "information", "system", "user permissions", "database", "screen", "options to export", "options to print"], "tp": ["information", "system"]}
{"index": 117, "ucName": "LogoutAdministrator", "steps": "1. The administrator wants to end the work session and clicks on the Logout button. \n2. The system disconnects the administrator from the system and returns to the main screen.", "dataset": "eANCI", "act": ["wants", "clicks", "disconnects", "returns"], "obj": ["administrator", "work session", "Logout button", "system", "main screen"], "pred_steps": "Verify user role as administrator, display logout confirmation prompt, receive user confirmation, terminate administrator session, redirect to login page, update session status to logged out.", "pred_act": ["Verify", "display", "receive", "terminate", "redirect", "update"], "pred_obj": ["user role", "administrator", "logout confirmation prompt", "user confirmation", "administrator session", "login page", "session status", "logged out"], "tp": ["administrator", "logged out"]}
{"index": 118, "ucName": "Communications", "steps": "1. The citizen accesses the communications area using the appropriate link \n2. The system displays the form for entering the data required for the communication (e.g. communication of the start of works,D.I.A., communication of the end of works...) \n3. The citizen enters the required data \n4. The system verifies correctness and completeness of the data then displays a summary screen or activates the use case DatiErrati. \n5. The citizen confirms the operation \n6. The system displays the form for printing \n7. The system sends a message notifying the appropriate employee of the request \n8. The citizen makes the printout to be delivered to the municipal office with a revenue stamp.", "dataset": "eANCI", "act": ["accesses", "displays", "enters", "verifies", "displays", "confirms", "displays", "sends", "makes"], "obj": ["citizen", "communications area", "link", "system", "form", "data", "communication", "start of works", "D.I.A", "end of works", "summary screen", "use case DatiErrati", "operation", "printout", "employee", "request", "municipal office", "revenue stamp"], "pred_steps": "Initiate communication session, validate user credentials, display contact list, select recipient, compose message, attach files if needed, send message, receive and display incoming messages, notify user of new messages, provide option to reply or forward, store communication logs, end communication session.", "pred_act": ["Initiate", "validate", "display", "select", "compose", "attach", "send", "receive", "notify", "provide", "store", "end"], "pred_obj": ["communication session", "user credentials", "contact list", "recipient", "message", "files", "incoming messages", "new messages", "option", "communication logs"], "tp": ["validate", "display", "send", "communication session", "communication logs"]}
{"index": 119, "ucName": "DefinitionBuilding Offenses", "steps": "1. The citizen accesses the request area definition building offenses using the appropriate link \n2. The system displays the form for entering the data required for the request \n3. The citizen enters the required data \n4. The system verifies the correctness and completeness of the data then displays a summary screen or activates the use case DatiErrati \n5. The citizen confirms the operation \n6. The system displays a message notifying the request \n7. The system sends a request notification message to the appropriate employee.", "dataset": "eANCI", "act": ["accesses", "displays", "enters", "verifies", "displays", "activates", "confirms", "displays", "sends"], "obj": ["citizen", "request area definition building offenses", "appropriate link", "system", "form", "data", "request", "correctness", "completeness", "summary screen", "use case DatiErrati", "operation", "message", "employee"], "pred_steps": "Please refer to relevant websites for more information, and feel free to ask me any other questions.", "pred_act": ["refer", "feel", "ask"], "pred_obj": ["websites", "information", "questions"], "tp": []}
{"index": 120, "ucName": "Declaration in lieu of Notarization", "steps": "1. The citizen accesses the area Dichiarazione sostitutiva dell'atto di notorietà using the appropriate link \n2. The system displays the form for entering the data required for the request \n3. The citizen enters the required data \n4. The system verifies the correctness and completeness of the data then displays a summary screen or activates the DatiErrati use case \n5. The citizen confirms the operation \n6. The system displays a notification message \n7. The system sends a message notifying the appropriate employee of the request.", "dataset": "eANCI", "act": ["accesses", "displays", "enters", "verifies", "displays/activates", "confirms", "displays", "sends"], "obj": ["citizen", "area Dichiarazione sostitutiva dell'atto di notorietà", "link", "system", "form", "data", "request", "summary screen", "DatiErrati use case", "operation", "notification message", "employee"], "pred_steps": "User initiates declaration process, system displays declaration form, user fills out personal details and uploads required documents, system validates input data for completeness and accuracy, user reviews and confirms details, system generates declaration document, user electronically signs declaration, system verifies electronic signature, system stores signed declaration securely, system provides option to download or print declaration, system sends confirmation email with declaration details to user.", "pred_act": ["initiates", "displays", "fills", "uploads", "validates", "reviews", "confirms", "generates", "signs", "verifies", "stores", "provides", "sends"], "pred_obj": ["User", "system", "declaration process", "declaration form", "personal details", "required documents", "input data", "declaration document", "electronic signature", "signed declaration", "option", "confirmation email", "declaration details"], "tp": ["displays", "validates", "confirms", "verifies", "sends", "system", "declaration form", "input data", "signed declaration"]}
{"index": 121, "ucName": "VisionPlanRegulator", "steps": "1. citizen accesses the Regulatory Plan area via the appropriate link \n2. the system displays the document", "dataset": "eANCI", "act": ["accesses", "displays"], "obj": ["citizen", "Regulatory Plan area", "link", "system", "document"], "pred_steps": "VisionPlanRegulator: Capture visual input, preprocess image data, detect edges and features, analyze visual content, identify objects and scenes, match against predefined rules, generate regulatory response, update vision plan accordingly, log regulatory actions, and provide feedback to user interface.", "pred_act": ["Capture", "preprocess", "detect", "analyze", "identify", "match", "generate", "update", "log", "provide"], "pred_obj": ["VisionPlanRegulator", "visual input", "image data", "edges", "features", "visual content", "objects", "scenes", "predefined rules", "regulatory response", "vision plan", "regulatory actions", "user interface"], "tp": []}
{"index": 122, "ucName": "SubmitBuildingProject", "steps": "1. The citizen accesses the submit building project area via the appropriate link \n2. The system displays the form for entering the required data \n3. The citizen enters the required data \n4. The system verifies correctness and completeness of the data then displays a summary screen or activates the use case DatiErrati \n5. The citizen confirms the operation \n6. The system displays the form for printing \n7. The system sends a message notifying the appropriate employee of the request \n8. The citizen makes the printout to be delivered to the municipal office with the required documents and a revenue stamp attached.", "dataset": "eANCI", "act": ["accesses", "displays", "enters", "verifies", "displays/activates", "confirms", "displays", "sends", "makes"], "obj": ["citizen", "submit building project area", "link", "system", "form", "required data", "summary screen", "use case DatiErrati", "operation", "printout", "message", "employee", "request", "municipal office", "required documents", "revenue stamp"], "pred_steps": "The functional steps to implement the SubmitBuildingProject use case are: User accesses the system and navigates to the project submission form, enters project details including name, location, description, and uploads necessary documents, selects the project category and specifies the budget, reviews and confirms the entered information, submits the project for review, the system validates the submitted information, if errors are found, the user is prompted to correct them, if no errors, the project is saved and assigned a unique identification number, the system sends a confirmation email to the user with the project ID and status, and the project is queued for review by the appropriate authority.", "pred_act": ["accesses", "navigates", "enters", "uploads", "selects", "specifies", "reviews", "confirms", "submits", "validates", "prompts", "corrects", "saves", "assigns", "sends", "queues"], "pred_obj": ["functional steps", "SubmitBuildingProject use case", "User", "system", "project submission form", "project details", "name", "location", "description", "necessary documents", "project category", "budget", "entered information", "project", "submitted information", "errors", "unique identification number", "confirmation email", "project ID", "status", "appropriate authority"], "tp": ["accesses", "enters", "confirms", "validates", "sends", "SubmitBuildingProject use case", "system", "project submission form", "necessary documents", "project", "submitted information"]}
{"index": 123, "ucName": "SearchBuildingFile", "steps": "1. \n3. \n5. The citizen accesses the search area \n2. The system displays the form for entering the search key The citizen enters the search key \n4. Thesystemshowstheresultsof the search The citizen selects the file \n6. Thesystemdisplaysthefile.", "dataset": "eANCI", "act": ["accesses", "displays", "enters", "shows", "selects", "displaysthefile"], "obj": ["citizen", "search area", "system", "form", "search key", "results", "file"], "pred_steps": "User enters search criteria, system validates input, retrieves matching building files from database, displays search results, allows user to select a file, system opens and displays the selected building file.", "pred_act": ["enters", "validates", "retrieves", "displays", "allows", "selects", "opens", "displays"], "pred_obj": ["User", "search criteria", "system", "input", "building files", "database", "search results", "file", "selected building file"], "tp": ["enters", "displays", "selects", "displays", "search criteria", "system", "building files", "search results", "file"]}
{"index": 124, "ucName": "RequestAuthorization", "steps": "1. The citizen accesses the certificate and authorization issuance area using the appropriate link \n2. The system displays the form for entering the data necessary to request the authorization (e.g. authorization connection to the water network, authorization connection to the sewer network ...) \n3. The citizen enters the required data \n4. The system verifies correctness and completeness of the data then displays a summary screen or activates the use case DatiErrati \n5. The citizen confirms the operation \n6. The system displays the form for printing \n7. The system sends a message notifying the appropriate employee of the request \n8. The citizen makes the printout to be delivered to the municipal office with the stamp and attachments.", "dataset": "eANCI", "act": ["accesses", "displays", "enters", "verifies", "displays", "confirms", "displays", "sends", "makes"], "obj": ["citizen", "certificate", "authorization issuance area", "link", "system", "form", "data", "authorization", "authorization connection to the water network", "authorization connection to the sewer network", "correctness", "completeness", "summary screen", "use case DatiErrati", "operation", "printout", "message", "employee", "municipal office", "stamp", "attachments"], "pred_steps": "RequestAuthorization: User initiates request, system validates user credentials, retrieves user roles and permissions, checks requested action against permissions, if authorized, grants access, logs action and response, updates session with authorization status, else denies access and logs denial with reason.", "pred_act": ["initiates", "validates", "retrieves", "checks", "grants", "logs", "updates", "denies"], "pred_obj": ["RequestAuthorization", "User", "request", "system", "user credentials", "user roles", "permissions", "requested action", "access", "logs", "action", "response", "session", "authorization status", "denial", "reason"], "tp": ["validates", "RequestAuthorization", "system", "permissions", "access", "authorization status"]}
{"index": 125, "ucName": "RequestCopyFileEdilizio", "steps": "1. The citizen requests a copy of the file using the appropriate button \n2. The system sends the request to the clerk \n3. The system notifies the citizen that the request has been submitted and the copy will be sent to him/her shortly.", "dataset": "eANCI", "act": ["requests", "sends", "notifies", "sends", "notifies"], "obj": ["citizen", "file", "appropriate button", "system", "request", "clerk"], "pred_steps": "RequestCopyFileEdilizio: User initiates file copy request, system validates user authentication, retrieves file details, checks file availability, verifies user permissions, prompts for confirmation, initiates file copy process, monitors copy progress, notifies user of completion or errors, and logs activities.", "pred_act": ["initiates", "validates", "retrieves", "checks", "verifies", "prompts", "initiates", "monitors", "notifies", "logs"], "pred_obj": ["RequestCopyFileEdilizio", "User", "file copy request", "system", "user authentication", "file details", "file availability", "user permissions", "confirmation", "file copy process", "copy progress", "completion", "errors", "activities"], "tp": ["notifies", "system"]}
{"index": 126, "ucName": "Request for Condonation Definition", "steps": "1. Citizen accesses the request area definition condono using the appropriate link \n2. The system displays the form for entering the data required for the \n3. \n5. request The citizen enters the required data \n4. The system verifies the correctness and completeness of the data then displays a summary screen or activates the use case DatiErrati The citizen confirms the operation \n6. The system displays a message notifying the request \n7. The system sends a request notification message to the appropriate employee.", "dataset": "eANCI", "act": ["accesses", "displays", "enters", "verifies", "displays/activates", "confirms", "displays", "sends"], "obj": ["Citizen", "request area definition condono", "link", "system", "form", "data", "summary screen", "use case DatiErrati", "operation", "message", "request notification message", "employee"], "pred_steps": "User submits request for condonation with necessary details, system validates input data, retrieves relevant policies and rules, assesses eligibility for condonation, calculates any applicable fees or penalties, presents user with condonation options and associated costs, user selects desired option, system processes request, generates condonation approval or rejection notice, updates user and system records, notifies user of decision and next steps.", "pred_act": ["submits", "validates", "retrieves", "assesses", "calculates", "presents", "selects", "processes", "generates", "updates", "notifies"], "pred_obj": ["User", "request", "condonation", "details", "system", "input data", "policies", "rules", "eligibility", "fees", "penalties", "condonation options", "costs", "desired option", "condonation approval", "rejection notice", "user records", "system records", "decision", "next steps"], "tp": ["validates", "request", "system", "input data"]}
{"index": 127, "ucName": "RequestNumberCivic", "steps": "1. The citizen accesses the request area house number using the appropriate link \n3. \n5. \n2. The system displays the form for entering the data required for the request The citizen enters the required data \n4. The system verifies the correctness and completeness of the data then displays a summary screen or activates the use case DatiErrati The citizen confirms the operation \n6. The system displays a message notifying the request \n7. The system sends a request notification message to the appropriate employee.", "dataset": "eANCI", "act": ["accesses", "displays", "enters", "verifies", "displays", "activates", "confirms", "displays", "sends"], "obj": ["citizen", "request area house number", "link", "system", "form", "data", "request", "summary screen", "use case DatiErrati", "operation", "message", "employee"], "pred_steps": "User initiates request, system validates user identity, system retrieves available civic numbers, system displays available civic numbers to user, user selects desired civic number, system confirms selection, system updates civic number status to reserved, system generates confirmation receipt, system sends confirmation receipt to user, use case ends.", "pred_act": ["initiates", "validates", "retrieves", "displays", "selects", "confirms", "updates", "generates", "sends", "ends"], "pred_obj": ["User", "request", "system", "user identity", "civic numbers", "desired civic number", "confirmation", "civic number status", "confirmation receipt", "use case"], "tp": ["validates", "displays", "confirms", "sends", "request", "system", "use case"]}
{"index": 128, "ucName": "LogoutCitizen", "steps": "1. The citizen wants to end the work session and clicks on the Logout button. \n2. The system disconnects the citizen from the system and returns to the main screen.", "dataset": "eANCI", "act": ["wants", "clicks", "disconnects", "returns", "disconnects", "returns", "but these are actions captured already in the first output string"], "obj": ["citizen", "work session", "Logout button", "system", "main screen"], "pred_steps": "Verify user identity, ensure session is active, prompt user confirmation for logout, upon confirmation receive logout request, invalidate user session, clear user data from session storage, redirect user to login page, display logout success message.", "pred_act": ["Verify", "ensure", "prompt", "receive", "invalidate", "clear", "redirect", "display"], "pred_obj": ["user identity", "session", "user confirmation", "logout", "logout request", "user session", "user data", "session storage", "login page", "logout success message"], "tp": ["session", "logout", "logout request", "login page"]}
{"index": 129, "ucName": "RequestCadastralService", "steps": "1. The citizen accesses the municipal cadastral service area using the appropriate link \n2. The system displays the form for entering the data required for the request \n3. The citizen enters the required data \n4. The system verifies correctness and completeness of the data then displays a summary screen or activates the use case DatiErrati \n5. The citizen confirms the transaction \n6. The system displays the payment method \n7. The citizen makes the choice \n8. The system sends a message notifying the appropriate employee of the request \n9. The system notifies the citizen that the request has been submitted and the copy will be sent to him/her shortly.", "dataset": "eANCI", "act": ["accesses", "displays", "enters", "verifies", "displays/activates", "confirms", "displays", "makes", "sends", "notifies"], "obj": ["citizen", "municipal cadastral service area", "link", "system", "form", "data", "request", "summary screen", "use case DatiErrati", "transaction", "payment method", "choice", "message", "employee", "copy"], "pred_steps": "RequestCadastralService: User initiates service request, system validates user authentication, retrieves user details, prompts user to input cadastral information including property details and location, system validates input data, processes request to fetch cadastral data from database, generates cadastral report or map, displays report or map to user, allows user to save or print report, and logs transaction for record keeping.", "pred_act": ["initiates", "validates", "retrieves", "prompts", "validates", "processes", "fetches", "generates", "displays", "allows", "saves", "prints", "logs"], "pred_obj": ["RequestCadastralService", "User", "system", "user authentication", "user details", "cadastral information", "property details", "location", "input data", "cadastral data", "database", "cadastral report", "map", "transaction"], "tp": ["validates", "validates", "displays", "RequestCadastralService", "system", "cadastral information", "input data", "cadastral data", "cadastral report", "transaction"]}
{"index": 130, "ucName": "IssuingCertificates", "steps": "1. The citizen accesses the certificate and permit issuance area using the appropriate link \n2. The system displays the form for entering the data required for the issuance of the certificate (e.g. certificate of fitness, certificate of habitability, ...) \n3. The citizen enters the required data \n4. The system verifies correctness and completeness of the data then displays a summary screen or activates the use case DatiErrati \n5. The citizen confirms the operation \n6. The system displays the form for printing \n7. The system sends a message notifying the appropriate employee of the request \n8. The citizen makes the printout to be delivered to the municipal office with the revenue stamp.", "dataset": "eANCI", "act": ["accesses", "displays", "enters", "verifies", "displays", "confirms", "displays", "sends", "makes"], "obj": ["citizen", "certificate", "permit issuance area", "link", "system", "form", "data", "certificate of fitness", "certificate of habitability", "summary screen", "use case DatiErrati", "operation", "message", "employee", "request", "printout", "municipal office", "revenue stamp"], "pred_steps": "Receive certificate request, validate request data, fetch student/course details from database, check eligibility criteria, generate certificate with necessary details, review certificate for accuracy, approve certificate, store certificate in database, notify student/admin of certificate issuance, provide option to download/print certificate.", "pred_act": ["Receive", "validate", "fetch", "check", "generate", "review", "approve", "store", "notify", "provide"], "pred_obj": ["certificate request", "request data", "student/course details", "database", "eligibility criteria", "certificate", "necessary details", "accuracy", "student/admin", "option", "certificate issuance", "download/print certificate"], "tp": ["validate", "certificate request", "request data", "certificate", "certificate issuance", "download/print certificate"]}
{"index": 131, "ucName": "VisionCirculars", "steps": "1. \n3. The citizen accesses the circulars area through the appropriate link \n2. The system displays the numbered list of circulars The citizen chooses the circular via link \n4. Thesystemdisplaysthechosencircular", "dataset": "eANCI", "act": ["accesses", "displays", "chooses", "displaysthechosencircular"], "obj": ["citizen", "circulars area", "link", "system", "numbered list of circulars", "circular", "chosen circular"], "pred_steps": "User logs in, navigates to VisionCirculars section, views list of available circulars, selects desired circular, system displays circular details, user can download or print circular, user can mark circular as read, user can search circulars by title, date or category, user receives notifications for new circulars, user can set preferences for circular notifications, user logs out.", "pred_act": ["logs", "navigates", "views", "selects", "displays", "download", "print", "mark", "search", "receives", "set", "logs"], "pred_obj": ["User", "VisionCirculars section", "list of available circulars", "desired circular", "system", "circular details", "circular", "title", "date", "category", "notifications", "new circulars", "preferences", "circular notifications"], "tp": ["selects", "displays", "VisionCirculars section", "list of available circulars", "desired circular", "system", "circular details", "circular", "new circulars", "circular notifications"]}
{"index": 132, "ucName": "UpdateEnvironmentalAnalysis", "steps": "1. The municipal clerk after authenticating in the system updates the form that simply provides for the copy of the report of the analysis carried out on the environment by the Civil Defense \n2. The system responds by providing the clerk with a form in which to report the information prepared by the chemical experts. \n3. The employee completes the form field presented by the system and submits it. \n4. The system updates the form and allows it to be viewed by the Citizen.", "dataset": "eANCI", "act": ["authenticates", "updates", "provides", "responds", "report", "completes", "submits", "updates", "allows", "viewed"], "obj": ["municipal clerk", "system", "form", "copy", "report", "analysis", "environment", "Civil Defense", "chemical experts", "employee", "form field", "Citizen"], "pred_steps": "UpdateEnvironmentalAnalysis: Retrieve current environmental data, validate data integrity, identify changes in environmental factors, update analysis models with new data, re-calculate environmental impact metrics, generate updated environmental analysis report, review report for accuracy, and finalize updates in the system.", "pred_act": ["Retrieve", "validate", "identify", "update", "re-calculate", "generate", "review", "finalize"], "pred_obj": ["UpdateEnvironmentalAnalysis", "environmental data", "data integrity", "environmental factors", "analysis models", "environmental impact metrics", "environmental analysis report", "report", "updates", "system"], "tp": ["update", "finalize", "UpdateEnvironmentalAnalysis", "analysis models", "environmental analysis report", "report", "system"]}
{"index": 133, "ucName": "UpdateBandsECompetitions", "steps": "1. \n3. The municipal clerk after authenticating in the system updates the list of associations that have published a new notice of competition. \n2. The system responds by providing the clerk with a form to complete to update the fields: association_logo, description, association_name, notice. The clerk completes the fields of the form presented by the system and submits it. \n4. The system updates the form and allows it to be viewed by the Citizen.", "dataset": "eANCI", "act": ["authenticates", "updates", "responds", "provides", "completes", "submits", "updates", "allows", "views"], "obj": ["municipal clerk", "system", "associations", "new notice of competition", "form", "fields", "association_logo", "description", "association_name", "notice", "Citizen"], "pred_steps": "Functional steps to implement Use case: UpdateBandsECompetitions: Retrieve user input for bands and competitions, validate input data, check for existing bands and competitions in the database, update relevant fields in the database with new information, generate success or error message based on the outcome of the update, and display updated bands and competitions information to the user.", "pred_act": ["Retrieve", "validate", "check", "update", "generate", "display"], "pred_obj": ["Functional steps", "Use case", "UpdateBandsECompetitions", "user input", "bands", "competitions", "input data", "database", "relevant fields", "new information", "success message", "error message", "outcome", "updated bands", "competitions information", "user"], "tp": ["update", "relevant fields"]}
{"index": 134, "ucName": "UpdateWeatherConditions", "steps": "1. \n3. The municipal employee after authenticating in the system updates the weather conditions of the municipality and regional provinces. \n2. The system responds by providing the clerk with a form to complete in order to update the fields: tempMin, tempMax, stateAtmospheric, nameCity, date. The employee completes the fields of the form presented by the system and submits it \n4. The system updates the form and allows it to be viewed by the Citizen.", "dataset": "eANCI", "act": ["authenticating", "updates", "responds", "providing", "complete", "submits", "updates", "allows", "viewed"], "obj": ["municipal employee", "system", "weather conditions", "municipality", "regional provinces", "clerk", "form", "fields", "tempMin", "tempMax", "stateAtmospheric", "nameCity", "date", "Citizen"], "pred_steps": "Receive weather update request, validate request parameters, fetch latest weather data from external API, process and parse weather data, update weather conditions in the system database, notify relevant system components of weather update, log weather update activity.", "pred_act": ["Receive", "validate", "fetch", "process", "parse", "update", "notify", "log"], "pred_obj": ["weather update request", "request parameters", "latest weather data", "external API", "weather data", "weather conditions", "system database", "relevant system components", "weather update", "weather update activity"], "tp": ["update", "weather update request", "latest weather data", "weather data", "weather conditions", "system database", "weather update", "weather update activity"]}
{"index": 135, "ucName": "ActivitiesUseful", "steps": "1. By selecting this use case, the Citizen accesses a screen for choosing two use cases: Woods, Waste \n2. The system provides a simple and intuitive screen that allows the user to choose which of the two services to visit, to indirectly help maintain acceptable, municipal environmental conditions. \n3. The Citizen chooses one of the two use cases Woods, or Waste. \n4. The system responds to the Citizen's need by displaying the desired page they had requested.", "dataset": "eANCI", "act": ["selecting", "accesses", "provides", "allows", "choose", "visit", "maintain", "chooses", "responds", "displaying", "requested"], "obj": ["Citizen", "screen", "use cases", "Woods", "Waste", "system", "services", "municipal environmental conditions", "desired page"], "pred_steps": "DisplayActivityList, SelectActivity, ViewActivityDetails, AddActivityToSchedule, EditActivityDetails, DeleteActivity, SaveActivityChanges, SortActivitiesByDate, FilterActivitiesByCategory, SetActivityReminder", "pred_act": ["DisplayActivityList", "SelectActivity", "ViewActivityDetails", "AddActivityToSchedule", "EditActivityDetails", "DeleteActivity", "SaveActivityChanges", "SortActivitiesByDate", "FilterActivitiesByCategory", "SetActivityReminder"], "pred_obj": ["DisplayActivityList", "SelectActivity", "ViewActivityDetails", "AddActivityToSchedule", "EditActivityDetails", "DeleteActivity", "SaveActivityChanges", "SortActivitiesByDate", "FilterActivitiesByCategory", "SetActivityReminder"], "tp": ["DisplayActivityList", "SelectActivity"]}
{"index": 136, "ucName": "Announcements And Contests", "steps": "1. The Citizen accesses the home screen to be able to view the opportunity to view the associations that support Civil Defense. \n2. The system responds to the need by allowing the Citizen to view all the associations that are part of the Civil Defense and that hire staff, with a small image of the association, with next to it the possibility of receiving the download of the notice made available by the association in question. \n3. The Citizen takes note of what the form provides, and chooses from which, among the associations made available, to receive news for a possible recruitment or participation in the competition, about the modalities of the same. \n4. The system responds to this by allowing him or her to view the corresponding competition notice.", "dataset": "eANCI", "act": ["accesses", "views", "responds", "allows", "view", "hire", "receives", "takes note", "chooses", "allows", "view"], "obj": ["Citizen", "home screen", "opportunity", "associations", "Civil Defense", "system", "need", "staff", "image", "association", "download", "notice", "form", "recruitment", "competition", "modalities", "corresponding competition notice"], "pred_steps": "User navigates to Announcements and Contests section, views list of current announcements and contests, selects desired announcement or contest to view details, has option to participate in contest by submitting entry if applicable, receives confirmation of submission, can view past announcements and contest results, and has option to share announcements or contests on social media.", "pred_act": ["navigates", "views", "selects", "has", "submits", "receives", "can view", "has"], "pred_obj": ["User", "Announcements", "Contests section", "list of current announcements", "contests", "desired announcement", "contest", "details", "option", "entry", "confirmation of submission", "past announcements", "contest results", "social media"], "tp": ["views", "selects", "receives", "can view", "Announcements", "Contests section", "list of current announcements", "contests", "desired announcement", "contest", "option", "past announcements", "contest results"]}
{"index": 137, "ucName": "Woods", "steps": "1. The Citizen accesses this screen to be able to learn about the advice that Civil Defense makes available to anyone in order to avoid and have people avoid forest fires. \n2. The system provides a screen with a set of rules that the Citizen should follow and have others follow if they are with third parties, to prevent the occurrence of arson, and in case of this, which authority to call.", "dataset": "eANCI", "act": ["accesses", "learn", "makes", "avoid", "have", "provides", "should follow", "have", "prevent", "call"], "obj": ["Citizen", "screen", "advice", "Civil Defense", "forest fires", "system", "set of rules", "third parties", "arson", "authority"], "pred_steps": "InitiateWoodsUseCase, ValidateUserAccess, RetrieveWoodsDataFromDatabase, DisplayWoodsInformationToUser, AllowUserToSelectWoodType, UpdateWoodSelectionInSession, CalculateWoodRequirementsBasedOnSelection, DisplayCalculatedRequirements, ProvideOptionToSaveOrEditSelection, HandleUserInputForSaveOrEdit, SaveWoodSelectionToDatabaseIfRequired, UpdateUserInterfaceAccordingly, EndWoodsUseCase", "pred_act": ["InitiateWoodsUseCase", "ValidateUserAccess", "RetrieveWoodsDataFromDatabase", "DisplayWoodsInformationToUser", "AllowUserToSelectWoodType", "UpdateWoodSelectionInSession", "CalculateWoodRequirementsBasedOnSelection", "DisplayCalculatedRequirements", "ProvideOptionToSaveOrEditSelection", "HandleUserInputForSaveOrEdit", "SaveWoodSelectionToDatabaseIfRequired", "UpdateUserInterfaceAccordingly", "EndWoodsUseCase"], "pred_obj": ["InitiateWoodsUseCase", "ValidateUserAccess", "RetrieveWoodsDataFromDatabase", "DisplayWoodsInformationToUser", "AllowUserToSelectWoodType", "UpdateWoodSelectionInSession", "CalculateWoodRequirementsBasedOnSelection", "DisplayCalculatedRequirements", "ProvideOptionToSaveOrEditSelection", "HandleUserInputForSaveOrEdit", "SaveWoodSelectionToDatabaseIfRequired", "UpdateUserInterfaceAccordingly", "EndWoodsUseCase"], "tp": []}
{"index": 138, "ucName": "Weather", "steps": "1. The Citizen accesses this screen to view the weather situation in the municipality where he or she resides. \n2. The system responds to the Citizen's need by allowing him to view, in addition to the weather situation, of his municipality,also that of the provinces of the region to which he belongs, with update date, minimum and maximum temperatures, and of course, weather conditions expressed with a small descriptive image.", "dataset": "eANCI", "act": ["accesses", "views", "responds", "allowing to view"], "obj": ["Citizen", "screen", "weather situation", "municipality", "system", "region", "provinces", "update date", "minimum temperatures", "maximum temperatures", "weather conditions", "descriptive image"], "pred_steps": "Fetch user location, retrieve weather data from API based on location, process weather data to extract relevant information such as temperature, humidity, wind speed, and weather condition, display weather information in a user-friendly format, allow user to switch between different location inputs, handle API errors and provide user feedback accordingly, update weather information periodically or upon user request.", "pred_act": ["Fetch", "retrieve", "process", "extract", "display", "allow", "switch", "handle", "provide", "update"], "pred_obj": ["user location", "weather data", "API", "location", "temperature", "humidity", "wind speed", "weather condition", "user-friendly format", "location inputs", "API errors", "user feedback", "weather information"], "tp": ["display", "allow", "weather data", "temperature", "wind speed", "weather condition", "weather information"]}
{"index": 0, "ucName": " Register Customer\n \n", "uctext": "  \nRegister a new customer account with the system.  \n \n", "steps": " \n1. Customer first clicks on the button or link to initiate registration process.  \n2. System prompts the customer to fill out his/her first name, last name, billing address, shipping address, email address, and their password.\n3. Customer enters fields. \n4. System validates the customer's information.  \n5. System creates a new account for the Customer.  \n6. System creates a session cookie.  \n7. System displays an account home page to Customer.   \n \n", "dataset": "gamma j", "act": ["clicks", "prompts", "enters", "validates", "creates", "creates", "displays"], "obj": ["Customer", "button", "link", "registration process", "System", "first name", "last name", "billing address", "shipping address", "email address", "password", "fields", "information", "new account", "session cookie", "account home page"], "pred_steps": "Display registration form, input customer details including name, email, password, confirm password, validate input data, check if email is unique, hash password, store customer data in database, send confirmation email, display registration success message.", "pred_act": ["Display", "input", "validate", "check", "hash", "store", "send", "display"], "pred_obj": ["registration form", "customer details", "name", "email", "password", "confirm password", "input data", "database", "confirmation email", "registration success message"], "tp": ["Display", "validate", "display", "registration form", "customer details", "name", "email", "password", "confirm password"]}
{"index": 1, "ucName": " Login Customer\n \n", "uctext": " \nLogin to a customer account with the system.  \n \n", "steps": "\n \n1. Customer clicks on the button or link to initiate the login process.  \n2. System prompts the customer for his/her email and password.  \n3. System verifies the information.  \n4. System creates session cookie.  \n5. System displays account home page to the Customer \n \n", "dataset": "gamma j", "act": ["clicks", "prompts", "verifies", "creates", "displays"], "obj": ["Customer", "button", "link", "login process", "System", "email", "password", "information", "session cookie", "account home page"], "pred_steps": "Enter username and password, validate credentials, authenticate user, display customer account dashboard if login successful, display error message if login fails.", "pred_act": ["Enter", "validate", "authenticate", "display", "display"], "pred_obj": ["username", "password", "credentials", "user", "customer account dashboard", "login", "error message"], "tp": ["validate", "authenticate", "display", "display", "password", "customer account dashboard", "login"]}
{"index": 2, "ucName": " Edit Customer Details\n \n", "uctext": " \nEdit the customer account details.  \n \n", "steps": " \n1. Customer clicks the button or link to initiate the process to edit the account.  \n2. System displays the account home page to the Customer. \n3. Customer clicks the button or link in order to edit the account details.  \n4. System verifies the changes.  \n5. System stores new account information. \n \n", "dataset": "gamma j", "act": ["clicks", "displays", "clicks", "verifies", "stores"], "obj": ["Customer", "button", "link", "process", "account", "System", "account home page", "account details", "changes", "new account information"], "pred_steps": "Open customer account details, display editable fields, allow user to modify desired fields, validate input data, save changes, update customer account details in the system, and notify user of successful update.", "pred_act": ["Open", "display", "allow", "modify", "validate", "save", "update", "notify"], "pred_obj": ["customer account details", "editable fields", "user", "desired fields", "input data", "changes", "system", "successful update"], "tp": ["display", "validate", "customer account details", "changes", "system"]}
{"index": 3, "ucName": " Logout Customer\n \n", "uctext": " \nLogout the customer account on the system.  \n \n", "steps": " \n1. Customer clicks the button or link in order to initiate logout process. \n2. System terminates the session cookie. \n3. System displays the home page.  \n \n", "dataset": "gamma j", "act": ["clicks", "terminates", "displays"], "obj": ["Customer", "button", "link", "logout process", "System", "session cookie", "home page"], "pred_steps": "Verify customer is logged in, access customer session data, invalidate customer session, update session status to logged out, redirect to login page or homepage.", "pred_act": ["Verify", "access", "invalidate", "update", "redirect"], "pred_obj": ["customer", "logged in", "customer session data", "customer session", "session status", "logged out", "login page", "homepage"], "tp": ["customer", "customer session data", "customer session", "session status", "logged out", "homepage"]}
{"index": 4, "ucName": " Add Item To Cart\n \n", "uctext": " \nCustomer adds item(s) in the cart \n \n", "steps": " \n1. Customer clicks the button or link in order to add to the cart with specified quantity. \n2. System adds the item(s) to the cart.  \n3. System prompts the Customer to edit the quantity or remove the item from cart.  \n4. Customer confirms the items in the cart.  \n5. System stores cookie with cart details. \n6. Customer returns to product listings.  \n \n", "dataset": "gamma j", "act": ["clicks", "adds", "prompts", "confirms", "stores", "returns"], "obj": ["Customer", "button", "link", "cart", "specified quantity", "item(s", "quantity", "System", "product listings", "cookie", "cart details"], "pred_steps": "Customer selects item, system displays item details, customer specifies quantity, system validates item availability, system calculates total price, system adds item and quantity to cart, system updates cart display, system provides option to continue shopping or proceed to checkout.", "pred_act": ["selects", "displays", "specifies", "validates", "calculates", "adds", "updates", "provides"], "pred_obj": ["Customer", "item", "system", "item details", "quantity", "item availability", "total price", "cart", "cart display", "option to continue shopping", "option to proceed to checkout"], "tp": ["adds", "Customer", "item", "system", "item details", "quantity", "cart", "cart display"]}
{"index": 5, "ucName": " Checkout An Order\n \n", "uctext": " \nCustomer places and confirms an order for the checkout process.  \n \n", "steps": " \n1. Customer clicks the button or link to initiate the checkout process. \n2. System calculates order of items in the shopping cart.  \n3. System appends cookie with flag for checkout process.  \n4. System presents the customer with the account details and payment methods. \n5. Customer confirms account details and payment methods.  \n6. Customer confirms order.  \n7. System stores order confirmation and order details.  \n8. System sends email confirmation to the Customer.  \n9. System appends cookie with flag for completed checkout process.  \n \n", "dataset": "gamma j", "act": ["clicks", "calculates", "appends", "presents", "confirms", "stores", "sends", "appends"], "obj": ["Customer", "button", "link", "checkout process", "System", "order", "items", "shopping cart", "cookie", "flag", "account details", "payment methods", "order confirmation", "order details", "email confirmation", "completed checkout process"], "pred_steps": "Customer selects items, views cart, enters shipping and billing information, selects payment method, confirms order details, submits order, system processes payment, updates inventory, generates order confirmation, and sends confirmation email.", "pred_act": ["selects", "views", "enters", "selects", "confirms", "submits", "processes", "updates", "generates", "sends"], "pred_obj": ["Customer", "items", "cart", "shipping information", "billing information", "payment method", "order details", "order", "system", "payment", "inventory", "order confirmation", "confirmation email"], "tp": ["confirms", "sends", "Customer", "items", "cart", "shipping information", "billing information", "payment method", "order details", "order", "system", "payment", "order confirmation", "confirmation email"]}
{"index": 6, "ucName": " Login Administrator\n \n", "uctext": " \nLogin to an Administrator account with the system.  \n \n", "steps": "\n1. Administrator clicks button or link to initiate login process.  \n2. System prompts the Administrator for email and password.  \n3. System verifies information.  \n4. System creates session cookie.  \n5. System displays account home page to Administrator \n \n", "dataset": "gamma j", "act": ["clicks", "prompts", "verifies", "creates", "displays"], "obj": ["Administrator", "button", "link", "login process", "System", "email", "password", "information", "session cookie", "account home page"], "pred_steps": "\"Open login page, enter administrator username, enter administrator password, click login button, system validates credentials, if valid redirect to administrator dashboard, if invalid display error message\"", "pred_act": ["Open", "enter", "enter", "click", "validates", "redirect", "display"], "pred_obj": ["login page", "administrator username", "administrator password", "login button", "system", "credentials", "administrator dashboard", "error message"], "tp": ["click", "validates", "display", "login page", "administrator username", "administrator password", "login button", "system"]}
{"index": 7, "ucName": " Logout Administrator\n \n", "uctext": " \nLogout the Administrator account on the system.  \n \n", "steps": " \n1. Administrator clicks button or link to initiate logout process. \n2. System terminates the session cookie. \n3. System displays home page.  \n \n", "dataset": "gamma j", "act": ["clicks", "initiates", "terminates", "displays"], "obj": ["Administrator", "button", "link", "logout process", "System", "session cookie", "home page"], "pred_steps": "Verify active session for Administrator, initiate logout process, invalidate Administrator session, redirect to login page, display logout confirmation message.", "pred_act": ["Verify", "initiate", "invalidate", "redirect", "display"], "pred_obj": ["Administrator", "active session", "logout process", "session", "login page", "logout confirmation message"], "tp": ["initiate", "display", "Administrator", "logout process", "session"]}
{"index": 8, "ucName": " Add User\n \n", "uctext": "  \nRegister a new customer, sales person, or administrator account with the system.  \n \n", "steps": " \n1. Administrator clicks the button or link to initiate Add user process.  \n2. System prompts the Administrator to fill out first name, last name, username, email address, password, and privileges of the user.\n3. System validates new user information.  \n4. System creates a new account for the new user with desired privileges.  \n5. System displays account home page to Administrator.   \n \n", "dataset": "gamma j", "act": ["clicks", "prompts", "validates", "creates", "displays"], "obj": ["Administrator", "button", "link", "Add user process", "System", "first name", "last name", "username", "email address", "password", "privileges", "user", "new user information", "new account", "account home page"], "pred_steps": "Open registration form, input user type (customer/sales person/administrator), input personal details (name, email, contact number), input login credentials (username, password), validate input data, create user account, generate confirmation email, send confirmation email, display confirmation message on screen.", "pred_act": ["Open", "input", "input", "input", "validate", "create", "generate", "send", "display"], "pred_obj": ["registration form", "user type", "customer", "sales person", "administrator", "personal details", "name", "email", "contact number", "login credentials", "username", "password", "input data", "user account", "confirmation email", "confirmation message", "screen"], "tp": ["validate", "create", "generate", "display", "user type", "administrator", "personal details", "name", "email", "login credentials", "username", "password", "user account"]}
{"index": 9, "ucName": " Remove User\n \n", "uctext": "  \nRemove a user from the system. \n \n", "steps": " \n1. Administrator clicks button or link to initiate the remove user process.  \n2. System prompts the Administrator to select a user by searching or viewing a list of users.  \n3. System displays user information.  \n4. System confirms deletion of selected user.  \n5. System displays account home page to Administrator.   \n \n", "dataset": "gamma j", "act": ["clicks", "prompts", "displays", "confirms", "displays"], "obj": ["Administrator", "button", "link", "remove user process", "System", "user", "list of users", "user information", "selected user", "account home page"], "pred_steps": "Verify user permissions, display user list, select user to remove, confirm removal, update user database to reflect removal, check for associated data, handle associated data as per policy, log removal action, notify relevant stakeholders.", "pred_act": ["Verify", "display", "select", "confirm", "update", "check", "handle", "log", "notify"], "pred_obj": ["user permissions", "user list", "user", "removal", "user database", "associated data", "policy", "removal action", "relevant stakeholders"], "tp": ["display", "confirm", "user permissions", "user list", "user", "removal", "user database", "removal action"]}
{"index": 10, "ucName": " Change User Properties\n \n", "uctext": "  \nAlter properties such as passwords and privileges of the user. \n \n", "steps": " \n1. Administrator clicks the button or link to initiate change user properties process.  \n2. System prompts the Administrator to select a user by searching or viewing a list of users.  \n3. System displays the user information.  \n4. System alters the user properties.  \n5. System displays the account home page to Administrator.   \n \n", "dataset": "gamma j", "act": ["clicks", "prompts", "displays", "alters", "displays"], "obj": ["Administrator", "button", "link", "change user properties process", "System", "user", "list of users", "user information", "user properties", "account home page"], "pred_steps": "Authenticate user, display user properties, receive input for property to change, validate input, receive new value for property, validate new value, update user property in database, log change, notify user of success or failure.", "pred_act": ["Authenticate", "display", "receive", "validate", "receive", "validate", "update", "log", "notify"], "pred_obj": ["user", "properties", "input", "property", "value", "database", "change", "success", "failure"], "tp": ["display", "user", "properties", "property", "change"]}
{"index": 11, "ucName": " Install Plug-ins\n \n", "uctext": "  \nInstall a new plug-in to the application.  \n \n", "steps": " \n1. Administrator clicks the button or link to initiate Plug-in installation process.  \n2. System prompts the Administrator to upload the Plug-in module.  \n3. System installs plug-in and validates changes.  \n4. System displays plug-in options to the Administrator.  \n   \n", "dataset": "gamma j", "act": ["clicks", "prompts", "uploads", "installs", "validates", "displays"], "obj": ["Administrator", "button", "link", "Plug-in", "installation process", "System", "Plug-in module", "plug-in", "changes", "plug-in options"], "pred_steps": "Open application, navigate to plug-in manager, search for new plug-in, select desired plug-in, initiate installation process, review and accept permissions, monitor installation progress, confirm installation completion, restart application if required, verify plug-in functionality.", "pred_act": ["Open", "navigate", "search", "select", "initiate", "review", "accept", "monitor", "confirm", "restart", "verify"], "pred_obj": ["application", "plug-in manager", "new plug-in", "desired plug-in", "installation process", "permissions", "installation progress", "installation completion", "functionality"], "tp": ["verify", "application", "plug-in manager", "new plug-in", "desired plug-in", "installation process", "installation progress", "installation completion"]}
{"index": 12, "ucName": " Remove Plug-ins\n \n", "uctext": "  \nRemove a plug-in from the application.  \n \n", "steps": " \n1. Administrator clicks the button or link to initiate Plug-in deletion process.  \n2. System prompts the Administrator to select the desired Plug-in module.  \n3. System removes the plug-in and validates changes.  \n   \n", "dataset": "gamma j", "act": ["clicks", "prompts", "selects(implied", "removes", "validates"], "obj": ["Administrator", "button", "link", "Plug-in deletion process", "System", "desired Plug-in module", "plug-in", "changes"], "pred_steps": "Verify user permission to remove plug-ins; display list of installed plug-ins; select plug-in to remove; confirm removal; uninstall selected plug-in; update application configuration to reflect removal; check for dependencies and handle accordingly; notify user of successful removal or any issues encountered.", "pred_act": ["Verify", "display", "select", "confirm", "uninstall", "update", "check", "handle", "notify"], "pred_obj": ["user", "permission", "plug-ins", "list", "installed plug-ins", "plug-in", "removal", "selected plug-in", "application configuration", "dependencies", "user", "successful removal", "issues"], "tp": ["select", "confirm", "plug-ins", "installed plug-ins", "plug-in", "selected plug-in"]}
{"index": 13, "ucName": " Manage Plug-in Options\n \n", "uctext": "  \nMake changes to an installed plug-in. \n  \n", "steps": " \n1. Administrator clicks the button or link to initiate Plug-in Options process.  \n2. System prompts the Administrator to select the desired Plug-in module.  \n3. System displays all plug-in options to the Administrator.  \n4. System confirms changes with the Administrator. \n   \n", "dataset": "gamma j", "act": ["clicks", "prompts", "displays", "confirms"], "obj": ["Administrator", "button", "link", "Plug-in Options process", "System", "desired Plug-in module", "plug-in options", "changes"], "pred_steps": "Open plug-in manager, select desired plug-in, access plug-in options, modify required settings, save changes, apply changes if prompted, confirm modifications, close plug-in manager.", "pred_act": ["Open", "select", "access", "modify", "save", "apply", "confirm", "close"], "pred_obj": ["plug-in manager", "plug-in", "plug-in options", "settings", "changes", "modifications"], "tp": ["confirm", "plug-in manager", "plug-in", "plug-in options", "changes", "modifications"]}
{"index": 14, "ucName": " Install patch process\n \n", "uctext": "  \nInstall patches or software updates to the web store. \n  \n", "steps": " \n1. Administrator clicks the button or link to initiate Patching process.  \n2. System prompts the Administrator to upload the patch.  \n3. System automatically installs patches and reinitializes software.  \n4. System confirms that patch has been successfully installed. \n   \n", "dataset": "gamma j", "act": ["clicks", "prompts", "uploads", "installs", "reinitializes", "confirms"], "obj": ["Administrator", "button", "link", "Patching process", "System", "patch", "software"], "pred_steps": "Download patch, verify patch compatibility, backup current system state, initiate patch installation, monitor installation process, resolve any conflicts, restart services if required, verify patch installation, update system logs, notify users of successful installation or any issues encountered.", "pred_act": ["Download", "verify", "backup", "initiate", "monitor", "resolve", "restart", "verify", "update", "notify"], "pred_obj": ["patch", "patch compatibility", "current system state", "patch installation", "installation process", "conflicts", "services", "system logs", "users", "successful installation", "issues"], "tp": ["verify", "initiate", "restart", "verify", "patch", "patch compatibility", "patch installation", "installation process"]}
{"index": 15, "ucName": " Login Sales Person\n \n", "uctext": " \nLogin to an account with the system.  \n \n", "steps": " \n1. Sales Person clicks the button or link to initiate login process.  \n2. System prompts the Sales Person for email and password.  \n3. System verifies the information.  \n4. System creates session cookie.  \n5. System displays the account home page to Sales Person \n \n", "dataset": "gamma j", "act": ["clicks", "prompts", "verifies", "creates", "displays"], "obj": ["Sales Person", "button", "link", "login process", "System", "email", "password", "information", "session cookie", "account home page"], "pred_steps": "Enter username, enter password, submit credentials, validate credentials against stored values, authenticate user, grant access if valid, display error message if invalid.", "pred_act": ["Enter", "enter", "submit", "validate", "authenticate", "grant", "display"], "pred_obj": ["username", "password", "credentials", "stored values", "user", "access", "error message"], "tp": ["validate", "authenticate", "display", "password"]}
{"index": 16, "ucName": " Logout Sales Person\n GAMMA-J Web Store  \n35\n \n", "uctext": " \nLogout the Sales Person account on the system.  \n \n", "steps": " \n1. Sales Person clicks the button or link to initiate logout process. \n2. System terminates the session cookie. \n3. System displays home page.  \n \n", "dataset": "gamma j", "act": ["clicks", "terminates", "displays"], "obj": ["Sales Person", "button", "link", "logout process", "System", "session cookie", "home page"], "pred_steps": "Verify user identity, confirm logout request, process logout, invalidate session, redirect to login page, display logout success message.", "pred_act": ["Verify", "confirm", "process", "invalidate", "redirect", "display"], "pred_obj": ["user identity", "logout request", "logout", "session", "login page", "logout success message"], "tp": ["display", "logout request", "logout", "session"]}
{"index": 17, "ucName": " Add Product\n \n", "uctext": "  \nAdd a product to the system. \n \n", "steps": " \n1. Sales Person clicks the button or link to initiate Add Product process.  \n2. System prompts the Sales Person to fill out product name, product id, product description, product price, upload a product image, number of items in inventory, and availability of product.\n3. System validates the new product information.  \n4. System creates a new product page for the new product.  \n5. System displays the newly created product page.   \n \n", "dataset": "gamma j", "act": ["clicks", "prompts", "validates", "creates", "displays"], "obj": ["Sales Person", "button", "link", "Add Product process", "System", "product name", "product id", "product description", "product price", "product image", "number of items in inventory", "availability of product", "new product information", "new product page", "newly created product page"], "pred_steps": "Open product addition form, input product details including name, description, price, and quantity, validate input data for completeness and correctness, save product information to the database, display confirmation message of successful addition.", "pred_act": ["Open", "input", "validate", "save", "display"], "pred_obj": ["product addition form", "product details", "name", "description", "price", "quantity", "input data", "product information", "database", "confirmation message"], "tp": ["validate", "display", "product addition form", "product details", "name", "description", "price", "quantity", "product information"]}
{"index": 18, "ucName": " Remove Product\n \n \n", "uctext": "  \nRemove a product from the system. \n \n", "steps": " \n1. Sales Person clicks the button or link to initiate Remove Product process.  \n2. System prompts the Sales Person to select a product by searching or viewing a list of products.\n3. System validates the product information.  \n4. System removes the product page and product information from the system.  \n5. System displays the newly created product page.   \n \n", "dataset": "gamma j", "act": ["clicks", "prompts", "selects", "validates", "removes", "displays"], "obj": ["Sales Person", "button", "link", "Remove Product process", "System", "product", "list of products", "product information", "product page", "newly created product page"], "pred_steps": "Verify user authorization, display list of products, select product to remove, confirm product selection, check dependencies and associations, remove product from database, update related records and inventory, log action, notify relevant stakeholders.", "pred_act": ["Verify", "display", "select", "confirm", "check", "remove", "update", "log", "notify"], "pred_obj": ["user authorization", "list of products", "product", "product selection", "dependencies", "associations", "product", "database", "related records", "inventory", "action", "relevant stakeholders"], "tp": ["display", "select", "remove", "list of products", "product", "product selection", "product", "inventory"]}
{"index": 19, "ucName": " Update Product Attributes\n \n", "uctext": "  \nUpdate Product attributes within the system. \n \n", "steps": " \n1. Sales Person clicks the button or link to initiate Update Product Attributes process.  \n2. System prompts the Sales Person to select a product by searching or viewing a list of products.\n3. System displays all of the product attributes and allows Sales Person to update the product name, product id, product description, product price, update the product image, product availability, and/or the number of items in the inventory.\n4. System validates the product information.  \n5. System updates the product page and product information within the system.  \n6. System displays the newly updated product page.   \n\n", "dataset": "gamma j", "act": ["clicks", "prompts", "displays", "allows", "update", "validates", "updates", "displays"], "obj": ["Sales Person", "button", "link", "Update Product Attributes process", "System", "product", "list of products", "product attributes", "product name", "product id", "product description", "product price", "product image", "product availability", "number of items in the inventory", "product information", "product page", "newly updated product page"], "pred_steps": "Authenticate user, validate permissions for product attribute update, retrieve existing product data, display product attributes, receive user input for updated attributes, validate input data, update product attributes in the database, save changes, and notify user of successful update or error.", "pred_act": ["Authenticate", "validate", "retrieve", "display", "receive", "validate", "update", "save", "notify"], "pred_obj": ["user", "permissions", "product attribute", "product data", "product attributes", "user input", "updated attributes", "input data", "database", "changes", "successful update", "error"], "tp": ["Authenticate", "validate", "display", "validate", "update", "product attribute", "product data", "product attributes", "updated attributes"]}
{"index": 20, "ucName": " Register Customer\n \n", "uctext": "  \nRegister a new customer account with the system.  \n \n", "steps": " \n1. Customer clicks the button or link to initiate registration process.  \n2. System prompts the customer to fill out first name, last name, billing address, shipping address, email address, and password.\n3. Customer enters fields. \n4. System validates customer's information.  \n5. System creates a new account for the Customer.  \n6. System creates session cookie.  \n7. System displays account home page to Customer.   \n \n", "dataset": "gamma j", "act": ["clicks", "prompts", "enters", "validates", "creates", "creates", "displays"], "obj": ["Customer", "button", "link", "registration process", "System", "first name", "last name", "billing address", "shipping address", "email address", "password", "fields", "information", "new account", "session cookie", "account home page"], "pred_steps": "Display registration form, input customer details including name, email, password, confirm password, validate input data, check if email already exists, if not create new customer account, generate confirmation email, send confirmation email, display confirmation message", "pred_act": ["Display", "input", "validate", "check", "create", "generate", "send", "display"], "pred_obj": ["registration form", "customer details", "name", "email", "password", "confirm password", "input data", "customer account", "confirmation email", "confirmation message"], "tp": ["Display", "validate", "create", "generate", "display", "registration form", "customer details", "name", "email", "password", "confirm password", "customer account"]}
{"index": 21, "ucName": " Login Customer\n \n", "uctext": " \nLogin to a customer account with the system.  \n \n", "steps": " \n1. Customer clicks the button or link to initiate login process.\n2. System prompts the customer for email and password.  \n3. System verifies the information.  \n4. System creates session cookie.  \n5. System displays account home page to Customer \n \n", "dataset": "gamma j", "act": ["clicks", "prompts", "verifies", "creates", "displays"], "obj": ["Customer", "button", "link", "login process", "System", "email", "password", "information", "session cookie", "account home page"], "pred_steps": "Enter username and password, validate input format, authenticate credentials with system database, display error message if invalid, redirect to customer account dashboard if valid, maintain session state as logged in.", "pred_act": ["Enter", "validate", "authenticate", "display", "redirect", "maintain"], "pred_obj": ["username", "password", "input format", "system database", "error message", "customer account dashboard", "session state"], "tp": ["validate", "authenticate", "display", "password", "customer account dashboard", "session state"]}
{"index": 22, "ucName": " Edit Customer Details\n \n", "uctext": " \nEdit the customer account details.  \n \n", "steps": " \n1. Customer clicks button or link to initiate the process to edit the account.  \n2. System displays account home page to Customer. \n3. Customer clicks button or link to edit the account details.  \n4. System verifies the changes.  \n5. System stores new account information. \n \n", "dataset": "gamma j", "act": ["clicks", "displays", "clicks", "verifies", "stores"], "obj": ["Customer", "button", "link", "process", "account", "System", "account home page", "account details", "changes", "new account information"], "pred_steps": "Open customer account details, display editable fields, allow user to modify desired fields, validate input data, save changes, update customer account details in database, and notify user of successful update.", "pred_act": ["Open", "display", "allow", "modify", "validate", "save", "update", "notify"], "pred_obj": ["customer account details", "editable fields", "user", "desired fields", "input data", "changes", "database", "successful update"], "tp": ["display", "validate", "customer account details", "changes"]}
{"index": 23, "ucName": " Logout Customer\n \n", "uctext": " \nLogout the customer account on the system.  \n \n", "steps": " \n1. Customer clicks button or link to initiate logout process. \n2. System terminates the session cookie. \n3. System displays home page.  \n \n", "dataset": "gamma j", "act": ["clicks", "initiates", "terminates", "displays"], "obj": ["Customer", "button", "link", "logout process", "System", "session cookie", "home page"], "pred_steps": "Verify customer is logged in, access logout function, confirm logout action, clear customer session data, redirect to login page or homepage, display logout success message.", "pred_act": ["Verify", "access", "confirm", "clear", "redirect", "display"], "pred_obj": ["customer", "logout function", "logout action", "customer session data", "login page", "homepage", "logout success message"], "tp": ["display", "customer", "logout function", "logout action", "customer session data", "homepage"]}
{"index": 24, "ucName": " Add Item To Cart\n \n", "uctext": " \nCustomer adds item(s) in the cart \n \n", "steps": " \n1. Customer clicks the button or link to add  to the cart with specified quantity. \n2. System adds the item(s) to the cart.  \n3. System prompt Customer to edit quantity or remove item from cart.  \n4. Customer confirms items in cart.  \n5. System stores cookie with cart details. \n6. Customer returns to product listings.  \n \n", "dataset": "gamma j", "act": ["clicks", "adds", "prompt", "confirms", "stores", "returns"], "obj": ["Customer", "button", "link", "cart", "specified quantity", "item(s", "System", "quantity", "product listings", "cookie", "cart details"], "pred_steps": "Customer selects item, system displays item details, customer specifies quantity, system validates stock availability, system calculates total price, customer confirms addition, system updates cart with selected item and quantity, system displays updated cart.", "pred_act": ["selects", "displays", "specifies", "validates", "calculates", "confirms", "updates", "displays"], "pred_obj": ["Customer", "item", "system", "quantity", "stock availability", "total price", "cart", "selected item", "updated cart"], "tp": ["confirms", "Customer", "item", "system", "quantity", "cart", "selected item", "updated cart"]}
{"index": 25, "ucName": " Checkout An Order\n \n \n", "uctext": " \nCustomer places and confirms an order for the checkout process.  \n \n", "steps": " \n1. Customer clicks the button or link to initiate the checkout process. \n2. System calculates order of items in the shopping cart.  \n3. System appends cookie with flag for checkout process.  \n4. System presents customer with account details and payment methods. \n5. Customer confirms account details and payment methods.  \n6. Customer confirms order.  \n7. System stores order confirmation and order details.  \n8. System sends email confirmation to the Customer.  \n9. System appends cookie with flag for completed checkout process.  \n \n", "dataset": "gamma j", "act": ["clicks", "calculates", "appends", "presents", "confirms", "stores", "sends", "appends"], "obj": ["Customer", "button", "link", "checkout process", "System", "order", "items", "shopping cart", "cookie", "flag", "account details", "payment methods", "order confirmation", "order details", "email confirmation", "completed checkout process"], "pred_steps": "Customer selects items, views cart, confirms item details, selects delivery option, enters payment information, confirms order details, submits order, system processes payment, updates inventory, generates order confirmation, and sends confirmation to customer.", "pred_act": ["selects", "views", "confirms", "selects", "enters", "confirms", "submits", "processes", "updates", "generates", "sends"], "pred_obj": ["Customer", "items", "cart", "item details", "delivery option", "payment information", "order details", "order", "system", "payment", "inventory", "order confirmation", "confirmation"], "tp": ["confirms", "confirms", "sends", "Customer", "items", "cart", "item details", "payment information", "order details", "order", "system", "payment", "order confirmation", "confirmation"]}
{"index": 0, "ucName": " Modify Use Case  \n", "uctext": "  \nThe use case describes the modification  that the Inventory Admin  can do.  \n", "steps": "   \n1. Use case begins when Inventory Admin start searching for an asset  \n2. Inventory Admin Edit the asset  \n3. Inventory Admin modify asset properties  \n \n", "dataset": "0000 - inventory", "act": ["start searching", "Edit", "modify"], "obj": ["Inventory Admin", "asset", "Inventory Admin", "asset", "Inventory Admin", "asset properties"], "pred_steps": "Inventory Admin accesses system, searches for the use case to be modified, retrieves use case details, updates necessary information (e.g., description, steps, preconditions, postconditions), saves changes, and verifies modifications.", "pred_act": ["accesses", "searches", "retrieves", "updates", "saves", "verifies"], "pred_obj": ["Inventory Admin", "system", "use case", "description", "steps", "preconditions", "postconditions", "changes", "modifications"], "tp": ["Inventory Admin"]}
{"index": 1, "ucName": " Edit Use Case  \n", "uctext": "  \nThe use case describes the edit operation  that the Inventory Admin  can do.  \n", "steps": "   \n1. Use case begins when Inventory Admin start searching for an asset  \n2. Inventory Admin Edit the asset  \n \n", "dataset": "0000 - inventory", "act": ["start searching", "Edit"], "obj": ["Use case", "Inventory Admin", "asset", "searching", "Inventory Admin", "asset", "Edit"], "pred_steps": "Inventory Admin opens the use case, selects the edit option, modifies the necessary fields, saves the changes, and verifies the updates.", "pred_act": ["opens", "selects", "modifies", "saves", "verifies"], "pred_obj": ["Inventory Admin", "use case", "edit option", "necessary fields", "changes", "updates"], "tp": ["Inventory Admin", "use case", "edit option"]}
{"index": 2, "ucName": " Add New Asset  Use Case  \n", "uctext": "  \nThe use case describes the operation of adding a new asset to the inventory .  \n", "steps": "   \n1. Use case begins when Administrator start a new asset  \n2. Administrator  select asset type \n3. Administrator  select asset location  \n4. Administrator  select owner \n5. Administrator  fill all asset properties  \n \n", "dataset": "0000 - inventory", "act": ["start", "select", "select", "select", "fill"], "obj": ["Administrator", "start", "new asset", "asset type", "asset location", "owner", "asset properties"], "pred_steps": "Open asset management system, navigate to add new asset section, input asset details including name, type, value, location, serial number, and purchase date, attach any relevant documents, verify all entered information, save and add asset to inventory, update inventory list to reflect new asset.", "pred_act": ["Open", "navigate", "input", "attach", "verify", "save", "add", "update"], "pred_obj": ["asset management system", "add new asset section", "asset details", "name", "type", "value", "location", "serial number", "purchase date", "relevant documents", "entered information", "asset", "inventory", "inventory list"], "tp": ["add new asset section", "asset details", "type", "location", "asset"]}
{"index": 3, "ucName": " Create request  Use Case  \n", "uctext": "  \nThe use case describes the activity of creating a new request that the User  can do.  \n", "steps": "   \n1. User select basic request form  \n2. User type a small request text specifying asset(s) location,..  \n3. User click on submit  \n \n", "dataset": "0000 - inventory", "act": ["select", "type", "click"], "obj": ["User", "basic request form", "request text", "asset(s) location", "submit"], "pred_steps": "User accesses request creation interface, inputs request details including type, description, priority, and attachment if necessary, validates input data, submits request, system generates unique request ID, assigns request to appropriate department/agent, sends confirmation notification to user, updates request status to 'created', and logs all activities.", "pred_act": ["accesses", "inputs", "validates", "submits", "generates", "assigns", "sends", "updates", "logs"], "pred_obj": ["User", "request creation interface", "request details", "type", "description", "priority", "attachment", "input data", "request", "system", "unique request ID", "department", "agent", "confirmation notification", "request status", "activities"], "tp": ["request creation interface", "request details", "request"]}
{"index": 4, "ucName": " Returning Asset  \n", "uctext": "  \nThe use case describes the returning asset update  that the Inventory Admin  can do.  \n", "steps": "   \n1. Use case begins when Inventory Admin start returning  \n2. Inventory Admin select asset state to available  \n \n", "dataset": "0000 - inventory", "act": ["begins", "start returning", "select"], "obj": ["Inventory Admin", "use case", "Inventory Admin", "asset state", "available"], "pred_steps": "Inventory Admin initiates return process, selects asset to be returned from inventory list, verifies asset details, updates asset status to 'returned', records return date and any relevant notes, and saves changes to inventory system.", "pred_act": ["initiates", "selects", "verifies", "updates", "records", "saves"], "pred_obj": ["Inventory Admin", "return process", "asset", "inventory list", "asset details", "asset status", "returned", "return date", "relevant notes", "inventory system"], "tp": ["selects", "Inventory Admin", "asset", "asset details", "asset status"]}
{"index": 5, "ucName": " Approving Request  \n", "uctext": "  \nThe use case describes the approving of requests that an  Inventory Admin  can do.  \n", "steps": "   \n1. Use case begins when Inventory Admin display pending request list  \n2. System display only requests that he has privileges to approve  \n3. Inventory Admin select request that he want to approve  \n4. Approve is confirmed  \n5. System send notes to users  \n \n", "dataset": "0000 - inventory", "act": ["display", "display", "select", "confirm", "send"], "obj": ["Inventory Admin", "pending request list", "requests", "privileges", "approve", "System", "notes", "users"], "pred_steps": "Inventory Admin receives request, validates request details, checks inventory availability, approves or rejects request based on validation and availability, updates inventory status if approved, notifies requester of approval or rejection.", "pred_act": ["receives", "validates", "checks", "approves", "rejects", "updates", "notifies"], "pred_obj": ["Inventory Admin", "request", "request details", "inventory availability", "approval", "rejection", "inventory status", "requester"], "tp": ["Inventory Admin", "request", "request details", "approval", "requester"]}
{"index": 6, "ucName": " change permissions  Use Case\n", "uctext": "  \nThe use case describes the modification  that Department, Facutly or University Administrator can do to a user permissions .  \n", "steps": "   \n1. Use case begins when Administrator  press change permission  \n2. Administrator select user  \n3. Administrator modify permissions  \n \n", "dataset": "0000 - inventory", "act": ["press", "select", "modify"], "obj": ["Administrator", "change permission", "select user", "modify permissions"], "pred_steps": "Authenticate user as Department, Faculty, or University Administrator, display list of users, select user to modify, display current permissions, select permissions to change, update permissions, save changes, notify user of successful update.", "pred_act": ["Authenticate", "display", "select", "modify", "display", "select", "change", "update", "save", "notify"], "pred_obj": ["user", "Department", "Faculty", "University Administrator", "list of users", "current permissions", "permissions", "changes"], "tp": ["select", "modify", "select", "change", "user", "current permissions", "permissions", "changes"]}
{"index": 7, "ucName": " Authentication Use Case   \n", "uctext": "  \nThe use case describes the authentication .  \n", "steps": "   \n1. Use case begins user starts the application  \n2. User write user name and pas sword  \n3. User press login  \n4. User is authenticated  \n5. User log on to application main page  \n \n", "dataset": "0000 - inventory", "act": ["starts", "write", "press", "is authenticated", "log on"], "obj": ["use case", "user", "application", "user name", "pas sword", "login", "authentication", "application main page"], "pred_steps": "User inputs credentials, system validates credentials against stored values, if credentials match, user is authenticated and granted access, if credentials do not match, access is denied and user is prompted to re-enter credentials.", "pred_act": ["inputs", "validates", "match", "is authenticated", "is granted", "do not match", "is denied", "is prompted", "re-enter"], "pred_obj": ["User", "credentials", "system", "stored values", "access"], "tp": ["is authenticated", "User", "credentials", "access"]}
{"index": 8, "ucName": " Search\n", "uctext": "  \nThe use case describes the search operation  that only authorised users can do.  \n", "steps": "   \n1. Use case begins when User  start fill searching field \n2. Press submit  \n3. Search results are displayed  \n \n", "dataset": "0000 - inventory", "act": ["start", "fill", "press", "display"], "obj": ["User", "searching field", "submit", "search results"], "pred_steps": "Verify user authorization, display search interface, receive user input, process search query, retrieve and display search results.", "pred_act": ["Verify", "display", "receive", "process", "retrieve", "display"], "pred_obj": ["user authorization", "search interface", "user input", "search query", "search results"], "tp": ["display", "display", "search interface", "search query", "search results"]}
{"index": 9, "ucName": " Create Reports  Use Case\n", "uctext": "  \nThe use case describes the creation of reports  that the User  can do.  \n", "steps": "   \n1. Use case begins when User  click on a report type  \n2. General report is displayed  \n3. Report can be filtered  \n4. Fields can be sorted  \n \n", "dataset": "0000 - inventory", "act": ["click", "displayed", "can be filtered", "can be sorted"], "obj": ["User", "report type", "General report", "Report", "Fields"], "pred_steps": "User accesses report creation interface, selects report type, enters report parameters, system validates parameters, retrieves data based on parameters, generates report, displays report preview, user reviews and confirms report, system saves report, report is available for future access.", "pred_act": ["accesses", "selects", "enters", "validates", "retrieves", "generates", "displays", "reviews", "confirms", "saves", "is available"], "pred_obj": ["User", "report creation interface", "report type", "report parameters", "system", "data", "report", "report preview", "future access"], "tp": ["displays", "User", "report type", "report"]}
{"index": 0, "ucName": " Parse\n\n", "uctext": " The user requests the parsing of a transformation language program or a target file. The file to be parsed and the parser file are inputs to HATS-SML. HATS-SML generates an SDT. The output is saved in the application.\n\n", "steps": "\n1. User selects the option to parse a transformation language program from currently open application \n(ALT 1). \n2. User selects a transformation language program file (.tlp) to parse (Refer to Use Case 4) (ALT 2). \n3. The HATS-GUI compares the time stamps on the lexical specification and grammar files to the time stamp on the application’s parser file. The parser file is the youngest of the three files (ALT 3, ALT 6).\n4. The HATS-GUI sends a message to the Host OS to start either the ParseTarget or the ParseProgram program and sends the names of the target file or program file, the output file, and the parser file to the Host OS.\n5. HATS-SML parses the input file (ALT 7) and writes the output to the output file. \n6. End of use case. \n\n", "dataset": "hats", "act": ["selects", "selects", "compares", "sends", "parses", "writes"], "obj": ["User", "option", "transformation language program", "currently open application", "transformation language program file (.tlp", "Use Case 4", "HATS-GUI", "lexical specification", "grammar files", "application’s parser file", "parser file", "Host OS", "ParseTarget", "ParseProgram", "target file", "program file", "output file", "HATS-SML", "input file"], "pred_steps": "Receive user request to parse a transformation language program or target file; retrieve the file to be parsed and the parser file; input these files to HATS-SML; HATS-SML parses the files and generates an SDT; save the output SDT in the application.", "pred_act": ["Receive", "retrieve", "input", "parses", "generates", "save", "output"], "pred_obj": ["user request", "transformation language program", "target file", "file to be parsed", "parser file", "HATS-SML", "SDT", "application"], "tp": ["parses", "transformation language program", "target file", "file to be parsed", "parser file", "HATS-SML", "application"]}
{"index": 1, "ucName": " Execute Transformation Program\n\n", "uctext": "  The user requests the application of a transformation language program to a target file. HATS-SML applies the transformation language program to the target.  Actors:  User, HATS-SML, Host OS\n\n", "steps": "\n1. User selects the option to execute a transformation language program from the currently selected application.\n2. User selects a transformation language program file (Refer to Use Case 4) (ALT 1). \n3. The HATS-GUI compares the time stamp on the lexical specification and grammar files to the time stamp on the parser file. The parser file is younger (ALT 2, ALT 3).\n4. The HATS-GUI compares the time stamp of the parsed program file and the parser, the transformation language program, and the user-defined library files. The parsed program file is younger than any of these files (ALT 4, ALT 5).\n5. The HATS-GUI clears the displays for the standard error and standard output. \n6. The HATS-GUI sends a message to the Host OS to start the ApplyTransformations  program and sends the names of the parsed program file and the user-defined library file to the Host OS. The HATS-GUI redirects the standard error and standard output streams of the ApplyTransformation  process and collects data written to these streams for later display.\n7. The HATS-SML ApplyTransformation  program writes output SDTs to files named in the transformation language program. (The transformation language program contains all references to input and output files. The HATS-GUI does not handle file input and file output for ApplyTransformaion .)\n8. End of use case. \n\n", "dataset": "hats", "act": ["selects", "selects", "compares", "compares", "clears", "sends", "starts", "sends", "redirects", "collects", "writes"], "obj": ["User", "option", "transformation language program", "currently selected application", "transformation language program file", "Use Case 4", "HATS-GUI", "time stamp", "lexical specification", "grammar files", "parser file", "parsed program file", "user-defined library files", "standard error", "standard output", "Host OS", "ApplyTransformations program", "ApplyTransformation process", "output SDTs", "input files", "output files"], "pred_steps": "User requests transformation by specifying transformation language program and target file; HATS-SML receives the request; HATS-SML verifies the existence and accessibility of the specified transformation language program and target file; HATS-SML loads the transformation language program into memory; HATS-SML reads the target file content; HATS-SML applies the transformation logic as defined in the transformation language program to the target file content; HATS-SML generates the transformed output; HATS-SML saves the transformed output to a designated location; HATS-SML notifies the user of the completion status and location of the transformed file; HATS-SML logs the transformation activity including program used, target file, and output file for auditing purposes.", "pred_act": ["requests", "receives", "verifies", "loads", "reads", "applies", "generates", "saves", "notifies", "logs"], "pred_obj": ["User", "transformation", "transformation language program", "target file", "HATS-SML", "request", "existence", "accessibility", "memory", "content", "transformation logic", "transformed output", "designated location", "completion status", "location", "transformation activity", "program", "output file", "auditing purposes"], "tp": ["User", "transformation", "transformation language program", "target file", "transformation logic", "transformed output", "transformation activity", "program", "output file"]}
{"index": 2, "ucName": " Select Application\n\n", "uctext": "  The user selects an application.\n\n", "steps": "\n1. System requests from Host OS a list of existing applications within current directory. \n2. Host OS returns list of files within current directory.\n3. System displays list of existing applications within current directory (ALT 1, ALT 2).\n4. User selects an application within the list (ALT 2).\n5. System sets selected application as the current application.   \n6. End of use case.\n\n", "dataset": "hats", "act": ["requests", "returns", "displays", "selects", "sets"], "obj": ["System", "Host OS", "list of existing applications", "current directory", "list of files", "displays", "User", "application", "selected application", "current application", "use case"], "pred_steps": "Display list of applications, user navigates through list, user selects desired application, system highlights selected application, system loads selected application.", "pred_act": ["Display", "navigates", "selects", "highlights", "loads"], "pred_obj": ["applications", "user", "list", "system", "desired application", "selected application"], "tp": ["Display", "selects", "applications", "user", "list", "system", "desired application", "selected application"]}
{"index": 3, "ucName": " Select File\n\n", "uctext": "  The user wants to perform some operation, and the system requests a filename.  A list of file names in the currently selected application is presented.  The user selects one file name in the application. Actors: User, Host OS\n\n", "steps": "\n1. System requests from Host OS a list of files in the current directory. \n2. Host OS only returns list of files in the current directory. \n3. System displays this list of files (ALT 1, ALT 2).\n4. User selects a file within the list (ALT 2, ALT 3).\n5. System sets selected file as the current file.\n6. End of use case.\n\n", "dataset": "hats", "act": ["requests", "returns", "displays", "selects", "sets"], "obj": ["System", "Host OS", "list of files", "current directory", "ALT 1", "ALT 2", "User", "file", "ALT 3", "selected file", "current file"], "pred_steps": "User initiates operation, system requests filename, Host OS retrieves list of file names from currently selected application, system presents file names to user, user selects one file name from the list, system captures selected file name.", "pred_act": ["initiates", "requests", "retrieves", "presents", "selects", "captures"], "pred_obj": ["User", "operation", "system", "filename", "Host OS", "list of file names", "currently selected application", "one file name", "selected file name"], "tp": ["requests", "selects", "User", "system", "filename", "Host OS", "list of file names", "one file name", "selected file name"]}
{"index": 4, "ucName": " Close Application\n\n", "uctext": "  The user wants to perform some operation on a selected application.  These operations include open, close, save, save as, create new, edit files within application, and configure the application.\n\n", "steps": "\n1. User selects option to close the currently selected application\n2. System asks for confirmation from user to close application.\n3. User confirms to close application (ALT 1).\n4. System checks that the changes to currently selected application’s configuration have been saved (ALT 2).\n5. System sets currently selected application to ‘none’.\n6. End of use case.\n\n", "dataset": "hats", "act": ["selects", "asks", "confirms", "checks", "sets"], "obj": ["User", "option", "currently selected application", "System", "confirmation", "application", "changes", "currently selected application’s configuration", "System", "currently selected application", "use case"], "pred_steps": "CloseApplication: User initiates close operation, system prompts to save unsaved changes if any, user selects to save or not, system closes the application and releases associated resources.", "pred_act": ["initiate", "prompt", "save", "select", "close", "release"], "pred_obj": ["CloseApplication", "User", "close operation", "system", "unsaved changes", "application", "associated resources"], "tp": ["select", "CloseApplication", "User", "system", "application"]}
{"index": 5, "ucName": " Save Application\n\n", "uctext": " None\n\n", "steps": "\n1. User selects option to save currently selected application.\n2. System requests Host OS to save configuration file for the selected application. \n3. Host OS saves the configuration file for the selected application into a non-volatile storage (ALT 1).\n4. System informs user that application has been saved.\n5. End of use case. Software Requirements Specification\n \n", "dataset": "hats", "act": ["selects", "requests", "saves", "informs"], "obj": ["User", "option", "currently selected application", "System", "Host OS", "configuration file", "selected application", "non-volatile storage", "Software Requirements Specification"], "pred_steps": "OpenSaveDialog,SelectSaveLocation,EnterFileName,VerifyFilePermissions,SaveApplicationDataToSelectedLocation,ConfirmSaveSuccess", "pred_act": ["Open", "Select", "Enter", "Verify", "Save", "Confirm"], "pred_obj": ["OpenSaveDialog", "SelectSaveLocation", "EnterFileName", "VerifyFilePermissions", "SaveApplicationDataToSelectedLocation", "ConfirmSaveSuccess"], "tp": ["Save"]}
{"index": 6, "ucName": " Save Application As\n", "uctext": " None\n\n", "steps": "\n1. User selects to save a currently open application using a different directory name. 2. System requests user for a name to save the open application.\n3. User enters or selects a name for the application to be saved (ALT 1). \n4. System confirms that application name is unique (ALT 2).\n5. System requests Host OS to create new directory with the given name.\n6. Host OS creates new application with the entered name (ALT 3).\n7. System requests Host OS to copy core files, configuration files, and .tlp files to the new directory.\n8. Host OS copies all files from selected application to created application (ALT 3).\n9. System informs user that application has been saved with entered name. \n10. End of use case.\n\n", "dataset": "hats", "act": ["selects", "requests", "enters", "selects", "confirms", "requests", "creates", "requests", "copies", "informs"], "obj": ["User", "application", "directory name", "System", "name", "open application", "Host OS", "new directory", "core files", "configuration files", "tlp files", "new application", "all files", "selected application", "created application"], "pred_steps": "Open file menu, select save as option, display save dialog, populate dialog with current file details, allow user to modify file name and location, validate user input, save application with new name and location, confirm save operation successful.", "pred_act": ["Open", "select", "display", "populate", "allow", "validate", "save", "confirm"], "pred_obj": ["file menu", "save as option", "save dialog", "current file details", "file name", "location", "user input", "application", "save operation"], "tp": ["select", "confirm", "file name", "application"]}
{"index": 7, "ucName": " Edit Files in an Application\n\n", "uctext": " None\n\n", "steps": "\n1. User selects option to edit a file within the currently selected application.\n2. User selects file to edit (Use Case 4).\n3. System checks application to determine if editor is associated with this file. An editor is associated with the file if the configuration explicitly associates this file with an editor or an editor is associated with files of this type. An editor is associated with this file (ALT 1).\n4. The HATS-GUI sends message to Host OS to start the preferred editor in new process and passes file name to editor.\n5. Host OS initiates process, puts editor in process, sends the filename as argument.\n6. End of use case.\n\n", "dataset": "hats", "act": ["selects", "selects", "checks", "determines", "associates", "sends", "initiates", "puts", "sends"], "obj": ["User", "option", "file", "currently selected application", "Use Case 4", "System", "application", "editor", "configuration", "HATS-GUI", "Host OS", "preferred editor", "new process", "file name", "process", "filename", "argument", "use case"], "pred_steps": "Open application, navigate to file management section, select file to edit, load file into editor, perform editing actions, save changes to file, close editor if necessary, return to file management section.", "pred_act": ["Open", "navigate", "select", "load", "perform", "save", "close", "return"], "pred_obj": ["application", "file management section", "file", "editor", "editing actions", "changes", "file", "editor", "file management section"], "tp": ["select", "application", "file", "editor", "file", "editor"]}
{"index": 8, "ucName": " Create New Application\n\n", "uctext": " None\n\n", "steps": "\n1. User selects option to create a new application.\n2. Close existing application if one is selected  (Refer to Use Case 5 – Scenario 1).\n3. System asks user to enter a name and location for new application.\n4. User enters name and location for new application (ALT 1).\n5. System requests Host OS to create new application. \n6. Host OS creates new application  (ALT 2).\n7. System informs user that new application has been created.\n8. End of use case.\n\n", "dataset": "hats", "act": ["selects", "close", "asks", "enters", "requests", "creates", "informs"], "obj": ["User", "option", "new application", "existing application", "Use Case 5 – Scenario 1", "System", "name", "location", "Host OS"], "pred_steps": "Open application creation interface, input application name, select application type, set application parameters, configure access permissions, save application settings, generate application ID, notify user of successful creation.", "pred_act": ["Open", "input", "select", "set", "configure", "save", "generate", "notify"], "pred_obj": ["application creation interface", "application name", "application type", "application parameters", "access permissions", "application settings", "application ID", "user"], "tp": ["select", "generate", "notify", "application name", "application type", "application ID", "user"]}
{"index": 9, "ucName": "  Configure Editor List.\n\n", "uctext": "  The user selects an application.  The user configures the settings of the selected application.  The settings of an application include, available editors, SDT display colors, SDT display shapes, default number of levels to expand, file associations between files and editors, and file associations between target files and transformation language program.\n\n", "steps": "\n1. User selects option to configure editors.\n2. The system prompts for editor name and configuration information. Editor configuration information must be sufficient to start the editor on the Host OS.\n3. User enters editor name and parameters (ALT 1). \n4. System saves editor configuration in application configuration. \n5. End of use case. \n\n", "dataset": "hats", "act": ["selects", "prompts", "enters", "saves"], "obj": ["User", "option", "editors", "system", "editor name", "configuration information", "Editor configuration information", "Host OS", "parameters (ALT 1", "application configuration"], "pred_steps": "User selects an application, retrieves current settings of the selected application, modifies the list of available editors, configures SDT display colors, sets SDT display shapes, specifies the default number of levels to expand, defines file associations between files and editors, establishes file associations between target files and transformation language program, saves the configured settings.", "pred_act": ["selects", "retrieves", "modifies", "configures", "sets", "specifies", "defines", "establishes", "saves"], "pred_obj": ["User", "application", "current settings", "list of available editors", "SDT display colors", "SDT display shapes", "default number of levels", "file associations between files", "editors", "file associations between target files", "transformation language program", "configured settings"], "tp": ["selects", "saves", "User", "application", "editors", "configured settings"]}
{"index": 10, "ucName": " Configure SDT display.\n\n", "uctext": " None\n\n", "steps": "\n1. User selects option to configure the colors and shapes of the graphical representation of an SDT. \n2. System displays a list containing types of displayed nodes and their corresponding current configured colors. The types of displayed nodes are given in Table 4.\n3. User selects a type of node from list. (ALT 1). \n4. System displays a list of supported colors and shapes. \n5. User selects a color and a shape from the list for the selected type of displayed node (ALT 2).\n6. System sets the selected values as the color and shape for the type of displayed node selected.\n7. End of use case.\n\n", "dataset": "hats", "act": ["selects", "displays", "selects", "displays", "selects", "sets", "End"], "obj": ["User", "option", "colors", "shapes", "graphical representation", "SDT", "System", "list", "types", "displayed nodes", "current configured colors", "Table 4", "type of node", "supported colors", "supported shapes", "selected type of displayed node", "selected values"], "pred_steps": "OpenSDTconfigurationinterface, selectdisplaymode, setdisplayparameterssuchasresolutionandrefreshrate, customizeSDTlayoutifneeded, previewconfiguration, saveconfigurationifsatisfied, applyconfigurationtoSDTdisplay, verifydisplayfunctionalityandadjustifnecessary.", "pred_act": ["Open", "select", "set", "customize", "preview", "save", "apply", "verify", "adjust"], "pred_obj": ["OpenSDTconfigurationinterface", "displaymode", "displayparameters", "resolution", "refreshrate", "SDTlayout", "configuration", "SDTdisplay", "displayfunctionality"], "tp": ["select", "set", "configuration", "SDTdisplay"]}
{"index": 11, "ucName": "  Configure Expand Levels.\n\n", "uctext": " None\n\n", "steps": "\n1. User selects option to configure the default number of levels to expand in response to a single mouse click.\n2. System asks user to select or enter a number of levels to expand.\n3. User enters or selects a number of levels to expand.   Number entered is a natural number.\n4. System sets the entered or selected number of levels as the default number of levels to expand.\n5. End of use case.\n\n", "dataset": "hats", "act": ["selects", "asks", "enters", "selects", "sets"], "obj": ["User", "option", "default number of levels", "single mouse click", "System", "number of levels to expand", "natural number"], "pred_steps": "Open configuration interface, select expand levels option, view current expand level settings, modify expand level parameters as required, save changes, verify expanded levels configuration, close configuration interface.", "pred_act": ["Open", "select", "view", "modify", "save", "verify", "close"], "pred_obj": ["configuration interface", "expand levels option", "current expand level settings", "expand level parameters", "changes", "expanded levels configuration"], "tp": ["select", "expand levels option", "current expand level settings", "expand level parameters", "expanded levels configuration"]}
{"index": 12, "ucName": "  File Associations:  Editors.\n\n", "uctext": " None\n\n", "steps": "\n1. User selects option to associate file types with editors (ALT 1). \n2. System displays a list of configured editors. (Refer to Use Case 6.)\n3. System displays a list of file types.\n4. User selects a file type from list  (ALT 2). \n5. User selects an editor from list (ALT 2).\n6. System associates the selected file type with the selected editor.  When the user tries to edit a file of the type selected, the system will request the Host OS to initiate a process with the associated editor.  (Refer to Use Case 5.)\n7. End of use case. \n\n", "dataset": "hats", "act": ["selects", "displays", "displays", "selects", "selects", "associates", "requests", "initiate", "end"], "obj": ["User", "option", "file types", "editors", "System", "list", "configured editors", "Use Case 6", "file type", "Use Case 5", "end of use case"], "pred_steps": "Identify file types supported by the system, determine the editors associated with each file type, allow user to set default editor for each file type, save user preferences, display files with associated editor when opened, provide option to change editor association, update user preferences accordingly, ensure seamless integration with the system's file handling mechanism.", "pred_act": ["Identify", "determine", "allow", "save", "display", "provide", "change", "update", "ensure"], "pred_obj": ["file types", "system", "editors", "default editor", "user preferences", "files", "option", "integration", "system's file handling mechanism"], "tp": ["display", "file types", "system", "editors", "files", "option"]}
{"index": 13, "ucName": " Save Configuration\n\n", "uctext": " None\n\n", "steps": "\n1. User selects option to save configuration. \n2. System saves configuration with the application.\n3. End of use case.\n\n", "dataset": "hats", "act": ["selects", "saves"], "obj": ["User", "option", "save", "configuration", "System", "application", "End", "use case"], "pred_steps": "Open configuration interface, load current configuration, allow user to modify configuration parameters, validate input data, display validation errors if any, save modified configuration to storage, confirm save success to user, close configuration interface.", "pred_act": ["Open", "load", "allow", "modify", "validate", "display", "save", "confirm", "close"], "pred_obj": ["configuration interface", "current configuration", "user", "configuration parameters", "input data", "validation errors", "modified configuration", "storage", "save success"], "tp": ["save", "current configuration", "user", "configuration parameters", "modified configuration"]}
{"index": 14, "ucName": "  SDT Display.\n\n", "uctext": " The user wants to display and manipulate a graphical representation of an SDT. Manipulation of a graphical representation of an SDT includes selecting and unselecting displayed nodes, navigation through the display using a navigation window and scrolling, expanding and collapsing displayed nodes, hiding displayed nodes, searching for SDT sub-trees, and finding smallest well-formed trees.\n\n", "steps": "\n1. User selects option to view and manipulate a graphical representation of an SDT. \n2. User selects SDT to view and manipulate (Refer to Use Case 4).  \n3. System displays a graphical representation of the selected SDT in an on-screen work area. The work area of the SDT display contains the following elements:\na) A window that displays the displayed graph representation of the SDT.  b) A text window that displays the labels of the leaf nodes in the currently displayed graph.   c) If either window is too small to contain all the information to be presented, the windows will have scroll bars to facilitate scrolling. The system will respond to dragging of scroll buttons\n(or pressing arrow keys) by shifting the display in the appropriate direction.\nd) If the SDT is too large for the window, a separate, small window with a compressed view of the SDT will be displayed. In this window, a displayed graph of the entire SDT will be drawn. The nodes of this displayed graph will be smaller than the displayed nodes in the SDT display work area. It is not necessary that the user be able to read node labels. It is only necessary that the user be able to see the high-level structure of the SDT. A small box named the locator box  will be displayed showing the part of the SDT currently displayed in the main SDT display window.\n4. User is able to manipulate the displayed graph representation of the SDT. (See the remaining scenarios.)\n\n", "dataset": "hats", "act": ["selects", "selects", "displays", "contains", "displays", "displays", "will have", "respond", "dragging", "pressing", "shifting", "is", "will be displayed", "will be drawn", "be", "be", "be able to read", "be able to see", "will be displayed"], "obj": ["User", "option", "graphical representation", "SDT", "on-screen work area", "window", "graph representation of the SDT", "text window", "labels", "leaf nodes", "scroll bars", "display", "scroll buttons", "arrow keys", "compressed view of the SDT", "graph of the entire SDT", "nodes", "high-level structure of the SDT", "locator box", "main SDT display window"], "pred_steps": "The user initiates the SDT Display, views the graphical representation of the SDT, selects and unselects nodes, navigates through the display using a navigation window, scrolls through the display, expands and collapses nodes, hides nodes, searches for SDT sub-trees, and finds the smallest well-formed trees.", "pred_act": ["initiates", "views", "selects", "unselects", "navigates", "scrolls", "expands", "collapses", "hides", "searches", "finds"], "pred_obj": ["user", "SDT Display", "graphical representation", "SDT", "nodes", "navigation window", "display", "SDT sub-trees", "smallest well-formed trees"], "tp": ["selects", "user", "SDT Display", "graphical representation", "SDT", "nodes", "navigation window", "display", "SDT sub-trees"]}
{"index": 15, "ucName": "  Select nodes.\n\n", "uctext": " None\n\n", "steps": "\n1. User selects one or more displayed nodes. Displayed node selection methods are described here. \n• A single node can be selected by a right mouse click on the node. \n• A single node can be selected via the keyboard by moving the keyboard cursor to a node and pressing the enter  key. The keyboard cursor is moved between nodes using the tab key.\n• Several nodes can be selected by drawing a mouse box around the desired nodes. \n• Several nodes can be selected by holding the shift key down and selecting individual displayed nodes. When a user selects a set of nodes using these operations (and the shift key is not held down), the previously selected set of nodes (if any) is unselected.\n2. System highlights the smallest well-formed tree of the selected nodes in the displayed graph.\n3. System finds corresponding portion of leaf text of the selected nodes in the displayed graph.\n4. System highlights the corresponding portion of leaf text. \n5. If both SDT and Pretty-printed text are displayed, the system will find the corresponding pretty-printed text and highlight that text in the Pretty-print text window.\n6. End of use case.\n\n", "dataset": "hats", "act": ["selects", "described", "can be selected", "can be moved", "can be drawing", "can be held", "selects", "is unselected", "highlights", "finds", "highlights", "will find", "highlight"], "obj": ["User", "nodes", "displayed nodes", "selection methods", "single node", "right mouse click", "keyboard", "keyboard cursor", "enter key", "tab key", "mouse box", "shift key", "set of nodes", "smallest well-formed tree", "displayed graph", "corresponding portion", "leaf text", "SDT", "Pretty-printed text", "Pretty-print text window"], "pred_steps": "DisplayNodeList, AllowNodeSelection, HandleNodeSelection, UpdateSelectedNodeSet, ProvideFeedbackOnSelection", "pred_act": ["Display", "Allow", "Handle", "Update", "Provide"], "pred_obj": ["DisplayNodeList", "AllowNodeSelection", "HandleNodeSelection", "UpdateSelectedNodeSet", "ProvideFeedbackOnSelection"], "tp": ["Handle"]}
{"index": 16, "ucName": "  Navigation window navigation.\n\n", "uctext": " None\n\n", "steps": "\n1. The user clicks the mouse in the navigation window SDT display. \n2. The system determines the node in the displayed graph closest to the mouse cursor and redraws the displayed graph with this node in the center of the main display.\n3. The system updates the locator box in the navigation window display.\n4. End of use case.\n\n", "dataset": "hats", "act": ["clicks", "determines", "redraws", "updates"], "obj": ["user", "mouse", "navigation window", "SDT display", "system", "node", "displayed graph", "mouse cursor", "main display", "locator box"], "pred_steps": "Open navigation window, display map or navigation interface, receive user input for destination, calculate route, display route on map, highlight route, provide turn-by-turn directions, update navigation as needed, allow user to adjust settings, handle errors and exceptions, close navigation window when navigation is complete or upon user request.", "pred_act": ["Open", "display", "receive", "calculate", "display", "highlight", "provide", "update", "allow", "handle", "close"], "pred_obj": ["navigation window", "map", "navigation interface", "user input", "destination", "route", "turn-by-turn directions", "settings", "errors", "exceptions"], "tp": ["update", "navigation window", "navigation interface"]}
{"index": 17, "ucName": "  Expand\n\n", "uctext": " None\n\n", "steps": "\n1. User points the mouse cursor at a node and clicks the left mouse button (ALT 1).\n2. System displays the tree by expanding descendants of the node in the displayed graph. The number of levels to expand is given by the application configuration. If fewer than this number of levels exist, then all descendants of the chosen node are displayed\n3. System changes the shape and color of selected node as specified in the application configuration to indicate that it has become an expanded node.\n4. End of use case.\n\n", "dataset": "hats", "act": ["points", "clicks", "displays", "changes"], "obj": ["User", "mouse cursor", "node", "left mouse button", "System", "tree", "descendants", "node", "displayed graph", "number of levels", "application configuration", "chosen node", "shape", "color", "selected node", "expanded node", "use case"], "pred_steps": "Identify the element to expand, determine the expansion criteria, fetch additional data or content related to the element, generate the expanded view or content, display the expanded content in the user interface, handle user interactions with the expanded content, provide options to collapse the expanded content if needed, update the user interface accordingly.", "pred_act": ["Identify", "determine", "fetch", "generate", "display", "handle", "provide", "update"], "pred_obj": ["element", "expansion criteria", "additional data", "content", "expanded view", "user interface", "user interactions", "options", "collapsed content", "updated user interface"], "tp": ["display", "expanded view"]}
{"index": 18, "ucName": "  Collapse\n\n", "uctext": " None\n\n", "steps": "\n1. User points the mouse cursor at a node and clicks the left mouse button. \n2. System removes all descendants of the selected node from the displayed graph.\n3. System changes the shape and color of selected node as specified in the application configuration to indicate that it has become a collapsed node.\n4. End of use case.\n\n", "dataset": "hats", "act": ["points", "clicks", "removes", "changes"], "obj": ["User", "mouse cursor", "node", "left mouse button", "System", "descendants", "selected node", "displayed graph", "shape", "color", "application configuration", "collapsed node", "use case"], "pred_steps": "ImplementCollapseFunctionality: Identifycollapsibleelements, Setinitialstateasexpanded, Definecollapseeventtrigger, Updatestatetocollapsedupontrigger, Hidecontentofcollapsibleelements, Defineexpandeventtrigger, Updatestatetoexpandedupontrigger, Showcontentofcollapsibleelements, EnsureproperUIreflectionofstatechange, Handleedgecaseslikeemptyornestedcollapsibleelements.", "pred_act": ["Implement", "Identify", "Set", "Define", "Update", "Hide", "Show", "Ensure", "Handle"], "pred_obj": ["ImplementCollapseFunctionality", "collapsible elements", "initial state", "expanded", "collapse event trigger", "state", "collapsed", "content", "expand event trigger", "UI reflection", "state change", "edge cases", "empty collapsible elements", "nested collapsible elements"], "tp": ["collapsible elements", "collapsed", "nested collapsible elements"]}
{"index": 19, "ucName": "  Hide nodes\n\n", "uctext": " None\n\n", "steps": "\n1. User selects one or more displayed nodes. (Refer to Use Case 7.) \n2. User selects option to hide selected displayed nodes. \n3. System removes the selected nodes from the displayed graph. \n4. System changes the types of the displayed nodes remaining on the screen to indicate that there are hidden nodes in the displayed graph.\n5. End of use case.\n\n", "dataset": "hats", "act": ["selects", "selects", "removes", "changes"], "obj": ["User", "nodes", "Use Case 7", "option", "displayed graph", "types", "screen", "hidden nodes"], "pred_steps": "Identify nodes to be hidden, access node properties, set visibility attribute to false, update display to reflect hidden nodes, ensure hidden nodes are not interactive, save hidden state for persistence, provide option to unhide nodes, restore visibility attribute for unhidden nodes, refresh display to show unhidden nodes.", "pred_act": ["Identify", "access", "set", "update", "ensure", "save", "provide", "restore", "refresh"], "pred_obj": ["nodes", "node properties", "visibility attribute", "display", "hidden state", "option", "unhidden nodes"], "tp": ["nodes", "node properties", "display", "option", "unhidden nodes"]}
{"index": 20, "ucName": " Search\n\n", "uctext": " None\n\n", "steps": "\n1. User selects option to search SDT for a desired sub-tree. \n2. System asks user for the criteria to search nodes. Search criteria for SDTs are presented in Appendix E.\n3. User enters search criteria.\n4. System finds the first matching sub-tree in the SDT starting at the current keyboard cursor location (ALT 1).\n5. System creates a displayed graph for the sub-tree matching the search criteria. The displayed nodes of the matching sub-tree are highlighted. If no nodes match the search criteria, none are highlighted.\n6. If both SDT and Pretty-printed text are displayed, the pretty-printed text corresponding to the highlighted nodes of the SDT is highlighted.\n7. End of use case.\n\n", "dataset": "hats", "act": ["selects", "asks", "enters", "finds", "creates", "displays", "are highlighted", "is highlighted"], "obj": ["User", "option", "SDT", "sub-tree", "system", "criteria", "nodes", "Search criteria for SDTs", "Appendix E", "first matching sub-tree", "current keyboard cursor location", "displayed graph", "highlighted nodes", "pretty-printed text", "highlighted text"], "pred_steps": "Display search bar, accept user input, validate input, query database with input, generate and display search results, handle no results scenario, allow user to refine search or view details of a result.", "pred_act": ["Display", "accept", "validate", "query", "generate", "display", "handle", "allow", "refine", "view"], "pred_obj": ["search bar", "user input", "input", "database", "search results", "no results scenario", "user", "search", "result details"], "tp": ["Display", "generate", "display", "search"]}
{"index": 21, "ucName": "  Repeat Search\n\n", "uctext": " None\n\n", "steps": "\n1. User selects option to repeat a search SDT for a desired sub-tree. \n2. System finds the next matching sub-tree in the SDT starting at the current keyboard cursor location. Software Requirements Specification   \n3. System creates a displayed graph for the sub-tree matching the search criteria. The displayed nodes of the matching sub-tree are highlighted. If no nodes match the search criteria, none are highlighted.\n4. If both SDT and Pretty-printed text are displayed, the pretty-printed text corresponding to the highlighted nodes of the SDT is highlighted.\n5. End of use case.\n\n", "dataset": "hats", "act": ["selects", "finds", "creates", "displayed", "are highlighted", "match", "is highlighted"], "obj": ["User", "option", "search", "SDT", "desired sub-tree", "System", "next matching sub-tree", "current keyboard cursor location", "displayed graph", "nodes", "search criteria", "Pretty-printed text", "highlighted nodes"], "pred_steps": "User initiates repeat search request, system retrieves previous search criteria, system displays previous search results, user selects criteria to repeat, system executes selected search, system displays updated search results.", "pred_act": ["initiates", "retrieves", "displays", "selects", "executes", "displays"], "pred_obj": ["User", "repeat search request", "system", "previous search criteria", "previous search results", "criteria", "selected search", "updated search results"], "tp": ["displays", "selects", "displays", "User", "system", "previous search criteria", "previous search results", "criteria", "selected search", "updated search results"]}
{"index": 22, "ucName": "  Copy Text From Text Window.\n\n", "uctext": " None\n\n", "steps": "\n1. System displays text of leaf nodes in currently displayed graph in a text window.    \n2. User selects a portion of displayed text. \n3. System highlights selected portion of text in the text window. \n4. User selects option to copy selected text. Minimally, the system will copy selected text in response to the Ctrl-Insert  key combination.\n5. System puts the selected and copied text in the Host OS copy/paste buffer.\n6. End of use case.\n\n", "dataset": "hats", "act": ["displays", "selects", "highlights", "selects", "copy", "puts"], "obj": ["System", "text", "leaf nodes", "graph", "text window", "User", "portion of displayed text", "selected portion of text", "option", "selected text", "Ctrl-Insert key combination", "Host OS copy/paste buffer"], "pred_steps": "User initiates the action to copy text, selects the text within the text window, triggers the copy command either through a contextual menu, keyboard shortcut, or dedicated button, the system copies the selected text to a temporary clipboard storage, user navigates to the desired destination, triggers the paste command through a contextual menu, keyboard shortcut, or dedicated button, the system retrieves the copied text from the clipboard and inserts it at the cursor's position.", "pred_act": ["initiates", "selects", "triggers", "copies", "navigates", "triggers", "retrieves", "inserts"], "pred_obj": ["User", "action", "copy text", "text", "text window", "copy command", "contextual menu", "keyboard shortcut", "dedicated button", "system", "temporary clipboard storage", "desired destination", "paste command", "clipboard", "cursor's position"], "tp": ["selects", "copies", "inserts", "User", "copy text", "text", "text window", "copy command", "keyboard shortcut", "paste command", "clipboard"]}
{"index": 23, "ucName": "  Refresh Display.\n\n", "uctext": " None\n\n", "steps": "\n1. The user selects the option to refresh the display of the SDT.\n2. The system disposes of the currently displayed SDT.\n3. The system reads the SDT file and displays the newly generated SDT. The display of the SDT contains approximately the same number of nodes as the previously displayed SDT.\n4. End of use case.\n\n", "dataset": "hats", "act": ["selects", "disposes", "reads", "displays", "contains"], "obj": ["user", "option", "display", "SDT", "system", "currently displayed SDT", "SDT file", "newly generated SDT", "number of nodes", "previously displayed SDT"], "pred_steps": "Initiate refresh request, retrieve current data from source, process data for display, update display with refreshed data, confirm display refresh completion.", "pred_act": ["Initiate", "retrieve", "process", "update", "confirm"], "pred_obj": ["refresh request", "current data", "source", "data", "display", "display refresh completion"], "tp": ["current data", "display"]}
{"index": 24, "ucName": "  Display Pretty-Printed Text\n\n", "uctext": " The user wants to display and manipulate a text representation of the result of applying a transformation language program to a target file.  Manipulation of text includes selecting text and searching for sub-strings.\n\n", "steps": "\n1. User selects option to view and manipulate a pretty-printed text from a particular successful \ntransformation. \n2. User selects pretty-printed text to view and manipulate. (Refer to Use Case 4.)\n3. System displays the pretty-printed text in a work window.\na) The work area of the display of pretty-printed text contains a text window that displays the text.\nb) If the window is too small to contain all the information to be presented, the windows will have scroll bars to facilitate scrolling. The system will respond to dragging of scroll buttons (or pressing arrow keys) by shifting the display in the appropriate direction.\n4. User is able to manipulate the pretty-printed text. (See the remainder of the scenarios.)\n5. End of use case.\n\n", "dataset": "hats", "act": ["selects", "view", "manipulate", "displays", "contains", "will have", "respond", "dragging", "shifting", "is able to manipulate"], "obj": ["User", "option", "pretty-printed text", "transformation", "work window", "work area", "display", "text window", "text", "information", "scroll bars", "scroll buttons", "arrow keys", "system"], "pred_steps": "Load target file, apply transformation language program to generate result, display result as text, allow user to select text, allow user to search for sub-strings within displayed text, update display based on user interactions.", "pred_act": ["Load", "apply", "generate", "display", "allow", "select", "search", "update"], "pred_obj": ["target file", "transformation language program", "result", "text", "user", "sub-strings", "display"], "tp": ["display", "text", "display"]}
{"index": 25, "ucName": "  Select text.\n\n", "uctext": " None\n\n", "steps": "\n1. User selects a portion of the displayed pretty-printed text. Text selection methods are described here. \n• Text can be selected by clicking and dragging the mouse across an area of text. \n• Text can be selected by holding the shift key and moving the keyboard cursor using the arrow keys.\nWhen a user selects text using these operations, the previously selected text (if any) is unselected. \n2. System highlights selected portion of the displayed pretty-printed text.\n3. If both pretty-printed text and graphical representation of SDT are displayed, the system finds the corresponding displayed nodes of the SDT of the selected portion of pretty-printed text and highlights the corresponding displayed nodes of the SDT.\n4. End of use case.\n\n", "dataset": "hats", "act": ["selects", "described", "can be selected", "clicking", "dragging", "can be selected", "holding", "moving", "unselected", "highlights", "finds", "highlights"], "obj": ["User", "portion", "displayed pretty-printed text", "Text selection methods", "Text", "mouse", "shift key", "keyboard cursor", "arrow keys", "previously selected text", "System", "highlighted portion", "graphical representation of SDT", "displayed nodes of the SDT", "corresponding displayed nodes", "use case"], "pred_steps": "Detect user input indicating text selection, identify the text to be selected based on cursor position or user input parameters, highlight the selected text visually, provide options for copying, cutting, or performing other actions on the selected text, update the application state to reflect the current selection, and allow for deselection of text if required.", "pred_act": ["Detect", "identify", "highlight", "provide", "update", "allow", "deselect"], "pred_obj": ["user input", "text selection", "text", "cursor position", "user input parameters", "selected text", "options", "copying", "cutting", "other actions", "application state", "current selection", "deselection of text"], "tp": ["highlight", "deselect", "text selection", "text", "cursor position", "selected text", "current selection"]}
{"index": 26, "ucName": "  Search\n", "uctext": " None\n\n", "steps": "\n1. User selects option to search pretty-printed text for desired text. \n2. System asks user for the criteria to search text. Text search criteria are given in Appendix F. 3. User enters or selects criteria to search text. \n4. System finds those portions of pretty-printed text that match the search criteria and highlights those portions of the text that match (ALT 1).\n5. If both the pretty-printed text and the graphical representation of an SDT are displayed, the system finds the corresponding nodes of the SDT of the selected portion of pretty-printed text and highlights the corresponding nodes of the SDT.\n6. End of use case.\n\n", "dataset": "hats", "act": ["selects", "asks", "gives", "enters", "selects", "finds", "highlights", "displays", "finds", "highlights"], "obj": ["User", "option", "pretty-printed text", "desired text", "System", "criteria", "Text search criteria", "Appendix F", "portions", "search criteria", "SDT", "nodes", "use case"], "pred_steps": "User enters search query into search bar, system validates query, system searches database for matching results, system displays results to user, user selects desired result, system navigates user to selected result.", "pred_act": ["enters", "validates", "searches", "displays", "selects", "navigates"], "pred_obj": ["User", "search query", "search bar", "system", "database", "matching results", "desired result", "selected result"], "tp": ["enters", "searches", "displays", "selects", "search query", "search bar", "system", "desired result"]}
{"index": 27, "ucName": " Generate Pretty-printed Output\n\n", "uctext": " The user requests the application of a pretty-print style file to a target SDT. The necessary file names are passed to HATS-SML, HATS-SML applies the pretty-print style to the SDT, and a formatted text file is generated.\n\n", "steps": "\n1. User selects the option to pretty-print a target from the currently selected application. \n2. User selects a target SDT (Refer to Use Case 4) (ALT 1). 3. No pretty-print style file is associated with the target file. The HATS-GUI prompts the user to select a pretty-print style file.\n4. User selects a pretty-print style file (Refer to Use Case 4) (ALT 2). \n5. HATS-GUI generates a file name by appending “.txt” to the target SDT root name. \n6. The HATS-GUI verifies that no file with this name exists in the current directory. This file becomes the output file name (ALT 3).\n7. The HATS-GUI sends a message to the Host OS to start the Pretty-print program and sends the target SDT file name, the pretty-print style file name, and the output file name to Pretty-print as command line arguments.\n8. HATS-SML applies the style file to the target SDT and writes the output to the output file specified on the command line (ALT 6).\n9. HATS-SML terminates.\n10. End of use case.\n\n", "dataset": "hats", "act": ["selects", "selects", "prompts", "selects", "generates", "verifies", "becomes", "sends", "applies", "writes", "terminates"], "obj": ["User", "option", "pretty-print", "target", "application", "SDT", "HATS-GUI", "pretty-print style file", "file name", "target SDT root name", "current directory", "output file name", "Host OS", "Pretty-print program", "command line arguments", "HATS-SML", "style file"], "pred_steps": "Receive user request with target SDT and pretty-print style file names; validate input; pass file names to HATS-SML; HATS-SML applies the pretty-print style to the target SDT; generate formatted text file; provide formatted text file to user.", "pred_act": ["Receive", "validate", "pass", "applies", "generate", "provide"], "pred_obj": ["user request", "target SDT", "pretty-print style file names", "input", "HATS-SML", "pretty-print style", "formatted text file"], "tp": ["validate", "applies", "generate", "target SDT", "pretty-print style file names", "HATS-SML", "pretty-print style"]}
{"index": 0, "ucName": " Start and Stop Diagnostics Use Case", "uctext": "  \nThis use case provides the actor the means to start and stop diagnostic processing.  The actor in this case is the administrator user (see 2.5.1 ).\n", "steps": "\n1. The user launches the tool by double -clicking the icon associate d with the tool or typing the application’s name.\n2. The tool momentarily displays a splash screen identifying the tool, identifying developing and sponsoring organizations as appropriate, and listing copyright information.\n3. The tool displays the main window o f the tool.  \n4. The user starts the diagnostic processing by selecting a menu item named “Start Diagnostics” from a drop down menu named “Status”.\n5. Include (Authenticate User).  If the user has the appropriate privilege (i.e., the user is the administrator user) the tool requests a confirmatory response from the user to start the diagnostic processing.\n6. If the user confirms the desire to start diagnostic processing, the tool starts the processing and displays an animated indication that diagnostic processing is active.\n7. If the user responds negatively to the confirmation, the tool does not start the diagnostic processing but the user remains authenticated.\n8. If the user does not have the appropriate privilege, the tool does not start the diagnostic processing.\n9. The u ser secures the tool by selecting a menu item named “Logout” from the drop down menu named “File”.\n10. The tool returns the current user’s privileges to those of the general user.\n11. If a period of 15 minutes elapses whereby the user does not secure the tool, the  users privileges will automatically revert to those of a general user.\n", "dataset": "pnnl", "act": ["launches", "displays", "identifying", "listing", "displays", "starts", "includes", "Authenticate", "requests", "confirms", "starts", "displays", "responds", "does not start", "secures", "returns", "elapses", "revert"], "obj": ["user", "tool", "icon", "application’s name", "splash screen", "tool", "developing organizations", "sponsoring organizations", "copyright information", "main window", "menu item", "Start Diagnostics", "drop down menu", "Status", "Authenticate User", "privilege", "administrator user", "confirmatory response", "diagnostic processing", "animated indication", "Logout", "File", "current user’s privileges", "general user", "15 minutes"], "pred_steps": "StartDiagnostics, VerifyDiagnosticsStarted, ExecuteDiagnosticProcessing, MonitorDiagnosticsStatus, ReceiveStopRequest, StopDiagnostics, VerifyDiagnosticsStopped", "pred_act": ["StartDiagnostics", "VerifyDiagnosticsStarted", "ExecuteDiagnosticProcessing", "MonitorDiagnosticsStatus", "ReceiveStopRequest", "StopDiagnostics", "VerifyDiagnosticsStopped"], "pred_obj": ["StartDiagnostics", "VerifyDiagnosticsStarted", "ExecuteDiagnosticProcessing", "MonitorDiagnosticsStatus", "ReceiveStopRequest", "StopDiagnostics", "VerifyDiagnosticsStopped"], "tp": ["StartDiagnostics", "VerifyDiagnosticsStarted", "StartDiagnostics", "VerifyDiagnosticsStarted", "ExecuteDiagnosticProcessing", "MonitorDiagnosticsStatus", "StopDiagnostics"]}
{"index": 1, "ucName": " Browse Current Diagnostics  Use Case", "uctext": "  \nThis use case provides the actor the means to view current diagnostic results.  The actor in this case is the user (see 2.5.1 ).\n", "steps": "\n1. The tool displays the main (initial) window, listing buildings under diagnosis.\n2. The user selects a building of interest.  \n3. The tool displays the su bsystems window, tiled on top the main (initial) window.\n4. The user selects a subsystem of interest.  \n5. The tool displays the condition window, tiled on top the subsystems window.\n6. The user selects a diagnostic of interest.  \n7. The tool displays the diagnostic infor mation window for that diagnostic.\n", "dataset": "pnnl", "act": ["displays", "selects", "displays", "selects", "displays", "selects", "displays"], "obj": ["tool", "main (initial) window", "buildings under diagnosis", "user", "building of interest", "subsystems window", "subsystem of interest", "condition window", "diagnostic of interest", "diagnostic information window"], "pred_steps": "\"The user navigates to the diagnostics section, the system retrieves current diagnostic results from the database, the system displays the diagnostic results on the user interface, the user views the diagnostic results, and the user has the option to filter or sort the displayed results.\"", "pred_act": ["navigates", "retrieves", "displays", "views", "has", "filter", "sort"], "pred_obj": ["user", "diagnostics section", "system", "current diagnostic results", "database", "user interface", "diagnostic results", "option", "displayed results"], "tp": ["displays", "user", "diagnostics section", "system", "diagnostic results"]}
{"index": 2, "ucName": " Browse Historical Diagnostics Use Case", "uctext": "  \nThis use case provides the actor the means to view historical  diagnostic results.  The actor in this case is the user (see 2.5.1 ).\n", "steps": "\n1. The user clicks the “History” button.  \n2. The tool displays the diagnostic history window depicting the historical results of the selected condition of interest over the default viewing period in the form  of a color map.  The window provides a scroll bar for scrolling through historical results if data are available prior to the default viewing period.  The default viewing period extends backward one week prior to the current date.  Sliding the scroll bar does not change the viewing period displayed.  The default time resolution for the window is one hour.\n3. The user slides the scroll bar backward or forward to view previous results up to the current time.\n4. The tool displays the results within a viewing period  of one week, adding results to the beginning or ending of the period while dropping results of the opposite end.  The tool does not change the viewing period.\n5. The user may close the diagnostic history window by clicking the “Close” button.\n6. The tool dismis ses the diagnostic history window and the diagnostic information window and makes the condition window the current window.\n", "dataset": "pnnl", "act": ["clicks", "displays", "provides", "extends", "slides", "does not change", "views", "adds", "dropping", "may close", "dismisses", "makes"], "obj": ["user", "History\" button", "tool", "diagnostic history window", "historical results", "selected condition of interest", "default viewing period", "color map", "scroll bar", "viewing period", "current date", "time resolution", "previous results", "current time", "one week", "Close\" button", "diagnostic information window", "condition window"], "pred_steps": "\"The user navigates to the historical diagnostics section, the system retrieves and displays a list of past diagnostic results, the user selects a specific result to view, the system displays the detailed diagnostic information for the selected result, the user can scroll through and review the information, and upon finishing, the user exits the historical diagnostics section.\"", "pred_act": ["navigates", "retrieves", "displays", "selects", "views", "displays", "scrolls", "reviews", "exits"], "pred_obj": ["user", "historical diagnostics section", "system", "list of past diagnostic results", "specific result", "detailed diagnostic information", "information"], "tp": ["displays", "views", "displays", "user", "historical diagnostics section", "list of past diagnostic results", "detailed diagnostic information", "information"]}
{"index": 3, "ucName": " Configure Diagnostics Use Case", "uctext": "  \nThis use case provides the actor the means to configure the diagnostic tool.  This includes defining the buildings containing systems to be diagnosed, defining the systems themselves, specifying equipment setpoints, selecting diagnostic sensitivity, and modif ying fixed data.  The actor in this case is the administrator user (see 2.5.1 ).\n", "steps": "\n1. When presented with the main window, the user may select the “Configure Diagnostics” menu item from the menu entitled “File”.\n2. If the user has not already been authenticated as the administrator user, include (Authenticate User).\n3. If the user has the appropriate privilege, the tool displays the configuration window.\n4. The user may click the “Recall” button to read previously saved changes from a disk file or database.\n5. The tool populates the window with the data from t he disk file.\n6. The user makes the desired changes to the configuration and can click the button labeled “Save” to save the changes.  Otherwise, the user can click the button labeled “Close”.\n7. If the user clicks the button labeled “Save”, the tool will request confirmation to save the changes.\n8. If the user confirms, the tool will request a name for the disk file in which to save the modified data to permanent storage.\n9. The user will enter a name for the file or cancel the operation.\n10. If the user enters a name for  the file, the tool will save the changes.  If the user cancels the operation, the tool will perform no function.\n11. If the tool completes the save operation, the tool will ask the user if the changes are to be relayed to the diagnostic processing for immediate use.\n12. If the user confirms the changes are to be relayed to the diagnostic processing, the tool relays the changes if the processing is currently active.  Otherwise, the tool does not relay the changes.\n13. If the user clicks the button labeled “Close”, the tool will request confirmation for the close and the potential loss of any changes.\n14. If the user confirms, the tool will dismiss the configuration window, ignoring any changes and returns the user to the main window.  If the user rejects the initial desire to close, the tool will perform no function.\n", "dataset": "pnnl", "act": ["select", "include(Authenticate User", "displays", "click", "populates", "makes", "click", "request", "confirm", "request", "enter", "cancel", "save", "perform", "ask", "confirm", "relay", "does not relay", "click", "request", "confirm", "dismiss", "ignore", "return", "reject", "perform"], "obj": ["main window", "Configure Diagnostics” menu item", "menu", "File", "user", "administrator user", "tool", "configuration window", "Recall” button", "disk file", "database", "window", "data", "Save” button", "changes", "Close” button", "confirmation", "name", "modified data", "permanent storage", "diagnostic processing", "potential loss of any changes"], "pred_steps": "Configure Diagnostics Use Case functional steps: Access diagnostic tool; Define buildings containing systems to be diagnosed; Define systems within selected buildings; Specify equipment setpoints for each system; Select diagnostic sensitivity level; Modify fixed data as necessary; Save configuration settings.", "pred_act": ["Access", "Define", "Specify", "Select", "Modify", "Save"], "pred_obj": ["Diagnostics Use Case", "functional steps", "diagnostic tool", "buildings", "systems", "equipment setpoints", "diagnostic sensitivity level", "fixed data", "configuration settings"], "tp": ["Select", "Save", "Diagnostics Use Case", "diagnostic tool", "diagnostic sensitivity level", "fixed data", "configuration settings"]}
{"index": 4, "ucName": " Authenticate User", "uctext": "  \nThis use case establishes the privileges of the user for certain functions of the tool.    \n", "steps": "  \n1. The tool displays a windo w for entry of authenticating information, i.e., user name and password, to validate and establish the privileges of the user.\n2. The user enters their user name and password.  \n3. The tool attempts to authenticate the user and indicates whether authentication has  succeeded or not.\n4. If authentication is unsuccessful, the user is returned to the authentication window to reenter the information.\n5. The tool permits three attempts at authentication before dismissing the authentication window and returning the user to the previous window.\n6. The user may cancel the authentication process at any time and return to the previous window.\n", "dataset": "pnnl", "act": ["displays", "enters", "attempts", "indicates", "returns", "permits", "dismisses", "may cancel", "returning"], "obj": ["tool", "window", "authenticating information", "user name", "password", "privileges", "user", "authentication", "attempts", "previous window", "authentication process"], "pred_steps": "AuthenticateUser: Initiate user authentication process, collect user credentials, validate credentials against stored data, determine user roles and permissions, establish session for authenticated user, grant access to authorized functions based on roles, monitor and maintain session activity, end session on logout or inactivity timeout.", "pred_act": ["Initiate", "collect", "validate", "determine", "establish", "grant", "monitor", "maintain", "end"], "pred_obj": ["AuthenticateUser", "user authentication process", "user credentials", "credentials", "stored data", "user roles", "permissions", "session", "authenticated user", "authorized functions", "roles", "session activity", "logout", "inactivity timeout"], "tp": ["AuthenticateUser", "user authentication process", "user credentials", "credentials", "user roles", "permissions", "authenticated user", "authorized functions"]}
{"index": 0, "ucName": "\nManage  Requests \n", "uctext": " The main requests management page that coordinator will manage all  request from customer or to suppliers\n", "steps": "\n 1 The coordinator press “Manage  Requests”\n 2 The coordinator use any function.\n 3 The coordinator will manage all requests function. \n", "dataset": "viper", "act": ["press", "use", "will manage"], "obj": ["coordinator", "Manage Requests", "function", "requests function"], "pred_steps": "Coordinator accesses requests management page, views all customer and supplier requests, filters requests based on criteria, selects a request to view details, updates request status, assigns request to appropriate team member, adds notes or comments to request, approves or rejects request, and communicates decision to customer or supplier.", "pred_act": ["accesses", "views", "filters", "selects", "updates", "assigns", "adds", "approves", "rejects", "communicates"], "pred_obj": ["Coordinator", "requests management page", "customer requests", "supplier requests", "requests", "request", "details", "request status", "team member", "notes", "comments", "decision", "customer", "supplier"], "tp": ["Coordinator", "requests management page", "customer requests", "supplier requests", "requests", "request", "request status"]}
{"index": 1, "ucName": "\nAdd Request\n", "uctext": " Coordinator can add new request  and send it to his supplier\n", "steps": "\n 1 The coordinator press “Add Request”\n 2 The coordinator fills the request form.\n 3 The coordinator will send the request to supplier \n", "dataset": "viper", "act": ["pressAddRequest", "fills", "willsend"], "obj": ["coordinator", "Add Request", "request form", "request", "supplier"], "pred_steps": "Coordinator opens request form, inputs request details, selects supplier, saves request, and sends it to the selected supplier.", "pred_act": ["opens", "inputs", "selects", "saves", "sends"], "pred_obj": ["Coordinator", "request form", "request details", "supplier", "request"], "tp": ["Coordinator", "request form", "request details", "supplier", "request"]}
{"index": 2, "ucName": "\nView Requests\n", "uctext": " Coordinator issues requests , coordinator can show all  requests that sent his supplier or that came from his customer\n", "steps": "\n 1 The coordinator press “View Requests”\n 2 The coordinator view list of requests.\n", "dataset": "viper", "act": ["press", "view"], "obj": ["coordinator", "View Requests", "list of requests"], "pred_steps": "Coordinator logs in, accesses request management system, issues new requests, selects option to view requests, system displays filter options for supplier or customer, coordinator applies filter, system retrieves and displays all relevant requests based on selected filter criteria.", "pred_act": ["logs in", "accesses", "issues", "selects", "displays", "applies", "retrieves", "displays"], "pred_obj": ["Coordinator", "request management system", "requests", "option", "supplier", "customer", "filter", "filter criteria", "relevant requests"], "tp": ["Coordinator", "request management system", "requests", "relevant requests"]}
{"index": 3, "ucName": "\nView Request Details\n", "uctext": " Coordinator can show the details of any request that he chose.\n", "steps": "\n 1 The coordinator press “View Request Details”\n 2 The coordinator views the details of a request.\n", "dataset": "viper", "act": ["press", "views"], "obj": ["coordinator", "View Request Details", "details", "request"], "pred_steps": "Coordinator selects request, system retrieves request details, system displays request details to coordinator.", "pred_act": ["selects", "retrieves", "displays"], "pred_obj": ["Coordinator", "request", "system", "request details"], "tp": ["Coordinator", "request", "request details"]}
{"index": 4, "ucName": "\nEdit Request\n", "uctext": " The Coordinator can edit  request and notify his supplier\n", "steps": "\n 1 The coordinator press “Edit Request”\n 2 The coordinator modifies the request information.\n 3 The coordinator will send a notification to supplier \n", "dataset": "viper", "act": ["press", "modifies", "will send"], "obj": ["coordinator", "Edit Request", "request information", "notification", "supplier"], "pred_steps": "Coordinator accesses request, views request details, modifies necessary fields, saves changes, and notifies supplier of updates.", "pred_act": ["accesses", "views", "modifies", "saves", "notifies"], "pred_obj": ["Coordinator", "request", "request details", "fields", "changes", "supplier", "updates"], "tp": ["modifies", "Coordinator", "request", "request details", "supplier"]}
{"index": 5, "ucName": "\nDelete Request\n", "uctext": " The Coordinator can delete  request and notify his supplier\n", "steps": "\n 1 The coordinator press “Delete Request”\n 2 The information about the request will show.\n 3 Press “Delete” to processing the deleting\n 4 The coordinator will send a notification to supplier\n", "dataset": "viper", "act": ["press", "show", "press", "send"], "obj": ["coordinator", "Delete Request", "information", "request", "Delete", "notification", "supplier"], "pred_steps": "Coordinator selects request to delete, system confirms deletion request, Coordinator confirms deletion, system deletes request, system notifies supplier of deletion.", "pred_act": ["selects", "confirms", "deletes", "notifies"], "pred_obj": ["Coordinator", "request", "system", "deletion", "supplier"], "tp": ["Coordinator", "request", "deletion", "supplier"]}
{"index": 6, "ucName": "\nManage Items \n", "uctext": " The main items management page that coordinator will manage the items that he have and may supply to customer\n", "steps": "\n 1 The coordinator press “Manage Items”\n 2 The coordinator use any function.\n 3 The coordinator will manage all items function. \n", "dataset": "viper", "act": ["press", "use", "will manage"], "obj": ["coordinator", "Manage Items", "function", "items function"], "pred_steps": "Coordinator accesses main items management page, views list of available items, selects item to manage, updates item details (name, quantity, price), adds new items, removes existing items, searches for items based on criteria, sorts items list, generates report of current items inventory, and saves changes to items management system.", "pred_act": ["accesses", "views", "selects", "updates", "adds", "removes", "searches", "sorts", "generates", "saves"], "pred_obj": ["Coordinator", "main items management page", "list of available items", "item", "item details", "name", "quantity", "price", "new items", "existing items", "criteria", "items list", "report", "current items inventory", "changes", "items management system"], "tp": ["Coordinator", "main items management page", "item", "new items", "existing items", "items list", "items management system"]}
{"index": 7, "ucName": "\nAdd Item\n", "uctext": " Coordinator can add new items  and may supply it to our customer \n", "steps": "\n 1 The coordinator press “Add Item”\n 2 The coordinator fills the item form.\n 3 The coordinator will save the item.\n", "dataset": "viper", "act": ["press", "fills", "will save"], "obj": ["coordinator", "Add Item", "item form", "item"], "pred_steps": "Coordinator opens item addition interface, inputs item details, selects item category, sets item price, attaches item description, confirms item addition, saves item to database, updates inventory list, and notifies relevant stakeholders of new item availability for customer supply.", "pred_act": ["opens", "inputs", "selects", "sets", "attaches", "confirms", "saves", "updates", "notifies"], "pred_obj": ["Coordinator", "item addition interface", "item details", "item category", "item price", "item description", "item", "database", "inventory list", "relevant stakeholders", "new item", "customer supply"], "tp": ["saves", "Coordinator", "item addition interface", "item details", "item category", "item price", "item description", "item", "new item"]}
{"index": 8, "ucName": "\nView Items\n", "uctext": " The coordinator can view all  items that he have ,that may receive from supplier and may supply it for his customers\n", "steps": "\n 1 The coordinator press “View Items”\n 2 The coordinator view list of Items\n", "dataset": "viper", "act": ["press", "view"], "obj": ["coordinator", "View Items", "list of Items"], "pred_steps": "Coordinator opens system, authenticates, navigates to item view section, system retrieves and displays all items possessed by coordinator, including items received from suppliers and items available for supply to customers, coordinator reviews displayed items.", "pred_act": ["opens", "authenticates", "navigates", "retrieves", "displays", "reviews"], "pred_obj": ["Coordinator", "system", "item view section", "items", "suppliers", "customers", "displayed items"], "tp": ["Coordinator", "item view section", "items", "displayed items"]}
{"index": 9, "ucName": "\nView Item Details\n", "uctext": " Coordinator can show the details of any items that he chooses.\n", "steps": "\n 1 The coordinator press “View Item Details”\n 2 The coordinator views the details of an item.\n", "dataset": "viper", "act": ["press", "views"], "obj": ["coordinator", "View Item Details", "details", "item"], "pred_steps": "Coordinator selects item, system retrieves item details, system displays item details to coordinator.", "pred_act": ["selects", "retrieves", "displays"], "pred_obj": ["Coordinator", "item", "system", "item details"], "tp": ["Coordinator", "item", "item details"]}
{"index": 10, "ucName": "\nEdit Item.\n", "uctext": " The Coordinator can edit item that he want.\n", "steps": "\n 1 The coordinator press “Edit Item”\n 2 The coordinator modifies the item information.\n 3 The coordinator will send a notification to supplier or customer if need. \n", "dataset": "viper", "act": ["press", "modifies", "will send"], "obj": ["coordinator", "Edit Item", "item information", "notification", "supplier", "customer"], "pred_steps": "Coordinator selects item to edit, system retrieves item details, displays editable fields, Coordinator modifies desired fields, system validates input, saves changes, updates item record, and notifies Coordinator of successful edit.", "pred_act": ["selects", "retrieves", "displays", "modifies", "validates", "saves", "updates", "notifies"], "pred_obj": ["Coordinator", "item", "system", "editable fields", "desired fields", "input", "changes", "item record", "successful edit"], "tp": ["modifies", "Coordinator", "item", "item record"]}
{"index": 11, "ucName": "\nDelete Item\n", "uctext": " The Coordinator can delete any item from his list and his supply.\n", "steps": "\n 1 The coordinator press “Delete Item”\n 2 The information about the item will show.\n 3 Press “Delete” to processing the deleting\n", "dataset": "viper", "act": ["press", "show", "press"], "obj": ["coordinator", "Delete Item", "information", "item", "Delete"], "pred_steps": "Coordinator selects item to delete from list, system confirms item selection, system checks item exists in Coordinator's list and supply, system requests confirmation from Coordinator to delete item, upon confirmation, system removes item from list and updates supply inventory, system displays updated list and supply to Coordinator.", "pred_act": ["selects", "confirms", "checks", "requests", "removes", "updates", "displays"], "pred_obj": ["Coordinator", "item", "list", "system", "supply", "confirmation", "inventory"], "tp": ["Coordinator", "item"]}
{"index": 12, "ucName": "\nManage Resources Locations\n", "uctext": " The main resources locations management page that coordinator will manage the resources locations that he have and may use it to store or supplying.\n", "steps": "\n 1 The coordinator press “Manage Resources Locations”\n 2 The coordinator use any function.\n 3 The coordinator will manage all resources locations function. \n", "dataset": "viper", "act": ["press", "use", "manage"], "obj": ["coordinator", "Manage Resources Locations", "function", "resources locations function"], "pred_steps": "Access main resources locations management page, view list of available resource locations, add new resource location with details such as name, address, and capacity, edit existing resource location details, delete resource location if no longer needed, assign resources to specific locations for storage, view current resource allocation status at each location, reallocate resources as necessary, generate reports on resource location usage and availability.", "pred_act": ["Access", "view", "add", "edit", "delete", "assign", "view", "reallocate", "generate"], "pred_obj": ["main resources locations management page", "list of available resource locations", "new resource location", "name", "address", "capacity", "existing resource location details", "resource location", "resources", "specific locations", "current resource allocation status", "each location", "reports", "resource location usage", "availability"], "tp": ["main resources locations management page", "list of available resource locations", "new resource location", "existing resource location details", "resource location", "resources", "specific locations", "resource location usage"]}
{"index": 13, "ucName": "\nAdd Location\n", "uctext": " Coordinator can add new resources locations and may start to use it in our supply and storing.\n", "steps": "\n 1 The coordinator press “Add Location”\n 2 The coordinator fills the location form.\n 3 The coordinator will save the location.\n", "dataset": "viper", "act": ["press", "fills", "will save"], "obj": ["coordinator", "Add Location", "location form", "location"], "pred_steps": "Coordinator accesses system, navigates to location management module, selects option to add new location, enters location details including name, address, and contact information, verifies entered details, saves new location, and location is added to the system and available for use in supply and storing.", "pred_act": ["accesses", "navigates", "selects", "enters", "verifies", "saves", "is added"], "pred_obj": ["Coordinator", "system", "location management module", "option", "new location", "location details", "name", "address", "contact information", "entered details", "supply", "storing"], "tp": ["saves", "Coordinator", "new location", "location details"]}
{"index": 14, "ucName": "\nView Locations\n", "uctext": " The coordinator can view all resources locations that he have, that use to supplying our customer and store our items.\n", "steps": "\n 1 The coordinator press “View Locations”.\n 2 The coordinator view list of Locations.\n", "dataset": "viper", "act": ["press", "view", "view"], "obj": ["coordinator", "View Locations", "list of Locations"], "pred_steps": "Coordinator initiates request to view locations, system retrieves all resource locations associated with coordinator, system displays resource locations on map or list format, coordinator reviews the displayed locations.", "pred_act": ["initiates", "retrieves", "displays", "reviews"], "pred_obj": ["Coordinator", "request", "locations", "system", "resource locations", "map", "list format", "displayed locations"], "tp": ["Coordinator", "locations", "resource locations", "displayed locations"]}
{"index": 15, "ucName": "\nView Location Details\n", "uctext": " Coordinator can show the details of resource location that he chooses.\n", "steps": "\n 1 The coordinator press “View Location Details”\n 2 The coordinator views the details of a location.\n", "dataset": "viper", "act": ["press", "views"], "obj": ["coordinator", "View Location Details", "details of a location"], "pred_steps": "Coordinator selects resource location, system retrieves location details, system displays location details to coordinator.", "pred_act": ["selects", "retrieves", "displays"], "pred_obj": ["Coordinator", "resource location", "system", "location details"], "tp": ["Coordinator", "resource location", "location details"]}
{"index": 16, "ucName": "\nEdit Location.\n", "uctext": " The Coordinator can edit a location that he wants.\n", "steps": "\n 1 The coordinator press “Edit Location”\n 2 The coordinator modifies the location information.\n", "dataset": "viper", "act": ["press", "modifies"], "obj": ["coordinator", "Edit Location", "location information"], "pred_steps": "Coordinator selects location to edit, system retrieves location details, system displays editable location fields, coordinator modifies desired fields, system validates input data, system saves updated location information, system confirms edit success to coordinator.", "pred_act": ["selects", "retrieves", "displays", "modifies", "validates", "saves", "confirms"], "pred_obj": ["Coordinator", "location", "system", "location details", "editable location fields", "desired fields", "input data", "updated location information", "edit success"], "tp": ["modifies", "Coordinator", "location", "location details", "editable location fields", "updated location information"]}
{"index": 17, "ucName": "\nDelete Location\n", "uctext": " The Coordinator can delete any location from his list.\n", "steps": "\n 1 The coordinator press “Delete Location”\n 2 The information about the location will show.\n 3 Press “Delete” to processing the deleting\n", "dataset": "viper", "act": ["press", "show", "press"], "obj": ["coordinator", "Delete Location", "information", "location", "Delete"], "pred_steps": "Coordinator navigates to location list, selects location to delete, confirms deletion, system removes selected location from list, updates display to reflect deletion.", "pred_act": ["navigates", "selects", "confirms", "removes", "updates"], "pred_obj": ["Coordinator", "location list", "location", "system", "display"], "tp": ["Coordinator", "location list", "location"]}
{"index": 18, "ucName": "\nEdit Profile\n", "uctext": " The supplier can edit his profile. The profile contains the name of the supplier, the address, contact person and e-mail… etc.\n", "steps": "\n 1 He clicks on the proper link to edit his profile.\n 2 Whether he make changes or not, when he clicks on the proper link to submit the profile values, the current values of the profile is saved and he is returned to the main menu.\n", "dataset": "viper", "act": ["clicks", "make", "clicks", "is saved", "is returned"], "obj": ["He", "link", "profile", "he", "changes", "link", "profile values", "current values of the profile", "main menu"], "pred_steps": "Supplier accesses profile editing feature, system displays current profile information including name, address, contact person, and email, supplier modifies desired fields, system validates input data, supplier confirms changes, system saves updated profile information.", "pred_act": ["accesses", "displays", "modifies", "validates", "confirms", "saves"], "pred_obj": ["Supplier", "profile editing feature", "system", "current profile information", "name", "address", "contact person", "email", "desired fields", "input data", "changes", "updated profile information"], "tp": ["saves", "profile editing feature", "current profile information", "changes", "updated profile information"]}
{"index": 19, "ucName": "\nView Supply Requests\n", "uctext": " To show a list of pending requests. \n", "steps": "\n  \n 1 He clicks on the proper link to view supply requests.\n 2 A list of pending requests is listed.\n", "dataset": "viper", "act": ["clicks", "views", "is listed"], "obj": ["He", "link", "supply requests", "list", "pending requests"], "pred_steps": "Initiate the system, authenticate user, retrieve pending supply requests from the database, filter and sort the requests based on predefined criteria, display the list of pending requests on the user interface, allow user to interact with the list (e.g., view details, sort, filter), and handle user actions accordingly.", "pred_act": ["Initiate", "authenticate", "retrieve", "filter", "sort", "display", "allow", "interact", "handle"], "pred_obj": ["system", "user", "supply requests", "database", "criteria", "user interface", "list", "details", "actions"], "tp": ["supply requests", "list"]}
{"index": 20, "ucName": "\nView Request Details\n", "uctext": " To view extended details of the chosen request.\n", "steps": "\n  \n 1 He clicks on the proper link to view supply requests.\n 2 A list of pending requests is listed.\n 3 He clicks on the proper link on a request to display its details.\n", "dataset": "viper", "act": ["clicks", "is listed", "clicks"], "obj": ["He", "link", "supply requests", "list", "pending requests", "request", "details"], "pred_steps": "User selects request, system retrieves request details, system displays request details including all extended information.", "pred_act": ["selects", "retrieves", "displays"], "pred_obj": ["User", "request", "system", "request details", "extended information"], "tp": ["request", "request details"]}
{"index": 21, "ucName": "\nSend Feedback on Request\n", "uctext": " The supplier states whether he can supply all the requested items or part of them and the time frame to deliver them. \n", "steps": "\n  \n 1 He input his feedback and submits.\n 2 A success (or error) message is displayed.\n", "dataset": "viper", "act": ["input", "submits", "is displayed"], "obj": ["He", "feedback", "submits", "success message", "error message"], "pred_steps": "Supplier accesses feedback interface, views requested items, selects ability to supply (all/part), specifies timeframe for delivery, submits feedback.", "pred_act": ["accesses", "views", "selects", "specifies", "submits"], "pred_obj": ["Supplier", "feedback interface", "requested items", "ability to supply", "timeframe for delivery", "feedback"], "tp": ["submits", "feedback interface", "feedback"]}
{"index": 22, "ucName": "\nEdit Profile\n", "uctext": " The customer can edit his profile. The profile contains the name of the customer, his address, contact person and e-mail… etc.\n", "steps": "\n  \n 1 He clicks on the proper link to edit his profile.\n 2 Whether he makes changes or not, when he clicks on the proper link to submit the profile values, the current values of the profile is saved and he is returned to the main menu.\n", "dataset": "viper", "act": ["clicks", "edit", "makes", "clicks", "submit", "is saved", "is returned"], "obj": ["He", "link", "profile", "he", "link", "profile values", "current values of the profile", "main menu"], "pred_steps": "The customer accesses the edit profile feature, views the current profile details including name, address, contact person, and email, selects the field to edit, modifies the desired information, saves the changes, and receives a confirmation that the profile has been successfully updated.", "pred_act": ["accesses", "views", "selects", "modifies", "saves", "receives"], "pred_obj": ["customer", "edit profile feature", "current profile details", "name", "address", "contact person", "email", "field", "desired information", "changes", "confirmation", "profile"], "tp": ["saves", "edit profile feature", "current profile details", "profile"]}
{"index": 23, "ucName": "\nAdd Request\n", "uctext": " Customer can add new request.\n", "steps": "\n 1 The Customer press “Add Request”\n 2 The Customer fills the request form.\n 3 The Customer will send the request to the Coordinator.\n", "dataset": "viper", "act": ["press", "fills", "will send"], "obj": ["Customer", "Add Request", "request form", "request", "Coordinator"], "pred_steps": "Customer selects 'Add Request' option, system displays request form, customer fills in request details including type, description, priority, and attachment if necessary, customer submits form, system validates input data, system saves request to database, system generates confirmation message with request ID, system displays confirmation message to customer.", "pred_act": ["selects", "displays", "fills", "submits", "validates", "saves", "generates", "displays"], "pred_obj": ["Customer", "Add Request option", "system", "request form", "request details", "type", "description", "priority", "attachment", "form", "input data", "request", "database", "confirmation message", "request ID"], "tp": ["fills", "Customer", "Add Request option", "request form", "request details", "form", "request", "request ID"]}
{"index": 24, "ucName": "\nView Requests\n", "uctext": " Customer can view all his pending requests that were sent to the Coordinator.\n", "steps": "\n 1 The Customer press “View Requests”\n 2 The Customer view list of requests.\n", "dataset": "viper", "act": ["press", "view"], "obj": ["Customer", "View Requests", "list of requests"], "pred_steps": "Functional steps: Customer navigates to request section, system retrieves customer's pending requests from database, system displays list of pending requests to customer.", "pred_act": ["navigates", "retrieves", "displays"], "pred_obj": ["Customer", "request section", "system", "customer's pending requests", "database", "list of pending requests"], "tp": ["Customer", "request section", "customer's pending requests", "list of pending requests"]}
{"index": 25, "ucName": "\nEdit Request\n", "uctext": " The Customer can edit  request and notify the Coordinator.\n", "steps": "\n 1 The Customer press “Edit Request”\n 2 The Customer modifies the request information.\n 3 A notification will be sent to the Coordinator. \n", "dataset": "viper", "act": ["press", "modifies", "will be sent"], "obj": ["Customer", "Edit Request", "request information", "notification", "Coordinator"], "pred_steps": "Customer selects request to edit, system displays editable fields, Customer modifies desired fields, Customer saves changes, system validates modified data, system updates request with new data, system notifies Coordinator of the edit.", "pred_act": ["selects", "displays", "modifies", "saves", "validates", "updates", "notifies"], "pred_obj": ["Customer", "request", "system", "editable fields", "desired fields", "changes", "modified data", "Coordinator", "edit"], "tp": ["modifies", "Customer", "request", "Coordinator", "edit"]}
{"index": 26, "ucName": "\nDelete Request\n", "uctext": " The Coordinator can delete  request and notify his supplier\n", "steps": "\n 1 The Customer press “Delete Request”\n 2 The information about the request will show.\n 3 Press “Delete” to processing the deleting\n 4 The Customer will send a notification to supplier\n", "dataset": "viper", "act": ["press", "show", "press", "send"], "obj": ["Customer", "Delete Request", "information", "request", "Delete", "notification", "supplier"], "pred_steps": "Coordinator selects request to delete, system confirms deletion request, Coordinator confirms deletion, system deletes request, system updates database, system notifies supplier of deletion.", "pred_act": ["selects", "confirms", "deletes", "updates", "notifies"], "pred_obj": ["Coordinator", "request", "system", "deletion", "database", "supplier"], "tp": ["request", "deletion", "supplier"]}
{"index": 27, "ucName": "\nManage Customers \n", "uctext": " The main customers management page that coordinator will manage all customers information\n", "steps": "\n 1 The coordinator press “Manage  Customers”\n 2 The coordinator use any function.\n 3 The coordinator will manage all customers function. \n", "dataset": "viper", "act": ["press", "use", "will manage"], "obj": ["coordinator", "Manage Customers", "function", "customers function"], "pred_steps": "Access main customers management page, authenticate coordinator credentials, display list of all customers, provide options to add new customer, edit existing customer details, delete customer, search for specific customer, filter customers based on criteria, sort customer list, view customer details, export customer data, save changes made to customer information, log all actions performed by coordinator.", "pred_act": ["access", "authenticate", "display", "provide", "add", "edit", "delete", "search", "filter", "sort", "view", "export", "save", "log"], "pred_obj": ["main customers management page", "coordinator credentials", "list of all customers", "options", "new customer", "existing customer details", "customer", "specific customer", "criteria", "customer list", "customer details", "customer data", "changes made to customer information", "actions performed by coordinator"], "tp": ["main customers management page", "list of all customers", "new customer", "customer", "customer list", "customer details", "customer data"]}
{"index": 28, "ucName": "\nAdd Customer\n", "uctext": " Coordinator can add new Customer.\n", "steps": "\n 1 The coordinator press “Add Customer”\n 2 The coordinator fills the new customer form.\n 3 The coordinator will send the customer to supplier \n", "dataset": "viper", "act": ["press", "fills", "send"], "obj": ["coordinator", "Add Customer", "new customer form", "customer", "supplier"], "pred_steps": "Coordinator accesses system, navigates to customer management module, clicks on add customer button, enters customer details including name, contact information, and address, verifies entered details, saves customer information, system confirms customer added successfully.", "pred_act": ["accesses", "navigates", "clicks", "enters", "verifies", "saves", "confirms"], "pred_obj": ["Coordinator", "system", "customer management module", "add customer button", "customer details", "name", "contact information", "address", "customer information", "system confirmation"], "tp": ["Coordinator", "customer management module", "add customer button", "customer details", "customer information"]}
{"index": 29, "ucName": "\nView Customers\n", "uctext": " coordinator can view a list of all customers.\n", "steps": "\n 1 The coordinator press “View Customers”\n 2 The coordinator view list of customers.\n", "dataset": "viper", "act": ["press view view"], "obj": ["coordinator", "View Customers", "list of customers"], "pred_steps": "Functional steps: Coordinator navigates to customer view, system retrieves list of all customers, system displays list of all customers to coordinator.", "pred_act": ["navigates", "retrieves", "displays"], "pred_obj": ["Coordinator", "customer view", "system", "list of all customers"], "tp": ["Coordinator", "customer view", "list of all customers"]}
{"index": 30, "ucName": "\nView Customer Details\n", "uctext": " Coordinator can show the details of any customer that he chose.\n", "steps": "\n 1 The coordinator press “View Customer Details”\n 2 The coordinator views the details of a customer.\n", "dataset": "viper", "act": ["press views views"], "obj": ["coordinator", "View Customer Details", "customer", "details of a customer"], "pred_steps": "Coordinator selects customer, system retrieves customer details, system displays customer details.", "pred_act": ["selects", "retrieves", "displays"], "pred_obj": ["Coordinator", "customer", "system", "customer details"], "tp": ["Coordinator", "customer", "customer details"]}
{"index": 31, "ucName": "\nEdit Customer\n", "uctext": " The Coordinator can edit  customer him.\n", "steps": "\n 1 The coordinator press “Edit Customer”\n 2 The coordinator modifies the request information.\n 3 The coordinator will send a notification to the customer.\n", "dataset": "viper", "act": ["press", "modifies", "will send"], "obj": ["coordinator", "Edit Customer", "request information", "notification", "customer"], "pred_steps": "Functional steps: Coordinator accesses customer data, selects customer to edit, modifies customer information, saves changes, and verifies modifications.", "pred_act": ["accesses", "selects", "modifies", "saves", "verifies"], "pred_obj": ["Coordinator", "customer data", "customer", "customer information", "changes", "modifications"], "tp": ["modifies", "Coordinator", "customer data", "customer", "customer information"]}
{"index": 32, "ucName": "\nDelete Customer\n", "uctext": " The coordinator can delete a certain customer\n", "steps": "\n 1 The coordinator press “Delete Customer”\n 2 The information about the customer will show.\n 3 Press “Delete” to processing the deleting\n 4 The coordinator will send a notification to the customer on option.\n", "dataset": "viper", "act": ["press", "show", "press", "send"], "obj": ["coordinator", "Delete Customer", "information", "customer", "Delete", "notification", "customer", "option"], "pred_steps": "Coordinator selects customer to delete, system validates customer selection, system confirms deletion with coordinator, upon confirmation, system removes customer data from database, system updates customer list to reflect deletion, system notifies coordinator of successful deletion.", "pred_act": ["selects", "validates", "confirms", "removes", "updates", "notifies"], "pred_obj": ["Coordinator", "customer", "system", "database", "customer list", "deletion", "successful deletion"], "tp": ["Coordinator", "customer", "customer list", "deletion", "successful deletion"]}
{"index": 33, "ucName": "\nManage Suppliers\n", "uctext": " The main suppliers management page that coordinator will manage all suppliers information\n", "steps": "\n 1 The coordinator press “Manage  Suppliers”\n 2 The coordinator use any function.\n 3 The coordinator will manage all suppliers function. \n", "dataset": "viper", "act": ["press", "use", "will manage"], "obj": ["coordinator", "Manage Suppliers", "function", "suppliers function"], "pred_steps": "Access main suppliers management page, view list of all suppliers, search for specific supplier by name or ID, add new supplier with relevant details, edit existing supplier information, delete supplier if no longer needed, sort suppliers based on criteria such as name or rating, filter suppliers by status or category, view supplier details including contact information and transaction history, generate reports on supplier performance or activity, and export supplier data to a CSV or Excel file.", "pred_act": ["Access", "view", "search", "add", "edit", "delete", "sort", "filter", "view", "generate", "export"], "pred_obj": ["main suppliers management page", "list of all suppliers", "specific supplier", "name", "ID", "new supplier", "relevant details", "existing supplier information", "supplier", "criteria", "name", "rating", "status", "category", "supplier details", "contact information", "transaction history", "reports", "supplier performance", "supplier activity", "supplier data", "CSV file", "Excel file"], "tp": ["main suppliers management page", "list of all suppliers", "specific supplier", "new supplier", "supplier", "supplier details", "supplier performance", "supplier activity", "supplier data"]}
{"index": 34, "ucName": "\nAdd Supplier\n", "uctext": " Coordinator can add new Supplier\n", "steps": "\n 1 The coordinator press “Add Supplier”\n 2 The coordinator fills the new Supplier form.\n 3 The coordinator will send the Supplier to supplier \n", "dataset": "viper", "act": ["press", "fills", "will send"], "obj": ["coordinator", "Add Supplier", "new Supplier form", "Supplier", "supplier"], "pred_steps": "Coordinator accesses system, navigates to supplier management section, clicks on 'Add Supplier' button, enters supplier details such as name, contact information, and address, verifies the entered details, clicks on 'Save' button to add the new supplier to the system.", "pred_act": ["accesses", "navigates", "clicks", "enters", "verifies", "clicks"], "pred_obj": ["Coordinator", "system", "supplier management section", "Add Supplier' button", "supplier details", "name", "contact information", "address", "Save' button", "new supplier"], "tp": ["Coordinator", "supplier management section", "Add Supplier' button", "supplier details", "new supplier"]}
{"index": 35, "ucName": "\nView Suppliers\n", "uctext": " coordinator can view a list of all Suppliers.\n", "steps": "\n 1 The coordinator press “View Suppliers”\n 2 The coordinator view list of Suppliers.\n", "dataset": "viper", "act": ["press", "view"], "obj": ["coordinator", "View Suppliers", "list of Suppliers"], "pred_steps": "Coordinator initiates request to view suppliers, system retrieves list of all suppliers from database, system displays list of suppliers to coordinator.", "pred_act": ["initiates", "retrieves", "displays"], "pred_obj": ["Coordinator", "request", "suppliers", "system", "list", "database"], "tp": ["Coordinator", "suppliers", "list"]}
{"index": 36, "ucName": "\nView Supplier Details\n", "uctext": " Coordinator can show the details of any Supplier that he chose.\n", "steps": "\n 1 The coordinator press “View Supplier Details”\n 2 The coordinator views the details of a Supplier.\n", "dataset": "viper", "act": ["press", "views"], "obj": ["coordinator", "View Supplier Details", "Supplier", "details"], "pred_steps": "Coordinator selects supplier, system retrieves supplier details, system displays supplier details.", "pred_act": ["selects", "retrieves", "displays"], "pred_obj": ["Coordinator", "supplier", "system", "supplier details"], "tp": ["Coordinator", "supplier", "supplier details"]}
{"index": 37, "ucName": "\nEdit Supplier\n", "uctext": " The Coordinator can edit  Supplier and notify him (on option.)\n", "steps": "\n 1 The coordinator press “Edit Supplier”\n 2 The coordinator modifies the Supplier information.\n 3 The coordinator will send a notification to the Supplier.\n", "dataset": "viper", "act": ["press", "modifies", "will send"], "obj": ["coordinator", "Edit Supplier", "Supplier information", "notification", "Supplier"], "pred_steps": "Coordinator accesses supplier edit interface, retrieves supplier data, modifies necessary supplier details, saves changes, optionally notifies supplier of updates.", "pred_act": ["accesses", "retrieves", "modifies", "saves", "notifies"], "pred_obj": ["Coordinator", "supplier edit interface", "supplier data", "supplier details", "changes", "supplier", "updates"], "tp": ["modifies", "Coordinator", "supplier edit interface", "supplier data", "supplier details", "supplier"]}
{"index": 38, "ucName": "\nDelete Supplier\n", "uctext": " The coordinator can delete a certain Supplier\n", "steps": "\n 1 The coordinator press “Delete Supplier”\n 2 The information about the customer will show.\n 3 Press “Delete” to processing the deleting\n 4 The coordinator will send a notification to the Supplier on option.\n", "dataset": "viper", "act": ["press", "show", "press", "send"], "obj": ["coordinator", "Delete Supplier", "information", "customer", "Delete", "coordinator", "notification", "Supplier", "option"], "pred_steps": "Coordinator selects supplier to delete, system confirms selection, system requests confirmation from coordinator, coordinator confirms deletion, system deletes supplier from database, system updates supplier list display, system notifies coordinator of successful deletion.", "pred_act": ["selects", "confirms", "requests", "confirms", "deletes", "updates", "notifies"], "pred_obj": ["Coordinator", "supplier", "system", "selection", "deletion", "database", "supplier list display", "notification of successful deletion"], "tp": ["Coordinator", "supplier", "deletion", "notification of successful deletion"]}
{"index": 0, "ucName": " View Inventory\n", "uctext": " The system should provide a categorized view of the entire inventory to the Cons truction Junction s taff.\nStarting at the department level, users can navigate  into the inventory item categories and subcategories, all the way down to an individual inventory item.  ", "steps": "\n1. User accesses the main inventory screen\n2. The screen displays a ll inventory departments  \n3. User clicks a department  cell \n4. The screen displays all inventory categories for the selected department\n5. User clicks a category cell  that contains sub -categories  \n6. The screen displays all inventory sub -categories for the selected category\n7. User clicks a sub-category cell (leaf category)\n7.1. For a Unique Item category:  The screen displays a lis t of all inventory items for that selected category. User clicks a n item in the items list. The screen displays the details for the item\n7.2. For a Stock Item category:  The screen displays the details for th at Stock Item  category\n7.3. For a Under $5 category:  Nothing happens – The category cell is not clickable.\n", "dataset": "2009 - inventory 2.0", "act": ["accesses", "displays", "clicks", "displays", "clicks", "displays", "clicks", "displays", "clicks", "displays", "displays", "displays", "is not clickable"], "obj": ["User", "main inventory screen", "screen", "inventory departments", "department cell", "inventory categories", "category cell", "sub-categories", "inventory sub-categories", "sub-category cell (leaf category", "Unique Item category", "inventory items", "item", "Stock Item category", "Under $5 category", "category cell"], "pred_steps": "Display categorized inventory view starting from department level, allow users to navigate through item categories and subcategories, down to individual inventory items.", "pred_act": ["Display", "allow", "navigate"], "pred_obj": ["categorized inventory view", "department level", "users", "item categories", "subcategories", "individual inventory items"], "tp": ["Display", "categorized inventory view", "department level", "item categories", "subcategories", "individual inventory items"]}
{"index": 1, "ucName": " Manage Departments and Add Department\n", "uctext": " The system should allow inventory administrators to customize the inventory structure by defining the invent ory departments (not to be con fused actual retail floor departments known later in this document as stocking locations).  ", "steps": "\n1.1. User accesses the main inventory screen  \n1.2. System displays the Add Department button\n1.3. User clicks the Add Department button\n1.4. User enters the Department data \n1.5. System validates the Department data  \n1.6. System adds the new Department to t he inventory  \n1.7. User is taken back to the main inventory screen  \n", "dataset": "2009 - inventory 2.0", "act": ["accesses", "displays", "clicks", "enters", "validates", "adds", "is taken"], "obj": ["User", "main inventory screen", "System", "Add Department button", "Department data", "inventory"], "pred_steps": "Functional steps: Access system as inventory administrator, navigate to department management section, view list of current inventory departments, add new department by entering department name and description, save new department, edit existing department details if necessary, delete department if no longer needed, confirm changes, and update inventory structure accordingly.", "pred_act": ["Access", "navigate", "view", "add", "save", "edit", "delete", "confirm", "update"], "pred_obj": ["system", "inventory administrator", "department management section", "list of current inventory departments", "new department", "department name", "description", "existing department details", "changes", "inventory structure"], "tp": ["add", "system", "new department", "department name", "existing department details", "inventory structure"]}
{"index": 2, "ucName": " Manage Departments and Edit Department\n", "uctext": " The system should allow inventory administrators to customize the inventory structure by defining the invent ory departments (not to be con fused actual retail floor departments known later in this document as stocking locations).  ", "steps": "\n2.1. User navigates to a Department  (see View Inventory ) \n2.2. System displays the Edit Department button  \n2.3. User clicks the Edit Department button  \n2.4. System displays the Department data  \n2.5. User edits Department data  \n2.6. System validates the Department data  \n2.7. System updates the Department  information  \n2.8. User is taken b ack to the Department screen  \n", "dataset": "2009 - inventory 2.0", "act": ["navigates", "displays", "clicks", "displays", "edits", "validates", "updates", "is taken"], "obj": ["User", "Department", "Edit Department button", "Department data", "Department information", "Department screen"], "pred_steps": "Functional steps: Login as inventory administrator, access department management module, view list of current inventory departments, add new department, enter department name and description, save new department, edit existing department details, update department name or description, delete department if necessary, confirm deletion, save changes, and exit department management module.", "pred_act": ["Login", "access", "view", "add", "enter", "save", "edit", "update", "delete", "confirm", "save", "exit"], "pred_obj": ["Login", "inventory administrator", "department management module", "list of current inventory departments", "new department", "department name", "description", "existing department details", "department", "deletion", "changes"], "tp": ["edit", "update", "department management module", "new department", "department name", "existing department details", "department"]}
{"index": 3, "ucName": " Manage Departments and Delete Department\n", "uctext": " The system should allow inventory administrators to customize the inventory structure by defining the invent ory departments (not to be con fused actual retail floor departments known later in this document as stocking locations).  ", "steps": "\n3.1. User navigates to a Department (see View Inventory ) \n3.2. System displays the Edit Department button  \n3.3. User clicks the Edit Department button  \n3.4. System displays the Department data  \n3.5. User clicks the Delete Department button  \n3.6. System validates the Department deletion  \n3.7. System removes  the Depart ment  from the inventory  \n3.8. User is taken b ack to the main inventory screen\n", "dataset": "2009 - inventory 2.0", "act": ["navigates", "displays", "clicks", "displays", "clicks", "validates", "removes", "is taken"], "obj": ["User", "Department", "View Inventory", "Edit Department button", "Department data", "Delete Department button", "inventory", "main inventory screen"], "pred_steps": "Functional steps: Login as inventory administrator, access department management module, view list of existing inventory departments, add new department, edit department details, select department to delete, confirm deletion, update inventory structure accordingly.", "pred_act": ["Login", "access", "view", "add", "edit", "select", "confirm", "update"], "pred_obj": ["Login", "inventory administrator", "department management module", "list of existing inventory departments", "new department", "department details", "department", "deletion", "inventory structure"], "tp": ["confirm", "department management module", "new department", "department details", "department", "deletion", "inventory structure"]}
{"index": 4, "ucName": " Manage Categories and Add Category\n", "uctext": " The system should allow inventory administrators to customize the inventory structure by defining the inventory departments and categories.  ", "steps": "\n1.1. User navigates to a Department or Category (see View Inventory ) \n1.2. System displays the Add Category buttons: Unique Item; Stock Item.\n1.3. User clicks the desired Add Category button  \n1.4. System displays the appropriate screen for the Category type: Unique Item; Stock Item.\n1.5. User enters Catego ry data  \n1.6. System validates the Category data  \n1.7. System adds the new Category to the inventory  \n1.8. User is taken b ack to the parent Department or Category of the added Category  \n", "dataset": "2009 - inventory 2.0", "act": ["navigates", "displays", "clicks", "displays", "enters", "validates", "adds", "is taken"], "obj": ["User", "Department", "Category", "View Inventory", "System", "Add Category buttons", "Unique Item", "Stock Item", "Category type", "Category data", "inventory", "parent Department"], "pred_steps": "Functional steps: Display inventory structure interface, allow inventory administrators to view current departments and categories, provide option to add new category, prompt for category name and assign to respective department, validate input, save new category to inventory structure, update interface to reflect changes, allow editing and deletion of existing categories, and ensure changes are saved and reflected accurately in the system.", "pred_act": ["Display", "allow", "view", "provide", "prompt", "assign", "validate", "save", "update", "reflect", "allow", "edit", "delete", "ensure"], "pred_obj": ["inventory structure interface", "inventory administrators", "departments", "categories", "option", "category", "category name", "respective department", "input", "new category", "system", "editing", "deletion", "existing categories", "changes"], "tp": ["Display", "validate", "inventory structure interface", "inventory administrators", "departments", "categories", "category", "category name", "respective department", "new category", "system", "existing categories"]}
{"index": 5, "ucName": " Manage Categories and Edit Category\n", "uctext": " The system should allow inventory administrators to customize the inventory structure by defining the inventory departments and categories.  ", "steps": "\n2.1. User navigates to a Category (see View  Inventory ) \n2.2. System displays the Edit Category button  \n2.3. User clicks the Edit Category button  \n2.4. System displays the appropriate screen for the Category type: Unique Item; Stock Item\n2.5. User edits Category data  \n2.6. System validates the Category data  \n2.7. System updates the Category  information  \n2.8. User is taken b ack to the Category screen  \n", "dataset": "2009 - inventory 2.0", "act": ["navigates", "displays", "clicks", "displays", "edits", "validates", "updates", "is taken"], "obj": ["User", "Category", "View Inventory", "System", "Edit Category button", "appropriate screen", "Category type", "Unique Item", "Stock Item", "Category data", "Category information", "Category screen"], "pred_steps": "ManageCategoriesAndEditCategory: InventoryAdmin logs in, navigates to category management section, views existing departments and categories, adds new department or category by entering name and description, selects department or category to edit, modifies name or description, saves changes, deletes unwanted department or category, confirms deletion, and logs out.", "pred_act": ["logs in", "navigates", "views", "adds", "enters", "selects", "modifies", "saves", "deletes", "confirms", "logs out"], "pred_obj": ["ManageCategoriesAndEditCategory", "InventoryAdmin", "category management section", "departments", "categories", "department", "category", "name", "description", "changes", "unwanted department", "deletion"], "tp": ["navigates", "ManageCategoriesAndEditCategory", "category management section", "categories", "category"]}
{"index": 6, "ucName": " Manage Categories and Delete Category\n", "uctext": " The system should allow inventory administrators to customize the inventory structure by defining the inventory departments and categories.  ", "steps": "\n3.1. User navigates to a Category (see View Inventory ) \n3.2. System displays the Edit Category button  \n3.3. User clicks the Edit Category button  \n3.4. System displays the appropriate screen for the Category type: Unique Item; Stock Item\n3.5. User clicks the Delete Category button  \n3.6. System validates the Category deletion  \n3.7. System removes the Category from the inventory  \n3.8. User is taken back to the parent Department or Category of  the deleted Category  \n", "dataset": "2009 - inventory 2.0", "act": ["navigates", "displays", "clicks", "displays", "clicks", "validates", "removes", "is taken"], "obj": ["User", "Category", "View Inventory", "System", "Edit Category button", "appropriate screen", "Category type", "Unique Item", "Stock Item", "Delete Category button", "Category deletion", "inventory", "parent Department", "Category of the deleted Category"], "pred_steps": "Functional steps: Open inventory management system, navigate to categories section, view existing categories and departments, add new category, assign category to respective department, edit category details, confirm deletion of selected category, remove category from system.", "pred_act": ["Open", "navigate", "view", "add", "assign", "edit", "confirm", "remove"], "pred_obj": ["inventory management system", "categories section", "existing categories", "departments", "new category", "respective department", "category details", "selected category", "category", "system"], "tp": ["confirm", "remove", "inventory management system", "categories section", "existing categories", "departments", "new category", "category details", "selected category", "category", "system"]}
{"index": 7, "ucName": " Manage Categories and Move Categories\n", "uctext": " The system should allow inventory administrators to customize the inventory structure by defining the inventory departments and categories.  ", "steps": "\n4.1. User navigates to a Department or Category (see View Inventory ) \n4.2. System displays the Move Categories button  \n4.3. User clicks the Move Categories button  \n4.4. System displays the Move Categories screen\n4.5. User selects Categories to move  \n4.6. User selects target location on categorized inventory for the moved Categories  \n4.6.1.  User may select an existing Department or Category  \n4.6.2.  User may choose to create a new Category to hold the moved Categories.\nIn this case, u ser selects the parent Department or Category of the  new Category to be created\nUser enters the new Category data\n4.7. User selects the type of move to be performed  \n4.7.1.  Move selected categories as -is and make them children of the target Department or Category\n4.7.2.  Merge  the contents (items) of the selected categories and add them to the target Department or Category\n4.8. System validates the entered data  \n4.9. System moves the selected Categories  \n4.10.  User is taken b ack to the parent Department or Category of the moved Categories  \n", "dataset": "2009 - inventory 2.0", "act": ["navigates", "displays", "clicks", "displays", "selects", "selects", "may select", "may choose", "enters", "selects", "validates", "moves", "is taken"], "obj": ["User", "Department", "Category", "View Inventory", "Move Categories button", "Move Categories screen", "Categories", "target location", "categorized inventory", "existing Department", "existing Category", "new Category", "parent Department", "new Category data", "type of move", "selected categories", "target Department", "items", "entered data", "moved Categories"], "pred_steps": "Functional steps: Login as inventory administrator, access inventory management module, view existing inventory departments and categories, add new department or category, edit department or category details, delete department or category, move category to different department, save changes, and log out.", "pred_act": ["Login", "access", "view", "add", "edit", "delete", "move", "save", "log out"], "pred_obj": ["Login", "inventory administrator", "inventory management module", "existing inventory departments", "categories", "new department", "new category", "department details", "category details", "department", "category", "changes", "log out"], "tp": ["move", "existing inventory departments", "categories", "new department", "new category", "department details", "category details", "department", "category"]}
{"index": 8, "ucName": " Manage Attributes and Details and View Item Attributes\n", "uctext": " The system should allow inventory administrators to customize the attributes and det ails available for each inventory item. Attributes can be defined for each department, and details can be defined for each department and/or category. ", "steps": "\n1.1. User accesses the main inventory screen  \n1.2. System displays the Edit Attributes button  \n1.3. User clicks the Edit Attributes button  \n1.4. System displays the Edit Attributes screen which displays all existing item attributes and their attribute x department assignments\n1.5. Optionally, user filters view by attribute status (active, inactive, all)  \n1.6. User clicks the Done button  \n1.7. User is taken back to the main inventory screen  \n", "dataset": "2009 - inventory 2.0", "act": ["accesses", "displays", "clicks", "displays", "filters", "clicks", "is taken back"], "obj": ["User", "main inventory screen", "System", "Edit Attributes button", "Edit Attributes screen", "item attributes", "attribute x department assignments", "attribute status", "active", "inactive", "all", "Done button"], "pred_steps": "Functional steps: Login as inventory administrator, navigate to attribute management section, select department, define attributes for selected department, navigate to details management section, select department and/or category, define details for selected department and/or category, save attribute and detail settings, view inventory item, retrieve and display attributes and details based on department and/or category settings.", "pred_act": ["Login", "navigate", "select", "define", "save", "view", "retrieve", "display"], "pred_obj": ["inventory administrator", "attribute management section", "department", "attributes", "details management section", "category", "details", "attribute", "detail settings", "inventory item", "attributes", "details", "department", "category settings"], "tp": ["display", "attribute management section", "attributes", "attribute", "attributes"]}
{"index": 9, "ucName": " Manage Attributes and Details and View Item Details\n", "uctext": " The system should allow inventory administrators to customize the attributes and det ails available for each inventory item. Attributes can be defined for each department, and details can be defined for each department and/or category. ", "steps": "\n2.1. User accesses the main inventory screen  \n2.2. System displays the Edit Details button  \n2.3. User clicks the Edit Details button\n2.4. System displays the Edit Details screen which displays all existing item details and their detail x department and category assignments\n2.5. Optionally, user filters view by detail status (active, inactive, all)  \n2.6. User clicks the Done button  \n2.7. User is taken back to the main inventory screen  \n", "dataset": "2009 - inventory 2.0", "act": ["accesses", "displays", "clicks", "displays", "filters", "clicks", "is taken back"], "obj": ["User", "main inventory screen", "System", "Edit Details button", "Edit Details screen", "item details", "detail x department", "category assignments", "detail status", "Done button"], "pred_steps": "Functional steps: Login as inventory administrator, navigate to inventory management section, select item to manage, access attribute and detail customization interface, view current attributes and details, add new attributes and details, modify existing attributes and details, delete unnecessary attributes and details, save changes, view updated item details with customized attributes and details.", "pred_act": ["Login", "navigate", "select", "access", "view", "add", "modify", "delete", "save", "view"], "pred_obj": ["inventory administrator", "inventory management section", "item", "attribute", "detail", "customization interface", "current attributes", "current details", "new attributes", "new details", "existing attributes", "existing details", "unnecessary attributes", "unnecessary details", "changes", "updated item details", "customized attributes", "customized details"], "tp": ["item", "detail", "current details", "new details", "updated item details"]}
{"index": 10, "ucName": " Manage Attributes and Details and Edit Item Attributes\n", "uctext": " The system should allow inventory administrators to customize the attributes and det ails available for each inventory item. Attributes can be defined for each department, and details can be defined for each department and/or category. ", "steps": "\n3.1. User accesses the main inventory screen  \n3.2. System displays the Edit Attributes button  \n3.3. User clicks the Edit Attributes button  \n3.4. System displays the Edit Attributes screen which displays all existing item attributes and their attribute x department assignments\n3.5. Optionally, user filters view by attribute status (active, inactive, all)  \n3.6. User edits attributes  \n3.6.1.  User changes attribute x department assignments  \n3.6.2.  User changes attribute data  \n3.6.3.  User changes attribute active x inactive status  \n3.6.4.  User creates new attribute  \n3.6.5.  System validates the attribute data  \n3.6.6.  System updates the Item Attribute information  \n3.7. User clicks the Done button  \n3.8. User is taken back to the main inventory screen\n", "dataset": "2009 - inventory 2.0", "act": ["accesses", "displays", "clicks", "displays", "filters", "edits", "changes", "changes", "changes", "creates", "validates", "updates", "clicks", "is taken"], "obj": ["User", "main inventory screen", "System", "Edit Attributes button", "Edit Attributes screen", "item attributes", "attribute x department assignments", "attribute status", "active", "inactive", "all", "attributes", "attribute x department", "attribute data", "attribute active x inactive status", "new attribute", "Item Attribute information", "Done button"], "pred_steps": "Functional steps: Inventory administrator accesses system, navigates to inventory management, selects item to manage attributes and details, views current attributes and details, adds new attributes and details as required, edits existing attributes and details, defines attributes specific to departments, defines details specific to departments and/or categories, saves changes, and verifies updated attributes and details are correctly displayed.", "pred_act": ["accesses", "navigates", "selects", "views", "adds", "edits", "defines", "saves", "verifies"], "pred_obj": ["Inventory administrator", "system", "inventory management", "item", "attributes", "details", "departments", "categories", "changes"], "tp": ["accesses", "edits", "verifies", "system", "item", "attributes"]}
{"index": 11, "ucName": " Manage Attributes and Details and Edit Item Details\n", "uctext": " The system should allow inventory administrators to customize the attributes and det ails available for each inventory item. Attributes can be defined for each department, and details can be defined for each department and/or category. ", "steps": "\n4.1. User accesses the main inventory screen  \n4.2. System displays the Edit Details button  \n4.3. User clicks the Edit Details button  \n4.4. System displays the Edit Details screen which displays al l existing item details and their detail x department and category assignments\n4.5. Optionally, user filters view by detail status (active, inactive, all)  \n4.6. User edits details  \n4.6.1.  User changes detail x department or category assignments  \n4.6.2.  User changes detail data  \n4.6.3.  User changes detail active x inactive status  \n4.6.4.  User creates new detail  \n4.6.5.  System validates the detail data  \n4.6.6.  System updates the Item detail information  \n4.7. User clicks the Done button  \n4.8. User is taken back to the main inventory screen\n", "dataset": "2009 - inventory 2.0", "act": ["accesses", "displays", "clicks", "displays", "filters", "edits", "changes", "changes", "changes", "creates", "validates", "updates", "clicks", "is taken back"], "obj": ["User", "main inventory screen", "System", "Edit Details button", "Edit Details screen", "existing item details", "detail x department", "category assignments", "detail status", "active", "inactive", "all", "detail data", "detail active x inactive status", "new detail", "Item detail information", "Done button"], "pred_steps": "Functional steps: Access system as inventory administrator, navigate to inventory management, select item to manage, view current attributes and details, add or remove attributes as per department requirements, define or modify details for each department and/or category, save changes, and verify updated attributes and details are accurately reflected in the system.", "pred_act": ["Access", "navigate", "select", "view", "add", "remove", "define", "modify", "save", "verify"], "pred_obj": ["system", "inventory administrator", "inventory management", "item", "attributes", "details", "department requirements", "department", "category", "changes", "updated attributes"], "tp": ["modify", "verify", "system", "item", "details"]}
{"index": 12, "ucName": " Add Item  to Inventory\n", "uctext": " Items are typically added to the inventory as part of the donation processes. This is called adding an item in donation processing. Alternatively, items can be added during routine inventory maintena nce. This is called adding an item in inventory management mode.  ", "steps": "  \n1. User accesses the main inventory screen  \n5. The screen displays all inventory departments in matrix format  (see View Inventory ) \n2. User drills down to the appropriate category for the i tem \n2.1. If in donation processing mode, the item entry screen is presented automatically  \n2.2. If in inventory management mode, the list of existing inventory items in that category is displayed  \n2.2.1.  User clicks the Add Item button  \n3. The appropriate item entry  screen is presented\n4. User fills in item information  \n5. User confirms the addition of the new item  \n6. Inventory is updated  \n7. System gives the option of printing an item tag  \n8. User prints  item tag (s)s for unique or stock item(s)  \n9. User attaches tag (s) to the item (s)\n", "dataset": "2009 - inventory 2.0", "act": ["accesses", "displays", "drills down", "is presented", "is displayed", "clicks", "is presented", "fills", "confirms", "is updated", "gives", "prints", "attaches"], "obj": ["User", "main inventory screen", "screen", "inventory departments", "matrix format", "category", "donation processing mode", "item entry screen", "inventory management mode", "list of existing inventory items", "Add Item button", "appropriate item entry screen", "item information", "new item", "Inventory", "option", "item tag", "tag(s", "item(s"], "pred_steps": "Functional steps to implement the use case \"Add Item to Inventory\": Initiate item addition process, determine if addition is part of donation processing or inventory management mode, gather item details including name, description, quantity, and condition, validate item details, check for duplicate items in inventory, assign unique identifier to item, record item details in inventory database, update inventory count, and generate confirmation of successful item addition.", "pred_act": ["Initiate", "determine", "gather", "validate", "check", "assign", "record", "update", "generate"], "pred_obj": ["Functional steps", "use case", "Add Item to Inventory", "item addition process", "donation processing", "inventory management mode", "item details", "name", "description", "quantity", "condition", "duplicate items", "unique identifier", "inventory database", "inventory count", "confirmation of successful item addition"], "tp": ["update", "Add Item to Inventory", "item addition process", "donation processing", "inventory management mode", "item details", "inventory database", "inventory count"]}
{"index": 13, "ucName": " Manage Inventory Items and Modify Inventory Item\n", "uctext": " The system should allow various management actions to be performed on items existing in the inventory. These include modifying, deleting and splitting an item, and viewing the item‟s details and item history. These actions are only available for Unique and Stock items.  ", "steps": "\n1.1. User accesses the main inventory  screen\n1.2. The screen displays all inventory departments in matrix format  with option to select and/or edit items to move them to a new department/category\n1.3. User drills down to the desired existing inventory item (see View Inventory )\n1.4. The item detail screen is presented  \n1.5. User modifies item information  \n1.6. The system validates item information  \n1.7. Item information is updated in the inventory  \n1.8. System gives the option of re -printing then item tag  \n1.9. User optionally re -prints the item tag and  attaches it to the item\n", "dataset": "2009 - inventory 2.0", "act": ["accesses", "displays", "drills down", "is presented", "modifies", "validates", "is updated", "gives", "re-prints", "attaches"], "obj": ["User", "main inventory screen", "screen", "inventory departments", "matrix format", "items", "new department/category", "desired existing inventory item", "item detail screen", "item information", "system", "inventory", "item tag"], "pred_steps": "Functional steps: Verify user permission for Unique and Stock items, display list of inventory items, allow user to select an item, provide options to modify, delete, split, view details, and view item history, handle user selection, update inventory accordingly, and maintain item history log.", "pred_act": ["Verify", "display", "allow", "select", "provide", "modify", "delete", "split", "view", "handle", "update", "maintain"], "pred_obj": ["Functional steps", "user permission", "Unique items", "Stock items", "list of inventory items", "item", "options", "modify", "delete", "split", "view details", "view item history", "user selection", "inventory", "item history log"], "tp": ["display", "modify", "update", "Unique items", "Stock items", "list of inventory items", "item", "inventory", "item history log"]}
{"index": 14, "ucName": " Manage Inventory Items and Adjust Item Quantity\n", "uctext": " The system should allow various management actions to be performed on items existing in the inventory. These include modifying, deleting and splitting an item, and viewing the item‟s details and item history. These actions are only available for Unique and Stock items.  ", "steps": "\n2.1. User accesses the main inventory screen  \n2.2. The screen displays all inventory departments in matrix format  \n2.3. User drills down to the desired existing inventory item (see View Inve ntory ) \n2.4. The item detail screen is presented  \n2.5. User c hanges the item quantity  \n2.6. The system displays a confirmation screen where a  reason for the adjustment must  be specified by the user\n2.7. The sy stem validates the item change  \n2.8. Item information is updated in the inv entory  \n", "dataset": "2009 - inventory 2.0", "act": ["accesses", "displays", "drills down", "is presented", "changes", "displays", "validates", "is updated"], "obj": ["User", "main inventory screen", "screen", "inventory departments", "matrix format", "desired existing inventory item", "item detail screen", "item quantity", "system", "confirmation screen", "reason for the adjustment", "item change", "Item information", "inventory"], "pred_steps": "Functional steps: Verify user permission to manage inventory items, display list of Unique and Stock items, allow user to select an item, provide options to modify, delete, split item, view item details, and view item history, handle user selection, update inventory accordingly, and log all actions in item history.", "pred_act": ["Verify", "display", "allow", "select", "provide", "modify", "delete", "split", "view", "handle", "update", "log"], "pred_obj": ["Functional steps", "user permission", "inventory items", "list", "Unique items", "Stock items", "item", "options", "modify", "delete", "split item", "item details", "item history", "user selection", "inventory", "actions"], "tp": ["display", "modify", "update", "inventory items", "Stock items", "item", "item details", "item history", "inventory"]}
{"index": 15, "ucName": " Manage Inventory Items and Split Inventory Item\n", "uctext": " The system should allow various management actions to be performed on items existing in the inventory. These include modifying, deleting and splitting an item, and viewing the item‟s details and item history. These actions are only available for Unique and Stock items.  ", "steps": "\n3.1. User accesses the main inventory screen  \n3.2. The screen displays all inventory departments in matrix format  \n3.3. User drills down to the desired existing inventory item (see View Inventory ) \n3.4. The item d etail screen is presented  \n3.5. User clicks the Split Item button  \n3.6. The system displays the Item Split screen  \n3.7. User builds  the list of items that the original item will be split into  \n3.7.1.  User can clone the original item to add new item(s) to the list that have similar attributes as the original item\n3.7.2.  User can add new items to the list by selecting Unique and Stock categories in the same way as adding a new item to the inventory (see Add Item to Inventory )\n3.8. Once the list is complete, user  confirms the split  \n3.9. The system validates the split  \n3.10.  Item information is updated in the inventory  \n3.10.1.  The original (split) item is update d in the inventory  \n3.10.2.  Any new i tems that were added to the split list are added to the inventory  maintaining parental history\n", "dataset": "2009 - inventory 2.0", "act": ["accesses", "displays", "drills down", "is presented", "clicks", "displays", "builds", "can clone", "can add", "confirms", "validates", "is updated", "is updated", "are added"], "obj": ["User", "main inventory screen", "screen", "inventory departments", "matrix format", "desired existing inventory item", "item detail screen", "Split Item button", "Item Split screen", "list of items", "original item", "item", "Unique category", "Stock category", "new item", "inventory", "system", "split", "Item information", "original (split) item", "new items", "inventory", "parental history"], "pred_steps": "Functional steps: Authenticate user, retrieve and display inventory items, filter items by type (Unique and Stock), allow user to select item, provide options to modify, delete, split item, view item details, and view item history, handle user selection, validate input for modifications and splits, update inventory database accordingly, log all actions in item history, and notify user of successful completion or error.", "pred_act": ["Authenticate", "retrieve", "display", "filter", "allow", "provide", "handle", "validate", "update", "log", "notify"], "pred_obj": ["Authenticate user", "retrieve", "display inventory items", "filter items", "type(Unique", "Stock", "select item", "options", "modify", "delete", "split item", "view item details", "view item history", "handle user selection", "validate input", "modifications", "splits", "update inventory database", "log actions", "item history", "notify user", "successful completion", "error"], "tp": ["Authenticate", "display", "validate", "update", "display inventory items", "filter items", "Stock", "select item", "split item", "view item details", "splits", "update inventory database", "item history"]}
{"index": 16, "ucName": " Manage Inventory Items and View Inventory Item History\n", "uctext": " The system should allow various management actions to be performed on items existing in the inventory. These include modifying, deleting and splitting an item, and viewing the item‟s details and item history. These actions are only available for Unique and Stock items.  ", "steps": "\n4.1. User accesses the main inventory screen  \n4.2. The screen displays all inventory departments in matrix format  \n4.3. User drills down to the desired existing inventory item (see View Inventory ) \n4.4. The item det ail screen is presented  \n4.5. User clicks the Item History button  \n4.6. The system displays the Item History screen containing current and historical information about the inventory item\n", "dataset": "2009 - inventory 2.0", "act": ["accesses", "displays", "drills down", "is presented", "clicks", "displays"], "obj": ["User", "main inventory screen", "screen", "inventory departments", "matrix format", "desired existing inventory item", "item detail screen", "Item History button", "system", "Item History screen", "current", "historical information about the inventory item"], "pred_steps": "Authenticate user, validate item type as Unique or Stock, display list of inventory items, allow user to select item, provide options to modify, delete, split item, view item details, view item history, execute selected action, save changes if applicable, update inventory database, and display confirmation message.", "pred_act": ["Authenticate", "validate", "display", "allow", "provide", "select", "modify", "delete", "split", "view", "execute", "save", "update", "display"], "pred_obj": ["user", "item", "type", "Unique", "Stock", "inventory", "list", "options", "modify", "delete", "split", "item details", "item history", "action", "changes", "inventory database", "confirmation message"], "tp": ["display", "display", "item", "inventory", "item details", "item history", "inventory database"]}
{"index": 17, "ucName": " Suggest Item Price\n", "uctext": " The system should assist in the task of pricing a new inventory item by making  pricing suggestions to the user when adding to or modifying an  item in the inventory. The suggested price s should be calculated based on the original and sale prices of similar items that currently exist or existed in the inventory in the past. ", "steps": "  \n1. User accesses the inventory entry screen (see Add Item to Inventory , Manage Inventory Items )\n2. System shows  price recommendations based on current item data and de fault price suggestion configuration options\n3. User modifies item data \n4. System makes new price suggestions  based on new item data\n", "dataset": "2009 - inventory 2.0", "act": ["accesses", "shows", "modifies", "makes"], "obj": ["User", "inventory entry screen", "Add Item to Inventory", "Manage Inventory Items", "System", "price recommendations", "current item data", "default price suggestion configuration options", "item data", "new item data", "new price suggestions"], "pred_steps": "Functional steps: Retrieve similar items from inventory, fetch original and sale prices of similar items, calculate average or suggested price based on retrieved prices, display suggested price to user when adding or modifying item in inventory.", "pred_act": ["Retrieve", "fetch", "calculate", "display"], "pred_obj": ["similar items", "inventory", "original prices", "sale prices", "average price", "suggested price", "user", "item"], "tp": ["display", "inventory", "average price", "suggested price", "item"]}
{"index": 18, "ucName": " View Acquisi tions\n", "uctext": " Acquisition records for Drop -Off, Pickup and Decon donations are created in the CRM system. Inventory Management u sers should be able to view all past and current acquisitions . Receiving Associates use this function to locate an expected acquisition  when receiving a donation  at the loading dock.  Pickup and Decon crews may also use this function to initiate the process of receiving items while in the truck, on their way to the receiving dock.  Drop Off acquisitions are not typically pre-scheduled as Pi ck Up and Decon acquisitions  except for those submitted through the organizational website . As such, when a donor arrives with an unexpected drop off donation, a new acquisition needs to be able to be created in the CRM system first , at either the customer service desk or at the dock,  before it can be viewed in the acquisitions screen.  ", "steps": "\n1. User accesses the acquisitions  screen  \n2. The screen displays a list of all acquisitions , latest ones at the top of the list  \n3. User may optionally filter the acquisitions displayed on the screen by changing filtering options  \n4. User clicks on an acquisition record  \n5. System display the details for that acquisition, including expected items\n", "dataset": "2009 - inventory 2.0", "act": ["accesses", "displays", "may filter", "clicks", "display"], "obj": ["User", "acquisitions screen", "list of all acquisitions", "latest acquisitions", "filtering options", "acquisition record", "details for that acquisition", "expected items"], "pred_steps": "Functional steps: Inventory Management users access the View Acquisitions function, system displays all past and current acquisitions including Drop-Off, Pickup, and Decon donations; Receiving Associates use the function to locate expected acquisitions; Pickup and Decon crews initiate receiving process while in transit; for unexpected Drop-Off donations, create a new acquisition in the CRM system at the customer service desk or dock before viewing in the acquisitions screen.", "pred_act": ["access", "displays", "use", "locate", "initiate", "create", "viewing"], "pred_obj": ["Inventory Management users", "View Acquisitions function", "system", "past acquisitions", "current acquisitions", "Drop-Off donations", "Pickup donations", "Decon donations", "Receiving Associates", "expected acquisitions", "Pickup crews", "Decon crews", "receiving process", "unexpected Drop-Off donations", "CRM system", "customer service desk", "dock", "acquisitions screen"], "tp": ["displays", "View Acquisitions function", "past acquisitions", "current acquisitions", "expected acquisitions", "acquisitions screen"]}
{"index": 19, "ucName": " Receive Acquisition\n", "uctext": " A donor in possession of a valid acquisition number can proceed to the receiving dock where the items to be donated will be received and processed, and a donation receipt will be generated.  Alternatively, a donor may go directly to the receiving dock, in which case a new acquisition is cre ated by the Receiving Associate before items can be received and processed. The screens used for the acquisition process should simplify and expedite the data entry process, allowing the Receiving Associate to enter only the information needed to generate  the donation receipt. Additional attributes needed to complete the item information and effectively add the item to the inventory can be added at a second step , after the receipt has been printed and the donor has been served. The Receiving Associate can print temporary acquisition labels for items that require further processing.  Pick Up and Decon crews may also initiate the receiving process, entering as much detailed information about the donated items as desired, and generating a donation receipt. The y cannot, however, add items to the inventory or complete the acquisition process. A Receiving Associate is required to review all the acquisition information before those actions can take place.  ", "steps": "\n1. Donor or Primary Contact arrives at receiving dock with a valid donation number  \n2. Receiving Associate locates donation reques t in the system  (see View Acquisitions ) \n3. System displays donation request information  \n4. Receiving Associate enters information about each donated item into the donation request  (see Add Item to Inventory )\n4.1. A new item can be added to the list by cloning an existing item  \n4.2. A new item can be added by clicking the Add Item button  \n4.3. An item can be removed by setting the received quantity to zero  \n5. Receiving Associate  prints a donation receipt  \n6. Receiving Associate optionally writes information to the receipt by hand  such as condition  \n7. Donation receipt is given to the Donor  or Primary Contact  \n8. Receiving Associate prints item tags  for unique and stock items  (see Add It em to Inventory ) \n9. Receiving Associate attaches printed tags to corresponding items  \n10. Receiving Associate closes donation request\n", "dataset": "2009 - inventory 2.0", "act": ["arrives", "locates", "displays", "enters", "can be added", "can be cloned", "can be removed", "prints", "writes", "is given", "prints", "attaches", "closes"], "obj": ["Donor", "Primary Contact", "receiving dock", "valid donation number", "Receiving Associate", "donation request", "system", "View Acquisitions", "donation request information", "donated item", "Add Item to Inventory", "new item", "existing item", "Add Item button", "received quantity", "donation receipt", "condition", "item tags", "unique items", "stock items", "corresponding items"], "pred_steps": "Receive valid acquisition number from donor or create new acquisition by Receiving Associate, receive and process donated items, enter necessary information to generate donation receipt, print receipt for donor, add additional item attributes and complete item information for inventory at second step, print temporary acquisition labels for items requiring further processing if needed, allow Pick Up and Decon crews to initiate receiving process and enter detailed item information but not add items to inventory or complete acquisition, review all acquisition information by Receiving Associate before finalizing inventory addition and completion.", "pred_act": ["Receive", "create", "receive", "process", "enter", "print", "add", "complete", "print", "allow", "initiate", "enter", "review", "finalize", "add", "complete"], "pred_obj": ["acquisition number", "donor", "new acquisition", "Receiving Associate", "donated items", "necessary information", "donation receipt", "additional item attributes", "item information", "inventory", "temporary acquisition labels", "items requiring further processing", "Pick Up crew", "Decon crew", "receiving process", "detailed item information", "all acquisition information"], "tp": ["enter", "print", "add", "print", "enter", "add", "acquisition number", "donor", "new acquisition", "Receiving Associate", "donated items", "donation receipt", "item information", "inventory", "receiving process"]}
{"index": 20, "ucName": " Sell Item\n", "uctext": " Any item in the inventory may be purchased by a Construction Junction customer. The sale of the item is processed by QuickBooks POS and the inventory must be updated accordingly.  ", "steps": "  \n1. Buyer arrives at the cashier or checkout desk with the items to be p urchased  \n2. Sales associate scans the item tags  \n3. Sales associate processes the sale of the items in QuickBooks POS  \n4. The system updates the inventory to reflect the sale\n", "dataset": "2009 - inventory 2.0", "act": ["arrives", "scans", "processes", "updates"], "obj": ["Buyer", "cashier", "checkout desk", "items", "Sales associate", "item tags", "QuickBooks POS", "system", "inventory"], "pred_steps": "Functional steps: Retrieve item details from inventory, verify item availability, process sale through QuickBooks POS, update inventory to reflect sold item, generate receipt for customer, and store transaction details in system.", "pred_act": ["Retrieve", "verify", "process", "update", "generate", "store"], "pred_obj": ["item details", "inventory", "item availability", "sale", "QuickBooks POS", "inventory", "sold item", "receipt", "customer", "transaction details", "system"], "tp": ["process", "update", "item details", "inventory", "sale", "QuickBooks POS", "inventory", "system"]}
{"index": 0, "ucName": " “WeatherFDDA”:  Setting up a  real time or off-line FDDA job", "uctext": " The objective of this feature is to automate the set up of new real time and off-line FDDA jobs. This use case describes the set up of GMOD jobs, re-runs and case studies. At this point, RTFDDAensemble jobs will be submitted to the MM as 'by hand' jobs or through a job configuration file.The MM will provide a default GMOD job configuration, which can be changed by the user. It is important to note that the model manager will accept andrun “custom” GMOD jobs. These are jobs that are also set up through the Setup-module, but donot use the default GMOD configuration  For a “custom” GMOD job, e.g., the user may choose tosupply his/her own input data, own pre-processors or a customized version of a MM5 executable.MM's Job-Setup module will allow the user to substitute the default configuration, but it is theuser's responsibility to make sure that these scripts, executables, etc.  reside on the cluster orclusters where the job will be running on. Submitting a “custom” GMOD job thought the Job-Setupmodule will allow the user to save the job's configuration with the MM.\n\n     ", "steps": " \n1.User chooses to “Set up  a Weather FDDA Job”.\n2.User may choose a cluster where the job should run on. \n3.User decides what model should be used: MM5 or WRF.\n4.User defines a JOBID.\n5.User determines domains: creates own domains (Note: This may only apply to MM5 jobs. From earlier discussions: creating domain files for WRF takes a long time.) or chooses between a number of pre-defined domains or submits own TERRAIN files\n6.User defines when a job is to be run and/or what cycle to run. If the cycle time is in the past, then the user is prompted to specify whether the job is a “case study” or “re-run”.\n7.User supplies other job specific information, such as, cycle interval, forecast length and other applicable information.\n8.User can specify whether to write restart files and the frequency of how often they are to be written.\n9.User can choose between predefined sigma-level configurations or supply own sigma-level configuration\n10.User has the option to specify the number of nodes to use. \n11.User can choose to receive email notification upon start, end and termination of the job.\n12.User chooses between standard or custom IC/BC data sources:•standard: ETA, AVNFTP (GFS), GFS004\nor •custom: provide data source (e.g., host:Full_Path_to_Dir)\nor •For off-line jobs, the user must specify the data source, i.e., location (MetVault ora directory) and time period. Important note for re-runs, if the input data is to obtain from the MetVault, then MetVault returns the data that was available andused in that cycle.\n11.Depending on the choice above, user can provide custom IC/BC pre-processor or choose the standard:•standard processing\nor •provide own pre-processing script\n12.User is given the option to run additional pre-processors for the IC/BC data, such as, LDAS or supply own custom pre-processor or skip this option.\n13.User chooses between standard and/or custom obs data sources and processing:•Standard: WMO, SAMS, MADIS, GTS, RAWS, okmeso, SatWinds, ACARS, etc.\nand/or •provide custom obs source1 and custom obs processor1\n•provide custom obs source2 and custom obs processor2\n•etc.\nor •For off-line jobs, the user must specify the data source, i.e., location (MetVault or a directory) and time period. Important note for re-runs, if the input data is to obtain from the MetVault, then MetVault returns the data that was available and used in that cycle.\n14.Depending on the choice of the model different options are given to the user:\n•MM5: The domain size and number of nodes for this job was determined earlier.Based on both choices, the user is presented with different MM5-executables to choose from. These executables have been compiled in advanced. The MM will be able to retrieve the compile info about the executables, e.g., domain size,number of nodes, number of sigma levels, etc. These few executables are standard executables. Or, the user can also supply own executable, e.g., its location on the cluster\n•WRF: User defines model options\n15.User chooses whether or not to run Final Analysis. This may only apply to re-runs and case studies.\n16.User chooses whether or not to run Prelim. Analysis. This may only apply to re-runs and case studies.\n17.User chooses whether or not run additional processing on the model output.\n18.User can choose to save the model output in MetVault. If 'yes', user must specify what output file is to be sent to the MetVault.\n19.User is given the option to save and submit the job now. Submitting now, would run IC/BC-data and obs processing and the model, no post-processing.\n20.User chooses whether or not to run post-processing. If ‘yes', then s/he will go through the action sequence in 3.4.\n21.User can save the above job configuration. Job configurations can be saved to a file.\n22.User submits the job.\n", "dataset": "model manager", "act": ["chooses", "may choose", "decides", "defines", "determines", "creates", "chooses", "submits", "determines", "supplies", "can specify", "can choose", "has", "can choose", "can provide", "is given", "chooses", "provides", "must specify", "chooses", "is presented with", "can also supply", "defines", "chooses", "chooses", "chooses", "can choose", "must specify", "is given", "chooses", "chooses", "can save", "chooses", "can save", "submits"], "obj": ["User", "Weather FDDA Job", "cluster", "job", "model", "MM5", "WRF", "JOBID", "domains", "pre-defined domains", "TERRAIN files", "job", "cycle", "case study", "re-run", "cycle interval", "forecast length", "other applicable information", "restart files", "frequency", "sigma-level configurations", "number of nodes", "email notification", "start", "end", "termination", "job", "standard IC/BC data sources", "ETA", "AVNFTP (GFS", "GFS004", "custom IC/BC data sources", "data source", "off-line jobs", "MetVault", "directory", "time period", "re-runs", "input data", "custom IC/BC pre-processor", "standard processing", "pre-processing script", "additional pre-processors", "LDAS", "custom pre-processor", "standard obs data sources", "custom obs sources", "custom obs processors", "WMO", "SAMS", "MADIS", "GTS", "RAWS", "okmeso", "SatWinds", "ACARS", "MM5", "domain size", "number of nodes", "MM5-executables", "compile info", "executables", "WRF", "model options", "Final Analysis", "re-runs", "case studies", "Prelim. Analysis", "additional processing", "model output", "MetVault", "output file", "job configuration", "file"], "pred_steps": "Initiate the WeatherFDDA use case by accessing the Job-Setup module within the MM, select the type of FDDA job to set up (real-time or off-line), choose between using the default GMOD job configuration provided by the MM or creating a custom GMOD job, for a custom job, input user-specified data such as custom scripts, pre-processors, or a customized version of the MM5 executable, ensure all necessary files for the custom job are located on the designated cluster, submit the job configuration to the MM, save the job's configuration if it is a custom GMOD job, and finally, the MM accepts and runs the submitted GMOD job.", "pred_act": ["Initiate", "access", "select", "choose", "use", "create", "input", "ensure", "locate", "submit", "save", "accept", "run"], "pred_obj": ["WeatherFDDA use case", "Job-Setup module", "MM", "FDDA job", "real-time", "off-line", "default GMOD job configuration", "MM", "custom GMOD job", "custom job", "user-specified data", "custom scripts", "pre-processors", "customized version", "MM5 executable", "necessary files", "cluster", "job configuration", "MM", "custom GMOD job", "MM", "submitted GMOD job"], "tp": ["select", "choose", "create", "input", "submit", "save", "accept", "WeatherFDDA use case", "Job-Setup module", "MM", "FDDA job", "off-line", "default GMOD job configuration", "MM", "custom job", "custom scripts", "pre-processors", "MM5 executable", "cluster", "job configuration", "MM", "MM"]}
{"index": 1, "ucName": " “ClimoFDDA”:  Setting up a  ClimoFDDA job\n", "uctext": " The objective of this feature is to integrate the GCAT functionalities within the MM. Suppose the user is logged on to the system and has made the following choices “Submit a newjob” -> “Set up a new model job”. S/he is then presented with two more options: “ Weather FDDA” and “Climo”.\n     ", "steps": " \n1.Chooses to  “Set up a Climo Job”.\n2.User defines a JOBID.\n3.User supplies other job parameters. For details, see GCAT tool\n4.User determines the domain location.\n5.User can specify locations for pseudo-obs and custom cross sections.\n6.User picks a pre-configured MM5 setup\n7.User sets the time line for the job: start time, end time and what years\n8.User sets the ensemble options: •hourly •min, max, mean, standard deviation,.... •diurnal cycle •typical moment\n9.User can request the number of nodes this job should run on.\n10.User chooses whether or not run additional processing on the model output.\n11.User can choose to save the model output in MetVault. If 'yes', user must specify what output, e.g., member and/or ensemble output is to be send to the MetVault.\n12.User is given the option to save and submit the job now. Submitting now, would run the member models, the ensemble, and possible model output processing, no post-processing.\n13.User chooses whether or not to run post-processing on the ensemble output. If “yes',then s/he will be presented with the following options:•Plots (NCL or RIP) •NAPS •MDV •Sites •MEDOC (1 – 4) •Raster •PRF •Wind Roses •...For each output product, the user is prompted to supply a destination host and location,where the output files should be copied.\n14.The user can also specify whether the members' output should be post-processed. S/he can specify which year-output to post-process and what post-processor(s) to use and where the output files should be copied.\n15. The user can specify whether another process (coupled app) should be run on the post-process output products. This needs further clarification.\n16.User can save the above job configuration. Job configurations can be saved to a file.\n17.User submits the job.\n", "dataset": "model manager", "act": ["Chooses", "defines", "supplies", "determines", "can specify", "picks", "sets", "can request", "chooses", "can choose", "is given", "chooses", "can specify", "can specify", "can save", "submits"], "obj": ["Climo Job", "JOBID", "job parameters", "GCAT tool", "domain location", "pseudo-obs", "custom cross sections", "pre-configured MM5 setup", "time line", "start time", "end time", "years", "ensemble options", "hourly", "min", "max", "mean", "standard deviation", "diurnal cycle", "typical moment", "number of nodes", "model output", "MetVault", "output", "member", "ensemble output", "option", "job", "member models", "ensemble", "model output processing", "post-processing", "ensemble output", "Plots", "NCL", "RIP", "NAPS", "MDV", "Sites", "MEDOC", "Raster", "PRF", "Wind Roses", "destination host", "location", "output files", "members' output", "year-output", "post-processor(s", "post-process output products", "coupled app", "job configuration", "file"], "pred_steps": "IntegrateGCATfunctionalitieswithinMMbyfirstensuringuserisloggedintothesystemandhasselectedSubmitanewjobthenSetupanewmodeljobafterwhichpresentuserwithtwooptionsWeatherFDDAandClimoallowingthemtoselectClimoFDDAtoconfigureandasetupClimoFDDAjob.", "pred_act": ["Integrate", "ensure", "log in", "select", "Setup", "present", "allowing", "select", "configure", "setup"], "pred_obj": ["GCAT", "MM", "user", "system", "Submit a new job", "Setup a new model job", "WeatherFDDA", "Climo", "ClimoFDDA", "ClimoFDDA job"], "tp": ["select", "select", "GCAT", "MM"]}
{"index": 2, "ucName": " Set up and submit a “post-processing” job\n", "uctext": "The objective of this feature is to provide the ability to only run “post-processing” on an existing model output file. It will also provide the post-processing part of the use case “WeatherFDDA” in 3.1. Suppose the user is logged on to the system and has made the following choice, “Submit a new job”.\n     ", "steps": " \n1.User selects “Set up a new 'post-processing' job” .\n2.User is prompted to supply location and name of the model output file:\n•If the model output file will be produced by a running or scheduled FDDA-job,\nthen the user supplies JOBID & cycle time\n•If the model output file already exists, then the user supplies its location.\n3.User chooses the type of post-processing:•Plots (NCL or RIP)•NAPS•MDV•Sites•MEDOC (1 – 4) •Stereo•Verification\n4.For each of the options chosen in 3., the user can supply a custom configuration file (ifthis is applicable) or use the default configuration file.\n5.User must supply destination location for the output products.\n6.User can specify the number of nodes this job should run on\n7.User can save this job's setting. Job configurations can be saved to a file.\n8.User submits job.\n", "dataset": "model manager", "act": ["selects", "is prompted", "supplies", "chooses", "can supply", "can use", "must supply", "can specify", "can save", "submits"], "obj": ["User", "Set up a new 'post-processing' job", "location", "name", "model output file", "FDDA-job", "JOBID", "cycle time", "type of post-processing", "Plots", "NCL", "RIP", "NAPS", "MDV", "Sites", "MEDOC (1 – 4", "Stereo", "Verification", "custom configuration file", "default configuration file", "destination location", "output products", "number of nodes", "job's setting", "Job configurations", "file", "job"], "pred_steps": "Set up and submit a \"post-processing\" job: User logs on to the system, selects \"Submit a new job\", specifies the existing model output file for post-processing, configures post-processing parameters, reviews job settings, submits the job, and receives a confirmation notification upon successful submission.", "pred_act": ["Set up", "submit", "logs on", "selects", "specifies", "configures", "reviews", "submits", "receives"], "pred_obj": ["post-processing job", "User", "system", "Submit a new job", "existing model output file", "post-processing parameters", "job settings", "confirmation notification"], "tp": ["submit", "selects", "specifies", "submits", "post-processing job", "User", "Submit a new job", "existing model output file", "post-processing parameters", "job settings"]}
{"index": 3, "ucName": " Submit a 'By-hand' job\n", "uctext": " The objective of this feature is to accommodate the current GMOD-framework. It will also give the user the ability to run customized jobs. In order to submit a custom job to the MM, the user must first identify the cluster(s), where his/her job should run on. Then, log on to this machine, perform operations that are necessary for setting up the job and then register the job with the MM (see Action Sequence below). It is important to note that since a 'by-hand' job wasn't set up through MM's Job-Setup module, the MM doesn't know what the job is actually doing. In order for the MM to accept the job, the user will have to provide certain mandatory information about the job. Suppose the user is logged on to the system and has made the following choice, “Submit a new job”.\n     ", "steps": " \n1.User selects “Submit a 'By Hand' Job”\n2.User supplies:Mandatory:•job id (GMUAE, GWDPG,...)•location of the script (host:/full_path_to_script)•time when to run the script•estimated time of how long the script will run•name(s) of executable(s)•max. runtime for the executable(s)•number of nodes •location of output products (such as: host:/dir_path) Optional:•frequency of how often the script should run•job type•any additional information\n3.User can save the job's settings. Job configurations can be saved to a file.\n4.User submits job.\n5.User can view his/her job in the job queue (see 3.1.).\n6.User can receive an email notification when job is started, finished or killed. \n", "dataset": "model manager", "act": ["selects", "supplies", "can save", "submits", "can view", "can receive"], "obj": ["User", "Submit a 'By Hand' Job", "job id", "GMUAE", "GWDPG", "location of the script", "host:/full_path_to_script", "time when to run the script", "estimated time", "how long the script will run", "name(s) of executable(s", "max. runtime for the executable(s", "number of nodes", "location of output products", "host:/dir_path", "frequency of how often the script should run", "job type", "any additional information", "job's settings", "Job configurations", "file", "job", "job queue", "email notification", "job is started", "job is finished", "job is killed"], "pred_steps": "Submit a 'By-hand' job: User identifies cluster(s) for job execution, logs on to the machine, sets up job, registers job with MM, provides mandatory job information as MM doesn't know job details since not set up through Job-Setup module.", "pred_act": ["Submit", "identifies", "logs", "sets", "registers", "provides"], "pred_obj": ["By-hand job", "User", "cluster(s", "machine", "job", "MM", "mandatory job information", "Job-Setup module"], "tp": ["Submit", "By-hand job", "User", "job"]}
{"index": 4, "ucName": "Load a job configuration from a file and submit the job\n", "uctext": " The objective of this feature is to provide the ability to load a job configuration into MM from a file. Suppose the user is logged on to the system and has made the following choice, “Submit a new job”.\n     ", "steps": " \n1.User selects ”Submit a job configuration file”.\n2.User supplies file name to load.\n3.User can make changes to the configuration.\n4.User can save the changed configuration.\n5.User submits the job.\n", "dataset": "model manager", "act": ["selects", "supplies", "can make", "can save", "submits"], "obj": ["User", "Submit a job configuration file", "file name", "configuration", "changed configuration", "job"], "pred_steps": "Load job configuration file from specified path, validate the file format and content, display configuration details for user confirmation, allow user to modify configuration if needed, save the confirmed configuration into the system, submit the job with the loaded configuration, and provide feedback on job submission status.", "pred_act": ["Load", "validate", "display", "allow", "modify", "save", "submit", "provide"], "pred_obj": ["job configuration file", "specified path", "file format", "content", "configuration details", "user", "system", "job", "loaded configuration", "job submission status"], "tp": ["save", "submit", "job configuration file", "configuration details", "job", "loaded configuration", "job submission status"]}
{"index": 5, "ucName": "Retrieve and run a previously saved job configuration\n", "uctext": "The objective of this feature is to provide the ability to retrieve a previous job configuration and to re-run this job or change its settings and run it again.\n     ", "steps": " \n1.User logs on with user id/password.\n2.User chooses to look at his/her previously saved job configurations. A table of saved\njobs may include the following attributes: •Job id•Job type•Cycle time that was run last (if applicable)•time this job was run last•...\n3.User selects a job. User can change or delete this job configuration.\n4.User changes the job configuration.\n5.User can save the changed job configuration.\n6.User submits job.\n", "dataset": "model manager", "act": ["logs", "chooses", "looks", "selects", "can change", "can delete", "changes", "can save", "submits"], "obj": ["User", "user id", "password", "job configurations", "table", "saved jobs", "Job id", "Job type", "Cycle time", "time", "job", "job configuration", "changed job configuration"], "pred_steps": "Functional steps: Open application, navigate to job configurations, select option to retrieve previous job configurations, browse and select desired job configuration, view retrieved job configuration details, choose to re-run job with current settings or edit settings, if editing settings, update necessary parameters, save updated job configuration, run job with selected or updated settings, monitor job execution, receive notification of job completion or error.", "pred_act": ["Open", "navigate", "select", "browse", "view", "choose", "re-run", "edit", "update", "save", "run", "monitor", "receive"], "pred_obj": ["application", "job configurations", "option", "previous job configurations", "desired job configuration", "job configuration details", "current settings", "settings", "necessary parameters", "updated job configuration", "selected settings", "job execution", "notification", "job completion", "error"], "tp": ["select", "choose", "save", "job configurations", "previous job configurations", "desired job configuration", "job configuration details", "current settings", "settings", "updated job configuration", "job execution", "job completion"]}
{"index": 6, "ucName": " View scheduled, running and old jobs\n", "uctext": " The objective of this feature is to facilitate monitoring of running jobs, viewing the job queue and viewing jobs that ran in the past.\n     ", "steps": " \n1.User logs on with user id/password.\n2.User chooses to look at all running jobs, all scheduled jobs (the job queue), past jobs orall jobs (running, scheduled, old). User selects one of the four options.\n3.User is presented with a job table. Depending on the user's choice in 2, the job tablemay present the following attributes to the user:•user id – the 'owner' of the job •Job id•Job type – such as: GMOD, climoFDDA, FDDA-re-run, case study, custom,....•Job priority •start time•remaining time (estimated) or time it took to run the job•cycle (if applicable)•stage (Pre-processing, F-analysis, Prelim. Analysis,...)•status ( SCHEDULED, RUNNING, status in % - if applicable, DONE)•cluster and nodes (for a running job)•number of processors•and others\n4.User can select a job and receive more detailed information\n5.User can look at a jobs log files. \n6.User can delete his/her jobs from the job queue. A “super user” can delete any job fromthe job queue.\n7.User can stop his/her running job. A “super user” can stop any running job.\n8.User can re-start his/her job. A “super user” can re-start any job.\n9.User can resume his/her stopped job. A “super user” can resume any stopped job. \n", "dataset": "model manager", "act": ["logs on", "chooses", "selects", "is presented", "can select", "can look", "can delete", "can stop", "can re-start", "can resume"], "obj": ["User", "user id", "password", "running jobs", "scheduled jobs", "job queue", "past jobs", "all jobs", "job table", "attributes", "user id", "Job id", "Job type", "GMOD", "climoFDDA", "FDDA-re-run", "case study", "custom", "Job priority", "start time", "remaining time", "time", "cycle", "stage", "Pre-processing", "F-analysis", "Prelim. Analysis", "status", "SCHEDULED", "RUNNING", "DONE", "cluster", "nodes", "number of processors", "job", "detailed information", "jobs log files", "job queue", "jobs", "running job", "super user", "his/her running job", "his/her job", "stopped job"], "pred_steps": "Display a dashboard with tabs for scheduled jobs, running jobs, and old jobs; load the scheduled jobs tab by default; allow users to switch tabs to view running jobs or old jobs; for scheduled jobs, show job name, scheduled time, and status; for running jobs, show job name, start time, elapsed time, and progress; for old jobs, show job name, run time, duration, and status; provide search and filter options for all tabs; allow sorting of jobs based on selected criteria; and enable detailed view of each job upon user request.", "pred_act": ["display", "load", "allow", "show", "provide", "allow", "enable"], "pred_obj": ["dashboard", "tabs", "scheduled jobs", "running jobs", "old jobs", "scheduled jobs tab", "users", "job name", "scheduled time", "status", "start time", "elapsed time", "progress", "run time", "duration", "search options", "filter options", "all tabs", "jobs", "selected criteria", "detailed view", "each job"], "tp": ["scheduled jobs", "running jobs", "old jobs", "scheduled jobs tab", "users", "job name", "scheduled time", "status", "start time", "elapsed time", "run time", "jobs", "detailed view", "each job"]}
{"index": 0, "ucName": "DeleteCulturalHeritage", "uctext": "Delete a cultural object in the system.", "steps": "1. View the list of CulturalHeritage as a result of the use case SearchCulturalHeritage, it selects and activates a function of elimination. \n2 Asks confirmation. \n3 Confirm the operation. \n4 Delete the cultural choice.", "dataset": "eTour", "act": ["View", "selects", "activates", "asks", "confirm", "delete"], "obj": ["CulturalHeritage", "SearchCulturalHeritage", "function", "elimination", "confirmation", "operation", "cultural choice"], "pred_steps": "Please refer to relevant websites for more information, and feel free to ask me any other questions.", "pred_act": ["refer", "feel", "ask"], "pred_obj": ["websites", "information", "questions"], "tp": ["ask"]}
{"index": 1, "ucName": "ViewRefreshmentPointCard", "uctext": "View the details of a selected point of rest.", "steps": "1. View the list of points of rest as a result of the use case SearchRefreshmentPoint, it selects and activates a function to view the card. \n2 Upload data to a selected restaurant.", "dataset": "eTour", "act": ["View", "selects", "activates", "upload"], "obj": ["points of rest", "SearchRefreshmentPoint", "function", "card", "data", "restaurant"], "pred_steps": "SelectPointOfRest, RetrievePointOfRestDetails, DisplayPointOfRestDetails", "pred_act": ["SelectPointOfRest", "RetrievePointOfRestDetails", "DisplayPointOfRestDetails"], "pred_obj": ["SelectPointOfRest", "RetrievePointOfRestDetails", "DisplayPointOfRestDetails"], "tp": ["SelectPointOfRest"]}
{"index": 2, "ucName": "ViewConventionHistory", "uctext": "View the history of conventions derived from a selected point of rest.", "steps": "1. Access the features on the display of historical conventions. \n2 Upload data on conventions from the restaurant selected.", "dataset": "eTour", "act": ["Access", "Upload"], "obj": ["features", "display", "historical conventions", "data", "conventions", "restaurant"], "pred_steps": "Functional steps: Open application, navigate to convention history section, select point of rest, retrieve convention history associated with selected point of rest, display convention history in chronological order, allow user to scroll through and view details of each convention in history.", "pred_act": ["Open", "navigate", "select", "retrieve", "display", "allow", "scroll", "view"], "pred_obj": ["application", "convention history section", "point of rest", "convention history", "each convention in history"], "tp": ["convention history section", "convention history", "each convention in history"]}
{"index": 3, "ucName": "ViewTouristCard", "uctext": "View the details of a selected account Tourist.", "steps": "1. Tourists from the list obtained by activating the use case SearchTourist will select and activate a function for displaying the card. \n2 Upload data to the selected account.", "dataset": "eTour", "act": ["select", "activate", "display", "upload"], "obj": ["Tourists", "list", "use case SearchTourist", "function", "card", "data", "account"], "pred_steps": "DisplayTouristCardDetails(selectedTouristAccountId): RetrieveTouristAccount(selectedTouristAccountId), ValidateTouristAccount(retrievedAccount), FetchTouristCardDetails(retrievedAccount), DisplayTouristCardDetailsOnScreen(fetchedDetails)", "pred_act": ["RetrieveTouristAccount", "ValidateTouristAccount", "FetchTouristCardDetails", "DisplayTouristCardDetailsOnScreen"], "pred_obj": ["DisplayTouristCardDetails", "selectedTouristAccountId", "RetrieveTouristAccount", "ValidateTouristAccount", "retrievedAccount", "FetchTouristCardDetails", "DisplayTouristCardDetailsOnScreen", "fetchedDetails"], "tp": ["DisplayTouristCardDetailsOnScreen", "retrievedAccount"]}
{"index": 4, "ucName": "Active / InactiveTouristAccount", "uctext": "Enable or disable the account of a tourist.", "steps": "1. Activate the feature for the activation / deactivation by a given sheet tourist. \n2 Asks for confirmation of activation / deactivation. \n3 Confirm the operation. \n4 Enable / disable the account of the visitor you selected.", "dataset": "eTour", "act": ["Activate", "Asks", "Confirm", "Enable", "disable"], "obj": ["feature", "activation", "deactivation", "sheet tourist", "confirmation", "operation", "account", "visitor"], "pred_steps": "Verify user identity, check account status, present options to enable or disable account, receive user selection, process selection to update account status, confirm action with user, save updated status in database, notify system of status change, update user interface accordingly.", "pred_act": ["Verify", "check", "present", "receive", "process", "confirm", "save", "notify", "update"], "pred_obj": ["user identity", "account status", "options", "user selection", "action", "updated status", "database", "system", "status change", "user interface"], "tp": ["confirm"]}
{"index": 5, "ucName": "SearchTourist", "uctext": "Returns the list of tourist account in the system according to certain parameters.", "steps": "1. Access the search functionality of a tourist. \n2 Show the form. \n3 Fill out the form and submit. \n4 Processing the request.", "dataset": "eTour", "act": ["Access", "Show", "Fill", "Submit", "Processing"], "obj": ["tourist", "search functionality", "form", "request"], "pred_steps": "Receive search parameters; Validate input parameters; Query database for tourist accounts matching parameters; Generate list of matching tourist accounts; Sort list based on relevance or specified criteria; Return the list of tourist accounts.", "pred_act": ["Receive", "Validate", "Query", "Generate", "Sort", "Return"], "pred_obj": ["search parameters", "input parameters", "database", "tourist accounts", "matching parameters", "list of matching tourist accounts", "relevance", "specified criteria"], "tp": ["search parameters"]}
{"index": 6, "ucName": "ModifyTouristAccountData", "uctext": "Change data of a selected account Tourist.", "steps": "1. Tourists from the list obtained by activating the use case SearchTourist it selects and activates a function to modify data. \n2 Loads the data selected and displays them in a form allowing the change. \n3 Edit the fields in the form and submit. \n4 Verify the information and asks for confirmation of the change. Where the data is invalid or insufficient, the system activates the use case Errored. \n5 Confirm the operation. \n6. Stores the modified data selected account.", "dataset": "eTour", "act": ["selects", "activates", "loads", "displays", "edit", "submit", "verify", "asks", "activates", "confirm", "stores"], "obj": ["Tourists", "list", "use case SearchTourist", "function", "data", "form", "fields", "information", "use case Errored", "operation", "modified data", "account"], "pred_steps": "Authenticate user, retrieve selected tourist account, display account data, allow user to modify desired fields, validate modified data, save changes to account data, update database with modified account data, notify user of successful modification.", "pred_act": ["Authenticate", "retrieve", "display", "allow", "modify", "validate", "save", "update", "notify"], "pred_obj": ["user", "tourist account", "account data", "desired fields", "modified data", "database", "successful modification"], "tp": ["Authenticate", "display", "modify", "validate", "tourist account", "account data", "desired fields", "modified data", "database"]}
{"index": 7, "ucName": "DeleteTouristAccount", "uctext": "Delete the account of a tourist from the system.", "steps": "1. Tourists from the list obtained by activating the use case SearchTourist will select and activate a feature for disposal. \n2 Asks for confirmation of the transaction. \n3 Confirm the operation. \n4 Delete the selected data.", "dataset": "eTour", "act": ["select", "activate", "ask", "confirm", "delete"], "obj": ["Tourists", "list", "use case SearchTourist", "feature", "transaction", "operation", "selected data"], "pred_steps": "Verify user authority to delete account, retrieve tourist account details, confirm account deletion with user, perform deletion in database, update related records to reflect deletion, log deletion action, notify user of successful deletion.", "pred_act": ["Verify", "retrieve", "confirm", "perform", "update", "log", "notify"], "pred_obj": ["user authority", "account", "tourist account details", "user", "database", "related records", "deletion action", "user"], "tp": ["confirm"]}
{"index": 8, "ucName": "ModifyBanner", "uctext": "Changing the image of a banner ad.", "steps": "1. Receives a list of turning points of the rest use case SearchRefreshmentPoint and select one from accessing the function of editing a banner. \n2 View the list of banner associated with the point of rest. \n3 Select a banner from the list and enter the editing functionality. \n4 Displays a form for the selection of an image. \n5 Select a picture and send the request to change the system. \n6. Check the characteristics of the inserted and asks for confirmation of the change of the banner. In the event that the inserted image is not valid, enable the use case Errored. \n7 Confirmation of the transaction change. \n8 Bookmark this new image for the selected banner.", "dataset": "eTour", "act": ["Receives", "selects", "view", "select", "enter", "displays", "select", "send", "check", "asks", "enable", "confirmation", "bookmark"], "obj": ["turning points", "SearchRefreshmentPoint", "function", "editing", "banner", "list", "point", "image", "picture", "request", "system", "characteristics", "change", "use case Errored", "transaction", "new image"], "pred_steps": "Display current banner image, allow user to select new image from file system, validate image format and size, upload selected image, update banner image in database, refresh display with new banner image.", "pred_act": ["Display", "allow", "select", "validate", "upload", "update", "refresh"], "pred_obj": ["banner image", "user", "file system", "image format", "image size", "selected image", "database", "display"], "tp": ["Display", "allow", "select", "banner image", "image format", "image size", "selected image"]}
{"index": 9, "ucName": "CheckBannerNumber", "uctext": "Check if a point Refreshments included the maximum number of allowed banners to it.", "steps": "1. Load the data of the Convention of refreshment point and verify that the number of banners is less than the specified number of the current banner. If not checked, will end the operation input and displays a notification. \n2 Confirmation of the reading of the notification. \n3 Recovers the previous state.", "dataset": "eTour", "act": ["Load", "verify", "end", "display", "Confirmation", "reading", "Recover", "output"], "obj": ["data", "Convention of refreshment point", "number of banners", "specified number", "current banner", "operation input", "notification", "reading", "previous state"], "pred_steps": "Please refer to relevant websites for more information, and feel free to ask me any other questions.", "pred_act": ["refer", "ask"], "pred_obj": ["relevant websites", "more information", "questions"], "tp": []}
{"index": 10, "ucName": "DeleteBanner", "uctext": "Delete a banner ad associated with a refreshment bar on the computer.", "steps": "1. Receives a list of turning points of the rest use case SearchRefreshmentPoint and select one from accessing the function of removal of the banner. \n2 View the list of banner associated with the point of rest. \n3 Select a banner from the list and enter the function of elimination. \n4 Displays a message confirming the deletion. \n5 Confirm the operation. \n6. Removes the banner.", "dataset": "eTour", "act": ["Receives", "select", "View", "Select", "enter", "Displays", "Confirm", "Removes"], "obj": ["turning points", "SearchRefreshmentPoint", "function", "removal", "banner", "list", "point of rest", "message", "deletion", "operation"], "pred_steps": "Verify user permission, display list of available banners, select banner to delete, confirm deletion, remove selected banner from database, update refreshment bar display to reflect deletion, notify user of successful deletion.", "pred_act": ["Verify", "display", "select", "confirm", "remove", "update", "notify"], "pred_obj": ["user permission", "list of available banners", "banner", "deletion", "database", "refreshment bar display", "user", "successful deletion"], "tp": ["display", "select", "confirm", "remove", "banner", "deletion", "successful deletion"]}
{"index": 11, "ucName": "InsertCulturalHeritage", "uctext": "Inserts a new cultural object in the system.", "steps": "1. Activate the feature for the insertion of a new cultural good. \n2 Displays the corresponding form. \n3 Fill out the form with the data of the cultural and submit. \n4 Verify the data entered and asks for confirmation of the transaction. Where the data is invalid or insufficient, the system activates the use case Errored. \n5 Confirm the operation. \n6. Memorize your new cultural good.", "dataset": "eTour", "act": ["Activate", "Displays", "Fill", "Verify", "asks", "Confirm", "Memorize", "activates"], "obj": ["feature", "cultural good", "form", "data", "transaction", "system", "use case Errored", "operation", "new cultural good"], "pred_steps": "Please refer to relevant websites for more information, and feel free to ask me any other questions.", "pred_act": ["refer", "feel", "ask"], "pred_obj": ["relevant websites", "more information", "questions"], "tp": ["ask"]}
{"index": 12, "ucName": "InsertBanner", "uctext": "Inserting a new banner associated with a point of rest.", "steps": "1. Receives a list of turning points of the rest use case SearchRefreshmentPoint and select one from the list and access to the function of inserting banners. \n2 Displays a form for the selection of an image. \n3 Select an image and sends the request for entering the system. \n4 Check the characteristics of the inserted, check that the number of banner did not exceed the maximum point of the restaurant and asks for confirmation of the insertion of the banner. In the event that the inserted image is not valid, enable the use case Errored. \n5 Confirm the operation of insertion. \n6. Remember the banners associated with the selected point of rest.", "dataset": "eTour", "act": ["Receives", "select", "access", "displays", "select", "sends", "check", "ask", "enable", "confirm", "remember"], "obj": ["turning points", "SearchRefreshmentPoint", "list", "function", "inserting banners", "form", "selection", "image", "system", "characteristics", "number of banner", "maximum point", "restaurant", "confirmation", "insertion", "use case Errored", "operation", "banners", "selected point of rest"], "pred_steps": "Open editor, select point of rest, open banner insertion interface, input banner details including image, text, link, set display duration and position, preview banner, confirm insertion, save changes, update point of rest with new banner information, notify system of successful insertion.", "pred_act": ["Open", "select", "open", "input", "set", "preview", "confirm", "save", "update", "notify"], "pred_obj": ["editor", "point of rest", "banner insertion interface", "banner details", "image", "text", "link", "display duration", "position", "banner", "system", "changes", "new banner information", "successful insertion"], "tp": ["select", "confirm", "point of rest", "banner insertion interface", "banner details", "image", "banner", "system", "new banner information", "successful insertion"]}
{"index": 13, "ucName": "InsertNews", "uctext": "Inserts a new news in the system.", "steps": "1. Activate the feature to insert a news. \n2 Displays the corresponding form. \n3 Fill out the form and submit. \n4 Verify the data entered and asks for confirmation of the transaction. Where the data is invalid or insufficient, the system activates the use case Errored. \n5 Confirm the operation of insertion. \n6. Stores the data of the new news.", "dataset": "eTour", "act": ["Activate", "Displays", "Fill", "submit", "Verify", "asks", "Confirm", "Store"], "obj": ["feature", "news", "form", "data", "transaction", "system", "use case Errored", "operation of insertion", "new news"], "pred_steps": "Open news insertion form, input news title, input news content, select news category, attach related images or videos, verify input data, save news entry, update news database, generate news insertion confirmation.", "pred_act": ["Open", "input", "select", "attach", "verify", "save", "update", "generate"], "pred_obj": ["news insertion form", "news title", "news content", "news category", "images", "videos", "input data", "news entry", "news database", "news insertion confirmation"], "tp": ["verify", "news insertion form", "news title", "news content", "news category", "input data", "news entry", "news database", "news insertion confirmation"]}
{"index": 14, "ucName": "DeleteNews", "uctext": "Delete a news in the system.", "steps": "1. Activate the function of elimination of a news. \n2 View all news in a form. \n3 Select a news from the list and submit the form. \n4 Asks for confirmation of the transaction. \n5 Confirm the deletion of the news. \n6. Delete the data news.", "dataset": "eTour", "act": ["Activate", "View", "Select", "submit", "Asks", "Confirm", "Delete"], "obj": ["function", "elimination", "news", "form", "list", "transaction", "deletion", "data", "news"], "pred_steps": "Verify user permissions, retrieve news ID, confirm news existence, check dependencies, prompt for deletion confirmation, execute deletion, update database, log deletion activity, notify relevant stakeholders, refresh news listing.", "pred_act": ["Verify", "retrieve", "confirm", "check", "prompt", "execute", "update", "log", "notify", "refresh"], "pred_obj": ["user permissions", "news ID", "news existence", "dependencies", "deletion confirmation", "deletion", "database", "deletion activity", "relevant stakeholders", "news listing"], "tp": ["confirm", "news ID", "news existence", "deletion confirmation", "deletion", "database", "deletion activity", "news listing"]}
{"index": 15, "ucName": "ModifyNews", "uctext": "Change data of a news on the computer.", "steps": "1. Activate the editing functionality of a news. \n2 View all news in a form. \n3 Select a news from the list and submit the form. \n4 Load the data of news and displays them in a form for editing. \n5 Change data in the form and submit. \n6. Check the modified information and asks for confirmation of the transaction. Where the data is invalid or insufficient, the system activates the use case Errored. \n7 Confirm the operation of changing the data news. \n8 Stores data modified news.", "dataset": "eTour", "act": ["Activate", "View", "Select", "Submit", "Load", "Display", "Change", "Submit", "Check", "Ask", "Activate", "Confirm", "Store"], "obj": ["editing functionality", "news", "form", "list", "data", "modified information", "transaction", "operation", "data news", "system", "use case Errored"], "pred_steps": "OpenNewsEditor, SelectNewsItem, LoadNewsData, DisplayNewsData, EditNewsTitle, EditNewsContent, SaveNewsChanges, VerifyNewsUpdates, CloseNewsEditor", "pred_act": ["OpenNewsEditor", "SelectNewsItem", "LoadNewsData", "DisplayNewsData", "EditNewsTitle", "EditNewsContent", "SaveNewsChanges", "VerifyNewsUpdates", "CloseNewsEditor"], "pred_obj": ["OpenNewsEditor", "SelectNewsItem", "LoadNewsData", "DisplayNewsData", "EditNewsTitle", "EditNewsContent", "SaveNewsChanges", "VerifyNewsUpdates", "CloseNewsEditor"], "tp": ["SelectNewsItem", "LoadNewsData", "DisplayNewsData", "LoadNewsData", "DisplayNewsData"]}
{"index": 16, "ucName": "ViewFeedback", "uctext": "View all feedback for a particular site.", "steps": "1. View the list of sites as a result of the use case SearchSite, it selects and activates a function to view the feedback. \n2 Upload Site Feedback selected.", "dataset": "eTour", "act": ["View", "selects", "activates", "Upload"], "obj": ["sites", "SearchSite", "function", "feedback", "Site Feedback"], "pred_steps": "Display list of sites, select site, retrieve all feedback for selected site from database, display feedback in chronological order, provide options to filter feedback by type or status, allow user to sort feedback by different criteria, enable user to view details of each feedback.", "pred_act": ["Display", "select", "retrieve", "display", "provide", "allow", "sort", "enable", "view"], "pred_obj": ["sites", "site", "feedback", "database", "type", "status", "criteria", "details"], "tp": ["select", "sites", "site", "feedback"]}
{"index": 17, "ucName": "ViewReportStatistic", "uctext": "View statistical report relating to a selected location.", "steps": "1. Activate the feature on the statistical report. \n2 Upload the list of places in the system and displays them in a form. \n3 Select a location and submit the form. \n4 Upload midsize site feedback obtained by activating the SearchSite use case for the location selected. Prepare the statistical report.", "dataset": "eTour", "act": ["Activate", "Upload", "displays", "Select", "submit", "Upload", "Prepare", "output"], "obj": ["feature", "statistical report", "list of places", "system", "form", "location", "SearchSite use case", "midsize site feedback", "statistical report"], "pred_steps": "User selects location, system retrieves corresponding statistical report data, system processes data to generate report, system displays generated report on screen.", "pred_act": ["selects", "retrieves", "processes", "displays", "generates"], "pred_obj": ["User", "location", "system", "statistical report data", "report", "screen"], "tp": ["selects", "displays", "location", "system", "statistical report data", "report"]}
{"index": 18, "ucName": "ModifyComment", "uctext": "Editing a comment by a feedback selected.", "steps": "1. View the list of sites as a result of the use case SearchSite, it selects and activates a function of change in the selected comment. \n2 Upload feedback issued to that site and displays them in a form. \n3 Select a feedback from the list and submit the form. \n4 Displays a form for editing the comment of feedback selected. \n5 Edit the comment and submit the form. \n6. Verify the data entered and asks for confirmation of the change. Where the data is invalid or insufficient, the system activates the use case Errored. \n7 Confirm the operation. \n8 Remember the comment changed.", "dataset": "eTour", "act": ["View", "selects", "activates", "Upload", "displays", "Select", "submit", "edit", "Verify", "asks", "activates", "Confirm", "Remember"], "obj": ["sites", "use case SearchSite", "function", "comment", "feedback", "form", "data", "use case Errored", "operation", "comment changed"], "pred_steps": "Display the selected feedback comment, allow user to edit the comment text, provide options to save or cancel changes, upon save validate the input, update the comment in the system, and notify the user of the successful update; upon cancel, discard changes and notify the user that no changes were made.", "pred_act": ["display", "allow", "edit", "provide", "save", "validate", "update", "notify", "cancel", "discard"], "pred_obj": ["feedback comment", "comment text", "options", "changes", "input", "system", "user"], "tp": ["display", "edit", "validate", "feedback comment", "comment text", "changes"]}
{"index": 19, "ucName": "SearchSite", "uctext": "Searching for a specific site on the computer.", "steps": "1. Activate the search functionality of a site. \n2 Show the form for research \n3 Fill in the form of research and submit \n4 Processing the request", "dataset": "eTour", "act": ["Activate", "Show", "Fill", "submit", "Processing"], "obj": ["search functionality", "site", "form", "research", "request"], "pred_steps": "OpenSearchBar, EnterSearchQuery, InitiateSearch, DisplaySearchResults, SelectSearchResult, NavigateToSelectedSite", "pred_act": ["OpenSearchBar", "EnterSearchQuery", "InitiateSearch", "DisplaySearchResults", "SelectSearchResult", "NavigateToSelectedSite"], "pred_obj": ["OpenSearchBar", "EnterSearchQuery", "InitiateSearch", "DisplaySearchResults", "SelectSearchResult", "NavigateToSelectedSite"], "tp": []}
{"index": 20, "ucName": "DeleteTag", "uctext": "Removes one or more search tags in the system.", "steps": "1. Access the functionality to delete a tag. \n2 Research in the existing system, the tags and displays them in a form. \n3 Select one or more tags from the list and sends the request for deletion. \n4 Delete the selected search tag.", "dataset": "eTour", "act": ["Access", "Research", "Display", "Select", "Send", "Delete"], "obj": ["functionality", "delete", "tag", "system", "tags", "form", "list", "request", "deletion", "search tag"], "pred_steps": "Display list of existing search tags, select one or more tags to delete, confirm deletion, remove selected tags from system, update display to reflect changes.", "pred_act": ["Display", "select", "confirm", "remove", "update"], "pred_obj": ["list of existing search tags", "one", "more tags", "deletion", "selected tags", "system", "display", "changes"], "tp": ["Display", "select", "list of existing search tags", "more tags", "deletion", "selected tags", "system"]}
{"index": 21, "ucName": "ExistingErrorTag", "uctext": "He was asked to enter a search tags already in the system.", "steps": "1. Notice the error message and asks for confirmation of its reading. \n2 Confirmation of the reading of the notification. \n3 Recovers the previous state.", "dataset": "eTour", "act": ["Notice", "asks", "Confirm", "Recovers"], "obj": ["error message", "confirmation", "reading", "notification", "previous state"], "pred_steps": "Display search field, prompt user to enter existing tags, retrieve input, validate input against existing tags in system, display matching results if valid, otherwise display error message.", "pred_act": ["display", "prompt", "retrieve", "validate", "display", "display"], "pred_obj": ["search field", "user", "existing tags", "input", "system", "matching results", "error message"], "tp": ["retrieve", "error message"]}
{"index": 22, "ucName": "ModifyCulturalHeritage", "uctext": "Change data of a cultural object in the system.", "steps": "1. View the list of cultural goods as a result of the use case SearchCulturalHeritage, it selects and activates a function of change. \n2 Load the data of the cultural and displays the form for editing. \n3 Change data in the form and submit. \n4 Verify the data entered and asks for confirmation of the transaction. Where the data is invalid or insufficient, the system activates the use case Errored. \n5 Confirm the operation. \n6. Stores the modified data of the cultural.", "dataset": "eTour", "act": ["View", "selects", "activates", "Load", "displays", "Change", "submit", "Verify", "asks", "activates", "Confirm", "Stores"], "obj": ["cultural goods", "SearchCulturalHeritage", "function of change", "cultural", "data", "form", "transaction", "Errored", "operation", "modified data of the cultural"], "pred_steps": "Please refer to relevant websites for more information, and feel free to ask me any other questions.", "pred_act": ["refer", "feel", "ask", "is"], "pred_obj": ["relevant websites", "information", "questions"], "tp": ["ask"]}
{"index": 23, "ucName": "InsertTag", "uctext": "Inserts a new tag search.", "steps": "1. Access the functionality of inserting new tag search. \n2 Show the form for entering a tag. \n3 Fill out the form with the required information and submit. \n4 Verify the data entered and check if the tag is already present in the system. In the latter case the active use case ExistingErrorTag. Instead, if the data is invalid or insufficient, the system activates the use case Errored.", "dataset": "eTour", "act": ["Access", "Show", "Fill out", "Submit", "Verify", "Check", "Activate"], "obj": ["functionality", "inserting new tag search", "form", "tag", "data", "system", "ExistingErrorTag", "case Errored"], "pred_steps": "Functional steps: Display tag insertion interface, receive user input for new tag, validate input format, check for duplicate tags, create new tag object, store new tag in database, update tag list display, provide success confirmation to user.", "pred_act": ["Display", "receive", "validate", "check", "create", "store", "update", "provide"], "pred_obj": ["tag insertion interface", "user input", "new tag", "input format", "duplicate tags", "tag object", "database", "tag list display", "success confirmation"], "tp": ["validate", "check", "tag insertion interface", "new tag", "tag object"]}
{"index": 24, "ucName": "ModifyPassword", "uctext": "The Agency Operator chooses to change the password associated with your account", "steps": "5 Choose to change your password by pressing the appropriate \nButton \n6. Upload the form to change the password associated with that work agency \n7 Change your password by entering the new choice and confirming \n8 Save your changes", "dataset": "eTour", "act": ["choose", "press", "upload", "change", "enter", "confirm", "save"], "obj": ["password", "Button", "form", "work agency", "new choice", "changes"], "pred_steps": "AgencyOperator selects ModifyPassword option, system prompts for current password, AgencyOperator enters current password, system validates current password, if valid, system prompts for new password, AgencyOperator enters new password, system prompts for confirmation of new password, AgencyOperator confirms new password, system validates new password against confirmation, if matches, system updates password in database, notifies AgencyOperator of successful password modification, otherwise, system notifies AgencyOperator of password mismatch and prompts to retry.", "pred_act": ["selects", "prompts", "enters", "validates", "prompts", "enters", "prompts", "confirms", "validates", "updates", "notifies", "notifies", "prompts"], "pred_obj": ["AgencyOperator", "ModifyPassword option", "system", "current password", "new password", "confirmation of new password", "database", "successful password modification", "password mismatch", "retry"], "tp": ["selects", "enters", "enters", "confirms", "AgencyOperator"]}
{"index": 25, "ucName": "ModifyPasswordError", "uctext": "He was asked to enter a password but is not confirmed in a correct way.", "steps": "4 Notify an error message. \n5 Confirmation of the reading of the notification. \n6. Back to change your password.", "dataset": "eTour", "act": ["Notify", "Confirm", "Back", "change"], "obj": ["error message", "notification", "password"], "pred_steps": "User attempts to modify password, system prompts for password entry, user inputs password, system validates password entry, validation fails, system displays error message indicating incorrect password entry, prompts user to re-enter password.", "pred_act": ["attempts", "prompts", "inputs", "validates", "fails", "displays", "indicates", "prompts", "re-enter"], "pred_obj": ["User", "password", "system", "entry", "validation", "error message", "re-enter password"], "tp": ["password", "error message", "re-enter password"]}
{"index": 26, "ucName": "Registration", "uctext": "Requires the creation of a new system.", "steps": "1. Enable the logging feature. \n2 View the registration form. \n3 Fill out the form and submit. \n4 Verify the data entered and asks for confirmation of the transaction. Where the data is invalid or insufficient, the system activates the use case Errored. \n5 Confirm the operation. \n6. Create a new account with the data entered.", "dataset": "eTour", "act": ["Enable", "View", "Fill", "Submit", "Verify", "Ask", "Activate", "Confirm", "Create"], "obj": ["logging feature", "registration form", "form", "data", "transaction", "system", "use case Errored", "operation", "account"], "pred_steps": "Display registration form, input user information including username, password, email, validate input data for completeness and format, check username availability, store user information securely in the database, send confirmation email with account details, display registration success message.", "pred_act": ["Display", "input", "validate", "check", "store", "send", "display"], "pred_obj": ["registration form", "user information", "username", "password", "email", "input data", "completeness", "format", "database", "confirmation email", "account details", "registration success message"], "tp": ["validate", "check", "registration form", "input data", "format", "account details"]}
{"index": 27, "ucName": "SEARCH", "uctext": "Research and cultural heritage for all.", "steps": "1. Activate the search functionality. \n2 Displays the corresponding form. \n3 Fill out the form and submit. \n4 Gets the position of the Guest citing the case of use location and process research.", "dataset": "eTour", "act": ["Activate", "Displays", "Fill", "submit", "Gets"], "obj": ["search functionality", "form", "Guest", "case", "use location", "process research"], "pred_steps": "Functional steps: Initiate search request, input search criteria related to research and cultural heritage, validate search criteria, execute search query on database, retrieve relevant results, filter results based on relevance and criteria, display search results to user, allow user to refine search or view details of specific results.", "pred_act": ["Initiate", "input", "validate", "execute", "retrieve", "filter", "display", "allow", "refine", "view"], "pred_obj": ["search request", "search criteria", "research", "cultural heritage", "database", "relevant results", "search results", "user", "specific results"], "tp": ["display", "research"]}
{"index": 28, "ucName": "LOGIN", "uctext": "Ensures a registered user to access the system with the privileges that fall.", "steps": "1. Activate the login feature. \n2 Displays the corresponding form. \n3 Fill out the form with login information and submit. \n4 Check the correctness of the data, if not corrected on the use case LoginError.", "dataset": "eTour", "act": ["Activate", "Displays", "Fill", "submit", "Check", "corrected", "output"], "obj": ["login feature", "form", "login information", "data", "LoginError"], "pred_steps": "LOGIN: User initiates login process, system prompts for username and password, user inputs credentials, system validates credentials against stored data, if valid, grants access with appropriate privileges, if invalid, displays error message and prompts for re-entry.", "pred_act": ["initiates", "prompts", "inputs", "validates", "grants", "displays", "prompts"], "pred_obj": ["LOGIN", "User", "login process", "system", "username", "password", "credentials", "stored data", "access", "privileges", "error message", "re-entry"], "tp": ["displays", "LOGIN", "login process", "credentials", "stored data", "error message"]}
{"index": 29, "ucName": "LoginError", "uctext": "The data supplied for the login is incorrect.", "steps": "1. Notice that the data entered for the login is not valid and asks for confirmation of the reading. \n2 Confirmation of the reading of the notification. \n3 Recovers the previous state.", "dataset": "eTour", "act": ["Notice", "asks", "Confirmation", "Recovers"], "obj": ["data", "login", "confirmation", "reading", "notification", "previous state"], "pred_steps": "User enters login credentials, system validates credentials against stored data, system detects incorrect credentials, system displays error message indicating incorrect login data.", "pred_act": ["enters", "validates", "detects", "displays"], "pred_obj": ["User", "login credentials", "system", "stored data", "incorrect credentials", "error message", "incorrect login data"], "tp": []}
{"index": 30, "ucName": "Logout", "uctext": "Ends the current session.", "steps": "1. Access the functionality of disconnection from the system. \n2 Asks for confirmation of the transaction. \n3 Confirm the request for disconnection. \n4 Disconnects the Registered User.", "dataset": "eTour", "act": ["Access Asks Confirm Confirm Disconnects"], "obj": ["functionality", "disconnection", "system", "confirmation", "transaction", "request", "Registered User"], "pred_steps": "Verify user identity, confirm logout request, invalidate current session token, clear session data from server, redirect user to login page, display logout success message.", "pred_act": ["Verify", "confirm", "invalidate", "clear", "redirect", "display"], "pred_obj": ["user identity", "logout request", "current session token", "session data", "server", "login page", "logout success message"], "tp": ["confirm", "logout request"]}
{"index": 31, "ucName": "InsertBanner", "uctext": "Inserting a new banner associated with the point of rest.", "steps": "1. Select the feature for the insertion of a new banner. \n2 Displays a form for the selection of an image. \n3 Select an image and sends the request for entering the system. \n4 Check the characteristics of the inserted, check that the number of banner did not exceed the maximum point of the restaurant and asks for confirmation of the insertion of the banner. In the event that the inserted image is not valid, enable the use case Errored. \n5 Confirm the operation of insertion. \n6. Remember the banners associated with the point of rest.", "dataset": "eTour", "act": ["Select", "Displays", "Select", "Sends", "Check", "Asks", "Enable", "Confirm", "Remember"], "obj": ["feature", "new banner", "form", "selection", "image", "system", "characteristics", "banner", "maximum point", "restaurant", "confirmation", "insertion", "use case Errored", "operation", "banners", "point of rest"], "pred_steps": "Functional steps: Open the application, navigate to the banner management section, select the option to insert a new banner, enter the banner details including image and associated point of rest, preview the banner to ensure correctness, save the banner, and verify that the new banner is successfully associated with the designated point of rest.", "pred_act": ["Open", "navigate", "select", "enter", "preview", "save", "verify"], "pred_obj": ["application", "banner management section", "option", "new banner", "banner details", "image", "associated point of rest", "banner", "correctness", "designated point of rest"], "tp": ["select", "verify", "banner management section", "option", "new banner", "banner details", "image", "associated point of rest", "banner", "designated point of rest"]}
{"index": 32, "ucName": "ModifyBanner", "uctext": "Changing the image of a banner ad.", "steps": "1. Select the editing functionality of the banner. \n2 View the list of banner associated with the point of rest. \n3 Select a banner from the list and enter the editing functionality. \n4 Displays a form for the selection of an image. \n5 Select a picture and send the request to change the system. \n6. Check the characteristics of the inserted and asks for confirmation of the change of the banner. In the event that the inserted image is not valid, enable the use case Errored. \n7 Confirmation of the transaction change. \n8 Bookmark this new image for the selected banner.", "dataset": "eTour", "act": ["Select", "View", "Select", "enter", "Displays", "Select", "send", "Check", "asks", "enable", "Confirmation", "Bookmark"], "obj": ["editing functionality", "banner", "list", "point of rest", "banner", "form", "image", "picture", "system", "characteristics", "inserted", "change", "banner", "use case Errored", "transaction change", "new image", "selected banner"], "pred_steps": "Display current banner image, allow user to select new image from media library or upload new image, validate image format and size, provide image editing tools if needed, preview selected image, confirm changes, update banner image in the system, save changes, and refresh the display to show the updated banner.", "pred_act": ["Display", "allow", "select", "upload", "validate", "provide", "preview", "confirm", "update", "save", "refresh"], "pred_obj": ["current banner image", "user", "new image", "media library", "image format", "image size", "image editing tools", "selected image", "changes", "banner image in the system", "saved changes", "updated banner", "display"], "tp": ["Display", "allow", "select", "confirm", "current banner image", "new image", "image format", "image size", "image editing tools", "selected image", "changes", "banner image in the system", "updated banner", "display"]}
{"index": 33, "ucName": "SearchCulturalHeritage", "uctext": "Returns the list of cultural objects in the system according to certain parameters.", "steps": "1. Activate the search functionality of a cultural object. \n2 Show the form for research. \n3 Fill in the search form and submit. \n4 Processing the request.", "dataset": "eTour", "act": ["Please refer to relevant websites for more information", "feel free to ask me any other questions"], "obj": ["search functionality", "cultural object", "form", "research", "search form", "request"], "pred_steps": "Please refer to relevant websites for more information, and feel free to ask me any other questions.", "pred_act": ["refer", "feel", "ask", "is"], "pred_obj": ["websites", "information", "questions"], "tp": ["feel", "ask"]}
{"index": 34, "ucName": "DeleteBanner", "uctext": "Delete a banner ad associated with the point of rest.", "steps": "1. Select the feature for removal of the banner. \n2 View the list of banner associated with the point of rest. \n3 Select a banner from the list and enter the function of elimination. \n4 Displays a message confirming the deletion. \n5 Confirm the operation. \n6. Removes the banner.", "dataset": "eTour", "act": ["Select", "View", "Select", "enter", "Displays", "Confirm", "Removes"], "obj": ["feature", "banner", "list", "point of rest", "function of elimination", "message", "operation"], "pred_steps": "Receive user request to delete banner, validate user permissions, identify the banner ad to be deleted based on the associated point of rest, confirm deletion with user, remove the banner ad from the system database, update the point of rest configuration to reflect the deletion, log the deletion action, and notify the user of successful deletion.", "pred_act": ["Receive", "validate", "identify", "confirm", "remove", "update", "log", "notify"], "pred_obj": ["user request", "banner", "user permissions", "banner ad", "associated point of rest", "system database", "point of rest configuration", "deletion action", "user", "successful deletion"], "tp": ["confirm", "remove", "banner", "banner ad", "associated point of rest", "point of rest configuration", "deletion action"]}
{"index": 35, "ucName": "ModifyMenu", "uctext": "Change the daily menu of a restaurant.", "steps": "1. Activate the editing functionality of the menu. \n2 Displays a form with seven days of the week. \n3 Select a day of the week and submit the form. \n4 Upload the data menu for the selected day and loads them into a form. \n5 Edit menu of the selected day and submit the form. \n6. Verify the data entered and asks for confirmation of the edit menu. Where the data are insufficient or invalid, the active use case Errored. \n7 Confirm the operation. \n8 Saves changes to the menu selected.", "dataset": "eTour", "act": ["Activate", "Displays", "Select", "Submit", "Upload", "Loads", "Edit", "Verify", "Asks", "Error", "Confirm", "Save"], "obj": ["editing functionality", "menu", "form", "seven days of the week", "day of the week", "data menu", "selected day", "edit menu", "data", "active use case", "operation", "changes", "menu selected"], "pred_steps": "DisplayMenu, SelectMenuItemToModify, InputNewMenuItemDetails, ConfirmModification, UpdateMenuInSystem, SaveModifiedMenu, NotifyKitchenOfChanges", "pred_act": ["DisplayMenu", "SelectMenuItemToModify", "InputNewMenuItemDetails", "ConfirmModification", "UpdateMenuInSystem", "SaveModifiedMenu", "NotifyKitchenOfChanges"], "pred_obj": ["DisplayMenu", "SelectMenuItemToModify", "InputNewMenuItemDetails", "ConfirmModification", "UpdateMenuInSystem", "SaveModifiedMenu", "NotifyKitchenOfChanges"], "tp": ["ConfirmModification", "SaveModifiedMenu", "DisplayMenu", "UpdateMenuInSystem", "SaveModifiedMenu"]}
{"index": 36, "ucName": "DeleteMenu", "uctext": "Delete a daily menu of a restaurant.", "steps": "1. Enable the functionality of deleting a menu. \n2 Displays a form containing the seven days of the week. \n3 Select a day of the week and submit the form. \n4 Calls to confirm the deletion. \n5 Confirm the operation. \n6. Delete the daily menu selection.", "dataset": "eTour", "act": ["Enable", "display", "select", "submit", "call", "confirm", "delete"], "obj": ["functionality", "deleting a menu", "form", "seven days of the week", "day of the week", "form", "deletion", "operation", "daily menu selection"], "pred_steps": "DisplayMenuList, SelectMenuToDelete, ConfirmDeletion, CheckDeletionPermissions, RemoveMenuFromDatabase, UpdateMenuDisplay, NotifyStaffOfDeletion", "pred_act": ["Display", "Select", "Confirm", "Check", "Remove", "Update", "Notify"], "pred_obj": ["DisplayMenuList", "SelectMenuToDelete", "ConfirmDeletion", "CheckDeletionPermissions", "RemoveMenuFromDatabase", "UpdateMenuDisplay", "NotifyStaffOfDeletion"], "tp": ["Display", "Select", "Confirm", "SelectMenuToDelete", "ConfirmDeletion", "CheckDeletionPermissions", "RemoveMenuFromDatabase", "NotifyStaffOfDeletion"]}
{"index": 37, "ucName": "ModifyRefreshmentPoint", "uctext": "Change data point associated refreshment.", "steps": "1. Enable the functionality of the information required by the point of rest. \n2 Upload data point Refreshments and displays them in a form. \n3 Change data in the form and submit. \n4 Verify the data entered and asks for confirmation of the change. Where the data is invalid or insufficient, the system activates the use case Errored. \n5 Confirm the operation. \n6. Stores the modified data of the point of rest.", "dataset": "eTour", "act": ["Enable", "Upload", "Refresh", "Display", "Change", "Submit", "Verify", "Ask", "Activate", "Confirm", "Store"], "obj": ["functionality", "information", "point of rest", "data point Refreshments", "form", "data", "system", "use case Errored", "operation", "modified data", "point of rest"], "pred_steps": "DisplayRefreshmentPointDetails, AllowUserToSelectPoint, ValidateSelectedPoint, RetrieveAssociatedRefreshmentData, AllowUserToModifyRefreshmentData, ValidateModifiedData, SaveModifiedRefreshmentData, UpdateRefreshmentPointAssociation, ConfirmModificationToUser", "pred_act": ["DisplayRefreshmentPointDetails", "AllowUserToSelectPoint", "ValidateSelectedPoint", "RetrieveAssociatedRefreshmentData", "AllowUserToModifyRefreshmentData", "ValidateModifiedData", "SaveModifiedRefreshmentData", "UpdateRefreshmentPointAssociation", "ConfirmModificationToUser"], "pred_obj": ["DisplayRefreshmentPointDetails", "AllowUserToSelectPoint", "ValidateSelectedPoint", "RetrieveAssociatedRefreshmentData", "AllowUserToModifyRefreshmentData", "ValidateModifiedData", "SaveModifiedRefreshmentData", "UpdateRefreshmentPointAssociation", "ConfirmModificationToUser"], "tp": ["ConfirmModificationToUser", "AllowUserToSelectPoint", "ValidateSelectedPoint", "AllowUserToModifyRefreshmentData", "ValidateModifiedData", "SaveModifiedRefreshmentData"]}
{"index": 38, "ucName": "ConventionRequest", "uctext": "Require to conclude a Convention between the points of rest and the agency involved.", "steps": "1. Enable the functionality to request the Convention to the Agency. \n2 Displays a form for entering data of the Convention. \n3 Inserts the data in the form of the agreement and submit. \n4 Verify the data entered and asks for confirmation of the request. Where the data is invalid or insufficient, the system activates the use case Errored. \n5 Confirm the operation. \n6. Send the request to the Convention.", "dataset": "eTour", "act": ["Enable", "Displays", "Inserts", "Verify", "asks", "Confirm", "Send", "output"], "obj": ["Convention", "Agency", "form", "data", "agreement", "system", "use case Errored", "operation", "request"], "pred_steps": "Initiate request for Convention, gather details from points of rest and agency, validate provided information, draft Convention document, review and approve document by all parties, finalize and sign Convention, store Convention document in system, notify all parties of Convention completion.", "pred_act": ["Initiate", "gather", "validate", "draft", "review", "approve", "finalize", "sign", "store", "notify"], "pred_obj": ["request", "Convention", "details", "points of rest", "agency", "provided information", "Convention document", "all parties", "system", "all parties of Convention completion"], "tp": ["validate", "request", "Convention", "agency", "system"]}
{"index": 39, "ucName": "ViewPersonalStatistic", "uctext": "Viewing statistics for Point Of Restaurants", "steps": "1. Select the feature to display personal statistics. \n2 Displays a form that shows data for the statistics associated refreshment point.", "dataset": "eTour", "act": ["Select", "display", "shows"], "obj": ["feature", "personal statistics", "form", "data", "statistics", "refreshment point"], "pred_steps": "Open application, authenticate user, navigate to personal statistics section, select Point Of Restaurants, retrieve and display statistics, allow user to filter statistics by date range, allow user to sort statistics by various criteria, provide graphical representation of statistics, allow user to export statistics in desired format, handle user errors gracefully.", "pred_act": ["Open", "authenticate", "navigate", "select", "retrieve", "display", "allow", "allow", "allow", "provide", "allow", "handle"], "pred_obj": ["application", "user", "personal statistics section", "Point Of Restaurants", "statistics", "date range", "various criteria", "graphical representation", "desired format", "user errors"], "tp": ["select", "display", "personal statistics section", "statistics"]}
{"index": 40, "ucName": "ModifySearchPreference", "uctext": "Edit your personal search preferences.", "steps": "1. Access to functionality for the modification of personal search preferences. \n2 Upload your search preferences and displays them in a form. \n3 Edit the fields in the form and submit. \n4 Asks confirmation. \n5 Confirmation for changing search preferences. \n6. Memorize search preferences changed.", "dataset": "eTour", "act": ["Access", "upload", "display", "edit", "submit", "ask", "confirm", "memorize"], "obj": ["functionality", "personal search preferences", "search preferences", "form", "fields", "confirmation", "search preferences changed"], "pred_steps": "Open user preferences interface, display current search preferences, allow user to select and modify preference options, save modified preferences, update displayed preferences to reflect changes, provide confirmation of successful modification.", "pred_act": ["Open", "display", "allow", "select", "modify", "save", "update", "provide", "confirm"], "pred_obj": ["user preferences interface", "current search preferences", "user", "preference options", "modified preferences", "displayed preferences", "confirmation of successful modification"], "tp": ["display", "modify", "confirm", "user preferences interface", "current search preferences", "preference options", "modified preferences", "displayed preferences", "confirmation of successful modification"]}
{"index": 41, "ucName": "ModifyTouristData", "uctext": "Change data associated with your account.", "steps": "1. Access to functionality for the modification of data. \n2 Loads the data and displays them in a form. \n3 Edit the fields in the form and submit. \n4 Check the modified information and asks for confirmation of the change. Where the data is invalid or insufficient, the system activates the use case Errored. \n5 Confirmation of the transaction change. \n6. Stores the modified data.", "dataset": "eTour", "act": ["Access", "Loads", "displays", "Edit", "submit", "Check", "asks", "activates", "Confirmation", "Stores"], "obj": ["functionality", "data", "form", "fields", "modified information", "change", "system", "use case Errored", "transaction change"], "pred_steps": "Authenticate user, retrieve user account data, display current data, receive user input for modifications, validate input data, update account data with modifications, save updated data, confirm modifications to user, log modification activity.", "pred_act": ["Authenticate", "retrieve", "display", "receive", "validate", "update", "save", "confirm", "log"], "pred_obj": ["user", "user account data", "current data", "user input", "input data", "account data", "updated data", "modification activity"], "tp": ["display", "confirm", "current data", "input data", "account data", "updated data", "modification activity"]}
{"index": 42, "ucName": "ModifyGenericPreference", "uctext": "Edit Preferences generic personal.", "steps": "1. Access to functionality for the modification of generic personal preferences. \n2 Upload your preferences and the general view in a form. \n3 Edit the fields in the form and submit. \n4 Asks for confirmation of the change. \n5 Confirm the operation. \n6. Stores preferences changed.", "dataset": "eTour", "act": ["Access", "Upload", "Edit", "Submit", "Asks", "Confirm", "Stores"], "obj": ["functionality", "generic personal preferences", "preferences", "general view", "form", "fields", "change", "operation", "preferences changed"], "pred_steps": "OpenPreferencesScreen, RetrieveCurrentUserPreferences, DisplayPreferencesForEditing, AcceptUserInputForPreferenceModification, ValidateInput, SaveModifiedPreferences, UpdatePreferencesDisplay, NotifyUserOfSuccessfulModification, ClosePreferencesScreen", "pred_act": ["Open", "Retrieve", "Display", "Accept", "Validate", "Save", "Update", "Notify", "Close"], "pred_obj": ["OpenPreferencesScreen", "RetrieveCurrentUserPreferences", "DisplayPreferencesForEditing", "AcceptUserInputForPreferenceModification", "ValidateInput", "SaveModifiedPreferences", "UpdatePreferencesDisplay", "NotifyUserOfSuccessfulModification", "ClosePreferencesScreen"], "tp": ["OpenPreferencesScreen", "RetrieveCurrentUserPreferences", "SaveModifiedPreferences", "UpdatePreferencesDisplay", "ClosePreferencesScreen"]}
{"index": 43, "ucName": "ViewPreferredSite", "uctext": "View the list of personal favorites.", "steps": "1. Select the feature to display the list of personal favorites. \n2 Upload the list of bookmarks.", "dataset": "eTour", "act": ["Select", "display", "upload"], "obj": ["feature", "list", "personal favorites", "bookmarks"], "pred_steps": "Display the list of personal favorites", "pred_act": ["Display"], "pred_obj": ["list", "personal favorites"], "tp": ["Display", "list", "personal favorites"]}
{"index": 44, "ucName": "ViewCulturalHeritageCard", "uctext": "View the details of the selected cultural.", "steps": "1. View the list of cultural goods as a result of the use case SearchCulturalHeritage, it selects and activates a function to view the card. \n2 Loads the data for the selected cultural.", "dataset": "eTour", "act": ["View", "selects", "activates", "Loads"], "obj": ["cultural goods", "SearchCulturalHeritage", "function", "card", "data", "cultural"], "pred_steps": "Please refer to relevant websites for more information, and feel free to ask me any other questions.", "pred_act": ["refer", "ask"], "pred_obj": ["relevant websites", "questions"], "tp": []}
{"index": 45, "ucName": "ViewVisitedSites", "uctext": "View the list of sites for which it has issued a feedback.", "steps": "1. Select the feature to display the list of sites visited personal. \n2 Upload the list of sites for which the tourist has issued a Feedback", "dataset": "eTour", "act": ["Select", "display", "Upload"], "obj": ["feature", "list of sites visited", "tourist", "Feedback"], "pred_steps": "Retrieve user data, fetch list of sites with user-issued feedback, display the list of visited sites with feedback.", "pred_act": ["Retrieve", "fetch", "display"], "pred_obj": ["user data", "list of sites", "user-issued feedback", "list of visited sites with feedback"], "tp": ["display", "list of sites", "user-issued feedback", "list of visited sites with feedback"]}
{"index": 46, "ucName": "InsertPreferenceSite", "uctext": "Inserts a site selected in the list of bookmarks.", "steps": "1. Activate the feature for the insertion of the selected site from the bookmarks. \n2 Prompt the inclusion \n3 Confirm the input. \n4 Inserts the selected site in the list of bookmarks.", "dataset": "eTour", "act": ["Activate", "Prompt", "Confirm", "Inserts"], "obj": ["feature", "insertion", "site", "bookmarks", "inclusion", "input", "list"], "pred_steps": "Please refer to relevant websites for more information, and feel free to ask me any other questions.", "pred_act": ["refer", "feel", "ask"], "pred_obj": ["relevant websites", "information", "questions"], "tp": []}
{"index": 47, "ucName": "DeleteSiteFromPreferences", "uctext": "Tourism delete a site from the list of bookmarks.", "steps": "1. Choose to remove your site from the list of bookmarks by specific features. \n2 Prompt removal \n3 Confirm the removal. \n4 Removes the selected site from the list of bookmarks.", "dataset": "eTour", "act": ["Choose", "remove", "Prompt", "Confirm", "Removes"], "obj": ["site", "list", "bookmarks", "specific features", "removal", "selected site"], "pred_steps": "OpenPreferences, LocateBookmarkSection, FindSiteToDelete, SelectSite, ConfirmDeletion, RemoveSiteFromList, SavePreferences, UpdateUI.", "pred_act": ["OpenPreferences", "LocateBookmarkSection", "FindSiteToDelete", "SelectSite", "ConfirmDeletion", "RemoveSiteFromList", "SavePreferences", "UpdateUI"], "pred_obj": ["OpenPreferences", "LocateBookmarkSection", "FindSiteToDelete", "SelectSite", "ConfirmDeletion", "RemoveSiteFromList", "SavePreferences", "UpdateUI"], "tp": ["ConfirmDeletion", "RemoveSiteFromList", "FindSiteToDelete", "SelectSite", "RemoveSiteFromList"]}
{"index": 48, "ucName": "InsertFeedback", "uctext": "Inserts a feedback for the selected site.", "steps": "1. Activate the feature on the issue of feedback. \n2 Verify that the visitor has not already issued a feedback for the site and displays a form for entering the feedback for the selected site. In case the visitor has already issued a feedback for the site selected, activates the use case FeedbackAlreadyReleased. \n3 Fill out the form, selecting one vote and inserting a comment, then submit. \n4 Verify the data entered and confirm the cheide. Where the data is invalid or insufficient, the system activates the use case Errored. \n5 Confirming the issue of feedback. \n6. Remember feedback and inserts the selected site in the list of sites visited.", "dataset": "eTour", "act": ["Activate", "Verify", "displays", "issue", "activates", "Fill", "selecting", "inserting", "submit", "Verify", "confirm", "activates", "Confirming", "Remember", "inserts"], "obj": ["feature", "feedback", "visitor", "site", "form", "FeedbackAlreadyReleased", "vote", "comment", "data", "cheide", "system", "Errored", "list", "sites visited"], "pred_steps": "Display list of available sites, select site, input feedback details, validate feedback input, store feedback in database associated with selected site, notify user of successful feedback submission.", "pred_act": ["Display", "select", "input", "validate", "store", "notify"], "pred_obj": ["available sites", "site", "feedback details", "feedback input", "database", "selected site", "user", "successful feedback submission"], "tp": ["Display", "select", "validate", "notify", "available sites", "site", "feedback details", "feedback input", "selected site"]}
{"index": 49, "ucName": "ModifyComment", "uctext": "Edit the comment previously issued.", "steps": "1. Choose to change the comment on the feedback for the site issued by the appropriate functionality. \n2 Verify the data entered and asks for confirmation of the change. Where the data is invalid or insufficient, the system activates the use case Errored. \n3 Confirm the change of the comment. \n4 Edit commentary on selected feedback", "dataset": "eTour", "act": ["choose", "change", "verify", "ask", "activate", "confirm", "edit"], "obj": ["comment", "feedback", "site", "functionality", "data", "change", "use case Errored", "confirmation"], "pred_steps": "Display comment, allow user to select comment to modify, enable editing of selected comment, save modified comment, update comment display with saved changes.", "pred_act": ["Display", "allow", "select", "enable", "edit", "save", "update"], "pred_obj": ["comment", "user", "selected comment", "modified comment", "saved changes"], "tp": ["select", "enable", "edit", "comment", "saved changes"]}
{"index": 50, "ucName": "FeedbackAlreadyReleased", "uctext": "", "steps": "1. Notification that the user has already issued a feedback for the site and cancel the operation to insert a new feedback. \n2 Confirmation of the reading of the notification. \n3 Recovers the previous state.", "dataset": "eTour", "act": ["issue", "cancel", "insert", "confirm", "recover"], "obj": ["Notification", "user", "feedback", "site", "operation", "confirmation", "reading", "previous state"], "pred_steps": "Check if user is logged in, retrieve user ID, display feedback form, allow user to input feedback, validate feedback input, store feedback with user ID and timestamp, check if product version is already released, if yes, flag feedback as post-release, send notification to development team, update feedback status to submitted, display confirmation message to user.", "pred_act": ["Check", "retrieve", "display", "allow", "validate", "store", "check", "flag", "send", "update", "display"], "pred_obj": ["user", "user ID", "feedback form", "feedback", "product version", "development team", "feedback status", "confirmation message"], "tp": ["retrieve", "user", "feedback form", "feedback", "confirmation message"]}
{"index": 51, "ucName": "Localization", "uctext": "Returns the current position of the tourist.", "steps": "n \nDescription: Returns the current position of the tourist. \nParticipating Actor: System initialization \nEntry conditions: He began a search or an advanced search. \nFlow of events Gps System: \n1. The system requires the data for the position. \n2 The GPS calculates the position of the tourist. \n3 The system is on hold until the data of the position.", "dataset": "eTour", "act": ["requires", "calculates", "is on hold", "output"], "obj": ["tourist", "system initialization", "search", "advanced search", "system", "data", "position", "GPS"], "pred_steps": "Functional steps: Retrieve current position data of the tourist, process the position data, format the position data for display, and present the current position to the tourist.", "pred_act": ["Retrieve", "process", "format", "present"], "pred_obj": ["current position data", "tourist", "position data", "display"], "tp": ["current position data", "tourist", "position data"]}
{"index": 52, "ucName": "AdvancedSearch", "uctext": "The tourist searching for a site using the potential offered by the Advanced Search.", "steps": "1. Enable the advanced search feature from your personal area. \n2 View the advanced search form. \n3 Fill in the form of advanced search and submit. \n4 Gets the position of relying on the tourist event of the use location and process the request.", "dataset": "eTour", "act": ["Enable", "View", "Fill", "Submit", "Get", "Process"], "obj": ["advanced search feature", "personal area", "advanced search form", "form", "position", "tourist event", "use location", "request"], "pred_steps": "Tourist accesses Advanced Search feature, enters search criteria including location, site type, historical significance, and rating, selects filter options such as price range and visitor reviews, initiates search, system processes query and displays results matching criteria, tourist browses results, views detailed information of selected site, and may refine search or select site for further exploration.", "pred_act": ["accesses", "enters", "selects", "initiates", "processes", "displays", "browses", "views", "may refine", "may select"], "pred_obj": ["Tourist", "Advanced Search feature", "search criteria", "location", "site type", "historical significance", "rating", "filter options", "price range", "visitor reviews", "system", "query", "results", "detailed information", "selected site"], "tp": ["processes", "views", "Tourist", "Advanced Search feature", "search criteria", "location"]}
{"index": 53, "ucName": "ViewSiteCard", "uctext": "View the details of a particular site.", "steps": "1. Select the function for displaying the card on a site chosen. \n2 Upload data from the database.", "dataset": "eTour", "act": ["Select", "display", "upload", "output"], "obj": ["function", "displaying the card", "site", "data", "database"], "pred_steps": "Open application, navigate to site list, select desired site, retrieve site details, display site details on site card, allow user to view site card with details.", "pred_act": ["Open", "navigate", "select", "retrieve", "display", "allow", "view"], "pred_obj": ["application", "site list", "desired site", "site details", "site card", "user", "site card with details"], "tp": ["select", "display", "site list", "desired site", "site details", "site card"]}
{"index": 54, "ucName": "DeleteRefreshmentPoint", "uctext": "Delete a refreshment from the system.", "steps": "1. View a list of points of rest as a result of the use case SearchCulturalHeritage, it selects and activates a function of elimination. \n2 Asks for confirmation of the transaction. \n3 Confirm the deletion. \n4 Deletes the selected point of rest.", "dataset": "eTour", "act": ["View", "selects", "activates", "asks", "confirm", "deletes"], "obj": ["points of rest", "SearchCulturalHeritage", "function of elimination", "transaction", "deletion", "point of rest"], "pred_steps": "Display list of refreshment points, select refreshment point to delete, confirm deletion, remove selected refreshment point from system, update database, notify user of successful deletion.", "pred_act": ["Display", "select", "confirm", "remove", "update", "notify"], "pred_obj": ["refreshment points", "refreshment point", "deletion", "system", "database", "user"], "tp": ["select", "confirm", "remove", "refreshment points", "refreshment point", "deletion"]}
{"index": 55, "ucName": "ActiveConvention", "uctext": "Convention active request by a refreshment point.", "steps": "1. Enable the activation function of the Convention. \n2 Load the data request of the Convention from the point of rest and displays the corresponding form. \n3 Check the data of the agreement and decide for activation. \n4 Asks for confirmation of the activation. \n5 Confirm the operation. \n6. Processing the request.", "dataset": "eTour", "act": ["Enable", "Load", "display", "Check", "decide", "Ask", "Confirm", "Processing"], "obj": ["Convention", "activation function", "data request", "agreement", "activation", "confirmation", "operation", "request"], "pred_steps": "Receive refreshment point active convention request, validate request authenticity, fetch convention details from database, check if convention is currently inactive, update convention status to active in database, log activity, send confirmation to refreshment point, update UI to reflect active convention status.", "pred_act": ["Receive", "validate", "fetch", "check", "update", "log", "send", "update"], "pred_obj": ["refreshment point", "active convention request", "request authenticity", "database", "convention details", "convention", "convention status", "activity", "confirmation", "UI"], "tp": ["validate", "check", "request authenticity", "convention", "confirmation"]}
{"index": 56, "ucName": "ModifyDataRefreshmentPointAgency", "uctext": "Edit the data pertaining to a designated point of rest.", "steps": "1. View a list of points of rest as a result of the use case SearchRefreshmentPoint, it selects an active and functional data changes. \n2 Upload data from the point of rest and displays the form of change. \n3 Change data in the form and submit. \n4 Verify the data entered in form and asks for confirmation of the transaction. Where the data is invalid or insufficient, the system activates the use case Errored. \n5 Confirm the operation. \n6. Stores the modified data of the point of rest.", "dataset": "eTour", "act": ["View", "selects", "Upload", "displays", "Change", "submit", "Verify", "asks", "activates", "Confirm", "Stores"], "obj": ["points of rest", "SearchRefreshmentPoint", "data changes", "point of rest", "form of change", "data", "form", "transaction", "Errored", "operation", "modified data", "point of rest"], "pred_steps": "Load designated point of rest data, display data for user review, allow user to edit data fields, validate user input, save edited data, update database with modified data, refresh display with updated data, confirm modification success to user.", "pred_act": ["Load", "display", "allow", "edit", "validate", "save", "update", "refresh", "confirm"], "pred_obj": ["designated point of rest data", "user", "data fields", "user input", "edited data", "database", "modified data", "display", "confirmation of modification success"], "tp": ["display", "validate", "confirm", "designated point of rest data", "data fields", "edited data", "database", "modified data", "confirmation of modification success"]}
{"index": 57, "ucName": "SearchRefreshmentPoint", "uctext": "Returns the list of points of rest in the system according to certain parameters.", "steps": "1. Activate the search functionality of a point of rest. \n2 Show the form for research. \n3 Fill in the search form and submit. \n4 Processing the request.", "dataset": "eTour", "act": ["Activate", "Show", "Fill", "Submit", "Processing"], "obj": ["search functionality", "point of rest", "form", "research", "search form", "request"], "pred_steps": "Receive input parameters; Validate input parameters; Query database for rest points based on parameters; Filter results based on parameters; Sort results based on relevance or distance; Generate list of rest points; Return list of rest points to user interface.", "pred_act": ["Receive", "Validate", "Query", "Filter", "Sort", "Generate", "Return"], "pred_obj": ["input parameters", "database", "rest points", "parameters", "results", "relevance", "distance", "list of rest points", "user interface"], "tp": ["rest points", "list of rest points"]}
{"index": 0, "ucName": "Create and Deactivate Patients Use Case", "uctext": "An HCP is able to create a patient  or disable a selected patient . The create/disable patients and HCP transaction is logged (UC5).\n\n", "steps": " The HCP enters a patient as a new user of iTrust Medical Records system. Only the name and email are provided. The patient's assigned MID and a secret key (the initial password) are personally provided to the user, with which the user can reset his/her password. The HCP can edit the patient according to data format 6.4  with all initial values (except patient MID) defaulting to null and/or 0 as appropriate. Patient MID should be the number assigned when the patient is added to the system and cannot be edited. The HCP does not have the ability to enter/edit/view the patient's security question/password.\n The HCP selects a patient to deactivate. The HCP is presented with a confirmation containing the name of the patient and determines if it is the patient they intend to deactivate . A deactivated patient can not be modified or log into the system, and can only be reactivated by the administrator.\n The HCP uploads a comma-seperated value file containing one patient per row. The fields of the CSV file must include at least the first name, last name, and e-mail address, with additional columns available for the other demographic values. The patients are created, the tables are populated, and the MIDS and temporary passwords are displayed to the HCP in a table. The event is logged.\n", "dataset": "iTrust", "act": ["enters", "provides", "assigns", "can reset", "can edit", "does not have", "selects", "is presented", "determines", "can not be modified", "can not log", "can only be reactivated", "uploads", "must include", "are created", "are populated", "are displayed", "is logged"], "obj": ["HCP", "patient", "iTrust Medical Records system", "name", "email", "MID", "secret key", "initial password", "data format", "4", "initial values", "patient MID", "security question", "password", "confirmation", "first name", "last name", "e-mail address", "demographic values", "comma-seperated value file", "CSV file", "tables", "MIDS", "temporary passwords", "event", "system", "administrator"], "pred_steps": "HCP accesses system, initiates patient creation by inputting patient details, system validates and saves patient information, logs creation transaction; alternatively, HCP selects patient to disable, system confirms selection, disables patient, logs disable transaction.", "pred_act": ["accesses", "initiates", "inputs", "validates", "saves", "logs", "selects", "confirms", "disables"], "pred_obj": ["HCP", "system", "patient", "patient details", "patient information", "creation transaction", "disable transaction"], "tp": ["selects", "HCP", "system", "patient", "patient details"]}
{"index": 1, "ucName": "Enter/edit personal health records Use Case", "uctext": "An HCP chooses to enter/edit personal health information for a patient . The information is viewed/edited by the HCP .\n\n", "steps": " The health care personnel enters a MID  of a patient and confirms their selection .\n The health care personnel may enter/edit personal health information including Patient Information (Data Format 6.4.1), Insurance Information (6.4.2), Emergency Contact Information (6.4.3), and Patient’s Health Information (((requirements:df4|6.4.4(). The HCP can indicate drug allergies . The HCP can indicate the patient has passed away, providing an appropriate diagnosis code.\n The HCP can select a medication from a pull down list and add it to the list of medications the patient is allergic to. The medication is checked against the patient's current and future prescriptions. The HCP is notified of any current or future prescriptions to which the patient has a drug allergy.\n", "dataset": "iTrust", "act": ["enters", "confirms", "may enter", "may edit", "can indicate", "can select", "add", "is checked", "is notified"], "obj": ["health care personnel", "MID", "patient", "selection", "personal health information", "Patient Information (Data Format", "1", "Insurance Information", "2", "Emergency Contact Information", "3", "Patient’s Health Information (requirements:df4", "4", "drug allergies", "diagnosis code", "medication", "list of medications", "patient's current prescriptions", "patient's future prescriptions", "HCP"], "pred_steps": "HCP selects patient record, accesses personal health information entry/edit interface, inputs/modifies patient's personal health information, saves changes, views updated personal health information, confirms accuracy of entered/edited data.", "pred_act": ["selects", "accesses", "inputs", "modifies", "saves", "views", "confirms"], "pred_obj": ["HCP", "patient record", "personal health information entry/edit interface", "patient's personal health information", "changes", "updated personal health information", "entered/edited data"], "tp": ["selects", "confirms", "HCP", "patient record", "personal health information entry/edit interface", "patient's personal health information", "updated personal health information"]}
{"index": 2, "ucName": "Document office visit Use Case", "uctext": "An HCP chooses to document  or edit  an office visit for a patient .\n\n", "steps": " The HCP enters a MID  or name of a patient and confirms their selection .\n The HCP documents the following information related to an office visit. All events are logged (UC5, S8). Required information is designated; all other information is optional:\nDate (required)\nHospital location of the office visit, if any, (the default should be the HCP's home location) (required)\nAppointment type (required) (UC60)\nNotes (numbers, characters, #, ;, ?, -, ', ., :, blankspace and carriage return are all allowed input values) (required)\nOption to send patient a billing statement (UC60)\nBasic Health Metrics (UC51) (required)\nPrescribed Medications (NDC, see Data Format 6.6) \nLab procedures that are ordered (LOINC code, see Data Format 6.11)(UC26)\nPatient Specific Instructions (UC44)\nDiagnoses (via the ICD-9CM code)\nMedical procedures (CPT code) performed\nImmunizations given (CPT Code, see UC15, S1)\nPatient referral (UC33).\n HCPs can return to an office visit and modify or delete the fields of the office visit (notes, health metrics UC51, prescriptions, laboratory procedures (UC26), referral (UC33), diagnoses, procedures, and/or immunizations (UC15)(. The event is logged (UC 5, S8) and the HCP is returned in the specific office visit record to verify his or her changes.\n The HCP has selected a medication prescribed from a pull down list. The HCP provides the dosage in milligrams, the start and end date for the prescription, and any special instructions. The instructions can contain numbers, characters, #, ;, ?, -, ', ., :, blankspace and carriage return. The HCP must provide instructions (can neither be empty nor the default form field value), or else they cannot add the prescription. The HCP can add the prescription to the list of medications (UC37).\n", "dataset": "iTrust", "act": ["enters", "confirms", "documents", "logs", "designated", "send", "can return", "modify", "delete", "selected", "provides", "must provide", "cannot add", "can add"], "obj": ["HCP", "MID", "name", "patient", "selection", "information", "office visit", "events", "Date", "Hospital location", "Appointment type", "Notes", "option", "billing statement", "Basic Health Metrics", "Prescribed Medications", "NDC", "Lab procedures", "LOINC code", "Patient Specific Instructions", "Diagnoses", "ICD-9CM code", "Medical procedures", "CPT code", "Immunizations", "referral", "UC5", "S8", "UC60", "UC51", "Data Format", "6", "Data Format", "11", "UC26", "UC44", "UC15", "S1", "UC33", "UC37", "medication", "dosage", "milligrams", "start date", "end date", "prescription", "special instructions", "list", "form field value"], "pred_steps": "HCP selects patient record, retrieves office visit details, decides to document or edit visit, inputs visit information (date, time, purpose, findings), saves changes, and updates patient record.", "pred_act": ["selects", "retrieves", "decides", "inputs", "saves", "updates"], "pred_obj": ["HCP", "patient record", "office visit details", "visit", "visit information", "date", "time", "purpose", "findings", "changes", "patient record"], "tp": ["selects", "HCP", "patient record", "office visit details", "visit", "visit information", "date"]}
{"index": 3, "ucName": "Determine operational profile Use Case", "uctext": "The software tester authenticates himself or herself in the iTrust Medical Records system (UC2). He or she is then presented with the actual operational profile of the operations of the iTrust Medical Records where the use percentage is the % of total transactions for each particular transaction logging type, broken-down by each of the user types (patient, LHCP, UHCP, admin, tester(\n\n", "steps": "The software tester authenticates himself or herself in the iTrust Medical Records system (UC2). He or she is then presented with the actual operational profile of the operations of the iTrust Medical Records where the use percentage is the % of total transactions for each particular transaction logging type, broken-down by each of the user types (patient, LHCP, UHCP, admin, tester(.", "dataset": "iTrust", "act": ["authenticates", "is presented with"], "obj": ["software tester", "iTrust Medical Records system", "UC2", "operational profile", "operations", "iTrust Medical Records", "use percentage", "total transactions", "transaction logging type", "user types", "patient", "LHCP", "UHCP", "admin", "tester"], "pred_steps": "Authenticate software tester in iTrust Medical Records system, present operational profile with use percentage of total transactions for each transaction logging type, broken down by user types (patient, LHCP, UHCP, admin, tester).", "pred_act": ["Authenticate", "present"], "pred_obj": ["software tester", "iTrust Medical Records system", "operational profile", "total transactions", "transaction logging type", "user types", "patient", "LHCP", "UHCP", "admin", "tester"], "tp": ["present", "software tester", "iTrust Medical Records system", "operational profile", "total transactions", "transaction logging type", "user types", "patient", "LHCP", "UHCP", "admin", "tester"]}
{"index": 4, "ucName": "Declare/undeclare Personal Representative Use Case", "uctext": "The HCP selects a patient by typing in the MID of the patient . The HCP can choose to add or remove another registered user as a personal health representative to that patient.\n\n", "steps": "The HCP selects a patient by typing in the MID of the patient . The HCP can choose to add or remove another registered user as a personal health representative to that patient.\n\n", "dataset": "iTrust", "act": ["selects", "types", "can choose", "add", "remove"], "obj": ["HCP", "patient", "MID", "registered user", "personal health representative"], "pred_steps": "HCP types in MID to select patient, system retrieves and displays patient information; HCP selects option to add/remove personal health representative; system displays list of registered users; HCP selects user to add/remove; system updates patient's personal health representative information accordingly.", "pred_act": ["types", "retrieves", "displays", "selects", "displays", "selects", "updates"], "pred_obj": ["HCP", "MID", "patient", "system", "patient information", "option", "personal health representative", "list of registered users", "user", "patient's personal health representative information"], "tp": ["types", "selects", "selects", "HCP", "MID", "patient", "personal health representative", "list of registered users", "user", "patient's personal health representative information"]}
{"index": 5, "ucName": "Maintain standards lists Use Case", "uctext": "An administrator chooses to maintain the standards list for immunizations , diagnoses , allowable drugs , or allowable physical services .\n\n", "steps": " The administrator will maintain (add/update( a listing of allowable immunizations that an HCP can use. The administrator will store (1) the CPT code (The CPT code set accurately describes medical, surgical, and diagnostic services and is designed to communicate uniform information about medical services and procedures among physicians, coders, patients, accreditation organizations, and payers for administrative, financial, and analytical purposes. About CPT)  and (2) up to 30 alpha characters giving the name  of the immunization.\n The administrator will maintain a listing of allowable diagnoses that an LHCP can use. The administrator will store (1) the ICD-9CM code (The International Statistical Classification of Diseases and Related Health Problems (most commonly known by the abbreviation ICD) provides codes to classify diseases and a wide variety of signs, symptoms, abnormal findings, complaints, social circumstances and external causes of injury or disease. NHCS Classification of Diseases, Functioning and Disability) for the diagnosis ; (2) a classification that the diagnosis is either chronic/long-term OR short term; and (3) up to 30 alphanumeric characters giving the name  of the diagnosis.\n The administrator will maintain (add/update( a listing of allowable drugs that an HCP can use. The administrator will store (1) the National Drug Code (The National Drug Code (NDC) is a universal product identifier used in the United States for drugs intended for human use. National Drug Code Directory)\n The administrator will maintain (add/update( a listing of allowable physical services (including laboratory procedures) that an HCP can use. The administrator will store information of a LOINC code (Logical Observation Identifiers Names and Codes (LOINC) is a database and universal standard for identifying medical laboratory observations. LOINC c/o Medical Informatics)  according to Data Format 6.11. The administrator may choose to upload a file containing LOINC code information .\n The administrator selects a file containing LOINC information and chooses to upload it. LOINC data from this file is added to a listing of allowable physical services (including laboratory procedures that an HCP can use). If the file contains more fields than are supported by Data Format 6.11, all fields in Data Format 6.11 will be updated.\n", "dataset": "iTrust", "act": ["maintain", "add/update", "store", "choose to upload", "selects", "chooses to upload", "is added", "will be updated"], "obj": ["administrator", "listing of allowable immunizations", "HCP", "CPT code", "medical services", "surgical services", "diagnostic services", "physicians", "coders", "patients", "accreditation organizations", "payers", "administrative purposes", "financial purposes", "analytical purposes", "ICD-9CM code", "International Statistical Classification of Diseases", "Related Health Problems", "ICD", "diseases", "signs", "symptoms", "abnormal findings", "complaints", "social circumstances", "external causes of injury", "disease", "NHCS Classification of Diseases", "Functioning", "Disability", "diagnoses", "classification", "chronic/long-term", "short term", "allowable drugs", "HCP", "National Drug Code", "NDC", "drugs", "allowable physical services", "laboratory procedures", "LOINC code", "Logical Observation Identifiers Names", "Codes (LOINC", "medical laboratory observations", "Data Format", "11", "file", "LOINC information", "listing of allowable physical services"], "pred_steps": "Administrator accesses system, selects option to maintain standards list, chooses category (immunizations, diagnoses, allowable drugs, or allowable physical services), views current list, adds, edits, or deletes entries as needed, saves changes, and confirms updates have been applied successfully.", "pred_act": ["accesses", "selects", "chooses", "views", "adds", "edits", "deletes", "saves", "confirms"], "pred_obj": ["Administrator", "system", "option", "standards list", "category", "immunizations", "diagnoses", "allowable drugs", "allowable physical services", "current list", "entries", "changes", "updates"], "tp": ["selects", "chooses", "adds", "Administrator", "immunizations", "diagnoses", "allowable drugs", "allowable physical services"]}
{"index": 6, "ucName": "Identify risk of chronic disease Use Case", "uctext": "Through the Personal Health Records page, an LHCP chooses a chronic disease and a patient. The data in the database is analyzed according to the risk factors for the disease to determine if the patient exhibits one or more risk factors. Currently available risk factors for chronic diseases are defined for Diabetes (Type 1 and Type2) and Heart Disease. When the chosen patient satisfies the preconditions of the chosen chronic disease , the LHCP is provided with a warning message if that patient exhibits three or more risk factors. The message will display the risk factors that the patients exhibit.\n\n", "steps": "Through the Personal Health Records page, an LHCP chooses a chronic disease and a patient. The data in the database is analyzed according to the risk factors for the disease to determine if the patient exhibits one or more risk factors. Currently available risk factors for chronic diseases are defined for Diabetes (Type 1 and Type2) and Heart Disease. When the chosen patient satisfies the preconditions of the chosen chronic disease , the LHCP is provided with a warning message if that patient exhibits three or more risk factors. The message will display the risk factors that the patients exhibit.", "dataset": "iTrust", "act": ["chooses", "is analyzed", "are defined", "satisfies", "is provided", "will display"], "obj": ["Personal Health Records page", "LHCP", "chronic disease", "patient", "database", "data", "risk factors", "Diabetes (Type 1", "Type2", "Heart Disease", "preconditions", "warning message"], "pred_steps": "LHCP navigates to Personal Health Records page, selects a chronic disease (Diabetes Type 1, Diabetes Type 2, or Heart Disease) and a patient, system retrieves patient data from database, analyzes data based on predefined risk factors for selected disease, checks if patient exhibits three or more risk factors, if so, generates warning message displaying identified risk factors and presents it to LHCP.", "pred_act": ["navigates", "selects", "retrieves", "analyzes", "checks", "generates", "displays", "presents"], "pred_obj": ["LHCP", "Personal Health Records page", "chronic disease", "Diabetes Type 1", "Diabetes Type 2", "Heart Disease", "patient", "system", "patient data", "database", "predefined risk factors", "selected disease", "risk factors", "warning message", "identified risk factors"], "tp": ["analyzes", "displays", "LHCP", "Personal Health Records page", "chronic disease", "Diabetes Type 1", "Diabetes Type 2", "Heart Disease", "patient", "patient data", "database", "predefined risk factors", "risk factors", "warning message", "identified risk factors"]}
{"index": 7, "ucName": "Proactively Determine Needed Patient Care Use Case", "uctext": "An HCP chooses Office Visit Reminders and then to identify chronic patients who need an office visit , older patients who need a flu shot , or any patient who is overdue for an immunization . The HCP is presented with a listing of patients for whom they are a DLHCP who need care because of satisfying the one of preceding conditions. The presented patient information shall include each patient's name and home phone number so that reminder calls can be made. The list is sorted based on the alphabetical order of the patients' last names, and then first names.\n\n", "steps": " An alive patient who has not had an office visit for more than one year and who has been diagnosed with\ndiabetes mellitus (is diagnosed with ICD code beginning with 250:http://icd9cm.chrisendres.com/index.php?action=child&recordid=1765 (\nasthma (is diagnosed with ICD code beginning with 493:http://icd9cm.chrisendres.com/index.php?action=child&recordid=4700 (, or\ncirculatory-system disease (is diagnosed with an ICD code between 390 and 459 inclusive: http://icd9cm.chrisendres.com/index.php?action=child&recordid=4025 (.\n An alive patient over 50 years old who has not had a flu shot (CPT codes 90656, 90658, 90660 per http://www.influenza.com/index.cfm?fa=ADDITIONAL_RES_HC_2 during the months Sept - Dec of the last calendar year (or during the months Sept - Dec of the current calendar year if the retrieval time is between Sept - Dec).\n An alive patient under the age of 19 who has not had proper immunizations per the immunization schedule. The “catch up schedule” is relevant when the patient did not begin the immunizations according to the recommended schedule.\nHepatitis B (90371) three doses: at birth, at age 1 month, at age 6 months; catch up schedule: at least 4 weeks between dose 1 and dose 2 and at least 8 weeks between dose 2 and dose 3\nRotavirus (90681) three doses: at age 6 weeks, at age 4 months, at age 6 months; catch up schedule: at least 4 weeks between dose 1 and dose 2 and at least 4 weeks between dose 2 and dose 3\nDiphtheria, Tetanus, Pertussis (90696) six doses: at age 6 weeks, at age 4 months, at age 6 months, at age 15 months, at age 4 years, at age 11 years; catch up schedule: at least 4 weeks between dose 1 and dose 2, at least 4 weeks between dose 2 and dose 3, at least 6 months between doses 3 and 4, at least 6 months between dose 4 and dose 5, at least 5 years between dose 5 and dose 6\nHaemophilus influenzae (90645) three doses: at 6 weeks, at age 4 months, at age 12 months; catch up schedule: at least 4 weeks between dose 1 and dose 2 and at least 4 weeks between dose 2 and dose 3 if first dose is administered at younger than 12 months; if first dose is administered between 12 and 14 months, at least 8 weeks between dose 1 and dose 2 and dose three is canceled; if first dose is administered at or after 15 months, only one dose is required\nPneumococcal (90669) four doses: at age 6 weeks, at age 4 months, at age 6 months, at age 12 months; catch up schedule: at least 4 weeks between dose 1 and dose 2 and at least 4 weeks between dose 2 and dose 3 and at least 8 weeks between dose 3 and dose 4 if first dose is administered at younger than 12 months; if first dose is administered between 12 and 14 months, at least 8 weeks between dose 1 and dose 2 and dose three is canceled; if first dose is administered at or after 15 months, only one dose is required\nPoliovirus (90712) four doses: at age 6 weeks, at age 4 months, at age 6 months, 4 years; catch up schedule: at least 4 weeks between dose 1 and dose 2, at least 4 weeks between dose 2 and dose 3, at least 4 weeks between doses 3 and 4, dose 4 is not required if dose 3 was administered at the age of 4 or older\nMeasles, Mumps, Rubella (90707) two doses: at age 12 months, at age 4 years; catch up schedule: at least 4 weeks between dose 1 and dose 2\nVaricella (90396) two doses: at age 12 months, at age 4 years; catch up schedule: at least 3 months between dose 1 and dose 2\nHepatitis A (90633) two doses: at age 12 months; at age 18 months: catch up schedule: at least 6 months between dose 1 and dose 2\nHuman Papillomavirus (90649) Female only, three doses; at age 9 years; at age 9 years + 2 months; at age 9 years + 6 months; catch up schedule: at least two months between dose 1 and dose 2; at least four months between dose 2 and dose 3\n", "dataset": "iTrust", "act": ["has not had", "has been diagnosed", "is diagnosed", "over", "has not had", "has not had", "did not begin", "is relevant", "catch up", "at least", "catch up", "at least", "catch up", "at least", "at least", "catch up", "at least", "at least", "if first dose is administered", "is canceled", "is required", "catch up", "at least", "at least", "at least", "if first dose is administered", "at least", "is canceled", "is required", "catch up", "at least", "at least", "at least", "is not required", "catch up", "at least", "catch up", "at least", "catch up", "at least", "at least"], "obj": ["alive patient", "office visit", "diabetes mellitus", "ICD code", "250", "asthma", "ICD code", "493", "circulatory-system disease", "ICD code", "390", "459", "flu shot", "CPT codes", "90656", "90658", "90660", "immunization schedule", "catch up schedule", "Hepatitis B", "90371", "dose", "Rotavirus", "90681", "dose", "Diphtheria", "Tetanus", "Pertussis", "90696", "dose", "Haemophilus influenzae", "90645", "dose", "Pneumococcal", "90669", "dose", "Poliovirus", "90712", "dose", "Measles", "Mumps", "Rubella", "90707", "dose", "Varicella", "90396", "dose", "Hepatitis A", "90633", "dose", "Human Papillomavirus", "90649", "Female", "dose"], "pred_steps": "HCP selects Office Visit Reminders, specifies criteria (chronic patients needing visit, older patients needing flu shot, overdue for immunization), system retrieves and presents list of patients where HCP is DLHCP, including patient names and home phone numbers, sorted alphabetically by last name then first name.", "pred_act": ["selects", "specifies", "retrieves", "presents", "sorted"], "pred_obj": ["HCP", "Office Visit Reminders", "criteria", "chronic patients needing visit", "older patients needing flu shot", "overdue for immunization", "system", "list of patients", "DLHCP", "patient names", "home phone numbers", "last name", "first name"], "tp": ["Office Visit Reminders", "older patients needing flu shot", "overdue for immunization", "system"]}
{"index": 8, "ucName": "Maintain a hospital listing Use Case", "uctext": "An administrator chooses to maintain the hospital listing .(Note: A personnel may be assigned to more than one (UC 2, S1))\n\n", "steps": " The administrator will store (1) hospital Id number for the hospital , (2) up to 30 alphanumeric characters giving the name of the hospital, and (3) an address for the hospital.\n. The system shall enable the administrator to add a new entry for a hospital, or modify the hospital name in an existing entry. Note that the administrator is not allowed through the system interface to delete an existing entry or modify the hospital ID number in an existing entry.\n", "dataset": "iTrust", "act": ["store", "add", "modify", "delete", "modify"], "obj": ["administrator", "hospital Id number", "hospital", "name of the hospital", "address for the hospital", "system", "entry", "hospital name", "existing entry", "interface", "delete", "modify", "hospital ID number"], "pred_steps": "Administrator logs in, navigates to hospital listing maintenance section, views current hospital listings, adds new hospitals if necessary, updates existing hospital information as required, removes hospitals no longer in service, assigns personnel to hospitals, ensures each personnel can be assigned to multiple hospitals, saves changes, and logs out.", "pred_act": ["logs", "navigates", "views", "adds", "updates", "removes", "assigns", "ensures", "saves", "logs"], "pred_obj": ["Administrator", "hospital listing maintenance section", "current hospital listings", "new hospitals", "existing hospital information", "hospitals no longer in service", "personnel", "multiple hospitals", "changes"], "tp": ["adds", "Administrator", "hospital listing maintenance section", "current hospital listings", "new hospitals", "existing hospital information", "multiple hospitals"]}
{"index": 9, "ucName": "View prescription report Use Case", "uctext": "A patient or personal health representative  or LHCP  chooses to view prescription reports . If the LHCP is not one of the patient's DLHCP or the UAP associated with one of their DLHCP, a message is sent to the patient and their personal representative.\n\n", "steps": " The user (patient or personal health representative) can choose to view a list of (1) their own prescriptions or (2) the prescriptions for whom the user is a person health representative by choosing one patient from a a list of these patients. A prescription list is then displayed , sorted by start date (the later date is ranked earlier).\n The user (LHCP) selects a patient from the list of requested reports. At this point, the LHCP can view a prescription list for that patient , sorted by start date (the later date is ranked earlier).\n The prescription report is titled with the patient name. The prescription list includes medication, date prescribed, start date, end date for each prescription, and the name of the doctor who prescribed the medication.\n", "dataset": "iTrust", "act": ["choose", "view", "display", "select", "view", "title", "include"], "obj": ["user", "patient", "personal health representative", "prescriptions", "prescription list", "start date", "LHCP", "list of requested reports", "prescription report", "patient name", "medication", "date prescribed", "end date", "doctor"], "pred_steps": "ViewPrescriptionReport: Patient/PersonalHealthRep/LHCP selects view prescription report; system verifies LHCP status; if LHCP not in patient's DLHCP or UAP of DLHCP, send message to patient and personal representative; if authorized, display prescription report.", "pred_act": ["selects", "verifies", "send", "display"], "pred_obj": ["ViewPrescriptionReport", "Patient", "PersonalHealthRep", "LHCP", "prescription report", "system", "status", "DLHCP", "UAP", "message", "patient's DLHCP", "patient", "personal representative", "authorized"], "tp": ["selects", "display", "ViewPrescriptionReport", "Patient", "PersonalHealthRep", "LHCP", "prescription report", "DLHCP", "patient's DLHCP", "patient", "personal representative"]}
{"index": 10, "ucName": "Create, Disable, and Edit Personnel Use Case", "uctext": "An admin creates a LHCP, an ER, a Laboratory Technician (LT), or a public health agent (PHA) . A LHCP creates UAPs . Once entered, the admin or LHCP is presented a detailed confirmation screen to approve .\n\n", "steps": " An administrator enters a LHCP, ER, or public health agent as a user of iTrust Medical Records system, initially only the name and email are provided. A secret key is personally provided to the user, with which the user can reset his/her password. The admin must specify a specialty for a new LHCP (one of: General Physician, Heart Surgeon, OB/GYN, Pediatrician, Surgeon) and for a new LT (one of blood, tissue, or general). The data for personnel can be edited according to Data Format 6.2 (all fields mandatory except for associated MID and Street Address 2). The administrator shall be allowed to assign a LHCP to multiple hospitals, and the administrator can choose among only the hospitals provided in the hospital list pull down menu. The hospital ID numbers for a LHCP are stored in the Medical Care Personnel Affiliation database (data format 6.8). The administrator shall be allowed to assign a LT to a single hospital, and the administrator can choose among only the hospitals provided in the hospital list pull down menu. The hospital ID numbers for a LT are stored in the Medical Care Personnel Affiliation database (data format 6.11).\n A LHCP enters an UAP as a user of iTrust Medical Records system according to data format 6.2 (all fields mandatory) .\n", "dataset": "iTrust", "act": ["enters", "is provided", "can reset", "must specify", "can be edited", "shall be allowed", "assign", "can choose", "are stored", "enters"], "obj": ["administrator", "LHCP", "ER", "public health agent", "iTrust Medical Records system", "name", "email", "secret key", "password", "specialty", "General Physician", "Heart Surgeon", "OB/GYN", "Pediatrician", "Surgeon", "LT", "blood", "tissue", "general", "Data Format", "2", "personnel", "associated MID", "Street Address 2", "hospital", "hospital list pull down menu", "hospital ID numbers", "Medical Care Personnel Affiliation database", "data format", "8", "data format", "11", "UAP", "user", "data format", "2"], "pred_steps": "Admin or LHCP initiates creation of LHCP, ER, LT, or PHA; system captures input details; admin or LHCP is presented with detailed confirmation screen to approve; if approved, personnel record is created; LHCP can create UAPs; admin or LHCP can disable or edit personnel details as needed; system updates personnel records accordingly.", "pred_act": ["initiates", "captures", "is presented", "approves", "creates", "can create", "can disable", "can edit", "updates"], "pred_obj": ["Admin", "LHCP", "LHCP", "ER", "LT", "PHA", "system", "input details", "detailed confirmation screen", "personnel record", "UAPs", "personnel details", "personnel records"], "tp": ["can edit", "LHCP", "LHCP", "ER", "LT", "personnel record", "UAPs", "personnel details", "personnel records"]}
{"index": 11, "ucName": "View emergency electronic health record Use Case", "uctext": "A LHCP or ER chooses to view an emergency report and provides an MID . The LHCP/ER is presented with a patient confirmation . The LHCP obtains a printable report (meaning you should minimize the space taken up to provide the information( containing vital information for the patient:\n\nName\nAge\nGender\nEmergency contact (name and phone number)\nAllergies\nBlood type\nA list of all diagnosis codes chronic/long-term diagnoses for the patient and well as all short term diagnoses made within the last 30 days. Display the ICD-9CM code and the name of the diagnoses. Sort by most recent first.\nA list of all prescriptions the patient is likely to be currently taking as determined by the end date of the prescription has passed by 91 days or less. Display the National Drug Code and the name of the prescription. Sort by most recent first.\nA list of all immunizations the patient has had. Display the CPT Code and the name of the immunization. Sort by most recent first.\n", "steps": " The LHCP or ER enters a MID. The LHCP or ER confirms the input .\n", "dataset": "iTrust", "act": ["enters", "confirms"], "obj": ["LHCP", "ER", "MID", "input"], "pred_steps": "LHCP or ER selects to view emergency report, provides MID, system confirms patient identity, retrieves and displays patient's name, age, gender, emergency contact details, allergies, blood type, lists chronic/long-term and short-term diagnoses with ICD-9CM codes sorted by recency, displays prescriptions with National Drug Codes sorted by recency where end date is within 91 days, and lists immunizations with CPT Codes sorted by recency, presents information in a printable format with minimized space usage.", "pred_act": ["selects", "provides", "confirms", "retrieves", "displays", "lists", "sorts", "presents"], "pred_obj": ["LHCP", "ER", "MID", "patient identity", "patient's name", "age", "gender", "emergency contact details", "allergies", "blood type", "chronic/long-term diagnoses", "short-term diagnoses", "ICD-9CM codes", "prescriptions", "National Drug Codes", "end date", "immunizations", "CPT Codes", "printable format", "space usage"], "tp": ["confirms", "LHCP", "ER", "MID"]}
{"index": 12, "ucName": "View Comprehensive Patient Report Use Case", "uctext": "The LHCP requests a comprehensive patient report for a particular patient . The LHCP is able to view the comprehensive patient report  from a list of his/her previous requests .\n\n", "steps": " The LHCP enters a patient medical identification number (MID)  and confirms his/her input .\n The LHCP can view the comprehensive patient report for the specified patient, which includes the information below.\nAll patient demographic information (address, phone, etc.), see (UC4) and Data Format 6.1\nThe entire history of personal health records, see (UC10) and Data Format 6.4\nAll diagnoses, including those not normally viewable by the requesting LHCP, see (UC11) and Data Format 6.5\nAll designated HCPs (MIDs and Names), see (UC6)\nAll allergies, procedures, medications, office visits, and known relatives, see (UC11) and Data Format 6.5, 6.6\nAll MIDs and names of people that this person is representing, see (UC13)\nAll MIDs and names of people that this person is represented by, see (UC13)\n The LHCP views a list of requests he/she has made for reports, with the status and pertinent information about the requests.\n", "dataset": "iTrust", "act": ["enters", "confirms", "can view", "views"], "obj": ["LHCP", "patient medical identification number (MID", "comprehensive patient report", "patient", "patient demographic information (address", "phone", "etc", "entire history of personal health records", "diagnoses", "designated HCPs (MIDs", "Names", "allergies", "procedures", "medications", "office visits", "known relatives", "MIDs", "names of people that this person is representing", "MIDs", "names of people that this person is represented by", "list of requests", "status", "pertinent information about the requests"], "pred_steps": "LHCP selects patient, requests comprehensive patient report, system generates report, report is added to list of previous requests, LHCP views comprehensive patient report from list of previous requests.", "pred_act": ["selects", "requests", "generates", "is added", "views"], "pred_obj": ["LHCP", "patient", "comprehensive patient report", "system", "report", "list of previous requests"], "tp": ["views", "LHCP", "patient", "comprehensive patient report", "report", "list of previous requests"]}
{"index": 13, "ucName": "Take Satisfaction Survey Use Case", "uctext": "A patient or personal health representative can answer any of the following questions relative to a previous (in UC9, S1) office visit according to Data Format 6.13.\n\nHow many minutes did you wait in the waiting room?\nHow many minutes did you wait in the examination room before seeing your physician?\nHow satisfied were you with your office visit?\nHow satisfied were you with the treatment or information you received?\nThe answers to the survey are stored.\n\n", "steps": "A patient or personal health representative can answer any of the following questions relative to a previous (in UC9, S1) office visit according to Data Format 6.13.\\n\\nHow many minutes did you wait in the waiting room?\\nHow many minutes did you wait in the examination room before seeing your physician?\\nHow satisfied were you with your office visit?\\nHow satisfied were you with the treatment or information you received?\\nThe answers to the survey are stored.", "dataset": "iTrust", "act": ["answer", "store"], "obj": ["patient", "personal health representative", "questions", "previous office visit", "Data Format", "13", "waiting room", "examination room", "physician", "office visit", "treatment", "information", "survey", "answers"], "pred_steps": "Display survey questions: \"How many minutes did you wait in the waiting room?\", \"How many minutes did you wait in the examination room before seeing your physician?\", \"How satisfied were you with your office visit?\", \"How satisfied were you with the treatment or information you received?\"; Accept user input for each question; Store user answers in the system.", "pred_act": ["Display", "Accept", "Store"], "pred_obj": ["survey questions", "How many minutes did you wait in the waiting room", "How many minutes did you wait in the examination room before seeing your physician", "How satisfied were you with your office visit", "How satisfied were you with the treatment", "information you received", "user input", "user answers", "system"], "tp": ["Store", "survey questions", "How satisfied were you with your office visit", "How satisfied were you with the treatment", "information you received", "user answers"]}
{"index": 14, "ucName": "View Physician Satisfaction Survey Results Use Case", "uctext": "A user chooses to view physician satisfaction survey results. The user provides a zip code  or a hospital code and an (optional) physician type (from a pull-down list: see data format 6.2 - general, surgeon, heart specialist, pediatrician, OB/GYN). The patient is provided with the following for each physician of that type that practices in a zip code (based upon the address/zipcode provided in UC2) that match the first three digits of the provided zip code:\n\nName\nAddress\nAverage number of minutes patients wait in waiting room\nAverage number of minutes patients wait in examination room prior to seeing physician\nAverage office visit satisfaction\nAverage satisfaction with treatment/information\nPercentage of office visits for which satisfaction information is available\n", "steps": "A user chooses to view physician satisfaction survey results. The user provides a zip code  or a hospital code and an (optional) physician type (from a pull-down list: see data format 6.2 - general, surgeon, heart specialist, pediatrician, OB/GYN). The patient is provided with the following for each physician of that type that practices in a zip code (based upon the address/zipcode provided in UC2) that match the first three digits of the provided zip code:\\n\\nName\\nAddress\\nAverage number of minutes patients wait in waiting room\\nAverage number of minutes patients wait in examination room prior to seeing physician\\nAverage office visit satisfaction\\nAverage satisfaction with treatment/information\\nPercentage of office visits for which satisfaction information is available.", "dataset": "iTrust", "act": ["chooses", "views", "provides", "is provided with"], "obj": ["user", "physician satisfaction survey results", "zip code", "hospital code", "physician type", "general", "surgeon", "heart specialist", "pediatrician", "OB/GYN", "patient", "physician", "address", "Name", "Average number of minutes patients wait in waiting room", "Average number of minutes patients wait in examination room prior to seeing physician", "Average office visit satisfaction", "Average satisfaction with treatment/information", "Percentage of office visits for which satisfaction information is available"], "pred_steps": "User selects to view physician satisfaction survey results, inputs a zip code or hospital code, optionally selects a physician type from a pull-down list, system retrieves and displays the name, address, average waiting room wait time, average examination room wait time, average office visit satisfaction, average satisfaction with treatment/information, and percentage of office visits with satisfaction information for each physician of the selected type practicing in the zip code matching the first three digits of the provided zip code.", "pred_act": ["selects", "inputs", "optionally selects", "retrieves", "displays"], "pred_obj": ["User", "physician satisfaction survey results", "zip code", "hospital code", "physician type", "pull-down list", "system", "name", "address", "average waiting room wait time", "average examination room wait time", "average office visit satisfaction", "average satisfaction with treatment/information", "percentage of office visits with satisfaction information", "physician", "selected type", "provided zip code"], "tp": ["selects", "User", "physician satisfaction survey results", "zip code", "hospital code", "physician type", "name", "address", "average waiting room wait time", "average examination room wait time", "average office visit satisfaction", "average satisfaction with treatment/information", "percentage of office visits with satisfaction information", "physician", "provided zip code"]}
{"index": 15, "ucName": "Manage Lab Procedures Use Case", "uctext": "An HCP can create a lab procedure for a given office visit . An HCP can view a previously created lab procedure for a given office visit . An HCP can reassign a previously created lab procedure . An HCP can remove a previously created lab procedure . An HCP can add commentary to a pending lab procedure and update the lab procedure status to completed . A patient may view his or her own lab procedure results . A Lab Technician can view his or her priority queue of lab procedures . A Lab Technician can record the results of a lab procedure . A Lab Technician can update the status of a lab procedure as received . All events are logged (UC5).\n\n", "steps": " An HCP can create a lab procedure for a given office visit. The HCP selects a procedure code, a priority from 1 to 3 (1=most important, 3=not as important), and Lab Technician (listed with his/her specialty and the number of pending lab procedures in his/her priority queue, grouped by priority). The HCP saves the new lab procedure, or cancels the lab procedure creation , . The status of the lab procedure is marked as in transit.\n An HCP can view a previously created lab procedure for a given office visit. The HCP can view patient name, lab procedure code, current lab procedure status, timestamp, and Lab Technician name.\n An HCP can reassign a previously created lab procedure to a different Lab Technician if the lab procedure is not yet in the testing state. The HCP selects a different Lab Technician from the list of available Lab Technicians (displayed with Lab Technician specialty and the number of pending lab procedures in his/her priority queue, grouped by priority). The HCP confirms the reassignment, or cancels the reassignment .\n An HCP can remove a previously created lab procedure for a given office visit. The HCP chooses to remove the lab procedure as long as the status is either in transit or received. The HCP is prompted to confirm that he/she wishes to remove the lab procedure.\n An HCP can add commentary to a pending lab procedure . The HCP enters a comment for a lab procedure with status as pending. Upon entering a comment, the lab procedure status is updated to completed.\n A patient may view his or her own lab procedure. On the associated office visit page, the patient can see the current status of the lab procedure, the HCP name, and the timestamp. If the lab procedure status is marked as completed, the patient can see the results and the HCP-provided comments.\n A Lab Technician can view his or her assigned lab procedures. The Lab Technician sees a list of all lab procedures assigned to him/her that have a status of received, followed by a list of lab procedures that remain in transit. The list of received lab procedures is sorted by priority (from most important to least important), with a secondary sort by timestamp (oldest to newest). The first lab procedure in the received list is marked with a status of testing, and all other lab procedures have a status of received. The list of in transit lab procedures is sorted by timestamp, from oldest to most recent. In both lists, the Lab Technician is provided the lab procedure ID, lab procedure code, status, priority, HCP name, and timestamp.\n A Lab Technician can record the results of a lab procedure . The Lab Technician enters the lab procedure numerical result and confidence interval for the lab procedure with the status of testing. Upon recording the results of the lab procedure, the status is updated to pending.\n A Lab Technician can update the status of a lab procedure to received. In the list of in transit lab procedures , the Lab Technician can update the status to received when the sample has been received in his/her lab.\n", "dataset": "iTrust", "act": ["create", "selects", "saves", "cancels", "is marked", "can view", "can reassign", "confirms", "can remove", "chooses", "is prompted", "can add", "enters", "can see", "can record", "enters", "can update"], "obj": ["HCP", "lab procedure", "office visit", "procedure code", "priority", "Lab Technician", "specialty", "number of pending lab procedures", "priority queue", "patient name", "current lab procedure status", "timestamp", "testing state", "comment", "lab procedure ID", "numerical result", "confidence interval", "sample"], "pred_steps": "HCP creates lab procedure for office visit, views previously created lab procedure, reassigns previously created lab procedure, removes previously created lab procedure, adds commentary to pending lab procedure and updates status to completed; Patient views own lab procedure results; Lab Technician views priority queue of lab procedures, records results of lab procedure, updates status of lab procedure as received; All events are logged.", "pred_act": ["creates", "views", "reassigns", "removes", "adds", "updates", "views", "views", "records", "updates", "are logged"], "pred_obj": ["HCP", "lab procedure", "office visit", "previously created lab procedure", "commentary", "pending lab procedure", "status", "Patient", "lab procedure results", "Lab Technician", "priority queue of lab procedures", "results of lab procedure", "received", "events"], "tp": ["creates", "views", "reassigns", "removes", "adds", "updates", "views", "views", "updates", "HCP", "lab procedure", "office visit", "previously created lab procedure", "pending lab procedure", "status", "lab procedure results", "Lab Technician", "priority queue of lab procedures", "results of lab procedure"]}
{"index": 16, "ucName": "Alert Users by Email Use Case", "uctext": "An email alert is sent out to the iTrust user in the event of a changed password , status change in laboratory procedure , comprehensive report requested and generated. Note to students: the iTrust system does NOT currently support actual email sending, only a “fake” email sending facility. All email notifications should be executed through the fake email utility.\n\n", "steps": " The user has successfully changed his/her password (UC3, S2). An email informing the user of the password change is sent to the user including the MID but not the password.\n The status of a laboratory procedure has been updated (UC26, S3). The patient is notified with the following information: the LOINC number and the updated status.\n", "dataset": "iTrust", "act": ["changed", "sent", "updated", "notified"], "obj": ["user", "password", "UC3", "S2", "email", "MID", "laboratory procedure", "UC26", "S3", "patient", "LOINC number", "updated status"], "pred_steps": "Detect password change, status change in laboratory procedure, comprehensive report requested and generated events; utilize fake email utility to compose email alert with relevant details; address email alert to iTrust user; log email alert as sent in the system.", "pred_act": ["Detect", "change", "utilize", "compose", "address", "log"], "pred_obj": ["password change", "status change", "laboratory procedure", "comprehensive report", "requested events", "generated events", "fake email utility", "email alert", "relevant details", "iTrust user", "system"], "tp": ["change", "status change", "laboratory procedure"]}
{"index": 17, "ucName": "View Patients", "uctext": "The LHCP chooses to view all patients with which he or she has ever had an office visit with. The patient’s name (clickable to view PHR), address, and date of last office visit are displayed. The list is sorted by the date of the last office visit (most recent first).\n\n", "steps": "The LHCP chooses to view all patients with which he or she has ever had an office visit with. The patient’s name (clickable to view PHR), address, and date of last office visit are displayed. The list is sorted by the date of the last office visit (most recent first).", "dataset": "iTrust", "act": ["chooses", "views", "displayed", "sorted"], "obj": ["LHCP", "patients", "office visit", "patient’s name", "PHR", "address", "date of last office visit", "list"], "pred_steps": "Functional steps: LHCP selects to view patients, system retrieves all patients with office visit history with LHCP, system fetches patient names (clickable for PHR view), addresses, and dates of last office visits, system sorts patients by date of last office visit in descending order, system displays the sorted list with clickable patient names.", "pred_act": ["selects", "retrieves", "fetches", "sorts", "displays"], "pred_obj": ["LHCP", "patients", "system", "office visit history", "patient names", "PHR view", "addresses", "dates of last office visits", "sorted list"], "tp": ["selects", "sorts", "displays", "LHCP", "patients", "office visit history", "patient names", "PHR view", "addresses", "dates of last office visits"]}
{"index": 18, "ucName": "Find LHCPs with experience with a diagnosis", "uctext": "A patient has just been diagnosed with a condition and wants to find the LHCPs in the area who have handled that condition. The patient chooses 'My Diagnoses” and is presented with a listing of all their own diagnoses, sorted by diagnosis date (more recent first). The patient can select a diagnosis and will be presented with the LHCPs in the patient's living area (based upon the first three numbers of their zip code) who have handled this diagnosis in the last three years. The list is ranked by the quantity of patients the LHCP has treated for that diagnosis (each patient is only counted once regardless of the number of office visits). For each LHCP, the following information is displayed:\n\nName of LHCP linked to contact information for that LHCP\nThe quantity of unique patients treated by that LHCP for that diagnosis (each patient is only counted once regardless of the number of office visits)\nList of all prescriptions given by that LHCP for that diagnosis\nList of all laboratory procedures ordered by that LHCP for that diagnosis\nThe LCHP's average visit satisfaction\nThe LHCP's average treatment satisfaction\n", "steps": "A patient has just been diagnosed with a condition and wants to find the LHCPs in the area who have handled that condition. The patient chooses 'My Diagnoses” and is presented with a listing of all their own diagnoses, sorted by diagnosis date (more recent first). The patient can select a diagnosis and will be presented with the LHCPs in the patient's living area (based upon the first three numbers of their zip code) who have handled this diagnosis in the last three years. The list is ranked by the quantity of patients the LHCP has treated for that diagnosis (each patient is only counted once regardless of the number of office visits). For each LHCP, the following information is displayed:\\n\\nName of LHCP linked to contact information for that LHCP\\nThe quantity of unique patients treated by that LHCP for that diagnosis (each patient is only counted once regardless of the number of office visits)\\nList of all prescriptions given by that LHCP for that diagnosis\\nList of all laboratory procedures ordered by that LHCP for that diagnosis\\nThe LCHP's average visit satisfaction\\nThe LHCP's average treatment satisfaction.", "dataset": "iTrust", "act": ["diagnosed", "wants to find", "chooses", "is presented", "can select", "will be presented", "is ranked", "is displayed", "linked", "given", "ordered"], "obj": ["patient", "condition", "LHCPs", "area", "My Diagnoses", "diagnoses", "diagnosis date", "diagnosis", "zip code", "last three years", "list", "quantity of patients", "Name of LHCP", "contact information", "unique patients", "prescriptions", "laboratory procedures", "LCHP's average visit satisfaction", "LHCP's average treatment satisfaction"], "pred_steps": "Patient selects 'My Diagnoses' to view list of all their diagnoses sorted by date (recent first), selects a diagnosis, system retrieves LHCPs in patient's living area (based on first three digits of zip code) who have handled the diagnosis in the last three years, ranks LHCPs by number of unique patients treated for the diagnosis, displays name of LHCP linked to contact information, number of unique patients treated, list of all prescriptions given, list of all laboratory procedures ordered, average visit satisfaction, and average treatment satisfaction for each LHCP.", "pred_act": ["selects", "views", "selects", "retrieves", "ranks", "displays"], "pred_obj": ["Patient", "My Diagnoses", "list of all diagnoses", "date", "diagnosis", "system", "LHCPs", "living area", "zip code", "number of unique patients", "name of LHCP", "contact information", "list of all prescriptions", "list of all laboratory procedures", "average visit satisfaction", "average treatment satisfaction"], "tp": ["selects", "selects", "ranks", "displays", "Patient", "My Diagnoses", "list of all diagnoses", "date", "diagnosis", "LHCPs", "zip code", "number of unique patients", "name of LHCP", "contact information", "list of all prescriptions", "list of all laboratory procedures", "average visit satisfaction", "average treatment satisfaction"]}
{"index": 19, "ucName": "Authenticate Users Use Case", "uctext": "A user enters their MID and their password to gain role-based entry into the iTrust Medical Records system  or requests that their password be changed . A session that has been inactive for more than ten minutes is terminated . Upon successful authentication, the user will be directed to a personalized home page based on their role. An authenticated session ends when the user logs out or closes the iTrust application.\n\n", "steps": " If the security question/answer has been set (it is not null) , present security question and obtain answer.\n If answer to security question is correct, allow user to change their password. An email notification is sent.\n Electronic sessions must terminate after ten minutes of inactivity. Ensure that authentication is reset after a period of inactivity that exceeds ten minutes.\n", "dataset": "iTrust", "act": ["set", "present", "obtain", "allow", "sent", "terminate", "ensure", "reset"], "obj": ["security question", "answer", "password", "email notification", "Electronic sessions", "inactivity", "authentication", "ten minutes", "period of inactivity"], "pred_steps": "User enters MID and password or requests password change, system validates MID and password against stored credentials, if valid grant role-based access and direct to personalized home page, if invalid provide error message; if password change requested, prompt for current password, new password, and confirmation, then update credentials if current password matches; terminate session if inactive for more than ten minutes; end session upon user logout or application closure.", "pred_act": ["enters", "requests", "validates", "grant", "direct", "provide", "prompt", "update", "match", "terminate", "end", "logout", "close"], "pred_obj": ["User", "MID", "password", "system", "stored credentials", "role-based access", "personalized home page", "error message", "current password", "new password", "confirmation", "session", "ten minutes", "user logout", "application closure"], "tp": ["terminate", "end", "password", "current password", "new password", "session", "ten minutes"]}
{"index": 20, "ucName": "Messaging between LHCP and patient", "uctext": "An LHCP wants to send a message to a patient and/or that patient's personal representative  or a patient or personal representative wants to send a message to one of their DLHCP or that of a person they are representing . LHCPs and patients/representatives may reply to messages. An LHCP or patient/representative may view a message . An LHCP or patient/representative can sort his or her message inbox and message outbox . An LHCP or patient/representative can modify and save his/her message displaying filter  or view his/her message inbox  including only the messages satisfying the specified filtering criteria in the saved filter.\n\n", "steps": " A patient or personal representative for a patient chooses to send a message to an LHCP (no multiple recipients allowed in a single message). The patient/representative is presented with a pull down menu of his/her DLHCP. The patient/representative chooses one of these DLHCP and types the subject (up to 100 characters) and text of a message (up to 1000 characters), and clicks the send button. A row for showing the message subject, the name of the recipient, and the timestamp (which includes both date and time) is then visible in the patient/representative’s message outbox. A bolded row for showing the message subject, the name of sender, and the timestamp is then visible in the LHCP's message inbox. A fake email is sent to the LHCP alerting the user that a new message has arrived. After a message is sent, the patient or personal representative is directed to his/her message outbox.\n An LHCP chooses to send a message to a patient/representative (no multiple recipients allowed in a single message). The LHCP enters and confirms the patient/representative's MID. The LHCP types the subject (up to 100 characters) and the text of a message (up to 1000 characters), and clicks the send button. A row for showing the message subject, the name of the recipient, and the timestamp is then visible in the LHCP’s message outbox. A bolded row for showing the message subject, the name of the sender, and the timestamp is then visible in the patient/representative’s message inbox, and a fake email is sent to the patient/representative that indicates that he/she has a new message from an LHCP. After a message is sent, the LHCP is directed to to his/her message outbox.\n A patient or patient representative wishes to reply to a message. The patient/representative views his or her message inbox. The patient/representative opens the message to which he or she wishes to reply , and then clicks the reply link above the message text. The patient/representative enters the text of the response message (up to 1000 characters) he or she wishes to send, then clicks the send button. A row for showing the message subject (now preceded by “RE:”), the name of the recipient, and the timestamp is then visible in the patient/representative’s message outbox. A bolded row for showing the message subject (now preceded by “RE:”), the name of the sender, and timestamp is then visible in the LHCP’s message inbox. A fake email is sent to the LHCP alerting the LHCP that a new message reply has arrived.\n An LHCP wishes to reply to a message. The LHCP views his or her message inbox. The LHCP opens the message to which he or she wishes to reply , and then clicks the reply link above the message text. The LHCP enters the text of the response message (up to 1000 characters) he or she wishes to send, then clicks the send button. A row for showing the message subject (now preceded by “RE:”), the name of the recipient, and the timestamp are then visible in the LHCP’s message outbox. A bolded row for showing the message subject (now preceded by “RE:”), the name of sender, and timestamp are then visible in the patient/representative’s message inbox. A fake email is sent to the patient/representative alerting the patient/representative that a new message reply has arrived.\n A user (a patient, patient representative, or LHCP) wishes to read a message from the message inbox or outbox. The user chooses to open his or her message inbox/outbox. Each row in the message inbox/outbox includes the message subject, the name of either the sender (only for the case of inbox) or recipient (only for the case of outbox), and timestamp. By default, the messages in the message inbox/outbox should be ordered by timestamp, the most recent first. Each row for an unread message in the message inbox is bolded. The user selects a message from the message inbox/outbox to read by clicking the “Read” link beside the row for the message, and then the message subject, the name of the sender, the name of the the recipient, timestamp, and the message text shall be displayed in a new page. After a message in the message inbox is read (i.e., displayed in a new page), the row for the message in the message inbox is not bolded anymore.\n A user (a patient, patient representative, or LHCP) can sort messages in his or her message inbox by either the sender's last name or timestamp (but not both) in either ascending or descending order (where timestamps in descending order would have the most recent first). A user can sort messages in his or her message outbox by the recipient's last name or timestamp (but not both) in either ascending or descending order. To do so, a user selects one option out of the “Sort by” labeled drop-down box (with options of “Sender/Recipient” or “Timestamp”) and selects one option out of the “by order of” labeled drop-down box (with options of “ascending” or “descending”), and then click the “Sort” button. Note that the sorted order is not saved for later viewing after the message inbox or outbox is reopened again (where the default sorting is always used).\n A user (an LHCP or patient/representative) can modify his/her message displaying filter by modifying the following filtering criteria: (1) the sender (i.e., the sender's name is exactly the same as the specified string), (2) the subject (i.e., the subject is exactly the same as the specified string), (3) has the words (i.e., the subject or the message body has the specified substring), (4) doesn't have (i.e., neither the subject nor the message body has the specified substring), (5) time stamp falling into the period defined by the starting date and ending date (inclusive) (the user interface shall provide both the option of typing in a specific date in the date format and the option of selecting a date from a calendar for the current month). Note that a single filter includes values for these five filtering criteria (rather than five filters for these five filtering criteria) and a value could be an empty string, indicating that this criterion has no impact on filtering (i.e., imposing no constraints related to this criterion). The user interface shall be initially populated with the values of the filtering criteria from the previously saved filter. After the user modifies the criteria, the user chooses to click the “Cancel” button to cancel the modifications of the filter (i.e., repopulate the user interface with the values of the filtering criteria from the previously saved filter), to click the “Test Search” button to search (i.e., displaying the message inbox  including only the messages satisfying the specified filtering criteria), or to click the “Save” button to save the modified filter. Each user is associated with only one filter (being saved across login sessions) and applies only this saved filter. The user's associated filter initially has all empty inputs for the filtering criteria before the user modifies it.\n", "dataset": "iTrust", "act": ["chooses", "is presented", "chooses", "types", "clicks", "is visible", "is visible", "is sent", "is directed", "chooses", "enters", "confirms", "types", "clicks", "is visible", "is visible", "is sent", "is directed", "wishes", "views", "opens", "clicks", "enters", "clicks", "is visible", "is visible", "is sent", "wishes", "views", "opens", "clicks", "enters", "clicks", "is visible", "is visible", "is sent", "wishes", "chooses", "includes", "orders", "is bolded", "selects", "displays", "is not bolded", "can sort", "selects", "selects", "clicks", "can modify", "provides", "be initially populated", "modifies", "chooses", "clicks", "clicks", "clicks", "be associated", "applies", "has", "modifies"], "obj": ["patient", "personal representative", "message", "LHCP", "multiple recipients", "pull down menu", "DLHCP", "subject", "text", "send button", "row", "message subject", "name of recipient", "timestamp", "date", "time", "message outbox", "bolded row", "name of sender", "fake email", "MID", "response message", "message inbox", "reply link", "RE", "unread message", "Read\" link", "message text", "new page", "sender's last name", "ascending order", "descending order", "Sort by\" labeled drop-down box", "by order of\" labeled drop-down box", "Sort\" button", "message displaying filter", "filtering criteria", "sender's name", "specified string", "subject", "message body", "specified substring", "starting date", "ending date", "date format", "calendar", "current month", "single filter", "user interface", "Cancel\" button", "Test Search\" button", "Save\" button", "saved filter", "login sessions"], "pred_steps": "LHCP selects patient/representative to send message, composes message, sends message; Patient/representative selects LHCP to send message, composes message, sends message; LHCP/Patient/Representative receives message, views message; LHCP/Patient/Representative replies to message; LHCP/Patient/Representative sorts message inbox/outbox; LHCP/Patient/Representative modifies message displaying filter, saves filter; LHCP/Patient/Representative views message inbox with saved filter criteria.", "pred_act": ["selects", "composes", "sends", "receives", "views", "replies", "sorts", "modifies", "saves"], "pred_obj": ["LHCP", "patient/representative", "message", "LHCP/Patient/Representative", "inbox/outbox", "filter", "saved filter criteria"], "tp": ["selects", "sends", "views", "sorts", "modifies", "LHCP", "patient/representative", "message", "LHCP/Patient/Representative", "inbox/outbox", "filter", "saved filter criteria"]}
{"index": 21, "ucName": "Find LHCPs for prescription renewal Use Case", "uctext": "A patient wants to renew the patient's expired prescriptions (i.e., prescriptions' end dates are earlier than the current date) and therefore wants to find the LHCPs who earlier wrote the patient's expired prescriptions (it is assumed that the doctors who wrote prescriptions are all LHCPs so no LHCP checks on the prescription-writing doctors are needed). The patient chooses “My Expired Prescription Reports” and is presented with a list of the patient's expired prescriptions , sorted by start date (the later date is ranked earlier closer to the top). The patient can select to view contact information of a selected LHCP shown in the expired prescription list .\n\n", "steps": " The expired prescription report list is titled with the patient name. The expired prescription list includes medication, date prescribed (i.e., the day of the office visit), start date, end date for each prescription, and the name of the LHCP who prescribed the medication (where the name of the LHCP is linked to contact information for that LHCP). If there are no expired prescriptions, an empty expired prescription list is presented.\n The patient clicks on the name of the LHCP for an expired prescription, and is presented with the contact information for that LHCP (including First Name Last Name, LHCP Type, Street Address 1, Street Address 2, City, State, Zip Code, Phone, and Contact Email); if any type of contact information is missing or the whole contact information for the LHCP is not available in the database, the corresponding missing types of information are simply shown as blank.\n", "dataset": "iTrust", "act": ["is titled", "includes", "is linked", "is presented", "clicks", "is presented", "is missing", "is not available", "are shown"], "obj": ["expired prescription report list", "patient name", "expired prescription list", "medication", "date prescribed", "day of the office visit", "start date", "end date", "prescription", "name of the LHCP", "contact information", "First Name", "Last Name", "LHCP Type", "Street Address 1", "Street Address 2", "City", "State", "Zip Code", "Phone", "Contact Email"], "pred_steps": "Patient selects \"My Expired Prescription Reports\", system retrieves and displays list of expired prescriptions sorted by start date, patient views list, selects an expired prescription, system displays contact information of the LHCP who wrote the selected prescription.", "pred_act": ["selects", "retrieves", "displays", "views", "selects", "displays"], "pred_obj": ["Patient", "My Expired Prescription Reports", "system", "list of expired prescriptions", "start date", "patient", "expired prescription", "contact information", "LHCP"], "tp": ["displays", "displays", "Patient", "My Expired Prescription Reports", "list of expired prescriptions", "start date", "patient", "expired prescription", "contact information", "LHCP"]}
{"index": 22, "ucName": "Proactively Confirm Prescription-Renewal Needs Use Case", "uctext": "The HCP chooses “Potential Prescription-Renewals” and is presented with a list of patients  that satisfy ALL of the three conditions: (1) patients for whom the HCP is a DLHCP, (2) special-diagnosis-history patients , (3) patients whose prescriptions will expire within 7 days (including the 7th day) from the current date (i.e., (currentDate < = expiredDate < = (currentDate + 7 days)).\n\n", "steps": " A chronic special-diagnosis-history patient is an alive patient who has been diagnosed with at least one of the following:\ndiabetes mellitus (is diagnosed with ICD code beginning with 250:http://icd9cm.chrisendres.com/icd9cm/index.php?action=child&recordid=1894 (,\nasthma (is diagnosed with ICD code beginning with 493:http://icd9cm.chrisendres.com/icd9cm/index.php?action=child&recordid=5000 (, or\ncirculatory-system disease (is diagnosed with an ICD code between 390 and 459 inclusive: http://icd9cm.chrisendres.com/icd9cm/index.php?action=child&recordid=4314 (.\n The patient list is titled with the HCP's name. The patient list includes the patient's name (i.e., first name and last name), phone number, and contact email address  (so that confirmation calls or emails can be made or sent outside of the iTrust system). The list is sorted based on the ascending alphabetical order of the patients' last names, and then first names. When a chronic special-diagnosis-history patient satisfies all three conditions and has multiple prescriptions satisfying the third condition, the patient is listed in the list only once. The list is a static list with no link on the patient's name, phone number, or contact email address)\n", "dataset": "iTrust", "act": ["is", "is diagnosed with", "is titled", "includes", "can be made", "can be sent", "is sorted", "satisfies", "is listed", "has"], "obj": ["chronic special-diagnosis-history patient", "alive patient", "diabetes mellitus", "ICD code", "250", "asthma", "493", "circulatory-system disease", "ICD code", "390", "459", "HCP's name", "patient's name", "first name", "last name", "phone number", "contact email address", "iTrust system", "conditions", "prescriptions", "list", "patient", "static list"], "pred_steps": "HCP selects \"Potential Prescription-Renewals\", system retrieves list of patients who are DLHCP of HCP, have special-diagnosis-history, and whose prescriptions expire within 7 days from current date (currentDate <= expiredDate <= (currentDate + 7 days)), then presents the list to HCP.", "pred_act": ["selects", "retrieves", "presents"], "pred_obj": ["HCP", "Potential Prescription-Renewals", "system", "patients", "DLHCP", "HCP", "special-diagnosis-history", "prescriptions", "currentDate", "expiredDate"], "tp": ["HCP", "system", "patients", "HCP", "special-diagnosis-history", "prescriptions"]}
{"index": 23, "ucName": "Manage Patient Referrals Use Case", "uctext": "A sending HCP refers a patient to another receiving HCP . A receiving HCP views a list of received referrals . A sending HCP views a list of previously sent patient referrals . A patient views the details of his/her referrals . A sending HCP edits a previously sent patient referral . A sending HCP cancels a previously sent patient referral . All events are logged (UC5).\n\n", "steps": " An HCP chooses to refer a patient to another receiving HCP through the referral feature on a patient's office visit page (UC11). The sending HCP must select a receiving HCP by either entering the HCP's MID and confirming the selection , or by searching for the HCP by name. The sending HCP is also presented with a text box to include notes about the referral. The sending HCP then chooses a priority from 1-3 (1 is most important, 3 is least important) for the referral. The HCP may send the referral, cancel the referral, or edit the referral . Upon sending a referral, the patient, sending HCP, and receiving HCP receive a message summarizing the newly created referral information (sending HCP name & specialty, receiving HCP name & specialty, patient name, referral notes, and referral creation timestamp); additionally, the sending and receiving HCP messages include the referral priority.\n An HCP chooses to view received referrals. The receiving HCP is presented with a list of referrals sorted by priority (from most important to least important). The receiving HCP then selects a referral to view details and is presented with the name and specialty of the sending HCP, the patient's name, the referral notes, the referral priority, the office visit date with a link to the office visit, and the time the referral was created.\n A sending HCP views a list of previously sent patient referrals. The HCP may sort the list of referrals by patient name, receiving HCP name, time generated, and/or priority. The HCP chooses a specific referral from the list to view complete details about the referral: patient name, receiving HCP name and specialty, time generated, priority, office visit date, and notes.\n A patient views a list of his/her referrals. The patient may sort the list of referrals by receiving HCP name, time generated, and/or priority. The patient chooses a specific referral from the list to view complete details about the referral: sending HCP name and specialty, receiving HCP name and specialty, time generated, priority, office visit date, and notes. The patient is also provided with the option to send a message to the receiving HCP to request that an appointment be scheduled.\n A sending HCP edits a previously created patient referral as long as the referral has not been viewed by the receiving HCP. The sending HCP may edit the priority of the referral and/or the referral notes. The sending HCP then chooses to save the edits, cancel the edits, or re-enter the data .\n A sending HCP cancels a previously sent patient referral by visiting the office visit page, viewing the details of a previously sent patient referral , and choosing cancel. The HCP is asked to confirm the decision to cancel the referral. The patient and receiving HCP receive a message (UC30) indicating that the referral was canceled.\n", "dataset": "iTrust", "act": ["choose to refer", "must select", "enter", "confirm", "search", "present", "include", "choose", "may send", "cancel", "edit", "receive", "view", "sort", "select to view", "provide", "send", "edit", "save", "re-enter", "visit", "view details", "ask", "confirm", "indicate"], "obj": ["HCP", "patient", "referral feature", "patient's office visit page", "sending HCP", "receiving HCP", "HCP's MID", "text box", "referral", "notes", "priority", "message", "referral information", "sending HCP name", "sending HCP specialty", "receiving HCP name", "receiving HCP specialty", "patient name", "referral notes", "referral creation timestamp", "referrals", "list of referrals", "referral details", "office visit date", "link to the office visit", "time the referral was created", "previously sent patient referrals", "specific referral", "time generated", "appointment", "previously created patient referral", "edits", "office visit page", "decision", "UC11", "UC30"], "pred_steps": "Sending HCP inputs patient referral details, system stores referral data, receiving HCP views list of received referrals, sending HCP views list of previously sent referrals, patient views referral details, sending HCP edits previously sent referral, sending HCP cancels previously sent referral, system logs all events.", "pred_act": ["Sending", "stores", "receiving", "views", "sending", "views", "sending", "edits", "sending", "cancels", "logs"], "pred_obj": ["HCP", "patient referral details", "system", "referral data", "list of received referrals", "list of previously sent referrals", "patient", "previously sent referral", "events"], "tp": ["Sending", "receiving", "views", "sending", "views", "sending", "edits", "sending", "cancels", "HCP", "patient referral details", "referral data", "list of received referrals", "list of previously sent referrals", "patient", "previously sent referral"]}
{"index": 24, "ucName": "Report Telemedicine Monitoring Details Use Case", "uctext": "An LHCP or UAP creates a list of patients by adding and confirming patients (by MID) for which he or she will monitor remotely. A patient either chooses to input his or her physiologic measurements (blood pressure and/or glucose levels) , or to input his or her weight, height, and/or pedometer readings . An LHCP can see the blood pressure and glucose levels , or weight, height, and pedometer readings  for the patients he or she is monitoring, with two separate lists for physiologic and height/weight/pedometer readings . A UAP or patient representative can input the blood pressure, glucose levels, height, weight, or pedometer readings for a patient. A patient may have up to 10 physiologic data points in any one day, reported by him/herself, a UAP, or a personal representative . A patient may have at most one height data point, one weight data point, and one pedometer data point in any one day, reported by him/herself, a UAP, or a personal representative.\n", "steps": " An LHCP or UAP can add and delete patients from his or her monitoring list. A patient is added to the list by the LHCP or UAP typing in the patient's MID  or name. An LHCP can delete a patient from his or her monitoring list by the LHCP typing the the patient's MID . In both cases, the LHCP is presented the name of the patient and must confirm the add/delete. For each patient from the monitoring list, the LHCP can choose to edit which types of remote monitoring information (blood pressure, glucose levels, height, weight, and pedometer readings) should be submitted by the patient. By default, all types of information are selected for monitoring.\n A patient whose at least one physiologic data type is specified to be under monitoring chooses to report their physiologic data. He or she can report his or her blood pressure (systolic and diastolic)  and/or glucose levels . The input data, a timestamp, and the fact that the status is “self-reported” are saved.\n An LHCP chooses to view the physiologic data monitoring details. The LHCP is presented with a listing of all his or her patients whose at least one physiologic data type is specified to be under monitoring with their blood pressure and glucose levels, recording timestamp, and whom reported the data (patient, UAP name, personal representative name). Patients with no information for the current day are highlighted. Patients with blood pressure or glucose level out of range are highlighted (normal blood pressure: systolic 90-140; diastolic 60-90; normal glucose 70-150). The LHCP can select a patient to obtain additional information about a patient .\n An LHCP selects to view additional information for a patient. The LHCP is presented with a screen upon which he/she can choose a date range. Once the date range is selected, the LHCP can see the patient name; patient phone number; personal representative (name and phone number), if applicable; and the blood pressure, glucose levels, height, weight, and pedometer readings as well as whom reported the data (patient, UAP name, personal representative name) for that date range.\n A UAP can select to report physiologic measurements. He/she is presented with a list of the patients whose at least one physiologic data type is specified to be under monitoring and for whom he/she is allowed to report measurements. He or she can select a patient and then enter data. He or she can report the blood pressure (systolic and diastolic)  and/or glucose levels  for the patient. The input data, a timestamp, and the fact the the status was reported by “case manager” and their MID are saved. Only the applicable input entries (those whose corresponding data types of the patient are specified to be under monitoring) are displayed to the UAP.\n A patient can select to report physiologic measurements for those whose at least one physiologic data type is specified to be under monitoring andfor whom he/she is a patient representative. He/she is presented with a list of the patients whose at least one physiologic data type is specified to be under monitoring and for which he/she is allowed to report measurements. He or she can select a patient and then enter data. He or she can report the blood pressure (systolic and diastolic)  and/or glucose levels  for the patient. The input data and a timestamp and the fact that the status was reported by “patient representative” and their MID are saved. Only the applicable input entries (those whose corresponding data types of the patient are specified to be under monitoring) are displayed to the patient.\n A patient whose height, weight, or pedometer data type is specified to be under monitoring chooses to report his/her height/weight/pedometer data. He or she can report his or her daily height (in the format of digits XXXX.X with the units of “feet”), daily weight (in the format of digits XXXX.X with units of “lbs”), and/or pedometer readings (in the format of up to 10 digits of integer with units of “footsteps”). The input data, a timestamp, and the fact that the status is “self-reported” are saved. Only the applicable input entries (those whose corresponding data types of the patient are specified to be under monitoring) are displayed to the patient.\n An LHCP chooses to view the height/weight/pedometer data monitoring details. The LHCP is presented with a listing of all his or her patients whose height, weight, or pedometer data type is specified to be under monitoring with their height, weight and pedometer reading numbers, recording timestamp, and who reported the data (patient name, UAP name, or personal representative name). Patients with no information for the current day are highlighted in red. Patients with a weight value 5% more or less than the immediate previously recorded weight value are highlighted (if the new weight value exceeds 105% of the previous weight value, the entry should be highlighted yellow; if the new weight value is below 95% of the previous weight value, the entry should be highlighted yellow). The LHCP can select a patient to obtain additional information about a patient .\n A UAP can select to report height/weight/pedometer measurements. He/she is presented with a list of the patients whose height, weight, or pedometer data type is specified to be under monitoring and for which he/she is allowed to report measurements. He or she can select a patient and then enter data. He or she can report the height, weight, and/or pedometer reading for the patient. The input data, a timestamp, and the fact that the status was reported by “case manager” and his/her MID are saved. Only the applicable input entries (those whose corresponding data types of the patient are specified to be under monitoring) are displayed to the UAP.\n A patient can select to report height, weight, and/or pedometer readings for those for whom he/she is a patient representative. He/she is presented with a list of the patients for which he/she is allowed to report measurements. He or she can select a patient and then enter data. He or she can report the height, weight, and/or pedometer readings for the patient. The input data, a timestamp, and the fact that the status was reported by “patient representative” and his/her MID are saved. Only the applicable input entries (those whose corresponding data types of the patient are specified to be under monitoring) are displayed to the patient.\n", "dataset": "iTrust", "act": ["add", "delete", "type", "confirm", "edit", "choose", "report", "save", "view", "present", "highlight", "select", "enter", "obtain", "display"], "obj": ["LHCP", "UAP", "patients", "monitoring list", "MID", "name", "remote monitoring information", "blood pressure", "glucose levels", "height", "weight", "pedometer readings", "physiologic data", "timestamp", "self-reported", "physiologic data monitoring details", "date range", "patient phone number", "personal representative", "case manager", "patient representative", "height/weight/pedometer data", "feet", "lbs", "footsteps", "yellow"], "pred_steps": "LHCP or UAP adds and confirms patients by MID to create a patient list for remote monitoring; patient, UAP, or personal representative inputs patient's physiologic measurements (blood pressure, glucose levels) or height, weight, pedometer readings; LHCP views separate lists for physiologic and height/weight/pedometer readings; patient may have up to 10 physiologic data points per day and at most one height, weight, pedometer data point per day.", "pred_act": ["adds", "confirms", "creates", "inputs", "views", "may have"], "pred_obj": ["LHCP", "UAP", "patients", "MID", "patient list", "remote monitoring", "patient", "personal representative", "physiologic measurements", "blood pressure", "glucose levels", "height", "weight", "pedometer readings", "physiologic", "height/weight/pedometer readings", "physiologic data points", "height data point", "weight data point", "pedometer data point"], "tp": ["confirms", "views", "LHCP", "UAP", "patients", "MID", "patient list", "remote monitoring", "patient", "personal representative", "physiologic measurements", "blood pressure", "glucose levels", "height", "weight", "pedometer readings", "physiologic", "height/weight/pedometer readings", "physiologic data points", "height data point", "weight data point", "pedometer data point"]}
{"index": 25, "ucName": "Report Adverse Event Use Case", "uctext": "A patient selects to report an event related to a prescription drug  or immunization  reaction.\n\n", "steps": " A patient is presented with a listing of all prescription drugs for which he/she has been prescribed and/or has taken in the last 12 months. The patient chooses one or more drug(s) for which to report the adverse event. The patient is then able to write a textual description which describes the symptoms of the adverse event and to save the information. A fake email is sent to the LHCP who prescribed the medication indicating the patient name and MID, drug, and symptoms.\n A patient is presented with a listing of all immunizations for which he/she has been administered in the last 12 months. The patient chooses the immunization for which to report the adverse event. The patient is then able to write a textual description which describes the symptoms of the adverse event and to save the information. A fake email is sent to the LHCP who administered the immunization indicating the patient name and MID, drug, and symptoms.\n", "dataset": "iTrust", "act": ["is presented", "chooses", "is able", "write", "save", "is sent", "is presented", "chooses", "is able", "write", "save", "is sent"], "obj": ["patient", "listing", "prescription drugs", "adverse event", "textual description", "symptoms", "fake email", "LHCP", "name", "MID", "drug", "immunizations"], "pred_steps": "Patient navigates to reporting interface, selects prescription drug or immunization, inputs event details including symptoms, severity, and timestamp, attaches relevant documents if available, submits report, system validates input, generates confirmation message, stores report in database, notifies healthcare provider, and provides option for patient to follow up on report status.", "pred_act": ["navigates", "selects", "inputs", "attaches", "submits", "validates", "generates", "stores", "notifies", "provides", "follow up"], "pred_obj": ["Patient", "reporting interface", "prescription drug", "immunization", "event details", "symptoms", "severity", "timestamp", "relevant documents", "report", "system", "input", "confirmation message", "database", "healthcare provider", "report status"], "tp": ["selects", "Patient", "prescription drug", "immunization", "symptoms"]}
{"index": 26, "ucName": "Monitor Adverse Event Use Case", "uctext": "A public health agent (PHA) selects a specific time period for which he/she would like to see a detailed listing of all adverse events related to prescription drugs  or immunizations  or to see trends in adverse events related to prescription drugs  or immunizations .\n\n", "steps": " A public health agent is presented with a listing of prescription drug-related adverse events for the time period that do not have a status of “removed”, sorted by NDC. The public health agent can select to see the detail of a specific report. Upon reading the report, the public health agent can choose to send a “fake email” message to the adverse event reporter to gain more information about the report. The public health agent may also choose to remove an adverse event report (such as based upon communication with the reporter or because the report appears to be bogus) .\n A public health agent is presented with a listing of immunization-related adverse events for the time period that do not have a status of “removed”, sorted by CPT code . The public health agent can select to see the detail of a specific report. Upon reading the report, the public health agent can choose to send a “fake email” message to the adverse event reporter to gain more information about the report. The public health agent may also choose to remove an adverse event report (such as based upon communication with the reporter or because the report appears to be bogus) .\n The adverse event report changes to a status of “removed.” A message of the removal is sent to the adverse event reporter and to the LHCP involved in the report (because the LHCP prescribed the drug or administered the immunization).\n", "dataset": "iTrust", "act": ["is presented", "can select", "can choose to send", "may also choose to remove", "changes", "is sent"], "obj": ["public health agent", "prescription drug-related adverse events", "time period", "status", "removed", "NDC", "detail", "report", "fake email", "adverse event reporter", "immunization-related adverse events", "CPT code", "adverse event report", "LHCP", "drug", "immunization", "message", "removal"], "pred_steps": "PHA selects time period, specifies interest in detailed listing or trends of adverse events related to prescription drugs or immunizations, system retrieves and displays relevant data for selected time period, PHA reviews output.", "pred_act": ["selects", "specifies", "retrieves", "displays", "reviews"], "pred_obj": ["PHA", "time period", "detailed listing", "trends", "adverse events", "prescription drugs", "immunizations", "system", "relevant data", "output"], "tp": ["selects", "time period", "adverse events", "prescription drugs", "immunizations"]}
{"index": 27, "ucName": "Safe Drug Prescription Use Case", "uctext": "While documenting an office visit, the HCP selects to prescribe a patient a drug by selecting its NDC and name. Upon notice of allergies and/or interactions the HCP must either choose to proceed with the prescription  or cancel the prescription and remain on the office visit page. The administrator maintains the override reasons that an HCP can select from .\n\n", "steps": " The drug desired to be prescribed is checked against the patient's drug allergies. The HCP is notified of drug allergy.\n The drug desired to be prescribed is checked for interactions between other drugs currently taken by the patient. The HCP is notified of possible interactions.\n The HCP selects one or more of the override reasons available for selection . The patient is sent a “fake email” that the HCP has prescribed a medication that he/she is allergic to or that has a known interaction with a drug he/she is taking.\n The system shall enable the administrator to add a new entry for a reason or modify the reason name in an existing entry . Note that the administrator is not allowed through the system interface to delete an existing entry or modify the reason ID number in an existing entry.\n The system shall store (1) reason id number for the reason ; and (2) up to 80 alphanumeric characters giving the name of the reason .\n", "dataset": "iTrust", "act": ["checked", "notified", "checked", "notified", "selects", "sent", "enable", "add", "modify", "allowed", "delete", "modify", "store", "give"], "obj": ["drug", "patient", "drug allergies", "HCP", "interactions", "override reasons", "fake email", "medication", "system", "administrator", "entry", "reason", "reason name", "existing entry", "reason ID number", "alphanumeric characters"], "pred_steps": "HCP selects NDC and name of drug to prescribe during office visit documentation, system checks for allergies and interactions, if present, HCP is prompted to either proceed with prescription or cancel and return to office visit page, administrator maintains override reasons for HCP to select if choosing to proceed with prescription despite allergies/interactions.", "pred_act": ["selects", "checks", "is prompted", "maintains"], "pred_obj": ["HCP", "NDC", "name of drug", "office visit documentation", "system", "allergies", "interactions", "prescription", "cancel", "office visit page", "administrator", "override reasons"], "tp": ["selects", "checks", "HCP", "name of drug", "system", "allergies", "interactions", "administrator", "override reasons"]}
{"index": 28, "ucName": "Maintain Drug Interaction Use Case", "uctext": "The administrator records  or deletes  a drug interaction between two prescription drugs.\n\n", "steps": " The administer is presented with two lists of NDC codes/names. The administrator chooses a drug from each list to record an interaction between the two drugs . The two drugs and a textual description of the possible effects of the interaction are stored.\n The administrator selects one drug and is presented with a listing of all drug interactions currently associated with that drug. The administrator can select a particular pair of drugs and delete the interaction between the two drugs.\n", "dataset": "iTrust", "act": ["presented", "chooses", "record", "stored", "selects", "presented", "can select", "delete"], "obj": ["administer", "lists", "NDC codes/names", "administrator", "drug", "interaction", "two drugs", "textual description", "possible effects", "one drug", "listing", "drug interactions", "particular pair of drugs"], "pred_steps": "The administrator accesses the system, navigates to the drug interaction management module, searches for the specific prescription drugs involved in the interaction, selects the interaction to be recorded or deleted, enters or confirms the details of the interaction if recording, verifies the accuracy of the information, saves the changes if recording, or confirms the deletion if deleting, and finally receives a confirmation message indicating the successful update or deletion of the drug interaction.", "pred_act": ["accesses", "navigates", "searches", "selects", "enters", "confirms", "verifies", "saves", "deletes", "receives"], "pred_obj": ["administrator", "system", "drug interaction management module", "prescription drugs", "interaction", "details of the interaction", "information", "changes", "confirmation message"], "tp": ["selects", "deletes", "administrator", "drug interaction management module", "prescription drugs", "interaction", "details of the interaction"]}
{"index": 29, "ucName": "Enter/edit Demographics Use Case", "uctext": "Demographic information is entered and/or edited. The user is presented with a success or failure message and the form is updated so that the user may correct the form or add more information.\n\n", "steps": " A patient or personal health representative may enter or edit their own demographic information including their security question/answer according to data format 6.1. When answer to the security question is typed in, the answer should not appear on the screen (similar to how a password normally appears) and the answer should be confirmed (by the patient or personal health representative) before it is saved. .\n HCP must enter the MID of a patient and then enter or edit demographic information with the exception of the patient's security question/password according to data format 6.1 .\n An HCP may enter or edit their own demographic information according to data format 6.2 .\n An HCP may upload a photo of the patient as part of the patient's demographic records .\n", "dataset": "iTrust", "act": ["enter", "edit", "type in", "appear", "confirm", "save", "must enter", "enter", "edit", "may enter", "edit", "may upload"], "obj": ["patient", "personal health representative", "demographic information", "security question/answer", "data format", "1", "answer", "screen", "password", "HCP", "MID", "patient's security question/password", "data format", "2", "photo", "demographic records"], "pred_steps": "User accesses demographics form, system displays form fields; user enters or edits demographic information, system validates input; if validation succeeds, system updates form, displays success message, and allows further editing or addition; if validation fails, system displays failure message, highlights erroneous fields, and prompts user to correct information.", "pred_act": ["accesses", "displays", "enters", "edits", "validates", "updates", "allows", "fails", "displays", "highlights", "prompts"], "pred_obj": ["User", "demographics form", "system", "form fields", "demographic information", "input", "success message", "failure message", "erroneous fields", "information"], "tp": ["enters", "edits", "demographics form", "form fields", "demographic information", "information"]}
{"index": 30, "ucName": "Log Transaction Use Case", "uctext": "Any event which creates, views, edits, or deletes information is logged . Login failures, valid authentication, and log outs are also logged . Individual audit codes related to specific use cases are presented within each Use Case description.\n\nNote: The subflow and transaction values are based on Use Case. For example, any in the range of 100-199 are for use case one, any in the range of 200-299 are in use case two. The values from range 1-99 are logging events which do not exist in any use case. Miscellaneous transaction codes 1-99 are presented in 5.5 below.\n\n", "steps": " For Login Failures, the IP Address of the machine, transaction type = 1, and timestamp are recorded.\n For creating, viewing, modifying, or deleting information, the following information is recorded: the MID of the logged in user, any appropriate secondary MID of the user whose information is being accessed, a transaction type corresponding to the given action, and the current timestamp.\n", "dataset": "iTrust", "act": ["recorded", "recorded", "creating", "viewing", "modifying", "deleting", "is accessed", "output"], "obj": ["Login Failures", "IP Address", "machine", "transaction type", "timestamp", "creating", "viewing", "modifying", "deleting", "MID", "logged in user", "secondary MID", "user", "action", "current timestamp"], "pred_steps": "Capture event occurrence, identify event type as create, view, edit, delete, login failure, valid authentication, or logout; retrieve corresponding audit code; if event type is within specific use case, append use case specific subflow and transaction values (100-199 for use case one, 200-299 for use case two, etc.); if event type is miscellaneous, append transaction codes 1-99; log event with timestamp, event type, audit code, and transaction values into the system log.", "pred_act": ["Capture", "identify", "retrieve", "append", "log", "output"], "pred_obj": ["event occurrence", "event type", "create", "view", "edit", "delete", "login failure", "valid authentication", "logout", "audit code", "use case", "use case specific subflow", "transaction values", "100-199", "use case one", "200-299", "use case two", "miscellaneous", "transaction codes 1-99", "timestamp", "system log"], "tp": ["output", "create", "view", "edit", "delete", "login failure", "timestamp"]}
{"index": 31, "ucName": "View HCP; Designate/Undesignate Designated Licensed Health Care Professional Use Case", "uctext": "The patient chooses to view all LHCPs the patient has ever had an office visit with and those whom he/she had designated. The patient can also add a LHCP to their provider list by searching for the name and/or specialty of a LHCP  and then selecting to add the HCP to their list of providers.\n\n", "steps": " The LHCP's name, specialty, address, date of office visit, and whether or not the LHCP is a DLHCP for this patient is indicated. The list is sorted by the date of the last office visit (most recent first).\n The patient can choose to toggle between designating/undesignating any LHCP as being a DLHCP for them.\n The patient types a last name or partial last name, and/or providing the specialty. The patient may optionally enter a zip code (match on first three numbers of zip code), in addition to the name and/or specialty. The LHCP's name, specialty, and address are provided.\n", "dataset": "iTrust", "act": ["indicated", "sorted", "choose", "toggle", "designating", "undesignating", "types", "providing", "enter", "provided"], "obj": ["LHCP", "name", "specialty", "address", "date of office visit", "DLHCP", "patient", "list", "date of the last office visit", "last name", "partial last name", "zip code"], "pred_steps": "The functional steps to implement the View HCP; Designate/Undesignate Designated Licensed Health Care Professional Use Case are: display list of all LHCPs the patient has had an office visit with and those designated by the patient, allow patient to search for LHCP by name and/or specialty, allow patient to select and add LHCP to their provider list, allow patient to designate or undesignate a LHCP on their provider list.", "pred_act": ["display", "allow to search", "allow to select", "add", "allow to designate", "undesignate"], "pred_obj": ["functional steps", "View HCP; Designate/Undesignate Designated Licensed Health Care Professional Use Case", "list", "LHCPs", "patient", "office visit", "name", "specialty", "provider list", "LHCP"], "tp": ["allow to select", "allow to designate", "undesignate", "list", "patient", "office visit", "name", "specialty", "LHCP"]}
{"index": 32, "ucName": "View Access Log Use Case", "uctext": "The patient chooses to view his or her access log or that for a person for whom they are a personal health representative. The patient then chooses the beginning and end date for the period of time they would like to view their access log for. The resulting list should include the following for each access:\n\nName of non-DLHCP accessor (with a link to contact information if the viewer is an LHCP)\nRole of non-DLHCP accessor relative to the patient\nDate and time of access\nTransaction Type (See Data Format 6.3)\n", "steps": " By default, the patient is presented with a list sorted by dates, most recent access first.\n The patient may choose to view the list sorted by the role of the accessor relative to the patient (personal health representative, LHCP, UAP, Emergency Responder; any order is fine as long as the list is sorted by role) as well as by date for each role type, most recent access first.\n", "dataset": "iTrust", "act": ["is presented", "may choose to view"], "obj": ["patient", "list", "dates", "access", "role", "accessor", "personal health representative", "LHCP", "UAP", "Emergency Responder", "date", "role type"], "pred_steps": "View Access Log Use Case functional steps: Patient selects to view access log, chooses between their own log or that of a person for whom they are a personal health representative, specifies the beginning and end date for the desired period, system retrieves and displays access log with name of non-DLHCP accessor (including link to contact information if LHCP), role of accessor relative to patient, date and time of access, and transaction type for each access.", "pred_act": ["selects", "chooses", "specifies", "retrieves", "displays"], "pred_obj": ["Patient", "View Access Log Use Case", "functional steps", "access log", "own log", "person", "personal health representative", "beginning date", "end date", "desired period", "system", "name of non-DLHCP accessor", "link", "contact information", "LHCP", "role of accessor", "patient", "date", "time of access", "transaction type", "access"], "tp": ["chooses", "Patient", "access log", "personal health representative", "beginning date", "end date", "name of non-DLHCP accessor", "LHCP", "role of accessor", "patient", "date", "access"]}
{"index": 33, "ucName": "View records Use Case", "uctext": "A patient or personal health representative chooses to view medical records  including family history .\n\n", "steps": " The patient or personal health representative can see patient personal health information (including historical values), immunizations, and office visit information (date, diagnoses, medication, name of attending physician but not notes, laboratory procedures) for (a) their own records and (b) the records for whom the user is a personal representative. If a patient or personal health representative has not taken an office visit satisfaction survey for an office visit yet, the patient may choose to take the survey for an office visit (if the survey has already been taken, the patient or personal health representative will not have the ability to take the survey or view their previously submitted survey) (UC24).\n The patient or personal health representative can see an abbreviated health history of their siblings, parents, and both sets of grandparents for which MIDs are available in iTrust. They can see diagnoses related to the following (presented as a table with an x if the family member suffered from that diagnosis(:\nhigh blood pressure (Systolic blood pressure over 240 mmHg and/or a diastolic blood pressure over 120 mmHg);\nhigh cholesterol (HDL (“good”) cholesterol levels under 35 mg/dL (milligrams per deciliter) and/or a triglyceride level over 250 mg/dL);\ndiabetes (is diagnosed with ICD-9CM code beginning with 250:http://icd9cm.chrisendres.com/index.php?action=child&recordid=1765,;\ncancer (is diagnosed with ICD-9CM code beginning with 199:http://icd9cm.chrisendres.com/index.php?action=child&recordid=1765,;\nheart disease (is diagnosed with ICD=9CM code beginning with 402:http://icd9cm.chrisendres.com/index.php?action=child&recordid=1765,;\nsmoking; and\nthe cause of death if the family member is deceased.\n", "dataset": "iTrust", "act": ["can see", "can choose to take", "can see", "suffered from", "is diagnosed with"], "obj": ["patient", "personal health representative", "patient personal health information", "historical values", "immunizations", "office visit information", "date", "diagnoses", "medication", "name of attending physician", "notes", "laboratory procedures", "records", "office visit satisfaction survey", "abbreviated health history", "siblings", "parents", "grandparents", "MIDs", "iTrust", "high blood pressure", "Systolic blood pressure", "diastolic blood pressure", "high cholesterol", "HDL cholesterol levels", "triglyceride level", "diabetes", "ICD-9CM code", "cancer", "heart disease", "smoking", "cause of death"], "pred_steps": "Patient or personal health representative initiates request to view medical records, system authenticates user, retrieves and displays medical records including family history.", "pred_act": ["initiates", "authenticates", "retrieves", "displays"], "pred_obj": ["Patient", "personal health representative", "request", "medical records", "system", "user", "family history"], "tp": ["Patient", "personal health representative", "medical records", "family history"]}
